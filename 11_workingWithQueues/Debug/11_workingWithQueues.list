
11_workingWithQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080062b0  080062b0  000072b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006370  08006370  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006370  08006370  00007370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006378  08006378  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800637c  0800637c  0000737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006380  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  2000006c  080063ec  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bc4  080063ec  00008bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c15  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352f  00000000  00000000  0001fcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  000231e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104b  00000000  00000000  000246e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049be  00000000  00000000  0002572b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179ec  00000000  00000000  0002a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd37f  00000000  00000000  00041ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ee54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000603c  00000000  00000000  0011ee98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00124ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006298 	.word	0x08006298

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006298 	.word	0x08006298

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:

TaskHandle_t sender_handle, receiver_handle;
QueueHandle_t yearQueue;

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af02      	add	r7, sp, #8

  HAL_Init();
 80005a6:	f000 fba5 	bl	8000cf4 <HAL_Init>

  SystemClock_Config();
 80005aa:	f000 f899 	bl	80006e0 <SystemClock_Config>

  MX_GPIO_Init();
 80005ae:	f000 f92f 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f903 	bl	80007bc <MX_USART2_UART_Init>

  yearQueue = xQueueCreate(10,sizeof(int32_t));
 80005b6:	2200      	movs	r2, #0
 80005b8:	2104      	movs	r1, #4
 80005ba:	200a      	movs	r0, #10
 80005bc:	f002 fbc5 	bl	8002d4a <xQueueGenericCreate>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <main+0x5c>)
 80005c4:	6013      	str	r3, [r2, #0]

  xTaskCreate(SenderTask,
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <main+0x60>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2264      	movs	r2, #100	@ 0x64
 80005d2:	490c      	ldr	r1, [pc, #48]	@ (8000604 <main+0x64>)
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <main+0x68>)
 80005d6:	f003 f867 	bl	80036a8 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &sender_handle);

  xTaskCreate(ReceiverTask,
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <main+0x6c>)
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	2264      	movs	r2, #100	@ 0x64
 80005e6:	490a      	ldr	r1, [pc, #40]	@ (8000610 <main+0x70>)
 80005e8:	480a      	ldr	r0, [pc, #40]	@ (8000614 <main+0x74>)
 80005ea:	f003 f85d 	bl	80036a8 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &receiver_handle);

  vTaskStartScheduler();
 80005ee:	f003 f9d7 	bl	80039a0 <vTaskStartScheduler>

  while (1)
  {
	  printf("Hello from stm32 \n\r");
 80005f2:	4809      	ldr	r0, [pc, #36]	@ (8000618 <main+0x78>)
 80005f4:	f005 f822 	bl	800563c <iprintf>
 80005f8:	e7fb      	b.n	80005f2 <main+0x52>
 80005fa:	bf00      	nop
 80005fc:	200000d8 	.word	0x200000d8
 8000600:	200000d0 	.word	0x200000d0
 8000604:	080062b0 	.word	0x080062b0
 8000608:	0800061d 	.word	0x0800061d
 800060c:	200000d4 	.word	0x200000d4
 8000610:	080062bc 	.word	0x080062bc
 8000614:	08000659 	.word	0x08000659
 8000618:	080062cc 	.word	0x080062cc

0800061c <SenderTask>:
  }
}

void SenderTask(void* pvParameters) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    int32_t value_to_send = 2050;
 8000624:	f640 0302 	movw	r3, #2050	@ 0x802
 8000628:	60fb      	str	r3, [r7, #12]
    while(1) {
        if (xQueueSend(yearQueue, &value_to_send, pdMS_TO_TICKS(100)) != pdPASS)
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <SenderTask+0x34>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	f107 010c 	add.w	r1, r7, #12
 8000632:	2300      	movs	r3, #0
 8000634:	2264      	movs	r2, #100	@ 0x64
 8000636:	f002 fbe7 	bl	8002e08 <xQueueGenericSend>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d002      	beq.n	8000646 <SenderTask+0x2a>
        {
            printf("Queue full! Retrying...\r\n");
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <SenderTask+0x38>)
 8000642:	f005 f863 	bl	800570c <puts>
        }
        vTaskDelay(pdMS_TO_TICKS(100));  // Send every 100ms
 8000646:	2064      	movs	r0, #100	@ 0x64
 8000648:	f003 f974 	bl	8003934 <vTaskDelay>
        if (xQueueSend(yearQueue, &value_to_send, pdMS_TO_TICKS(100)) != pdPASS)
 800064c:	e7ed      	b.n	800062a <SenderTask+0xe>
 800064e:	bf00      	nop
 8000650:	200000d8 	.word	0x200000d8
 8000654:	080062e0 	.word	0x080062e0

08000658 <ReceiverTask>:
    }
}

void ReceiverTask(void* pvParameters) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    int32_t value_received;
    while(1) {
        // Wait FOREVER for data (no more "Error!" messages)
        if (xQueueReceive(yearQueue, &value_received, portMAX_DELAY) == pdPASS)
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <ReceiverTask+0x38>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f107 010c 	add.w	r1, r7, #12
 8000668:	f04f 32ff 	mov.w	r2, #4294967295
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fd6b 	bl	8003148 <xQueueReceive>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d1f3      	bne.n	8000660 <ReceiverTask+0x8>
        {
            printf("Received: %ld\r\n", value_received);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <ReceiverTask+0x3c>)
 800067e:	f004 ffdd 	bl	800563c <iprintf>
            fflush(stdout);
 8000682:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <ReceiverTask+0x40>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	4618      	mov	r0, r3
 800068a:	f004 ff01 	bl	8005490 <fflush>
        if (xQueueReceive(yearQueue, &value_received, portMAX_DELAY) == pdPASS)
 800068e:	e7e7      	b.n	8000660 <ReceiverTask+0x8>
 8000690:	200000d8 	.word	0x200000d8
 8000694:	080062fc 	.word	0x080062fc
 8000698:	2000001c 	.word	0x2000001c

0800069c <uart2_write>:
        }
    }
}
void uart2_write(int ch)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & (1U<<7))); //wait for TXE
 80006a4:	bf00      	nop
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <uart2_write+0x28>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f9      	beq.n	80006a6 <uart2_write+0xa>
	USART2->DR = ch;
 80006b2:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <uart2_write+0x28>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6053      	str	r3, [r2, #4]

	//return (USART2->DR);
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40004400 	.word	0x40004400

080006c8 <__io_putchar>:


//this function for printf to be used in printing sentences
int __io_putchar(int ch)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
	uart2_write(ch);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ffe3 	bl	800069c <uart2_write>
	return ch;
 80006d6:	687b      	ldr	r3, [r7, #4]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SystemClock_Config>:



void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2234      	movs	r2, #52	@ 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 f8ec 	bl	80058cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <SystemClock_Config+0xd4>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <SystemClock_Config+0xd4>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemClock_Config+0xd4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072c:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <SystemClock_Config+0xd8>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <SystemClock_Config+0xd8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000754:	2310      	movs	r3, #16
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000758:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800075c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800075e:	2304      	movs	r3, #4
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f90e 	bl	8001990 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800077a:	f000 f8c9 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2102      	movs	r1, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fd7c 	bl	8001298 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007a6:	f000 f8b3 	bl	8000910 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	@ 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f001 fe06 	bl	8002404 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f887 	bl	8000910 <Error_Handler>
  }

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000088 	.word	0x20000088
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a2c      	ldr	r2, [pc, #176]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a25      	ldr	r2, [pc, #148]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a1e      	ldr	r2, [pc, #120]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <MX_GPIO_Init+0xd4>)
 800089c:	f000 fce2 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <MX_GPIO_Init+0xd8>)
 80008b8:	f000 fb40 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_GPIO_Init+0xd4>)
 80008d4:	f000 fb32 	bl	8000f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	@ 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020800 	.word	0x40020800

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 fa1b 	bl	8000d38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40010000 	.word	0x40010000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <HAL_MspInit+0x54>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x54>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <HAL_MspInit+0x54>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_MspInit+0x54>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 fac1 	bl	8000ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <HAL_UART_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12b      	bne.n	80009ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <HAL_UART_MspInit+0x8c>)
 80009ea:	f000 faa7 	bl	8000f3c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	@ 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	@ 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fd46 	bl	80014cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a40:	f000 fd30 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 8000a44:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <HAL_InitTick+0xd4>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	0c9b      	lsrs	r3, r3, #18
 8000a50:	3b01      	subs	r3, #1
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a56:	4a22      	ldr	r2, [pc, #136]	@ (8000ae0 <HAL_InitTick+0xdc>)
 8000a58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a62:	4a1e      	ldr	r2, [pc, #120]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a7a:	4818      	ldr	r0, [pc, #96]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a7c:	f001 fa26 	bl	8001ecc <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d11b      	bne.n	8000ac6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a8e:	4813      	ldr	r0, [pc, #76]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a90:	f001 fa76 	bl	8001f80 <HAL_TIM_Base_Start_IT>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d111      	bne.n	8000ac6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aa2:	2019      	movs	r0, #25
 8000aa4:	f000 fa3c 	bl	8000f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d808      	bhi.n	8000ac0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 fa18 	bl	8000ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0xe0>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e002      	b.n	8000ac6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3730      	adds	r7, #48	@ 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	200000dc 	.word	0x200000dc
 8000ae0:	40010000 	.word	0x40010000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b26:	f001 fa9b 	bl	8002060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000dc 	.word	0x200000dc

08000b34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
  }

  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e009      	b.n	8000b94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	60ba      	str	r2, [r7, #8]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd9d 	bl	80006c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf1      	blt.n	8000b80 <_write+0x12>
  }
  return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_close>:

int _close(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bce:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_isatty>:

int _isatty(int file)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f004 fe92 	bl	8005968 <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20020000 	.word	0x20020000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	20000124 	.word	0x20000124
 8000c78:	20004bc8 	.word	0x20004bc8

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ca4:	f7ff ffea 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f004 fe51 	bl	8005974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fc65 	bl	80005a0 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ce4:	08006380 	.word	0x08006380
  ldr r2, =_sbss
 8000ce8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cec:	20004bc4 	.word	0x20004bc4

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f8d8 	bl	8000ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f7ff fe6e 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fdf8 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000128 	.word	0x20000128

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000128 	.word	0x20000128

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff4c 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efa:	f7ff ff61 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	f7ff ffb1 	bl	8000e6c <NVIC_EncodePriority>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff80 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff54 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e165      	b.n	8001224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8154 	bne.w	800121e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80ae 	beq.w	800121e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b5d      	ldr	r3, [pc, #372]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a5c      	ldr	r2, [pc, #368]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b5a      	ldr	r3, [pc, #360]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010de:	4a58      	ldr	r2, [pc, #352]	@ (8001240 <HAL_GPIO_Init+0x304>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4f      	ldr	r2, [pc, #316]	@ (8001244 <HAL_GPIO_Init+0x308>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d025      	beq.n	8001156 <HAL_GPIO_Init+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4e      	ldr	r2, [pc, #312]	@ (8001248 <HAL_GPIO_Init+0x30c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01f      	beq.n	8001152 <HAL_GPIO_Init+0x216>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4d      	ldr	r2, [pc, #308]	@ (800124c <HAL_GPIO_Init+0x310>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0x212>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4c      	ldr	r2, [pc, #304]	@ (8001250 <HAL_GPIO_Init+0x314>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x20e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4b      	ldr	r2, [pc, #300]	@ (8001254 <HAL_GPIO_Init+0x318>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x20a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4a      	ldr	r2, [pc, #296]	@ (8001258 <HAL_GPIO_Init+0x31c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x206>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a49      	ldr	r2, [pc, #292]	@ (800125c <HAL_GPIO_Init+0x320>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x202>
 800113a:	2306      	movs	r3, #6
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800113e:	2307      	movs	r3, #7
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_GPIO_Init+0x304>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <HAL_GPIO_Init+0x324>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a31      	ldr	r2, [pc, #196]	@ (8001260 <HAL_GPIO_Init+0x324>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <HAL_GPIO_Init+0x324>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae96 	bls.w	8000f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0cc      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b68      	ldr	r3, [pc, #416]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d90c      	bls.n	80012d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b65      	ldr	r3, [pc, #404]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c2:	4b63      	ldr	r3, [pc, #396]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0b8      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ec:	4b59      	ldr	r3, [pc, #356]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a58      	ldr	r2, [pc, #352]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001304:	4b53      	ldr	r3, [pc, #332]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a52      	ldr	r2, [pc, #328]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800130e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001310:	4b50      	ldr	r3, [pc, #320]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	494d      	ldr	r1, [pc, #308]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d044      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d107      	bne.n	8001346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d119      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e07f      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d003      	beq.n	8001356 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001352:	2b03      	cmp	r3, #3
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b3f      	ldr	r3, [pc, #252]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e06f      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b3b      	ldr	r3, [pc, #236]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e067      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b37      	ldr	r3, [pc, #220]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4934      	ldr	r1, [pc, #208]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	4313      	orrs	r3, r2
 8001386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fcea 	bl	8000d60 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fce6 	bl	8000d60 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e04f      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d20c      	bcs.n	80013e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e032      	b.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4916      	ldr	r1, [pc, #88]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d009      	beq.n	800141e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	490e      	ldr	r1, [pc, #56]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	4313      	orrs	r3, r2
 800141c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800141e:	f000 f887 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 8001422:	4602      	mov	r2, r0
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	490a      	ldr	r1, [pc, #40]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	5ccb      	ldrb	r3, [r1, r3]
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
 8001436:	4a09      	ldr	r2, [pc, #36]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_RCC_ClockConfig+0x1c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fae0 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00
 8001454:	40023800 	.word	0x40023800
 8001458:	08006324 	.word	0x08006324
 800145c:	20000000 	.word	0x20000000
 8001460:	20000004 	.word	0x20000004

08001464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_RCC_GetHCLKFreq+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001480:	f7ff fff0 	bl	8001464 <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	0a9b      	lsrs	r3, r3, #10
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	@ (80014a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	08006334 	.word	0x08006334

080014a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a8:	f7ff ffdc 	bl	8001464 <HAL_RCC_GetHCLKFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	0b5b      	lsrs	r3, r3, #13
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	4903      	ldr	r1, [pc, #12]	@ (80014c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	08006334 	.word	0x08006334

080014cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	220f      	movs	r2, #15
 80014da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_RCC_GetClockConfig+0x5c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_RCC_GetClockConfig+0x5c>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_RCC_GetClockConfig+0x5c>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_RCC_GetClockConfig+0x5c>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800150e:	4b07      	ldr	r3, [pc, #28]	@ (800152c <HAL_RCC_GetClockConfig+0x60>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 020f 	and.w	r2, r3, #15
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	601a      	str	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40023c00 	.word	0x40023c00

08001530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b0ae      	sub	sp, #184	@ 0xb8
 8001536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001556:	4bcb      	ldr	r3, [pc, #812]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b0c      	cmp	r3, #12
 8001560:	f200 8206 	bhi.w	8001970 <HAL_RCC_GetSysClockFreq+0x440>
 8001564:	a201      	add	r2, pc, #4	@ (adr r2, 800156c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	080015a1 	.word	0x080015a1
 8001570:	08001971 	.word	0x08001971
 8001574:	08001971 	.word	0x08001971
 8001578:	08001971 	.word	0x08001971
 800157c:	080015a9 	.word	0x080015a9
 8001580:	08001971 	.word	0x08001971
 8001584:	08001971 	.word	0x08001971
 8001588:	08001971 	.word	0x08001971
 800158c:	080015b1 	.word	0x080015b1
 8001590:	08001971 	.word	0x08001971
 8001594:	08001971 	.word	0x08001971
 8001598:	08001971 	.word	0x08001971
 800159c:	080017a1 	.word	0x080017a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a0:	4bb9      	ldr	r3, [pc, #740]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x358>)
 80015a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015a6:	e1e7      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015a8:	4bb8      	ldr	r3, [pc, #736]	@ (800188c <HAL_RCC_GetSysClockFreq+0x35c>)
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ae:	e1e3      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b0:	4bb4      	ldr	r3, [pc, #720]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d071      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c8:	4bae      	ldr	r3, [pc, #696]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	2200      	movs	r2, #0
 80015d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015d4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015ee:	4622      	mov	r2, r4
 80015f0:	462b      	mov	r3, r5
 80015f2:	f04f 0000 	mov.w	r0, #0
 80015f6:	f04f 0100 	mov.w	r1, #0
 80015fa:	0159      	lsls	r1, r3, #5
 80015fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001600:	0150      	lsls	r0, r2, #5
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4621      	mov	r1, r4
 8001608:	1a51      	subs	r1, r2, r1
 800160a:	6439      	str	r1, [r7, #64]	@ 0x40
 800160c:	4629      	mov	r1, r5
 800160e:	eb63 0301 	sbc.w	r3, r3, r1
 8001612:	647b      	str	r3, [r7, #68]	@ 0x44
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001620:	4649      	mov	r1, r9
 8001622:	018b      	lsls	r3, r1, #6
 8001624:	4641      	mov	r1, r8
 8001626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800162a:	4641      	mov	r1, r8
 800162c:	018a      	lsls	r2, r1, #6
 800162e:	4641      	mov	r1, r8
 8001630:	1a51      	subs	r1, r2, r1
 8001632:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001634:	4649      	mov	r1, r9
 8001636:	eb63 0301 	sbc.w	r3, r3, r1
 800163a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001648:	4649      	mov	r1, r9
 800164a:	00cb      	lsls	r3, r1, #3
 800164c:	4641      	mov	r1, r8
 800164e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001652:	4641      	mov	r1, r8
 8001654:	00ca      	lsls	r2, r1, #3
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	4603      	mov	r3, r0
 800165c:	4622      	mov	r2, r4
 800165e:	189b      	adds	r3, r3, r2
 8001660:	633b      	str	r3, [r7, #48]	@ 0x30
 8001662:	462b      	mov	r3, r5
 8001664:	460a      	mov	r2, r1
 8001666:	eb42 0303 	adc.w	r3, r2, r3
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001678:	4629      	mov	r1, r5
 800167a:	024b      	lsls	r3, r1, #9
 800167c:	4621      	mov	r1, r4
 800167e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001682:	4621      	mov	r1, r4
 8001684:	024a      	lsls	r2, r1, #9
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800168e:	2200      	movs	r2, #0
 8001690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001694:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001698:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800169c:	f7fe fe08 	bl	80002b0 <__aeabi_uldivmod>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4613      	mov	r3, r2
 80016a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016aa:	e067      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ac:	4b75      	ldr	r3, [pc, #468]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016b8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016c6:	2300      	movs	r3, #0
 80016c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016ce:	4622      	mov	r2, r4
 80016d0:	462b      	mov	r3, r5
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	0159      	lsls	r1, r3, #5
 80016dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e0:	0150      	lsls	r0, r2, #5
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4621      	mov	r1, r4
 80016e8:	1a51      	subs	r1, r2, r1
 80016ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016ec:	4629      	mov	r1, r5
 80016ee:	eb63 0301 	sbc.w	r3, r3, r1
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001700:	4649      	mov	r1, r9
 8001702:	018b      	lsls	r3, r1, #6
 8001704:	4641      	mov	r1, r8
 8001706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800170a:	4641      	mov	r1, r8
 800170c:	018a      	lsls	r2, r1, #6
 800170e:	4641      	mov	r1, r8
 8001710:	ebb2 0a01 	subs.w	sl, r2, r1
 8001714:	4649      	mov	r1, r9
 8001716:	eb63 0b01 	sbc.w	fp, r3, r1
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001726:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800172a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800172e:	4692      	mov	sl, r2
 8001730:	469b      	mov	fp, r3
 8001732:	4623      	mov	r3, r4
 8001734:	eb1a 0303 	adds.w	r3, sl, r3
 8001738:	623b      	str	r3, [r7, #32]
 800173a:	462b      	mov	r3, r5
 800173c:	eb4b 0303 	adc.w	r3, fp, r3
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800174e:	4629      	mov	r1, r5
 8001750:	028b      	lsls	r3, r1, #10
 8001752:	4621      	mov	r1, r4
 8001754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001758:	4621      	mov	r1, r4
 800175a:	028a      	lsls	r2, r1, #10
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001764:	2200      	movs	r2, #0
 8001766:	673b      	str	r3, [r7, #112]	@ 0x70
 8001768:	677a      	str	r2, [r7, #116]	@ 0x74
 800176a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800176e:	f7fe fd9f 	bl	80002b0 <__aeabi_uldivmod>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4613      	mov	r3, r2
 8001778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800177c:	4b41      	ldr	r3, [pc, #260]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	0c1b      	lsrs	r3, r3, #16
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	3301      	adds	r3, #1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800178e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800179e:	e0eb      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ac:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d06b      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b8:	4b32      	ldr	r3, [pc, #200]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	2200      	movs	r2, #0
 80017c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80017cc:	2300      	movs	r3, #0
 80017ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80017d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017d4:	4622      	mov	r2, r4
 80017d6:	462b      	mov	r3, r5
 80017d8:	f04f 0000 	mov.w	r0, #0
 80017dc:	f04f 0100 	mov.w	r1, #0
 80017e0:	0159      	lsls	r1, r3, #5
 80017e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e6:	0150      	lsls	r0, r2, #5
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4621      	mov	r1, r4
 80017ee:	1a51      	subs	r1, r2, r1
 80017f0:	61b9      	str	r1, [r7, #24]
 80017f2:	4629      	mov	r1, r5
 80017f4:	eb63 0301 	sbc.w	r3, r3, r1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001806:	4659      	mov	r1, fp
 8001808:	018b      	lsls	r3, r1, #6
 800180a:	4651      	mov	r1, sl
 800180c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001810:	4651      	mov	r1, sl
 8001812:	018a      	lsls	r2, r1, #6
 8001814:	4651      	mov	r1, sl
 8001816:	ebb2 0801 	subs.w	r8, r2, r1
 800181a:	4659      	mov	r1, fp
 800181c:	eb63 0901 	sbc.w	r9, r3, r1
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800182c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001830:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001834:	4690      	mov	r8, r2
 8001836:	4699      	mov	r9, r3
 8001838:	4623      	mov	r3, r4
 800183a:	eb18 0303 	adds.w	r3, r8, r3
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	462b      	mov	r3, r5
 8001842:	eb49 0303 	adc.w	r3, r9, r3
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001854:	4629      	mov	r1, r5
 8001856:	024b      	lsls	r3, r1, #9
 8001858:	4621      	mov	r1, r4
 800185a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800185e:	4621      	mov	r1, r4
 8001860:	024a      	lsls	r2, r1, #9
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800186a:	2200      	movs	r2, #0
 800186c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800186e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001870:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001874:	f7fe fd1c 	bl	80002b0 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4613      	mov	r3, r2
 800187e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001882:	e065      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x420>
 8001884:	40023800 	.word	0x40023800
 8001888:	00f42400 	.word	0x00f42400
 800188c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001890:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x458>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	2200      	movs	r2, #0
 8001898:	4618      	mov	r0, r3
 800189a:	4611      	mov	r1, r2
 800189c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80018a2:	2300      	movs	r3, #0
 80018a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80018a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018aa:	4642      	mov	r2, r8
 80018ac:	464b      	mov	r3, r9
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	0159      	lsls	r1, r3, #5
 80018b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018bc:	0150      	lsls	r0, r2, #5
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4641      	mov	r1, r8
 80018c4:	1a51      	subs	r1, r2, r1
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	4649      	mov	r1, r9
 80018ca:	eb63 0301 	sbc.w	r3, r3, r1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018dc:	4659      	mov	r1, fp
 80018de:	018b      	lsls	r3, r1, #6
 80018e0:	4651      	mov	r1, sl
 80018e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e6:	4651      	mov	r1, sl
 80018e8:	018a      	lsls	r2, r1, #6
 80018ea:	4651      	mov	r1, sl
 80018ec:	1a54      	subs	r4, r2, r1
 80018ee:	4659      	mov	r1, fp
 80018f0:	eb63 0501 	sbc.w	r5, r3, r1
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	00eb      	lsls	r3, r5, #3
 80018fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001902:	00e2      	lsls	r2, r4, #3
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	4643      	mov	r3, r8
 800190a:	18e3      	adds	r3, r4, r3
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	464b      	mov	r3, r9
 8001910:	eb45 0303 	adc.w	r3, r5, r3
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001922:	4629      	mov	r1, r5
 8001924:	028b      	lsls	r3, r1, #10
 8001926:	4621      	mov	r1, r4
 8001928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800192c:	4621      	mov	r1, r4
 800192e:	028a      	lsls	r2, r1, #10
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001938:	2200      	movs	r2, #0
 800193a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800193c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800193e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001942:	f7fe fcb5 	bl	80002b0 <__aeabi_uldivmod>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4613      	mov	r3, r2
 800194c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x458>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	0f1b      	lsrs	r3, r3, #28
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800195e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800196e:	e003      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001978:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800197c:	4618      	mov	r0, r3
 800197e:	37b8      	adds	r7, #184	@ 0xb8
 8001980:	46bd      	mov	sp, r7
 8001982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	00f42400 	.word	0x00f42400

08001990 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e28d      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8083 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019b0:	4b94      	ldr	r3, [pc, #592]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d019      	beq.n	80019f0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019bc:	4b91      	ldr	r3, [pc, #580]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
        || \
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019d4:	d00c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d112      	bne.n	8001a08 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e2:	4b88      	ldr	r3, [pc, #544]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ee:	d10b      	bne.n	8001a08 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	4b84      	ldr	r3, [pc, #528]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d05b      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x124>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d157      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e25a      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_OscConfig+0x90>
 8001a12:	4b7c      	ldr	r3, [pc, #496]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7b      	ldr	r2, [pc, #492]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xcc>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xb4>
 8001a2a:	4b76      	ldr	r3, [pc, #472]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b73      	ldr	r3, [pc, #460]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a72      	ldr	r2, [pc, #456]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xcc>
 8001a44:	4b6f      	ldr	r3, [pc, #444]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6e      	ldr	r2, [pc, #440]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b6c      	ldr	r3, [pc, #432]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6b      	ldr	r2, [pc, #428]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f97c 	bl	8000d60 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f978 	bl	8000d60 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e21f      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b61      	ldr	r3, [pc, #388]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xdc>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f968 	bl	8000d60 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f964 	bl	8000d60 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	@ 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e20b      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b57      	ldr	r3, [pc, #348]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x104>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d06f      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ac2:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d017      	beq.n	8001afe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ace:	4b4d      	ldr	r3, [pc, #308]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ada:	4b4a      	ldr	r3, [pc, #296]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af2:	4b44      	ldr	r3, [pc, #272]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x186>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1d3      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4937      	ldr	r1, [pc, #220]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_RCC_OscConfig+0x278>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f911 	bl	8000d60 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff f90d 	bl	8000d60 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1b4      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4925      	ldr	r1, [pc, #148]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_OscConfig+0x278>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f8f0 	bl	8000d60 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff f8ec 	bl	8000d60 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e193      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d036      	beq.n	8001c1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d016      	beq.n	8001be4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f8d0 	bl	8000d60 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f8cc 	bl	8000d60 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e173      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x234>
 8001be2:	e01b      	b.n	8001c1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_OscConfig+0x27c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff f8b9 	bl	8000d60 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	e00e      	b.n	8001c10 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f8b5 	bl	8000d60 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d907      	bls.n	8001c10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e15c      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	42470000 	.word	0x42470000
 8001c0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4b8a      	ldr	r3, [pc, #552]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ea      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8097 	beq.w	8001d58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b83      	ldr	r3, [pc, #524]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a7e      	ldr	r2, [pc, #504]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b79      	ldr	r3, [pc, #484]	@ (8001e40 <HAL_RCC_OscConfig+0x4b0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b76      	ldr	r3, [pc, #472]	@ (8001e40 <HAL_RCC_OscConfig+0x4b0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	@ (8001e40 <HAL_RCC_OscConfig+0x4b0>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f875 	bl	8000d60 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff f871 	bl	8000d60 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e118      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e40 <HAL_RCC_OscConfig+0x4b0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x31e>
 8001ca0:	4b66      	ldr	r3, [pc, #408]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	4a65      	ldr	r2, [pc, #404]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x358>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x340>
 8001cb6:	4b61      	ldr	r3, [pc, #388]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cba:	4a60      	ldr	r2, [pc, #384]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc6:	4a5d      	ldr	r2, [pc, #372]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x358>
 8001cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd4:	4a59      	ldr	r2, [pc, #356]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cdc:	4b57      	ldr	r3, [pc, #348]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce0:	4a56      	ldr	r2, [pc, #344]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001ce2:	f023 0304 	bic.w	r3, r3, #4
 8001ce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d015      	beq.n	8001d1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f836 	bl	8000d60 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f832 	bl	8000d60 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0d7      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ee      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x368>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f820 	bl	8000d60 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f81c 	bl	8000d60 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0c1      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ee      	bne.n	8001d24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	4a3a      	ldr	r2, [pc, #232]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ad 	beq.w	8001ebc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d62:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d060      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d145      	bne.n	8001e02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b33      	ldr	r3, [pc, #204]	@ (8001e44 <HAL_RCC_OscConfig+0x4b4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7fe fff0 	bl	8000d60 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe ffec 	bl	8000d60 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e093      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b29      	ldr	r3, [pc, #164]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	071b      	lsls	r3, r3, #28
 8001dce:	491b      	ldr	r1, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_RCC_OscConfig+0x4b4>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7fe ffc1 	bl	8000d60 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7fe ffbd 	bl	8000d60 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e064      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x452>
 8001e00:	e05c      	b.n	8001ebc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_RCC_OscConfig+0x4b4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe ffaa 	bl	8000d60 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe ffa6 	bl	8000d60 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e04d      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x480>
 8001e2e:	e045      	b.n	8001ebc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e040      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000
 8001e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <HAL_RCC_OscConfig+0x538>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d030      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d129      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d122      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e78:	4013      	ands	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d119      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10f      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e041      	b.n	8001f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f839 	bl	8001f6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 f9c0 	bl	8002290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d001      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e04e      	b.n	8002036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a23      	ldr	r2, [pc, #140]	@ (8002044 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x80>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc2:	d01d      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x80>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002048 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d018      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x80>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800204c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x80>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002050 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00e      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x80>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x80>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	@ (8002058 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x80>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a18      	ldr	r2, [pc, #96]	@ (800205c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d111      	bne.n	8002024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b06      	cmp	r3, #6
 8002010:	d010      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002022:	e007      	b.n	8002034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40010000 	.word	0x40010000
 8002048:	40000400 	.word	0x40000400
 800204c:	40000800 	.word	0x40000800
 8002050:	40000c00 	.word	0x40000c00
 8002054:	40010400 	.word	0x40010400
 8002058:	40014000 	.word	0x40014000
 800205c:	40001800 	.word	0x40001800

08002060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d020      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0202 	mvn.w	r2, #2
 8002094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8d2 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8c4 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f8d5 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d020      	beq.n	8002110 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01b      	beq.n	8002110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0204 	mvn.w	r2, #4
 80020e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8ac 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f89e 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f8af 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d020      	beq.n	800215c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0208 	mvn.w	r2, #8
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2204      	movs	r2, #4
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f886 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f878 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f889 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d020      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0210 	mvn.w	r2, #16
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2208      	movs	r2, #8
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f860 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f852 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f863 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0201 	mvn.w	r2, #1
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe fb90 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00c      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f900 	bl	80023f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f834 	bl	800227c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0220 	mvn.w	r2, #32
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f8d2 	bl	80023dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a43      	ldr	r2, [pc, #268]	@ (80023b0 <TIM_Base_SetConfig+0x120>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d013      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ae:	d00f      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a40      	ldr	r2, [pc, #256]	@ (80023b4 <TIM_Base_SetConfig+0x124>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00b      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3f      	ldr	r2, [pc, #252]	@ (80023b8 <TIM_Base_SetConfig+0x128>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d007      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3e      	ldr	r2, [pc, #248]	@ (80023bc <TIM_Base_SetConfig+0x12c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a3d      	ldr	r2, [pc, #244]	@ (80023c0 <TIM_Base_SetConfig+0x130>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d108      	bne.n	80022e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a32      	ldr	r2, [pc, #200]	@ (80023b0 <TIM_Base_SetConfig+0x120>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02b      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f0:	d027      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2f      	ldr	r2, [pc, #188]	@ (80023b4 <TIM_Base_SetConfig+0x124>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d023      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2e      	ldr	r2, [pc, #184]	@ (80023b8 <TIM_Base_SetConfig+0x128>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01f      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2d      	ldr	r2, [pc, #180]	@ (80023bc <TIM_Base_SetConfig+0x12c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01b      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2c      	ldr	r2, [pc, #176]	@ (80023c0 <TIM_Base_SetConfig+0x130>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d017      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <TIM_Base_SetConfig+0x134>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a2a      	ldr	r2, [pc, #168]	@ (80023c8 <TIM_Base_SetConfig+0x138>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00f      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a29      	ldr	r2, [pc, #164]	@ (80023cc <TIM_Base_SetConfig+0x13c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00b      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a28      	ldr	r2, [pc, #160]	@ (80023d0 <TIM_Base_SetConfig+0x140>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a27      	ldr	r2, [pc, #156]	@ (80023d4 <TIM_Base_SetConfig+0x144>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a26      	ldr	r2, [pc, #152]	@ (80023d8 <TIM_Base_SetConfig+0x148>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d108      	bne.n	8002354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a0e      	ldr	r2, [pc, #56]	@ (80023b0 <TIM_Base_SetConfig+0x120>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <TIM_Base_SetConfig+0xf2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <TIM_Base_SetConfig+0x130>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d103      	bne.n	800238a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f043 0204 	orr.w	r2, r3, #4
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40000c00 	.word	0x40000c00
 80023c0:	40010400 	.word	0x40010400
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40014400 	.word	0x40014400
 80023cc:	40014800 	.word	0x40014800
 80023d0:	40001800 	.word	0x40001800
 80023d4:	40001c00 	.word	0x40001c00
 80023d8:	40002000 	.word	0x40002000

080023dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e042      	b.n	800249c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe faa2 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	@ 0x24
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f82b 	bl	80024a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800245c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800246c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800247c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a8:	b0c0      	sub	sp, #256	@ 0x100
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c0:	68d9      	ldr	r1, [r3, #12]
 80024c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	ea40 0301 	orr.w	r3, r0, r1
 80024cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	431a      	orrs	r2, r3
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024fc:	f021 010c 	bic.w	r1, r1, #12
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800250a:	430b      	orrs	r3, r1
 800250c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800251a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251e:	6999      	ldr	r1, [r3, #24]
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	ea40 0301 	orr.w	r3, r0, r1
 800252a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b8f      	ldr	r3, [pc, #572]	@ (8002770 <UART_SetConfig+0x2cc>)
 8002534:	429a      	cmp	r2, r3
 8002536:	d005      	beq.n	8002544 <UART_SetConfig+0xa0>
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b8d      	ldr	r3, [pc, #564]	@ (8002774 <UART_SetConfig+0x2d0>)
 8002540:	429a      	cmp	r2, r3
 8002542:	d104      	bne.n	800254e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002544:	f7fe ffae 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 8002548:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800254c:	e003      	b.n	8002556 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800254e:	f7fe ff95 	bl	800147c <HAL_RCC_GetPCLK1Freq>
 8002552:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002560:	f040 810c 	bne.w	800277c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002568:	2200      	movs	r2, #0
 800256a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800256e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002576:	4622      	mov	r2, r4
 8002578:	462b      	mov	r3, r5
 800257a:	1891      	adds	r1, r2, r2
 800257c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800257e:	415b      	adcs	r3, r3
 8002580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002586:	4621      	mov	r1, r4
 8002588:	eb12 0801 	adds.w	r8, r2, r1
 800258c:	4629      	mov	r1, r5
 800258e:	eb43 0901 	adc.w	r9, r3, r1
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800259e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025a6:	4690      	mov	r8, r2
 80025a8:	4699      	mov	r9, r3
 80025aa:	4623      	mov	r3, r4
 80025ac:	eb18 0303 	adds.w	r3, r8, r3
 80025b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025b4:	462b      	mov	r3, r5
 80025b6:	eb49 0303 	adc.w	r3, r9, r3
 80025ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025d2:	460b      	mov	r3, r1
 80025d4:	18db      	adds	r3, r3, r3
 80025d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80025d8:	4613      	mov	r3, r2
 80025da:	eb42 0303 	adc.w	r3, r2, r3
 80025de:	657b      	str	r3, [r7, #84]	@ 0x54
 80025e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025e8:	f7fd fe62 	bl	80002b0 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4b61      	ldr	r3, [pc, #388]	@ (8002778 <UART_SetConfig+0x2d4>)
 80025f2:	fba3 2302 	umull	r2, r3, r3, r2
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	011c      	lsls	r4, r3, #4
 80025fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025fe:	2200      	movs	r2, #0
 8002600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002604:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800260c:	4642      	mov	r2, r8
 800260e:	464b      	mov	r3, r9
 8002610:	1891      	adds	r1, r2, r2
 8002612:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002614:	415b      	adcs	r3, r3
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800261c:	4641      	mov	r1, r8
 800261e:	eb12 0a01 	adds.w	sl, r2, r1
 8002622:	4649      	mov	r1, r9
 8002624:	eb43 0b01 	adc.w	fp, r3, r1
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800263c:	4692      	mov	sl, r2
 800263e:	469b      	mov	fp, r3
 8002640:	4643      	mov	r3, r8
 8002642:	eb1a 0303 	adds.w	r3, sl, r3
 8002646:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800264a:	464b      	mov	r3, r9
 800264c:	eb4b 0303 	adc.w	r3, fp, r3
 8002650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002660:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002668:	460b      	mov	r3, r1
 800266a:	18db      	adds	r3, r3, r3
 800266c:	643b      	str	r3, [r7, #64]	@ 0x40
 800266e:	4613      	mov	r3, r2
 8002670:	eb42 0303 	adc.w	r3, r2, r3
 8002674:	647b      	str	r3, [r7, #68]	@ 0x44
 8002676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800267a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800267e:	f7fd fe17 	bl	80002b0 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4611      	mov	r1, r2
 8002688:	4b3b      	ldr	r3, [pc, #236]	@ (8002778 <UART_SetConfig+0x2d4>)
 800268a:	fba3 2301 	umull	r2, r3, r3, r1
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2264      	movs	r2, #100	@ 0x64
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	1acb      	subs	r3, r1, r3
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800269e:	4b36      	ldr	r3, [pc, #216]	@ (8002778 <UART_SetConfig+0x2d4>)
 80026a0:	fba3 2302 	umull	r2, r3, r3, r2
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026ac:	441c      	add	r4, r3
 80026ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b2:	2200      	movs	r2, #0
 80026b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026c0:	4642      	mov	r2, r8
 80026c2:	464b      	mov	r3, r9
 80026c4:	1891      	adds	r1, r2, r2
 80026c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026c8:	415b      	adcs	r3, r3
 80026ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026d0:	4641      	mov	r1, r8
 80026d2:	1851      	adds	r1, r2, r1
 80026d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80026d6:	4649      	mov	r1, r9
 80026d8:	414b      	adcs	r3, r1
 80026da:	637b      	str	r3, [r7, #52]	@ 0x34
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026e8:	4659      	mov	r1, fp
 80026ea:	00cb      	lsls	r3, r1, #3
 80026ec:	4651      	mov	r1, sl
 80026ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f2:	4651      	mov	r1, sl
 80026f4:	00ca      	lsls	r2, r1, #3
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	4642      	mov	r2, r8
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002704:	464b      	mov	r3, r9
 8002706:	460a      	mov	r2, r1
 8002708:	eb42 0303 	adc.w	r3, r2, r3
 800270c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800271c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002724:	460b      	mov	r3, r1
 8002726:	18db      	adds	r3, r3, r3
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800272a:	4613      	mov	r3, r2
 800272c:	eb42 0303 	adc.w	r3, r2, r3
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800273a:	f7fd fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <UART_SetConfig+0x2d4>)
 8002744:	fba3 1302 	umull	r1, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	2164      	movs	r1, #100	@ 0x64
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	3332      	adds	r3, #50	@ 0x32
 8002756:	4a08      	ldr	r2, [pc, #32]	@ (8002778 <UART_SetConfig+0x2d4>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	f003 0207 	and.w	r2, r3, #7
 8002762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4422      	add	r2, r4
 800276a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800276c:	e106      	b.n	800297c <UART_SetConfig+0x4d8>
 800276e:	bf00      	nop
 8002770:	40011000 	.word	0x40011000
 8002774:	40011400 	.word	0x40011400
 8002778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800277c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002780:	2200      	movs	r2, #0
 8002782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002786:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800278a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800278e:	4642      	mov	r2, r8
 8002790:	464b      	mov	r3, r9
 8002792:	1891      	adds	r1, r2, r2
 8002794:	6239      	str	r1, [r7, #32]
 8002796:	415b      	adcs	r3, r3
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
 800279a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800279e:	4641      	mov	r1, r8
 80027a0:	1854      	adds	r4, r2, r1
 80027a2:	4649      	mov	r1, r9
 80027a4:	eb43 0501 	adc.w	r5, r3, r1
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027c4:	464b      	mov	r3, r9
 80027c6:	eb45 0303 	adc.w	r3, r5, r3
 80027ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027ea:	4629      	mov	r1, r5
 80027ec:	008b      	lsls	r3, r1, #2
 80027ee:	4621      	mov	r1, r4
 80027f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f4:	4621      	mov	r1, r4
 80027f6:	008a      	lsls	r2, r1, #2
 80027f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027fc:	f7fd fd58 	bl	80002b0 <__aeabi_uldivmod>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4b60      	ldr	r3, [pc, #384]	@ (8002988 <UART_SetConfig+0x4e4>)
 8002806:	fba3 2302 	umull	r2, r3, r3, r2
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	011c      	lsls	r4, r3, #4
 800280e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002818:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800281c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002820:	4642      	mov	r2, r8
 8002822:	464b      	mov	r3, r9
 8002824:	1891      	adds	r1, r2, r2
 8002826:	61b9      	str	r1, [r7, #24]
 8002828:	415b      	adcs	r3, r3
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002830:	4641      	mov	r1, r8
 8002832:	1851      	adds	r1, r2, r1
 8002834:	6139      	str	r1, [r7, #16]
 8002836:	4649      	mov	r1, r9
 8002838:	414b      	adcs	r3, r1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002848:	4659      	mov	r1, fp
 800284a:	00cb      	lsls	r3, r1, #3
 800284c:	4651      	mov	r1, sl
 800284e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002852:	4651      	mov	r1, sl
 8002854:	00ca      	lsls	r2, r1, #3
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	4603      	mov	r3, r0
 800285c:	4642      	mov	r2, r8
 800285e:	189b      	adds	r3, r3, r2
 8002860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002864:	464b      	mov	r3, r9
 8002866:	460a      	mov	r2, r1
 8002868:	eb42 0303 	adc.w	r3, r2, r3
 800286c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800287a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002888:	4649      	mov	r1, r9
 800288a:	008b      	lsls	r3, r1, #2
 800288c:	4641      	mov	r1, r8
 800288e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002892:	4641      	mov	r1, r8
 8002894:	008a      	lsls	r2, r1, #2
 8002896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800289a:	f7fd fd09 	bl	80002b0 <__aeabi_uldivmod>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	4b38      	ldr	r3, [pc, #224]	@ (8002988 <UART_SetConfig+0x4e4>)
 80028a6:	fba3 2301 	umull	r2, r3, r3, r1
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2264      	movs	r2, #100	@ 0x64
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	1acb      	subs	r3, r1, r3
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	3332      	adds	r3, #50	@ 0x32
 80028b8:	4a33      	ldr	r2, [pc, #204]	@ (8002988 <UART_SetConfig+0x4e4>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c4:	441c      	add	r4, r3
 80028c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ca:	2200      	movs	r2, #0
 80028cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80028ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80028d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028d4:	4642      	mov	r2, r8
 80028d6:	464b      	mov	r3, r9
 80028d8:	1891      	adds	r1, r2, r2
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	415b      	adcs	r3, r3
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028e4:	4641      	mov	r1, r8
 80028e6:	1851      	adds	r1, r2, r1
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	4649      	mov	r1, r9
 80028ec:	414b      	adcs	r3, r1
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028fc:	4659      	mov	r1, fp
 80028fe:	00cb      	lsls	r3, r1, #3
 8002900:	4651      	mov	r1, sl
 8002902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002906:	4651      	mov	r1, sl
 8002908:	00ca      	lsls	r2, r1, #3
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	4603      	mov	r3, r0
 8002910:	4642      	mov	r2, r8
 8002912:	189b      	adds	r3, r3, r2
 8002914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002916:	464b      	mov	r3, r9
 8002918:	460a      	mov	r2, r1
 800291a:	eb42 0303 	adc.w	r3, r2, r3
 800291e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	663b      	str	r3, [r7, #96]	@ 0x60
 800292a:	667a      	str	r2, [r7, #100]	@ 0x64
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002938:	4649      	mov	r1, r9
 800293a:	008b      	lsls	r3, r1, #2
 800293c:	4641      	mov	r1, r8
 800293e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002942:	4641      	mov	r1, r8
 8002944:	008a      	lsls	r2, r1, #2
 8002946:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800294a:	f7fd fcb1 	bl	80002b0 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <UART_SetConfig+0x4e4>)
 8002954:	fba3 1302 	umull	r1, r3, r3, r2
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	2164      	movs	r1, #100	@ 0x64
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	3332      	adds	r3, #50	@ 0x32
 8002966:	4a08      	ldr	r2, [pc, #32]	@ (8002988 <UART_SetConfig+0x4e4>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4422      	add	r2, r4
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002982:	46bd      	mov	sp, r7
 8002984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002988:	51eb851f 	.word	0x51eb851f

0800298c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <SysTick_Handler+0x1c>)
 8002992:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002994:	f001 fc52 	bl	800423c <xTaskGetSchedulerState>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d001      	beq.n	80029a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800299e:	f002 fa4b 	bl	8004e38 <xPortSysTickHandler>
  }
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80029bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4a06      	ldr	r2, [pc, #24]	@ (80029dc <vApplicationGetIdleTaskMemory+0x30>)
 80029c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2280      	movs	r2, #128	@ 0x80
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000012c 	.word	0x2000012c
 80029dc:	20000188 	.word	0x20000188

080029e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a07      	ldr	r2, [pc, #28]	@ (8002a0c <vApplicationGetTimerTaskMemory+0x2c>)
 80029f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4a06      	ldr	r2, [pc, #24]	@ (8002a10 <vApplicationGetTimerTaskMemory+0x30>)
 80029f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029fe:	601a      	str	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	20000388 	.word	0x20000388
 8002a10:	200003e4 	.word	0x200003e4

08002a14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f103 0208 	add.w	r2, r3, #8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f103 0208 	add.w	r2, r3, #8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f103 0208 	add.w	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d103      	bne.n	8002ad6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e00c      	b.n	8002af0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3308      	adds	r3, #8
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e002      	b.n	8002ae4 <vListInsert+0x2e>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d2f6      	bcs.n	8002ade <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	601a      	str	r2, [r3, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6892      	ldr	r2, [r2, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6852      	ldr	r2, [r2, #4]
 8002b48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d103      	bne.n	8002b5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10b      	bne.n	8002ba8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ba8:	f002 f8b6 	bl	8004d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb4:	68f9      	ldr	r1, [r7, #12]
 8002bb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	441a      	add	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	441a      	add	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	22ff      	movs	r2, #255	@ 0xff
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	22ff      	movs	r2, #255	@ 0xff
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d114      	bne.n	8002c28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01a      	beq.n	8002c3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3310      	adds	r3, #16
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 f956 	bl	8003ebc <xTaskRemoveFromEventList>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <xQueueGenericReset+0xd0>)
 8002c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	e009      	b.n	8002c3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3310      	adds	r3, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fef1 	bl	8002a14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3324      	adds	r3, #36	@ 0x24
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff feec 	bl	8002a14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c3c:	f002 f89e 	bl	8004d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c40:	2301      	movs	r3, #1
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000ed04 	.word	0xe000ed04

08002c50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	@ 0x38
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10b      	bne.n	8002c9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	e7fd      	b.n	8002c96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <xQueueGenericCreateStatic+0x56>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <xQueueGenericCreateStatic+0x5a>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <xQueueGenericCreateStatic+0x5c>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	623b      	str	r3, [r7, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <xQueueGenericCreateStatic+0x84>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <xQueueGenericCreateStatic+0x88>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <xQueueGenericCreateStatic+0x8a>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10b      	bne.n	8002cf6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	61fb      	str	r3, [r7, #28]
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	e7fd      	b.n	8002cf2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cf6:	2350      	movs	r3, #80	@ 0x50
 8002cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b50      	cmp	r3, #80	@ 0x50
 8002cfe:	d00b      	beq.n	8002d18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	61bb      	str	r3, [r7, #24]
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f840 	bl	8002dc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3730      	adds	r7, #48	@ 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08a      	sub	sp, #40	@ 0x28
 8002d4e:	af02      	add	r7, sp, #8
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	613b      	str	r3, [r7, #16]
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	e7fd      	b.n	8002d72 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	3350      	adds	r3, #80	@ 0x50
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 f8e9 	bl	8004f5c <pvPortMalloc>
 8002d8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d011      	beq.n	8002db6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3350      	adds	r3, #80	@ 0x50
 8002d9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002da4:	79fa      	ldrb	r2, [r7, #7]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f805 	bl	8002dc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002db6:	69bb      	ldr	r3, [r7, #24]
	}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e002      	b.n	8002de2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dee:	2101      	movs	r1, #1
 8002df0:	69b8      	ldr	r0, [r7, #24]
 8002df2:	f7ff fec3 	bl	8002b7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08e      	sub	sp, #56	@ 0x38
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e16:	2300      	movs	r3, #0
 8002e18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <xQueueGenericSend+0x34>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e36:	bf00      	nop
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <xQueueGenericSend+0x42>
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <xQueueGenericSend+0x46>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <xQueueGenericSend+0x48>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <xQueueGenericSend+0x64>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d103      	bne.n	8002e7a <xQueueGenericSend+0x72>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <xQueueGenericSend+0x76>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <xQueueGenericSend+0x78>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <xQueueGenericSend+0x94>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	623b      	str	r3, [r7, #32]
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e9c:	f001 f9ce 	bl	800423c <xTaskGetSchedulerState>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <xQueueGenericSend+0xa4>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <xQueueGenericSend+0xa8>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <xQueueGenericSend+0xaa>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <xQueueGenericSend+0xc6>
	__asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	61fb      	str	r3, [r7, #28]
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	e7fd      	b.n	8002eca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ece:	f001 ff23 	bl	8004d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d302      	bcc.n	8002ee4 <xQueueGenericSend+0xdc>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d129      	bne.n	8002f38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eea:	f000 fa0f 	bl	800330c <prvCopyDataToQueue>
 8002eee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efa:	3324      	adds	r3, #36	@ 0x24
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 ffdd 	bl	8003ebc <xTaskRemoveFromEventList>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f08:	4b3f      	ldr	r3, [pc, #252]	@ (8003008 <xQueueGenericSend+0x200>)
 8002f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	e00a      	b.n	8002f30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f20:	4b39      	ldr	r3, [pc, #228]	@ (8003008 <xQueueGenericSend+0x200>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f30:	f001 ff24 	bl	8004d7c <vPortExitCritical>
				return pdPASS;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e063      	b.n	8003000 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f3e:	f001 ff1d 	bl	8004d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e05c      	b.n	8003000 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 f817 	bl	8003f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f56:	2301      	movs	r3, #1
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f5a:	f001 ff0f 	bl	8004d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f5e:	f000 fd87 	bl	8003a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f62:	f001 fed9 	bl	8004d18 <vPortEnterCritical>
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f72:	d103      	bne.n	8002f7c <xQueueGenericSend+0x174>
 8002f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d103      	bne.n	8002f92 <xQueueGenericSend+0x18a>
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f92:	f001 fef3 	bl	8004d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f96:	1d3a      	adds	r2, r7, #4
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 f806 	bl	8003fb0 <xTaskCheckForTimeOut>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d124      	bne.n	8002ff4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002faa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fac:	f000 faa6 	bl	80034fc <prvIsQueueFull>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	3310      	adds	r3, #16
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 ff2a 	bl	8003e18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fc6:	f000 fa31 	bl	800342c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fca:	f000 fd5f 	bl	8003a8c <xTaskResumeAll>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f af7c 	bne.w	8002ece <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003008 <xQueueGenericSend+0x200>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	e772      	b.n	8002ece <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fea:	f000 fa1f 	bl	800342c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fee:	f000 fd4d 	bl	8003a8c <xTaskResumeAll>
 8002ff2:	e76c      	b.n	8002ece <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ff6:	f000 fa19 	bl	800342c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ffa:	f000 fd47 	bl	8003a8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ffe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003000:	4618      	mov	r0, r3
 8003002:	3738      	adds	r7, #56	@ 0x38
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b090      	sub	sp, #64	@ 0x40
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800301e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <xQueueGenericSendFromISR+0x3e>
 8003042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <xQueueGenericSendFromISR+0x42>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueGenericSendFromISR+0x44>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d103      	bne.n	800307a <xQueueGenericSendFromISR+0x6e>
 8003072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <xQueueGenericSendFromISR+0x72>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <xQueueGenericSendFromISR+0x74>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	623b      	str	r3, [r7, #32]
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800309c:	f001 ff1c 	bl	8004ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030a0:	f3ef 8211 	mrs	r2, BASEPRI
 80030a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	61fa      	str	r2, [r7, #28]
 80030b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d302      	bcc.n	80030ce <xQueueGenericSendFromISR+0xc2>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d12f      	bne.n	800312e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030e4:	f000 f912 	bl	800330c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d112      	bne.n	8003118 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fc:	3324      	adds	r3, #36	@ 0x24
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fedc 	bl	8003ebc <xTaskRemoveFromEventList>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00e      	beq.n	8003128 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	e007      	b.n	8003128 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003118:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800311c:	3301      	adds	r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	b25a      	sxtb	r2, r3
 8003122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003128:	2301      	movs	r3, #1
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800312c:	e001      	b.n	8003132 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800312e:	2300      	movs	r3, #0
 8003130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800313c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800313e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003140:	4618      	mov	r0, r3
 8003142:	3740      	adds	r7, #64	@ 0x40
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	@ 0x30
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003154:	2300      	movs	r3, #0
 8003156:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <xQueueReceive+0x32>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	623b      	str	r3, [r7, #32]
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <xQueueReceive+0x40>
 8003180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <xQueueReceive+0x44>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <xQueueReceive+0x46>
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <xQueueReceive+0x62>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	61fb      	str	r3, [r7, #28]
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	e7fd      	b.n	80031a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031aa:	f001 f847 	bl	800423c <xTaskGetSchedulerState>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <xQueueReceive+0x72>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <xQueueReceive+0x76>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <xQueueReceive+0x78>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <xQueueReceive+0x94>
	__asm volatile
 80031c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	61bb      	str	r3, [r7, #24]
}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031dc:	f001 fd9c 	bl	8004d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01f      	beq.n	800322c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031f0:	f000 f8f6 	bl	80033e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00f      	beq.n	8003224 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003206:	3310      	adds	r3, #16
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fe57 	bl	8003ebc <xTaskRemoveFromEventList>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003214:	4b3c      	ldr	r3, [pc, #240]	@ (8003308 <xQueueReceive+0x1c0>)
 8003216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003224:	f001 fdaa 	bl	8004d7c <vPortExitCritical>
				return pdPASS;
 8003228:	2301      	movs	r3, #1
 800322a:	e069      	b.n	8003300 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003232:	f001 fda3 	bl	8004d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003236:	2300      	movs	r3, #0
 8003238:	e062      	b.n	8003300 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003240:	f107 0310 	add.w	r3, r7, #16
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fe9d 	bl	8003f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800324e:	f001 fd95 	bl	8004d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003252:	f000 fc0d 	bl	8003a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003256:	f001 fd5f 	bl	8004d18 <vPortEnterCritical>
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003260:	b25b      	sxtb	r3, r3
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d103      	bne.n	8003270 <xQueueReceive+0x128>
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003272:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003276:	b25b      	sxtb	r3, r3
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d103      	bne.n	8003286 <xQueueReceive+0x13e>
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003286:	f001 fd79 	bl	8004d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800328a:	1d3a      	adds	r2, r7, #4
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fe8c 	bl	8003fb0 <xTaskCheckForTimeOut>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d123      	bne.n	80032e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800329e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032a0:	f000 f916 	bl	80034d0 <prvIsQueueEmpty>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d017      	beq.n	80032da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	3324      	adds	r3, #36	@ 0x24
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fdb0 	bl	8003e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ba:	f000 f8b7 	bl	800342c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032be:	f000 fbe5 	bl	8003a8c <xTaskResumeAll>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d189      	bne.n	80031dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <xQueueReceive+0x1c0>)
 80032ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	e780      	b.n	80031dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032dc:	f000 f8a6 	bl	800342c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032e0:	f000 fbd4 	bl	8003a8c <xTaskResumeAll>
 80032e4:	e77a      	b.n	80031dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032e8:	f000 f8a0 	bl	800342c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032ec:	f000 fbce 	bl	8003a8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032f2:	f000 f8ed 	bl	80034d0 <prvIsQueueEmpty>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f43f af6f 	beq.w	80031dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003300:	4618      	mov	r0, r3
 8003302:	3730      	adds	r7, #48	@ 0x30
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d14d      	bne.n	80033ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 ff9e 	bl	8004278 <xTaskPriorityDisinherit>
 800333c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	e043      	b.n	80033ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d119      	bne.n	8003380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6858      	ldr	r0, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	461a      	mov	r2, r3
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	f002 fb33 	bl	80059c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	441a      	add	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d32b      	bcc.n	80033ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	e026      	b.n	80033ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68d8      	ldr	r0, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	461a      	mov	r2, r3
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	f002 fb19 	bl	80059c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	425b      	negs	r3, r3
 800339a:	441a      	add	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d207      	bcs.n	80033bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	425b      	negs	r3, r3
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d105      	bne.n	80033ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80033d6:	697b      	ldr	r3, [r7, #20]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d303      	bcc.n	8003414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	461a      	mov	r2, r3
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f002 facf 	bl	80059c2 <memcpy>
	}
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003434:	f001 fc70 	bl	8004d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800343e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003440:	e011      	b.n	8003466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3324      	adds	r3, #36	@ 0x24
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fd34 	bl	8003ebc <xTaskRemoveFromEventList>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800345a:	f000 fe0d 	bl	8004078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	3b01      	subs	r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	dce9      	bgt.n	8003442 <prvUnlockQueue+0x16>
 800346e:	e000      	b.n	8003472 <prvUnlockQueue+0x46>
					break;
 8003470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	22ff      	movs	r2, #255	@ 0xff
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800347a:	f001 fc7f 	bl	8004d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800347e:	f001 fc4b 	bl	8004d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800348a:	e011      	b.n	80034b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3310      	adds	r3, #16
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fd0f 	bl	8003ebc <xTaskRemoveFromEventList>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034a4:	f000 fde8 	bl	8004078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	dce9      	bgt.n	800348c <prvUnlockQueue+0x60>
 80034b8:	e000      	b.n	80034bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	22ff      	movs	r2, #255	@ 0xff
 80034c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034c4:	f001 fc5a 	bl	8004d7c <vPortExitCritical>
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034d8:	f001 fc1e 	bl	8004d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e001      	b.n	80034ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ee:	f001 fc45 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003504:	f001 fc08 	bl	8004d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003510:	429a      	cmp	r2, r3
 8003512:	d102      	bne.n	800351a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e001      	b.n	800351e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fc2d 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e014      	b.n	8003566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800353c:	4a0f      	ldr	r2, [pc, #60]	@ (800357c <vQueueAddToRegistry+0x50>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003548:	490c      	ldr	r1, [pc, #48]	@ (800357c <vQueueAddToRegistry+0x50>)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003552:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <vQueueAddToRegistry+0x50>)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800355e:	e006      	b.n	800356e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b07      	cmp	r3, #7
 800356a:	d9e7      	bls.n	800353c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	200007e4 	.word	0x200007e4

08003580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003590:	f001 fbc2 	bl	8004d18 <vPortEnterCritical>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800359a:	b25b      	sxtb	r3, r3
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d103      	bne.n	80035aa <vQueueWaitForMessageRestricted+0x2a>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d103      	bne.n	80035c0 <vQueueWaitForMessageRestricted+0x40>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035c0:	f001 fbdc 	bl	8004d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3324      	adds	r3, #36	@ 0x24
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fc45 	bl	8003e64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035da:	6978      	ldr	r0, [r7, #20]
 80035dc:	f7ff ff26 	bl	800342c <prvUnlockQueue>
	}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	@ 0x38
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	623b      	str	r3, [r7, #32]
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <xTaskCreateStatic+0x4a>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	61fb      	str	r3, [r7, #28]
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	e7fd      	b.n	800362e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003632:	235c      	movs	r3, #92	@ 0x5c
 8003634:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b5c      	cmp	r3, #92	@ 0x5c
 800363a:	d00b      	beq.n	8003654 <xTaskCreateStatic+0x6c>
	__asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	61bb      	str	r3, [r7, #24]
}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003654:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01e      	beq.n	800369a <xTaskCreateStatic+0xb2>
 800365c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01b      	beq.n	800369a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003674:	2300      	movs	r3, #0
 8003676:	9303      	str	r3, [sp, #12]
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f850 	bl	8003732 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003692:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003694:	f000 f8de 	bl	8003854 <prvAddNewTaskToReadyList>
 8003698:	e001      	b.n	800369e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800369e:	697b      	ldr	r3, [r7, #20]
	}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3728      	adds	r7, #40	@ 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	@ 0x30
 80036ac:	af04      	add	r7, sp, #16
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 fc4d 	bl	8004f5c <pvPortMalloc>
 80036c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00e      	beq.n	80036e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036ca:	205c      	movs	r0, #92	@ 0x5c
 80036cc:	f001 fc46 	bl	8004f5c <pvPortMalloc>
 80036d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80036de:	e005      	b.n	80036ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036e0:	6978      	ldr	r0, [r7, #20]
 80036e2:	f001 fd09 	bl	80050f8 <vPortFree>
 80036e6:	e001      	b.n	80036ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d017      	beq.n	8003722 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	2300      	movs	r3, #0
 80036fe:	9303      	str	r3, [sp, #12]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	9302      	str	r3, [sp, #8]
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f80e 	bl	8003732 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003716:	69f8      	ldr	r0, [r7, #28]
 8003718:	f000 f89c 	bl	8003854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800371c:	2301      	movs	r3, #1
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e002      	b.n	8003728 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003728:	69bb      	ldr	r3, [r7, #24]
	}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b088      	sub	sp, #32
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	21a5      	movs	r1, #165	@ 0xa5
 800374c:	f002 f8be 	bl	80058cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800375a:	3b01      	subs	r3, #1
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f023 0307 	bic.w	r3, r3, #7
 8003768:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	617b      	str	r3, [r7, #20]
}
 8003786:	bf00      	nop
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01f      	beq.n	80037d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e012      	b.n	80037be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	7819      	ldrb	r1, [r3, #0]
 80037a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	3334      	adds	r3, #52	@ 0x34
 80037a8:	460a      	mov	r2, r1
 80037aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3301      	adds	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d9e9      	bls.n	8003798 <prvInitialiseNewTask+0x66>
 80037c4:	e000      	b.n	80037c8 <prvInitialiseNewTask+0x96>
			{
				break;
 80037c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d0:	e003      	b.n	80037da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	2b37      	cmp	r3, #55	@ 0x37
 80037de:	d901      	bls.n	80037e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037e0:	2337      	movs	r3, #55	@ 0x37
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	3304      	adds	r3, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f92a 	bl	8002a54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	3318      	adds	r3, #24
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f925 	bl	8002a54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800380e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003812:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003818:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800381e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	2200      	movs	r2, #0
 8003824:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	69b8      	ldr	r0, [r7, #24]
 8003834:	f001 f93e 	bl	8004ab4 <pxPortInitialiseStack>
 8003838:	4602      	mov	r2, r0
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800384a:	bf00      	nop
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800385c:	f001 fa5c 	bl	8004d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003860:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <prvAddNewTaskToReadyList+0xc4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a2c      	ldr	r2, [pc, #176]	@ (8003918 <prvAddNewTaskToReadyList+0xc4>)
 8003868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800386a:	4b2c      	ldr	r3, [pc, #176]	@ (800391c <prvAddNewTaskToReadyList+0xc8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003872:	4a2a      	ldr	r2, [pc, #168]	@ (800391c <prvAddNewTaskToReadyList+0xc8>)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003878:	4b27      	ldr	r3, [pc, #156]	@ (8003918 <prvAddNewTaskToReadyList+0xc4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d110      	bne.n	80038a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003880:	f000 fc1e 	bl	80040c0 <prvInitialiseTaskLists>
 8003884:	e00d      	b.n	80038a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003886:	4b26      	ldr	r3, [pc, #152]	@ (8003920 <prvAddNewTaskToReadyList+0xcc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800388e:	4b23      	ldr	r3, [pc, #140]	@ (800391c <prvAddNewTaskToReadyList+0xc8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	429a      	cmp	r2, r3
 800389a:	d802      	bhi.n	80038a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800389c:	4a1f      	ldr	r2, [pc, #124]	@ (800391c <prvAddNewTaskToReadyList+0xc8>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <prvAddNewTaskToReadyList+0xd0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3301      	adds	r3, #1
 80038a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003924 <prvAddNewTaskToReadyList+0xd0>)
 80038aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <prvAddNewTaskToReadyList+0xd0>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <prvAddNewTaskToReadyList+0xd4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d903      	bls.n	80038c8 <prvAddNewTaskToReadyList+0x74>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	4a18      	ldr	r2, [pc, #96]	@ (8003928 <prvAddNewTaskToReadyList+0xd4>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4a15      	ldr	r2, [pc, #84]	@ (800392c <prvAddNewTaskToReadyList+0xd8>)
 80038d6:	441a      	add	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7ff f8c5 	bl	8002a6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038e4:	f001 fa4a 	bl	8004d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <prvAddNewTaskToReadyList+0xcc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038f0:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <prvAddNewTaskToReadyList+0xc8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d207      	bcs.n	800390e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <prvAddNewTaskToReadyList+0xdc>)
 8003900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000cf8 	.word	0x20000cf8
 800391c:	20000824 	.word	0x20000824
 8003920:	20000d04 	.word	0x20000d04
 8003924:	20000d14 	.word	0x20000d14
 8003928:	20000d00 	.word	0x20000d00
 800392c:	20000828 	.word	0x20000828
 8003930:	e000ed04 	.word	0xe000ed04

08003934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d018      	beq.n	8003978 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003946:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <vTaskDelay+0x64>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <vTaskDelay+0x32>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60bb      	str	r3, [r7, #8]
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003966:	f000 f883 	bl	8003a70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800396a:	2100      	movs	r1, #0
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fcf3 	bl	8004358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003972:	f000 f88b 	bl	8003a8c <xTaskResumeAll>
 8003976:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d107      	bne.n	800398e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800397e:	4b07      	ldr	r3, [pc, #28]	@ (800399c <vTaskDelay+0x68>)
 8003980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000d20 	.word	0x20000d20
 800399c:	e000ed04 	.word	0xe000ed04

080039a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	@ 0x28
 80039a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ae:	463a      	mov	r2, r7
 80039b0:	1d39      	adds	r1, r7, #4
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fff8 	bl	80029ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	9202      	str	r2, [sp, #8]
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	2300      	movs	r3, #0
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	460a      	mov	r2, r1
 80039ce:	4922      	ldr	r1, [pc, #136]	@ (8003a58 <vTaskStartScheduler+0xb8>)
 80039d0:	4822      	ldr	r0, [pc, #136]	@ (8003a5c <vTaskStartScheduler+0xbc>)
 80039d2:	f7ff fe09 	bl	80035e8 <xTaskCreateStatic>
 80039d6:	4603      	mov	r3, r0
 80039d8:	4a21      	ldr	r2, [pc, #132]	@ (8003a60 <vTaskStartScheduler+0xc0>)
 80039da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039dc:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <vTaskStartScheduler+0xc0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039e4:	2301      	movs	r3, #1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e001      	b.n	80039ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d102      	bne.n	80039fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039f4:	f000 fd04 	bl	8004400 <xTimerCreateTimerTask>
 80039f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d116      	bne.n	8003a2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	613b      	str	r3, [r7, #16]
}
 8003a12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a14:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <vTaskStartScheduler+0xc4>)
 8003a16:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a1c:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <vTaskStartScheduler+0xc8>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a22:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <vTaskStartScheduler+0xcc>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a28:	f001 f8d2 	bl	8004bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a2c:	e00f      	b.n	8003a4e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d10b      	bne.n	8003a4e <vTaskStartScheduler+0xae>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60fb      	str	r3, [r7, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <vTaskStartScheduler+0xaa>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	0800630c 	.word	0x0800630c
 8003a5c:	08004091 	.word	0x08004091
 8003a60:	20000d1c 	.word	0x20000d1c
 8003a64:	20000d18 	.word	0x20000d18
 8003a68:	20000d04 	.word	0x20000d04
 8003a6c:	20000cfc 	.word	0x20000cfc

08003a70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <vTaskSuspendAll+0x18>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	4a03      	ldr	r2, [pc, #12]	@ (8003a88 <vTaskSuspendAll+0x18>)
 8003a7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	20000d20 	.word	0x20000d20

08003a8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a9a:	4b42      	ldr	r3, [pc, #264]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <xTaskResumeAll+0x2e>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	603b      	str	r3, [r7, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aba:	f001 f92d 	bl	8004d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003abe:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	4a37      	ldr	r2, [pc, #220]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003ac6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac8:	4b36      	ldr	r3, [pc, #216]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d162      	bne.n	8003b96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ad0:	4b35      	ldr	r3, [pc, #212]	@ (8003ba8 <xTaskResumeAll+0x11c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05e      	beq.n	8003b96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ad8:	e02f      	b.n	8003b3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ada:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <xTaskResumeAll+0x120>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3318      	adds	r3, #24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f81e 	bl	8002b28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff f819 	bl	8002b28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afa:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb0 <xTaskResumeAll+0x124>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d903      	bls.n	8003b0a <xTaskResumeAll+0x7e>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb0 <xTaskResumeAll+0x124>)
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4a27      	ldr	r2, [pc, #156]	@ (8003bb4 <xTaskResumeAll+0x128>)
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f7fe ffa4 	bl	8002a6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2a:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <xTaskResumeAll+0x12c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <xTaskResumeAll+0x120>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1cb      	bne.n	8003ada <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b48:	f000 fb58 	bl	80041fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <xTaskResumeAll+0x134>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b58:	f000 f846 	bl	8003be8 <xTaskIncrementTick>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b62:	4b16      	ldr	r3, [pc, #88]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f1      	bne.n	8003b58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <xTaskResumeAll+0x134>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b7a:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b86:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <xTaskResumeAll+0x138>)
 8003b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b96:	f001 f8f1 	bl	8004d7c <vPortExitCritical>

	return xAlreadyYielded;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000d20 	.word	0x20000d20
 8003ba8:	20000cf8 	.word	0x20000cf8
 8003bac:	20000cb8 	.word	0x20000cb8
 8003bb0:	20000d00 	.word	0x20000d00
 8003bb4:	20000828 	.word	0x20000828
 8003bb8:	20000824 	.word	0x20000824
 8003bbc:	20000d0c 	.word	0x20000d0c
 8003bc0:	20000d08 	.word	0x20000d08
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <xTaskGetTickCount+0x1c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bd4:	687b      	ldr	r3, [r7, #4]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000cfc 	.word	0x20000cfc

08003be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d30 <xTaskIncrementTick+0x148>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f040 8090 	bne.w	8003d1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8003d34 <xTaskIncrementTick+0x14c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c04:	4a4b      	ldr	r2, [pc, #300]	@ (8003d34 <xTaskIncrementTick+0x14c>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d121      	bne.n	8003c54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c10:	4b49      	ldr	r3, [pc, #292]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	603b      	str	r3, [r7, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	e7fd      	b.n	8003c2e <xTaskIncrementTick+0x46>
 8003c32:	4b41      	ldr	r3, [pc, #260]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	4b40      	ldr	r3, [pc, #256]	@ (8003d3c <xTaskIncrementTick+0x154>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4a3e      	ldr	r2, [pc, #248]	@ (8003d3c <xTaskIncrementTick+0x154>)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b3e      	ldr	r3, [pc, #248]	@ (8003d40 <xTaskIncrementTick+0x158>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d40 <xTaskIncrementTick+0x158>)
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	f000 fad4 	bl	80041fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c54:	4b3b      	ldr	r3, [pc, #236]	@ (8003d44 <xTaskIncrementTick+0x15c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d349      	bcc.n	8003cf2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c5e:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c68:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <xTaskIncrementTick+0x15c>)
 8003c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6e:	601a      	str	r2, [r3, #0]
					break;
 8003c70:	e03f      	b.n	8003cf2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c72:	4b31      	ldr	r3, [pc, #196]	@ (8003d38 <xTaskIncrementTick+0x150>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d203      	bcs.n	8003c92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d44 <xTaskIncrementTick+0x15c>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c90:	e02f      	b.n	8003cf2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe ff46 	bl	8002b28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	3318      	adds	r3, #24
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe ff3d 	bl	8002b28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb2:	4b25      	ldr	r3, [pc, #148]	@ (8003d48 <xTaskIncrementTick+0x160>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d903      	bls.n	8003cc2 <xTaskIncrementTick+0xda>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	4a22      	ldr	r2, [pc, #136]	@ (8003d48 <xTaskIncrementTick+0x160>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4a1f      	ldr	r2, [pc, #124]	@ (8003d4c <xTaskIncrementTick+0x164>)
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fe fec8 	bl	8002a6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <xTaskIncrementTick+0x168>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d3b8      	bcc.n	8003c5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf0:	e7b5      	b.n	8003c5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cf2:	4b17      	ldr	r3, [pc, #92]	@ (8003d50 <xTaskIncrementTick+0x168>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf8:	4914      	ldr	r1, [pc, #80]	@ (8003d4c <xTaskIncrementTick+0x164>)
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d901      	bls.n	8003d0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d0e:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <xTaskIncrementTick+0x16c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d16:	2301      	movs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e004      	b.n	8003d26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <xTaskIncrementTick+0x170>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	4a0d      	ldr	r2, [pc, #52]	@ (8003d58 <xTaskIncrementTick+0x170>)
 8003d24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d26:	697b      	ldr	r3, [r7, #20]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000d20 	.word	0x20000d20
 8003d34:	20000cfc 	.word	0x20000cfc
 8003d38:	20000cb0 	.word	0x20000cb0
 8003d3c:	20000cb4 	.word	0x20000cb4
 8003d40:	20000d10 	.word	0x20000d10
 8003d44:	20000d18 	.word	0x20000d18
 8003d48:	20000d00 	.word	0x20000d00
 8003d4c:	20000828 	.word	0x20000828
 8003d50:	20000824 	.word	0x20000824
 8003d54:	20000d0c 	.word	0x20000d0c
 8003d58:	20000d08 	.word	0x20000d08

08003d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d62:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <vTaskSwitchContext+0xa8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d6a:	4b27      	ldr	r3, [pc, #156]	@ (8003e08 <vTaskSwitchContext+0xac>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d70:	e042      	b.n	8003df8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003d72:	4b25      	ldr	r3, [pc, #148]	@ (8003e08 <vTaskSwitchContext+0xac>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d78:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <vTaskSwitchContext+0xb0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e011      	b.n	8003da4 <vTaskSwitchContext+0x48>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <vTaskSwitchContext+0x42>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	607b      	str	r3, [r7, #4]
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <vTaskSwitchContext+0x3e>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	491a      	ldr	r1, [pc, #104]	@ (8003e10 <vTaskSwitchContext+0xb4>)
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0e3      	beq.n	8003d80 <vTaskSwitchContext+0x24>
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <vTaskSwitchContext+0xb4>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d104      	bne.n	8003de8 <vTaskSwitchContext+0x8c>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4a09      	ldr	r2, [pc, #36]	@ (8003e14 <vTaskSwitchContext+0xb8>)
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4a06      	ldr	r2, [pc, #24]	@ (8003e0c <vTaskSwitchContext+0xb0>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000d20 	.word	0x20000d20
 8003e08:	20000d0c 	.word	0x20000d0c
 8003e0c:	20000d00 	.word	0x20000d00
 8003e10:	20000828 	.word	0x20000828
 8003e14:	20000824 	.word	0x20000824

08003e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	60fb      	str	r3, [r7, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e40:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <vTaskPlaceOnEventList+0x48>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3318      	adds	r3, #24
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fe fe34 	bl	8002ab6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e4e:	2101      	movs	r1, #1
 8003e50:	6838      	ldr	r0, [r7, #0]
 8003e52:	f000 fa81 	bl	8004358 <prvAddCurrentTaskToDelayedList>
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000824 	.word	0x20000824

08003e64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	617b      	str	r3, [r7, #20]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3318      	adds	r3, #24
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7fe fde9 	bl	8002a6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68b8      	ldr	r0, [r7, #8]
 8003eac:	f000 fa54 	bl	8004358 <prvAddCurrentTaskToDelayedList>
	}
 8003eb0:	bf00      	nop
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000824 	.word	0x20000824

08003ebc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	60fb      	str	r3, [r7, #12]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3318      	adds	r3, #24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fe1a 	bl	8002b28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f6c <xTaskRemoveFromEventList+0xb0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d11d      	bne.n	8003f38 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fe11 	bl	8002b28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0a:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <xTaskRemoveFromEventList+0xb4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d903      	bls.n	8003f1a <xTaskRemoveFromEventList+0x5e>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <xTaskRemoveFromEventList+0xb4>)
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <xTaskRemoveFromEventList+0xb8>)
 8003f28:	441a      	add	r2, r3
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fe fd9c 	bl	8002a6e <vListInsertEnd>
 8003f36:	e005      	b.n	8003f44 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3318      	adds	r3, #24
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	480e      	ldr	r0, [pc, #56]	@ (8003f78 <xTaskRemoveFromEventList+0xbc>)
 8003f40:	f7fe fd95 	bl	8002a6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f48:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <xTaskRemoveFromEventList+0xc0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d905      	bls.n	8003f5e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <xTaskRemoveFromEventList+0xc4>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e001      	b.n	8003f62 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f62:	697b      	ldr	r3, [r7, #20]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000d20 	.word	0x20000d20
 8003f70:	20000d00 	.word	0x20000d00
 8003f74:	20000828 	.word	0x20000828
 8003f78:	20000cb8 	.word	0x20000cb8
 8003f7c:	20000824 	.word	0x20000824
 8003f80:	20000d0c 	.word	0x20000d0c

08003f84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <vTaskInternalSetTimeOutState+0x24>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <vTaskInternalSetTimeOutState+0x28>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	605a      	str	r2, [r3, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	20000d10 	.word	0x20000d10
 8003fac:	20000cfc 	.word	0x20000cfc

08003fb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	613b      	str	r3, [r7, #16]
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60fb      	str	r3, [r7, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ff6:	f000 fe8f 	bl	8004d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <xTaskCheckForTimeOut+0xc0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d102      	bne.n	800401a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e023      	b.n	8004062 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <xTaskCheckForTimeOut+0xc4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d007      	beq.n	8004036 <xTaskCheckForTimeOut+0x86>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004030:	2301      	movs	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	e015      	b.n	8004062 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	d20b      	bcs.n	8004058 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	1ad2      	subs	r2, r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff99 	bl	8003f84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	e004      	b.n	8004062 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800405e:	2301      	movs	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004062:	f000 fe8b 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8004066:	69fb      	ldr	r3, [r7, #28]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000cfc 	.word	0x20000cfc
 8004074:	20000d10 	.word	0x20000d10

08004078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800407c:	4b03      	ldr	r3, [pc, #12]	@ (800408c <vTaskMissedYield+0x14>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	20000d0c 	.word	0x20000d0c

08004090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004098:	f000 f852 	bl	8004140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800409c:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <prvIdleTask+0x28>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d9f9      	bls.n	8004098 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <prvIdleTask+0x2c>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040b4:	e7f0      	b.n	8004098 <prvIdleTask+0x8>
 80040b6:	bf00      	nop
 80040b8:	20000828 	.word	0x20000828
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	e00c      	b.n	80040e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a12      	ldr	r2, [pc, #72]	@ (8004120 <prvInitialiseTaskLists+0x60>)
 80040d8:	4413      	add	r3, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fc9a 	bl	8002a14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3301      	adds	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b37      	cmp	r3, #55	@ 0x37
 80040ea:	d9ef      	bls.n	80040cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040ec:	480d      	ldr	r0, [pc, #52]	@ (8004124 <prvInitialiseTaskLists+0x64>)
 80040ee:	f7fe fc91 	bl	8002a14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040f2:	480d      	ldr	r0, [pc, #52]	@ (8004128 <prvInitialiseTaskLists+0x68>)
 80040f4:	f7fe fc8e 	bl	8002a14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040f8:	480c      	ldr	r0, [pc, #48]	@ (800412c <prvInitialiseTaskLists+0x6c>)
 80040fa:	f7fe fc8b 	bl	8002a14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040fe:	480c      	ldr	r0, [pc, #48]	@ (8004130 <prvInitialiseTaskLists+0x70>)
 8004100:	f7fe fc88 	bl	8002a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004104:	480b      	ldr	r0, [pc, #44]	@ (8004134 <prvInitialiseTaskLists+0x74>)
 8004106:	f7fe fc85 	bl	8002a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800410a:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <prvInitialiseTaskLists+0x78>)
 800410c:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <prvInitialiseTaskLists+0x64>)
 800410e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <prvInitialiseTaskLists+0x7c>)
 8004112:	4a05      	ldr	r2, [pc, #20]	@ (8004128 <prvInitialiseTaskLists+0x68>)
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000828 	.word	0x20000828
 8004124:	20000c88 	.word	0x20000c88
 8004128:	20000c9c 	.word	0x20000c9c
 800412c:	20000cb8 	.word	0x20000cb8
 8004130:	20000ccc 	.word	0x20000ccc
 8004134:	20000ce4 	.word	0x20000ce4
 8004138:	20000cb0 	.word	0x20000cb0
 800413c:	20000cb4 	.word	0x20000cb4

08004140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004146:	e019      	b.n	800417c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004148:	f000 fde6 	bl	8004d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414c:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <prvCheckTasksWaitingTermination+0x50>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fce5 	bl	8002b28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <prvCheckTasksWaitingTermination+0x54>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	4a0b      	ldr	r2, [pc, #44]	@ (8004194 <prvCheckTasksWaitingTermination+0x54>)
 8004166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3b01      	subs	r3, #1
 800416e:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 8004170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004172:	f000 fe03 	bl	8004d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f810 	bl	800419c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800417c:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <prvCheckTasksWaitingTermination+0x58>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e1      	bne.n	8004148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000ccc 	.word	0x20000ccc
 8004194:	20000cf8 	.word	0x20000cf8
 8004198:	20000ce0 	.word	0x20000ce0

0800419c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ffa0 	bl	80050f8 <vPortFree>
				vPortFree( pxTCB );
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 ff9d 	bl	80050f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041be:	e019      	b.n	80041f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d103      	bne.n	80041d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 ff94 	bl	80050f8 <vPortFree>
	}
 80041d0:	e010      	b.n	80041f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d00b      	beq.n	80041f4 <prvDeleteTCB+0x58>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <prvDeleteTCB+0x54>
	}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800420c:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004214:	e008      	b.n	8004228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a04      	ldr	r2, [pc, #16]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000cb0 	.word	0x20000cb0
 8004238:	20000d18 	.word	0x20000d18

0800423c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <xTaskGetSchedulerState+0x34>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800424a:	2301      	movs	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	e008      	b.n	8004262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004250:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <xTaskGetSchedulerState+0x38>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004258:	2302      	movs	r3, #2
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	e001      	b.n	8004262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004262:	687b      	ldr	r3, [r7, #4]
	}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20000d04 	.word	0x20000d04
 8004274:	20000d20 	.word	0x20000d20

08004278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d058      	beq.n	8004340 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800428e:	4b2f      	ldr	r3, [pc, #188]	@ (800434c <xTaskPriorityDisinherit+0xd4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d00b      	beq.n	80042b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	60fb      	str	r3, [r7, #12]
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60bb      	str	r3, [r7, #8]
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d02c      	beq.n	8004340 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d128      	bne.n	8004340 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fc18 	bl	8002b28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004310:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <xTaskPriorityDisinherit+0xd8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d903      	bls.n	8004320 <xTaskPriorityDisinherit+0xa8>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <xTaskPriorityDisinherit+0xd8>)
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <xTaskPriorityDisinherit+0xdc>)
 800432e:	441a      	add	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fe fb99 	bl	8002a6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004340:	697b      	ldr	r3, [r7, #20]
	}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000824 	.word	0x20000824
 8004350:	20000d00 	.word	0x20000d00
 8004354:	20000828 	.word	0x20000828

08004358 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004362:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004368:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fbda 	bl	8002b28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d10a      	bne.n	8004392 <prvAddCurrentTaskToDelayedList+0x3a>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004382:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4819      	ldr	r0, [pc, #100]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800438c:	f7fe fb6f 	bl	8002a6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004390:	e026      	b.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4413      	add	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d209      	bcs.n	80043be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043aa:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f7fe fb7d 	bl	8002ab6 <vListInsert>
}
 80043bc:	e010      	b.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043be:	4b0e      	ldr	r3, [pc, #56]	@ (80043f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7fe fb73 	bl	8002ab6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d0:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d202      	bcs.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043da:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6013      	str	r3, [r2, #0]
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000cfc 	.word	0x20000cfc
 80043ec:	20000824 	.word	0x20000824
 80043f0:	20000ce4 	.word	0x20000ce4
 80043f4:	20000cb4 	.word	0x20000cb4
 80043f8:	20000cb0 	.word	0x20000cb0
 80043fc:	20000d18 	.word	0x20000d18

08004400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800440a:	f000 fb13 	bl	8004a34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800440e:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <xTimerCreateTimerTask+0x84>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d021      	beq.n	800445a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800441e:	1d3a      	adds	r2, r7, #4
 8004420:	f107 0108 	add.w	r1, r7, #8
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe fad9 	bl	80029e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	9202      	str	r2, [sp, #8]
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	2302      	movs	r3, #2
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2300      	movs	r3, #0
 800443e:	460a      	mov	r2, r1
 8004440:	4911      	ldr	r1, [pc, #68]	@ (8004488 <xTimerCreateTimerTask+0x88>)
 8004442:	4812      	ldr	r0, [pc, #72]	@ (800448c <xTimerCreateTimerTask+0x8c>)
 8004444:	f7ff f8d0 	bl	80035e8 <xTaskCreateStatic>
 8004448:	4603      	mov	r3, r0
 800444a:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <xTimerCreateTimerTask+0x90>)
 800444c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <xTimerCreateTimerTask+0x90>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	613b      	str	r3, [r7, #16]
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004478:	697b      	ldr	r3, [r7, #20]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000d54 	.word	0x20000d54
 8004488:	08006314 	.word	0x08006314
 800448c:	080045cd 	.word	0x080045cd
 8004490:	20000d58 	.word	0x20000d58

08004494 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	@ 0x28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	623b      	str	r3, [r7, #32]
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044c4:	4b19      	ldr	r3, [pc, #100]	@ (800452c <xTimerGenericCommand+0x98>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d02a      	beq.n	8004522 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	dc18      	bgt.n	8004510 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044de:	f7ff fead 	bl	800423c <xTaskGetSchedulerState>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d109      	bne.n	80044fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044e8:	4b10      	ldr	r3, [pc, #64]	@ (800452c <xTimerGenericCommand+0x98>)
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	f107 0110 	add.w	r1, r7, #16
 80044f0:	2300      	movs	r3, #0
 80044f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f4:	f7fe fc88 	bl	8002e08 <xQueueGenericSend>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80044fa:	e012      	b.n	8004522 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <xTimerGenericCommand+0x98>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	f107 0110 	add.w	r1, r7, #16
 8004504:	2300      	movs	r3, #0
 8004506:	2200      	movs	r2, #0
 8004508:	f7fe fc7e 	bl	8002e08 <xQueueGenericSend>
 800450c:	6278      	str	r0, [r7, #36]	@ 0x24
 800450e:	e008      	b.n	8004522 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004510:	4b06      	ldr	r3, [pc, #24]	@ (800452c <xTimerGenericCommand+0x98>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	f107 0110 	add.w	r1, r7, #16
 8004518:	2300      	movs	r3, #0
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	f7fe fd76 	bl	800300c <xQueueGenericSendFromISR>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004524:	4618      	mov	r0, r3
 8004526:	3728      	adds	r7, #40	@ 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000d54 	.word	0x20000d54

08004530 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800453a:	4b23      	ldr	r3, [pc, #140]	@ (80045c8 <prvProcessExpiredTimer+0x98>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3304      	adds	r3, #4
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe faed 	bl	8002b28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d023      	beq.n	80045a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	18d1      	adds	r1, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	6978      	ldr	r0, [r7, #20]
 800456a:	f000 f8d5 	bl	8004718 <prvInsertTimerInActiveList>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004574:	2300      	movs	r3, #0
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	2100      	movs	r1, #0
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff ff88 	bl	8004494 <xTimerGenericCommand>
 8004584:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d114      	bne.n	80045b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	4798      	blx	r3
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000d4c 	.word	0x20000d4c

080045cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f859 	bl	8004690 <prvGetNextExpireTime>
 80045de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4619      	mov	r1, r3
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f805 	bl	80045f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045ea:	f000 f8d7 	bl	800479c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ee:	bf00      	nop
 80045f0:	e7f0      	b.n	80045d4 <prvTimerTask+0x8>
	...

080045f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045fe:	f7ff fa37 	bl	8003a70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f866 	bl	80046d8 <prvSampleTimeNow>
 800460c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d130      	bne.n	8004676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <prvProcessTimerOrBlockTask+0x3c>
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	429a      	cmp	r2, r3
 8004620:	d806      	bhi.n	8004630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004622:	f7ff fa33 	bl	8003a8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff81 	bl	8004530 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800462e:	e024      	b.n	800467a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004636:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <prvProcessTimerOrBlockTask+0x90>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <prvProcessTimerOrBlockTask+0x50>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <prvProcessTimerOrBlockTask+0x52>
 8004644:	2300      	movs	r3, #0
 8004646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004648:	4b0f      	ldr	r3, [pc, #60]	@ (8004688 <prvProcessTimerOrBlockTask+0x94>)
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	4619      	mov	r1, r3
 8004656:	f7fe ff93 	bl	8003580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800465a:	f7ff fa17 	bl	8003a8c <xTaskResumeAll>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004664:	4b09      	ldr	r3, [pc, #36]	@ (800468c <prvProcessTimerOrBlockTask+0x98>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
}
 8004674:	e001      	b.n	800467a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004676:	f7ff fa09 	bl	8003a8c <xTaskResumeAll>
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000d50 	.word	0x20000d50
 8004688:	20000d54 	.word	0x20000d54
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004698:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <prvGetNextExpireTime+0x44>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <prvGetNextExpireTime+0x16>
 80046a2:	2201      	movs	r2, #1
 80046a4:	e000      	b.n	80046a8 <prvGetNextExpireTime+0x18>
 80046a6:	2200      	movs	r2, #0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046b4:	4b07      	ldr	r3, [pc, #28]	@ (80046d4 <prvGetNextExpireTime+0x44>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e001      	b.n	80046c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046c4:	68fb      	ldr	r3, [r7, #12]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000d4c 	.word	0x20000d4c

080046d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046e0:	f7ff fa72 	bl	8003bc8 <xTaskGetTickCount>
 80046e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <prvSampleTimeNow+0x3c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d205      	bcs.n	80046fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046f0:	f000 f93a 	bl	8004968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e002      	b.n	8004702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004702:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <prvSampleTimeNow+0x3c>)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000d5c 	.word	0x20000d5c

08004718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d812      	bhi.n	8004764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e01b      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <prvInsertTimerInActiveList+0x7c>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe f9aa 	bl	8002ab6 <vListInsert>
 8004762:	e012      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d206      	bcs.n	800477a <prvInsertTimerInActiveList+0x62>
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d302      	bcc.n	800477a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e007      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <prvInsertTimerInActiveList+0x80>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe f996 	bl	8002ab6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800478a:	697b      	ldr	r3, [r7, #20]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000d50 	.word	0x20000d50
 8004798:	20000d4c 	.word	0x20000d4c

0800479c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	@ 0x38
 80047a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047a2:	e0ce      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da19      	bge.n	80047de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	3304      	adds	r3, #4
 80047ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61fb      	str	r3, [r7, #28]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d4:	6850      	ldr	r0, [r2, #4]
 80047d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d8:	6892      	ldr	r2, [r2, #8]
 80047da:	4611      	mov	r1, r2
 80047dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f2c0 80ae 	blt.w	8004942 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	3304      	adds	r3, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe f996 	bl	8002b28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047fc:	463b      	mov	r3, r7
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff6a 	bl	80046d8 <prvSampleTimeNow>
 8004804:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b09      	cmp	r3, #9
 800480a:	f200 8097 	bhi.w	800493c <prvProcessReceivedCommands+0x1a0>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <prvProcessReceivedCommands+0x78>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	0800483d 	.word	0x0800483d
 8004818:	0800483d 	.word	0x0800483d
 800481c:	0800483d 	.word	0x0800483d
 8004820:	080048b3 	.word	0x080048b3
 8004824:	080048c7 	.word	0x080048c7
 8004828:	08004913 	.word	0x08004913
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800483d 	.word	0x0800483d
 8004834:	080048b3 	.word	0x080048b3
 8004838:	080048c7 	.word	0x080048c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	18d1      	adds	r1, r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800485c:	f7ff ff5c 	bl	8004718 <prvInsertTimerInActiveList>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d06c      	beq.n	8004940 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800486c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d061      	beq.n	8004940 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	441a      	add	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2300      	movs	r3, #0
 800488a:	2100      	movs	r1, #0
 800488c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800488e:	f7ff fe01 	bl	8004494 <xTimerGenericCommand>
 8004892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d152      	bne.n	8004940 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61bb      	str	r3, [r7, #24]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048c4:	e03d      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	617b      	str	r3, [r7, #20]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	18d1      	adds	r1, r2, r3
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800490c:	f7ff ff04 	bl	8004718 <prvInsertTimerInActiveList>
					break;
 8004910:	e017      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004922:	f000 fbe9 	bl	80050f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004926:	e00c      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800493a:	e002      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800493c:	bf00      	nop
 800493e:	e000      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
					break;
 8004940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004942:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <prvProcessReceivedCommands+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1d39      	adds	r1, r7, #4
 8004948:	2200      	movs	r2, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fbfc 	bl	8003148 <xQueueReceive>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f47f af26 	bne.w	80047a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3730      	adds	r7, #48	@ 0x30
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000d54 	.word	0x20000d54

08004968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496e:	e049      	b.n	8004a04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004970:	4b2e      	ldr	r3, [pc, #184]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe f8cd 	bl	8002b28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02f      	beq.n	8004a04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90e      	bls.n	80049d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049c2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fe f872 	bl	8002ab6 <vListInsert>
 80049d2:	e017      	b.n	8004a04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	2100      	movs	r1, #0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fd58 	bl	8004494 <xTimerGenericCommand>
 80049e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10b      	bne.n	8004a04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	603b      	str	r3, [r7, #0]
}
 80049fe:	bf00      	nop
 8004a00:	bf00      	nop
 8004a02:	e7fd      	b.n	8004a00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a04:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1b0      	bne.n	8004970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <prvSwitchTimerLists+0xc8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a04      	ldr	r2, [pc, #16]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a1c:	4a04      	ldr	r2, [pc, #16]	@ (8004a30 <prvSwitchTimerLists+0xc8>)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6013      	str	r3, [r2, #0]
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000d4c 	.word	0x20000d4c
 8004a30:	20000d50 	.word	0x20000d50

08004a34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a3a:	f000 f96d 	bl	8004d18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d120      	bne.n	8004a88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a46:	4814      	ldr	r0, [pc, #80]	@ (8004a98 <prvCheckForValidListAndQueue+0x64>)
 8004a48:	f7fd ffe4 	bl	8002a14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a4c:	4813      	ldr	r0, [pc, #76]	@ (8004a9c <prvCheckForValidListAndQueue+0x68>)
 8004a4e:	f7fd ffe1 	bl	8002a14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a52:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <prvCheckForValidListAndQueue+0x6c>)
 8004a54:	4a10      	ldr	r2, [pc, #64]	@ (8004a98 <prvCheckForValidListAndQueue+0x64>)
 8004a56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a58:	4b12      	ldr	r3, [pc, #72]	@ (8004aa4 <prvCheckForValidListAndQueue+0x70>)
 8004a5a:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <prvCheckForValidListAndQueue+0x68>)
 8004a5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <prvCheckForValidListAndQueue+0x74>)
 8004a64:	4a11      	ldr	r2, [pc, #68]	@ (8004aac <prvCheckForValidListAndQueue+0x78>)
 8004a66:	2110      	movs	r1, #16
 8004a68:	200a      	movs	r0, #10
 8004a6a:	f7fe f8f1 	bl	8002c50 <xQueueGenericCreateStatic>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a74:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	490b      	ldr	r1, [pc, #44]	@ (8004ab0 <prvCheckForValidListAndQueue+0x7c>)
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe fd52 	bl	800352c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a88:	f000 f978 	bl	8004d7c <vPortExitCritical>
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000d54 	.word	0x20000d54
 8004a98:	20000d24 	.word	0x20000d24
 8004a9c:	20000d38 	.word	0x20000d38
 8004aa0:	20000d4c 	.word	0x20000d4c
 8004aa4:	20000d50 	.word	0x20000d50
 8004aa8:	20000e00 	.word	0x20000e00
 8004aac:	20000d60 	.word	0x20000d60
 8004ab0:	0800631c 	.word	0x0800631c

08004ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b04      	subs	r3, #4
 8004ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3b04      	subs	r3, #4
 8004ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <pxPortInitialiseStack+0x64>)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3b14      	subs	r3, #20
 8004aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b04      	subs	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f06f 0202 	mvn.w	r2, #2
 8004b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b20      	subs	r3, #32
 8004b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	08004b1d 	.word	0x08004b1d

08004b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b26:	4b13      	ldr	r3, [pc, #76]	@ (8004b74 <prvTaskExitError+0x58>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d00b      	beq.n	8004b48 <prvTaskExitError+0x2c>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <prvTaskExitError+0x28>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	60bb      	str	r3, [r7, #8]
}
 8004b5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b5c:	bf00      	nop
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0fc      	beq.n	8004b5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
	...

08004b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b80:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <pxCurrentTCBConst2>)
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	f380 8809 	msr	PSP, r0
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8811 	msr	BASEPRI, r0
 8004b9a:	4770      	bx	lr
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst2>:
 8004ba0:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ba8:	4808      	ldr	r0, [pc, #32]	@ (8004bcc <prvPortStartFirstTask+0x24>)
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f380 8808 	msr	MSP, r0
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8814 	msr	CONTROL, r0
 8004bba:	b662      	cpsie	i
 8004bbc:	b661      	cpsie	f
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	df00      	svc	0
 8004bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bca:	bf00      	nop
 8004bcc:	e000ed08 	.word	0xe000ed08

08004bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bd6:	4b47      	ldr	r3, [pc, #284]	@ (8004cf4 <xPortStartScheduler+0x124>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a47      	ldr	r2, [pc, #284]	@ (8004cf8 <xPortStartScheduler+0x128>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10b      	bne.n	8004bf8 <xPortStartScheduler+0x28>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	613b      	str	r3, [r7, #16]
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <xPortStartScheduler+0x124>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8004cfc <xPortStartScheduler+0x12c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10b      	bne.n	8004c1a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60fb      	str	r3, [r7, #12]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c1a:	4b39      	ldr	r3, [pc, #228]	@ (8004d00 <xPortStartScheduler+0x130>)
 8004c1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	22ff      	movs	r2, #255	@ 0xff
 8004c2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <xPortStartScheduler+0x134>)
 8004c40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c42:	4b31      	ldr	r3, [pc, #196]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c44:	2207      	movs	r2, #7
 8004c46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c48:	e009      	b.n	8004c5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4a2d      	ldr	r2, [pc, #180]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b80      	cmp	r3, #128	@ 0x80
 8004c68:	d0ef      	beq.n	8004c4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c6a:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1c3 0307 	rsb	r3, r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d00b      	beq.n	8004c8e <xPortStartScheduler+0xbe>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60bb      	str	r3, [r7, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ca0:	4a19      	ldr	r2, [pc, #100]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cac:	4b17      	ldr	r3, [pc, #92]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cc4:	f000 f8da 	bl	8004e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cc8:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <xPortStartScheduler+0x140>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cce:	f000 f8f9 	bl	8004ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <xPortStartScheduler+0x144>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d14 <xPortStartScheduler+0x144>)
 8004cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cde:	f7ff ff63 	bl	8004ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ce2:	f7ff f83b 	bl	8003d5c <vTaskSwitchContext>
	prvTaskExitError();
 8004ce6:	f7ff ff19 	bl	8004b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	e000ed00 	.word	0xe000ed00
 8004cf8:	410fc271 	.word	0x410fc271
 8004cfc:	410fc270 	.word	0x410fc270
 8004d00:	e000e400 	.word	0xe000e400
 8004d04:	20000e50 	.word	0x20000e50
 8004d08:	20000e54 	.word	0x20000e54
 8004d0c:	e000ed20 	.word	0xe000ed20
 8004d10:	2000000c 	.word	0x2000000c
 8004d14:	e000ef34 	.word	0xe000ef34

08004d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	607b      	str	r3, [r7, #4]
}
 8004d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d32:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	4a0e      	ldr	r2, [pc, #56]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d110      	bne.n	8004d66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d44:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <vPortEnterCritical+0x60>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	603b      	str	r3, [r7, #0]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <vPortEnterCritical+0x4a>
	}
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d82:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <vPortExitCritical+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <vPortExitCritical+0x26>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	607b      	str	r3, [r7, #4]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004da2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <vPortExitCritical+0x50>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	4a08      	ldr	r2, [pc, #32]	@ (8004dcc <vPortExitCritical+0x50>)
 8004daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <vPortExitCritical+0x50>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <vPortExitCritical+0x44>
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f383 8811 	msr	BASEPRI, r3
}
 8004dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	2000000c 	.word	0x2000000c

08004dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dd0:	f3ef 8009 	mrs	r0, PSP
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <pxCurrentTCBConst>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f01e 0f10 	tst.w	lr, #16
 8004de0:	bf08      	it	eq
 8004de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004df4:	f380 8811 	msr	BASEPRI, r0
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f7fe ffac 	bl	8003d5c <vTaskSwitchContext>
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f380 8811 	msr	BASEPRI, r0
 8004e0c:	bc09      	pop	{r0, r3}
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	6808      	ldr	r0, [r1, #0]
 8004e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e16:	f01e 0f10 	tst.w	lr, #16
 8004e1a:	bf08      	it	eq
 8004e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e20:	f380 8809 	msr	PSP, r0
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst>:
 8004e30:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e52:	f7fe fec9 	bl	8003be8 <xTaskIncrementTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <xPortSysTickHandler+0x40>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f383 8811 	msr	BASEPRI, r3
}
 8004e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <vPortSetupTimerInterrupt+0x38>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <vPortSetupTimerInterrupt+0x3c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <vPortSetupTimerInterrupt+0x40>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <vPortSetupTimerInterrupt+0x44>)
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e9e:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	e000e010 	.word	0xe000e010
 8004eb4:	e000e018 	.word	0xe000e018
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	10624dd3 	.word	0x10624dd3
 8004ec0:	e000e014 	.word	0xe000e014

08004ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ed4 <vPortEnableVFP+0x10>
 8004ec8:	6801      	ldr	r1, [r0, #0]
 8004eca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ece:	6001      	str	r1, [r0, #0]
 8004ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed88 	.word	0xe000ed88

08004ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ede:	f3ef 8305 	mrs	r3, IPSR
 8004ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d915      	bls.n	8004f16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eea:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <vPortValidateInterruptPriority+0x74>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ef4:	4b16      	ldr	r3, [pc, #88]	@ (8004f50 <vPortValidateInterruptPriority+0x78>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	7afa      	ldrb	r2, [r7, #11]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d20b      	bcs.n	8004f16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f16:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <vPortValidateInterruptPriority+0x7c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <vPortValidateInterruptPriority+0x80>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90b      	bls.n	8004f3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	603b      	str	r3, [r7, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <vPortValidateInterruptPriority+0x62>
	}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e3f0 	.word	0xe000e3f0
 8004f50:	20000e50 	.word	0x20000e50
 8004f54:	e000ed0c 	.word	0xe000ed0c
 8004f58:	20000e54 	.word	0x20000e54

08004f5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f68:	f7fe fd82 	bl	8003a70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80050e0 <pvPortMalloc+0x184>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f74:	f000 f924 	bl	80051c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f78:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <pvPortMalloc+0x188>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 8095 	bne.w	80050b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01e      	beq.n	8004fca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d015      	beq.n	8004fca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f023 0307 	bic.w	r3, r3, #7
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <pvPortMalloc+0x6e>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	617b      	str	r3, [r7, #20]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d06f      	beq.n	80050b0 <pvPortMalloc+0x154>
 8004fd0:	4b45      	ldr	r3, [pc, #276]	@ (80050e8 <pvPortMalloc+0x18c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d86a      	bhi.n	80050b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fda:	4b44      	ldr	r3, [pc, #272]	@ (80050ec <pvPortMalloc+0x190>)
 8004fdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fde:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <pvPortMalloc+0x190>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fe4:	e004      	b.n	8004ff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d903      	bls.n	8005002 <pvPortMalloc+0xa6>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f1      	bne.n	8004fe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <pvPortMalloc+0x184>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005008:	429a      	cmp	r2, r3
 800500a:	d051      	beq.n	80050b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2208      	movs	r2, #8
 8005012:	4413      	add	r3, r2
 8005014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1ad2      	subs	r2, r2, r3
 8005026:	2308      	movs	r3, #8
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	429a      	cmp	r2, r3
 800502c:	d920      	bls.n	8005070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <pvPortMalloc+0xfc>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800506a:	69b8      	ldr	r0, [r7, #24]
 800506c:	f000 f90a 	bl	8005284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <pvPortMalloc+0x18c>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <pvPortMalloc+0x18c>)
 800507c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800507e:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <pvPortMalloc+0x18c>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <pvPortMalloc+0x194>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d203      	bcs.n	8005092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800508a:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <pvPortMalloc+0x18c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <pvPortMalloc+0x194>)
 8005090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <pvPortMalloc+0x188>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	431a      	orrs	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050a6:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <pvPortMalloc+0x198>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a11      	ldr	r2, [pc, #68]	@ (80050f4 <pvPortMalloc+0x198>)
 80050ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050b0:	f7fe fcec 	bl	8003a8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <pvPortMalloc+0x17a>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <pvPortMalloc+0x176>
	return pvReturn;
 80050d6:	69fb      	ldr	r3, [r7, #28]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3728      	adds	r7, #40	@ 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20004a60 	.word	0x20004a60
 80050e4:	20004a74 	.word	0x20004a74
 80050e8:	20004a64 	.word	0x20004a64
 80050ec:	20004a58 	.word	0x20004a58
 80050f0:	20004a68 	.word	0x20004a68
 80050f4:	20004a6c 	.word	0x20004a6c

080050f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04f      	beq.n	80051aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800510a:	2308      	movs	r3, #8
 800510c:	425b      	negs	r3, r3
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <vPortFree+0xbc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <vPortFree+0x46>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <vPortFree+0x66>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60bb      	str	r3, [r7, #8]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b14      	ldr	r3, [pc, #80]	@ (80051b4 <vPortFree+0xbc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01e      	beq.n	80051aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11a      	bne.n	80051aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <vPortFree+0xbc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	43db      	mvns	r3, r3
 800517e:	401a      	ands	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005184:	f7fe fc74 	bl	8003a70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <vPortFree+0xc0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4413      	add	r3, r2
 8005192:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <vPortFree+0xc0>)
 8005194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005196:	6938      	ldr	r0, [r7, #16]
 8005198:	f000 f874 	bl	8005284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800519c:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <vPortFree+0xc4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a06      	ldr	r2, [pc, #24]	@ (80051bc <vPortFree+0xc4>)
 80051a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051a6:	f7fe fc71 	bl	8003a8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20004a74 	.word	0x20004a74
 80051b8:	20004a64 	.word	0x20004a64
 80051bc:	20004a70 	.word	0x20004a70

080051c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051cc:	4b27      	ldr	r3, [pc, #156]	@ (800526c <prvHeapInit+0xac>)
 80051ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3307      	adds	r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0307 	bic.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <prvHeapInit+0xac>)
 80051f0:	4413      	add	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <prvHeapInit+0xb0>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005270 <prvHeapInit+0xb0>)
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800520c:	2208      	movs	r2, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <prvHeapInit+0xb4>)
 8005220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <prvHeapInit+0xb4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800522a:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <prvHeapInit+0xb4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005240:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <prvHeapInit+0xb4>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a0a      	ldr	r2, [pc, #40]	@ (8005278 <prvHeapInit+0xb8>)
 800524e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a09      	ldr	r2, [pc, #36]	@ (800527c <prvHeapInit+0xbc>)
 8005256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005258:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <prvHeapInit+0xc0>)
 800525a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	20000e58 	.word	0x20000e58
 8005270:	20004a58 	.word	0x20004a58
 8005274:	20004a60 	.word	0x20004a60
 8005278:	20004a68 	.word	0x20004a68
 800527c:	20004a64 	.word	0x20004a64
 8005280:	20004a74 	.word	0x20004a74

08005284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800528c:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <prvInsertBlockIntoFreeList+0xac>)
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e002      	b.n	8005298 <prvInsertBlockIntoFreeList+0x14>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d8f7      	bhi.n	8005292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4413      	add	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d108      	bne.n	80052c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d118      	bne.n	800530c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d00d      	beq.n	8005302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	441a      	add	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e008      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005302:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e003      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d002      	beq.n	8005322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20004a58 	.word	0x20004a58
 8005334:	20004a60 	.word	0x20004a60

08005338 <__sflush_r>:
 8005338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800533c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005340:	0716      	lsls	r6, r2, #28
 8005342:	4605      	mov	r5, r0
 8005344:	460c      	mov	r4, r1
 8005346:	d454      	bmi.n	80053f2 <__sflush_r+0xba>
 8005348:	684b      	ldr	r3, [r1, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	dc02      	bgt.n	8005354 <__sflush_r+0x1c>
 800534e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	dd48      	ble.n	80053e6 <__sflush_r+0xae>
 8005354:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005356:	2e00      	cmp	r6, #0
 8005358:	d045      	beq.n	80053e6 <__sflush_r+0xae>
 800535a:	2300      	movs	r3, #0
 800535c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005360:	682f      	ldr	r7, [r5, #0]
 8005362:	6a21      	ldr	r1, [r4, #32]
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	d030      	beq.n	80053ca <__sflush_r+0x92>
 8005368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	0759      	lsls	r1, r3, #29
 800536e:	d505      	bpl.n	800537c <__sflush_r+0x44>
 8005370:	6863      	ldr	r3, [r4, #4]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005376:	b10b      	cbz	r3, 800537c <__sflush_r+0x44>
 8005378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800537a:	1ad2      	subs	r2, r2, r3
 800537c:	2300      	movs	r3, #0
 800537e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005380:	6a21      	ldr	r1, [r4, #32]
 8005382:	4628      	mov	r0, r5
 8005384:	47b0      	blx	r6
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	d106      	bne.n	800539a <__sflush_r+0x62>
 800538c:	6829      	ldr	r1, [r5, #0]
 800538e:	291d      	cmp	r1, #29
 8005390:	d82b      	bhi.n	80053ea <__sflush_r+0xb2>
 8005392:	4a2a      	ldr	r2, [pc, #168]	@ (800543c <__sflush_r+0x104>)
 8005394:	410a      	asrs	r2, r1
 8005396:	07d6      	lsls	r6, r2, #31
 8005398:	d427      	bmi.n	80053ea <__sflush_r+0xb2>
 800539a:	2200      	movs	r2, #0
 800539c:	6062      	str	r2, [r4, #4]
 800539e:	04d9      	lsls	r1, r3, #19
 80053a0:	6922      	ldr	r2, [r4, #16]
 80053a2:	6022      	str	r2, [r4, #0]
 80053a4:	d504      	bpl.n	80053b0 <__sflush_r+0x78>
 80053a6:	1c42      	adds	r2, r0, #1
 80053a8:	d101      	bne.n	80053ae <__sflush_r+0x76>
 80053aa:	682b      	ldr	r3, [r5, #0]
 80053ac:	b903      	cbnz	r3, 80053b0 <__sflush_r+0x78>
 80053ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80053b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053b2:	602f      	str	r7, [r5, #0]
 80053b4:	b1b9      	cbz	r1, 80053e6 <__sflush_r+0xae>
 80053b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053ba:	4299      	cmp	r1, r3
 80053bc:	d002      	beq.n	80053c4 <__sflush_r+0x8c>
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 fb0e 	bl	80059e0 <_free_r>
 80053c4:	2300      	movs	r3, #0
 80053c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80053c8:	e00d      	b.n	80053e6 <__sflush_r+0xae>
 80053ca:	2301      	movs	r3, #1
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b0      	blx	r6
 80053d0:	4602      	mov	r2, r0
 80053d2:	1c50      	adds	r0, r2, #1
 80053d4:	d1c9      	bne.n	800536a <__sflush_r+0x32>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0c6      	beq.n	800536a <__sflush_r+0x32>
 80053dc:	2b1d      	cmp	r3, #29
 80053de:	d001      	beq.n	80053e4 <__sflush_r+0xac>
 80053e0:	2b16      	cmp	r3, #22
 80053e2:	d11e      	bne.n	8005422 <__sflush_r+0xea>
 80053e4:	602f      	str	r7, [r5, #0]
 80053e6:	2000      	movs	r0, #0
 80053e8:	e022      	b.n	8005430 <__sflush_r+0xf8>
 80053ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ee:	b21b      	sxth	r3, r3
 80053f0:	e01b      	b.n	800542a <__sflush_r+0xf2>
 80053f2:	690f      	ldr	r7, [r1, #16]
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	d0f6      	beq.n	80053e6 <__sflush_r+0xae>
 80053f8:	0793      	lsls	r3, r2, #30
 80053fa:	680e      	ldr	r6, [r1, #0]
 80053fc:	bf08      	it	eq
 80053fe:	694b      	ldreq	r3, [r1, #20]
 8005400:	600f      	str	r7, [r1, #0]
 8005402:	bf18      	it	ne
 8005404:	2300      	movne	r3, #0
 8005406:	eba6 0807 	sub.w	r8, r6, r7
 800540a:	608b      	str	r3, [r1, #8]
 800540c:	f1b8 0f00 	cmp.w	r8, #0
 8005410:	dde9      	ble.n	80053e6 <__sflush_r+0xae>
 8005412:	6a21      	ldr	r1, [r4, #32]
 8005414:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005416:	4643      	mov	r3, r8
 8005418:	463a      	mov	r2, r7
 800541a:	4628      	mov	r0, r5
 800541c:	47b0      	blx	r6
 800541e:	2800      	cmp	r0, #0
 8005420:	dc08      	bgt.n	8005434 <__sflush_r+0xfc>
 8005422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005434:	4407      	add	r7, r0
 8005436:	eba8 0800 	sub.w	r8, r8, r0
 800543a:	e7e7      	b.n	800540c <__sflush_r+0xd4>
 800543c:	dfbffffe 	.word	0xdfbffffe

08005440 <_fflush_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	4605      	mov	r5, r0
 8005446:	460c      	mov	r4, r1
 8005448:	b913      	cbnz	r3, 8005450 <_fflush_r+0x10>
 800544a:	2500      	movs	r5, #0
 800544c:	4628      	mov	r0, r5
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	b118      	cbz	r0, 800545a <_fflush_r+0x1a>
 8005452:	6a03      	ldr	r3, [r0, #32]
 8005454:	b90b      	cbnz	r3, 800545a <_fflush_r+0x1a>
 8005456:	f000 f8bb 	bl	80055d0 <__sinit>
 800545a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f3      	beq.n	800544a <_fflush_r+0xa>
 8005462:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005464:	07d0      	lsls	r0, r2, #31
 8005466:	d404      	bmi.n	8005472 <_fflush_r+0x32>
 8005468:	0599      	lsls	r1, r3, #22
 800546a:	d402      	bmi.n	8005472 <_fflush_r+0x32>
 800546c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800546e:	f000 faa6 	bl	80059be <__retarget_lock_acquire_recursive>
 8005472:	4628      	mov	r0, r5
 8005474:	4621      	mov	r1, r4
 8005476:	f7ff ff5f 	bl	8005338 <__sflush_r>
 800547a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800547c:	07da      	lsls	r2, r3, #31
 800547e:	4605      	mov	r5, r0
 8005480:	d4e4      	bmi.n	800544c <_fflush_r+0xc>
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	059b      	lsls	r3, r3, #22
 8005486:	d4e1      	bmi.n	800544c <_fflush_r+0xc>
 8005488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800548a:	f000 fa99 	bl	80059c0 <__retarget_lock_release_recursive>
 800548e:	e7dd      	b.n	800544c <_fflush_r+0xc>

08005490 <fflush>:
 8005490:	4601      	mov	r1, r0
 8005492:	b920      	cbnz	r0, 800549e <fflush+0xe>
 8005494:	4a04      	ldr	r2, [pc, #16]	@ (80054a8 <fflush+0x18>)
 8005496:	4905      	ldr	r1, [pc, #20]	@ (80054ac <fflush+0x1c>)
 8005498:	4805      	ldr	r0, [pc, #20]	@ (80054b0 <fflush+0x20>)
 800549a:	f000 b8b1 	b.w	8005600 <_fwalk_sglue>
 800549e:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <fflush+0x24>)
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	f7ff bfcd 	b.w	8005440 <_fflush_r>
 80054a6:	bf00      	nop
 80054a8:	20000010 	.word	0x20000010
 80054ac:	08005441 	.word	0x08005441
 80054b0:	20000020 	.word	0x20000020
 80054b4:	2000001c 	.word	0x2000001c

080054b8 <std>:
 80054b8:	2300      	movs	r3, #0
 80054ba:	b510      	push	{r4, lr}
 80054bc:	4604      	mov	r4, r0
 80054be:	e9c0 3300 	strd	r3, r3, [r0]
 80054c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054c6:	6083      	str	r3, [r0, #8]
 80054c8:	8181      	strh	r1, [r0, #12]
 80054ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80054cc:	81c2      	strh	r2, [r0, #14]
 80054ce:	6183      	str	r3, [r0, #24]
 80054d0:	4619      	mov	r1, r3
 80054d2:	2208      	movs	r2, #8
 80054d4:	305c      	adds	r0, #92	@ 0x5c
 80054d6:	f000 f9f9 	bl	80058cc <memset>
 80054da:	4b0d      	ldr	r3, [pc, #52]	@ (8005510 <std+0x58>)
 80054dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80054de:	4b0d      	ldr	r3, [pc, #52]	@ (8005514 <std+0x5c>)
 80054e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005518 <std+0x60>)
 80054e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054e6:	4b0d      	ldr	r3, [pc, #52]	@ (800551c <std+0x64>)
 80054e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80054ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005520 <std+0x68>)
 80054ec:	6224      	str	r4, [r4, #32]
 80054ee:	429c      	cmp	r4, r3
 80054f0:	d006      	beq.n	8005500 <std+0x48>
 80054f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054f6:	4294      	cmp	r4, r2
 80054f8:	d002      	beq.n	8005500 <std+0x48>
 80054fa:	33d0      	adds	r3, #208	@ 0xd0
 80054fc:	429c      	cmp	r4, r3
 80054fe:	d105      	bne.n	800550c <std+0x54>
 8005500:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005508:	f000 ba58 	b.w	80059bc <__retarget_lock_init_recursive>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	0800571d 	.word	0x0800571d
 8005514:	0800573f 	.word	0x0800573f
 8005518:	08005777 	.word	0x08005777
 800551c:	0800579b 	.word	0x0800579b
 8005520:	20004a78 	.word	0x20004a78

08005524 <stdio_exit_handler>:
 8005524:	4a02      	ldr	r2, [pc, #8]	@ (8005530 <stdio_exit_handler+0xc>)
 8005526:	4903      	ldr	r1, [pc, #12]	@ (8005534 <stdio_exit_handler+0x10>)
 8005528:	4803      	ldr	r0, [pc, #12]	@ (8005538 <stdio_exit_handler+0x14>)
 800552a:	f000 b869 	b.w	8005600 <_fwalk_sglue>
 800552e:	bf00      	nop
 8005530:	20000010 	.word	0x20000010
 8005534:	08005441 	.word	0x08005441
 8005538:	20000020 	.word	0x20000020

0800553c <cleanup_stdio>:
 800553c:	6841      	ldr	r1, [r0, #4]
 800553e:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <cleanup_stdio+0x34>)
 8005540:	4299      	cmp	r1, r3
 8005542:	b510      	push	{r4, lr}
 8005544:	4604      	mov	r4, r0
 8005546:	d001      	beq.n	800554c <cleanup_stdio+0x10>
 8005548:	f7ff ff7a 	bl	8005440 <_fflush_r>
 800554c:	68a1      	ldr	r1, [r4, #8]
 800554e:	4b09      	ldr	r3, [pc, #36]	@ (8005574 <cleanup_stdio+0x38>)
 8005550:	4299      	cmp	r1, r3
 8005552:	d002      	beq.n	800555a <cleanup_stdio+0x1e>
 8005554:	4620      	mov	r0, r4
 8005556:	f7ff ff73 	bl	8005440 <_fflush_r>
 800555a:	68e1      	ldr	r1, [r4, #12]
 800555c:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <cleanup_stdio+0x3c>)
 800555e:	4299      	cmp	r1, r3
 8005560:	d004      	beq.n	800556c <cleanup_stdio+0x30>
 8005562:	4620      	mov	r0, r4
 8005564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005568:	f7ff bf6a 	b.w	8005440 <_fflush_r>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	20004a78 	.word	0x20004a78
 8005574:	20004ae0 	.word	0x20004ae0
 8005578:	20004b48 	.word	0x20004b48

0800557c <global_stdio_init.part.0>:
 800557c:	b510      	push	{r4, lr}
 800557e:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <global_stdio_init.part.0+0x30>)
 8005580:	4c0b      	ldr	r4, [pc, #44]	@ (80055b0 <global_stdio_init.part.0+0x34>)
 8005582:	4a0c      	ldr	r2, [pc, #48]	@ (80055b4 <global_stdio_init.part.0+0x38>)
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	4620      	mov	r0, r4
 8005588:	2200      	movs	r2, #0
 800558a:	2104      	movs	r1, #4
 800558c:	f7ff ff94 	bl	80054b8 <std>
 8005590:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005594:	2201      	movs	r2, #1
 8005596:	2109      	movs	r1, #9
 8005598:	f7ff ff8e 	bl	80054b8 <std>
 800559c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055a0:	2202      	movs	r2, #2
 80055a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a6:	2112      	movs	r1, #18
 80055a8:	f7ff bf86 	b.w	80054b8 <std>
 80055ac:	20004bb0 	.word	0x20004bb0
 80055b0:	20004a78 	.word	0x20004a78
 80055b4:	08005525 	.word	0x08005525

080055b8 <__sfp_lock_acquire>:
 80055b8:	4801      	ldr	r0, [pc, #4]	@ (80055c0 <__sfp_lock_acquire+0x8>)
 80055ba:	f000 ba00 	b.w	80059be <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20004bb9 	.word	0x20004bb9

080055c4 <__sfp_lock_release>:
 80055c4:	4801      	ldr	r0, [pc, #4]	@ (80055cc <__sfp_lock_release+0x8>)
 80055c6:	f000 b9fb 	b.w	80059c0 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20004bb9 	.word	0x20004bb9

080055d0 <__sinit>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4604      	mov	r4, r0
 80055d4:	f7ff fff0 	bl	80055b8 <__sfp_lock_acquire>
 80055d8:	6a23      	ldr	r3, [r4, #32]
 80055da:	b11b      	cbz	r3, 80055e4 <__sinit+0x14>
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f7ff bff0 	b.w	80055c4 <__sfp_lock_release>
 80055e4:	4b04      	ldr	r3, [pc, #16]	@ (80055f8 <__sinit+0x28>)
 80055e6:	6223      	str	r3, [r4, #32]
 80055e8:	4b04      	ldr	r3, [pc, #16]	@ (80055fc <__sinit+0x2c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f5      	bne.n	80055dc <__sinit+0xc>
 80055f0:	f7ff ffc4 	bl	800557c <global_stdio_init.part.0>
 80055f4:	e7f2      	b.n	80055dc <__sinit+0xc>
 80055f6:	bf00      	nop
 80055f8:	0800553d 	.word	0x0800553d
 80055fc:	20004bb0 	.word	0x20004bb0

08005600 <_fwalk_sglue>:
 8005600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005604:	4607      	mov	r7, r0
 8005606:	4688      	mov	r8, r1
 8005608:	4614      	mov	r4, r2
 800560a:	2600      	movs	r6, #0
 800560c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005610:	f1b9 0901 	subs.w	r9, r9, #1
 8005614:	d505      	bpl.n	8005622 <_fwalk_sglue+0x22>
 8005616:	6824      	ldr	r4, [r4, #0]
 8005618:	2c00      	cmp	r4, #0
 800561a:	d1f7      	bne.n	800560c <_fwalk_sglue+0xc>
 800561c:	4630      	mov	r0, r6
 800561e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d907      	bls.n	8005638 <_fwalk_sglue+0x38>
 8005628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800562c:	3301      	adds	r3, #1
 800562e:	d003      	beq.n	8005638 <_fwalk_sglue+0x38>
 8005630:	4629      	mov	r1, r5
 8005632:	4638      	mov	r0, r7
 8005634:	47c0      	blx	r8
 8005636:	4306      	orrs	r6, r0
 8005638:	3568      	adds	r5, #104	@ 0x68
 800563a:	e7e9      	b.n	8005610 <_fwalk_sglue+0x10>

0800563c <iprintf>:
 800563c:	b40f      	push	{r0, r1, r2, r3}
 800563e:	b507      	push	{r0, r1, r2, lr}
 8005640:	4906      	ldr	r1, [pc, #24]	@ (800565c <iprintf+0x20>)
 8005642:	ab04      	add	r3, sp, #16
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	f853 2b04 	ldr.w	r2, [r3], #4
 800564a:	6881      	ldr	r1, [r0, #8]
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	f000 fae9 	bl	8005c24 <_vfiprintf_r>
 8005652:	b003      	add	sp, #12
 8005654:	f85d eb04 	ldr.w	lr, [sp], #4
 8005658:	b004      	add	sp, #16
 800565a:	4770      	bx	lr
 800565c:	2000001c 	.word	0x2000001c

08005660 <_puts_r>:
 8005660:	6a03      	ldr	r3, [r0, #32]
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	6884      	ldr	r4, [r0, #8]
 8005666:	4605      	mov	r5, r0
 8005668:	460e      	mov	r6, r1
 800566a:	b90b      	cbnz	r3, 8005670 <_puts_r+0x10>
 800566c:	f7ff ffb0 	bl	80055d0 <__sinit>
 8005670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005672:	07db      	lsls	r3, r3, #31
 8005674:	d405      	bmi.n	8005682 <_puts_r+0x22>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	0598      	lsls	r0, r3, #22
 800567a:	d402      	bmi.n	8005682 <_puts_r+0x22>
 800567c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800567e:	f000 f99e 	bl	80059be <__retarget_lock_acquire_recursive>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	0719      	lsls	r1, r3, #28
 8005686:	d502      	bpl.n	800568e <_puts_r+0x2e>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d135      	bne.n	80056fa <_puts_r+0x9a>
 800568e:	4621      	mov	r1, r4
 8005690:	4628      	mov	r0, r5
 8005692:	f000 f8c5 	bl	8005820 <__swsetup_r>
 8005696:	b380      	cbz	r0, 80056fa <_puts_r+0x9a>
 8005698:	f04f 35ff 	mov.w	r5, #4294967295
 800569c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800569e:	07da      	lsls	r2, r3, #31
 80056a0:	d405      	bmi.n	80056ae <_puts_r+0x4e>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	059b      	lsls	r3, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_puts_r+0x4e>
 80056a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056aa:	f000 f989 	bl	80059c0 <__retarget_lock_release_recursive>
 80056ae:	4628      	mov	r0, r5
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da04      	bge.n	80056c0 <_puts_r+0x60>
 80056b6:	69a2      	ldr	r2, [r4, #24]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	dc17      	bgt.n	80056ec <_puts_r+0x8c>
 80056bc:	290a      	cmp	r1, #10
 80056be:	d015      	beq.n	80056ec <_puts_r+0x8c>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	6022      	str	r2, [r4, #0]
 80056c6:	7019      	strb	r1, [r3, #0]
 80056c8:	68a3      	ldr	r3, [r4, #8]
 80056ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056ce:	3b01      	subs	r3, #1
 80056d0:	60a3      	str	r3, [r4, #8]
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d1ed      	bne.n	80056b2 <_puts_r+0x52>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da11      	bge.n	80056fe <_puts_r+0x9e>
 80056da:	4622      	mov	r2, r4
 80056dc:	210a      	movs	r1, #10
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 f85f 	bl	80057a2 <__swbuf_r>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d0d7      	beq.n	8005698 <_puts_r+0x38>
 80056e8:	250a      	movs	r5, #10
 80056ea:	e7d7      	b.n	800569c <_puts_r+0x3c>
 80056ec:	4622      	mov	r2, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f857 	bl	80057a2 <__swbuf_r>
 80056f4:	3001      	adds	r0, #1
 80056f6:	d1e7      	bne.n	80056c8 <_puts_r+0x68>
 80056f8:	e7ce      	b.n	8005698 <_puts_r+0x38>
 80056fa:	3e01      	subs	r6, #1
 80056fc:	e7e4      	b.n	80056c8 <_puts_r+0x68>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	6022      	str	r2, [r4, #0]
 8005704:	220a      	movs	r2, #10
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e7ee      	b.n	80056e8 <_puts_r+0x88>
	...

0800570c <puts>:
 800570c:	4b02      	ldr	r3, [pc, #8]	@ (8005718 <puts+0xc>)
 800570e:	4601      	mov	r1, r0
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	f7ff bfa5 	b.w	8005660 <_puts_r>
 8005716:	bf00      	nop
 8005718:	2000001c 	.word	0x2000001c

0800571c <__sread>:
 800571c:	b510      	push	{r4, lr}
 800571e:	460c      	mov	r4, r1
 8005720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005724:	f000 f8fc 	bl	8005920 <_read_r>
 8005728:	2800      	cmp	r0, #0
 800572a:	bfab      	itete	ge
 800572c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800572e:	89a3      	ldrhlt	r3, [r4, #12]
 8005730:	181b      	addge	r3, r3, r0
 8005732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005736:	bfac      	ite	ge
 8005738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800573a:	81a3      	strhlt	r3, [r4, #12]
 800573c:	bd10      	pop	{r4, pc}

0800573e <__swrite>:
 800573e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005742:	461f      	mov	r7, r3
 8005744:	898b      	ldrh	r3, [r1, #12]
 8005746:	05db      	lsls	r3, r3, #23
 8005748:	4605      	mov	r5, r0
 800574a:	460c      	mov	r4, r1
 800574c:	4616      	mov	r6, r2
 800574e:	d505      	bpl.n	800575c <__swrite+0x1e>
 8005750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005754:	2302      	movs	r3, #2
 8005756:	2200      	movs	r2, #0
 8005758:	f000 f8d0 	bl	80058fc <_lseek_r>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005766:	81a3      	strh	r3, [r4, #12]
 8005768:	4632      	mov	r2, r6
 800576a:	463b      	mov	r3, r7
 800576c:	4628      	mov	r0, r5
 800576e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005772:	f000 b8e7 	b.w	8005944 <_write_r>

08005776 <__sseek>:
 8005776:	b510      	push	{r4, lr}
 8005778:	460c      	mov	r4, r1
 800577a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577e:	f000 f8bd 	bl	80058fc <_lseek_r>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	bf15      	itete	ne
 8005788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800578a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800578e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005792:	81a3      	strheq	r3, [r4, #12]
 8005794:	bf18      	it	ne
 8005796:	81a3      	strhne	r3, [r4, #12]
 8005798:	bd10      	pop	{r4, pc}

0800579a <__sclose>:
 800579a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579e:	f000 b89d 	b.w	80058dc <_close_r>

080057a2 <__swbuf_r>:
 80057a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a4:	460e      	mov	r6, r1
 80057a6:	4614      	mov	r4, r2
 80057a8:	4605      	mov	r5, r0
 80057aa:	b118      	cbz	r0, 80057b4 <__swbuf_r+0x12>
 80057ac:	6a03      	ldr	r3, [r0, #32]
 80057ae:	b90b      	cbnz	r3, 80057b4 <__swbuf_r+0x12>
 80057b0:	f7ff ff0e 	bl	80055d0 <__sinit>
 80057b4:	69a3      	ldr	r3, [r4, #24]
 80057b6:	60a3      	str	r3, [r4, #8]
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	071a      	lsls	r2, r3, #28
 80057bc:	d501      	bpl.n	80057c2 <__swbuf_r+0x20>
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	b943      	cbnz	r3, 80057d4 <__swbuf_r+0x32>
 80057c2:	4621      	mov	r1, r4
 80057c4:	4628      	mov	r0, r5
 80057c6:	f000 f82b 	bl	8005820 <__swsetup_r>
 80057ca:	b118      	cbz	r0, 80057d4 <__swbuf_r+0x32>
 80057cc:	f04f 37ff 	mov.w	r7, #4294967295
 80057d0:	4638      	mov	r0, r7
 80057d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	6922      	ldr	r2, [r4, #16]
 80057d8:	1a98      	subs	r0, r3, r2
 80057da:	6963      	ldr	r3, [r4, #20]
 80057dc:	b2f6      	uxtb	r6, r6
 80057de:	4283      	cmp	r3, r0
 80057e0:	4637      	mov	r7, r6
 80057e2:	dc05      	bgt.n	80057f0 <__swbuf_r+0x4e>
 80057e4:	4621      	mov	r1, r4
 80057e6:	4628      	mov	r0, r5
 80057e8:	f7ff fe2a 	bl	8005440 <_fflush_r>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d1ed      	bne.n	80057cc <__swbuf_r+0x2a>
 80057f0:	68a3      	ldr	r3, [r4, #8]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60a3      	str	r3, [r4, #8]
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	6022      	str	r2, [r4, #0]
 80057fc:	701e      	strb	r6, [r3, #0]
 80057fe:	6962      	ldr	r2, [r4, #20]
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	429a      	cmp	r2, r3
 8005804:	d004      	beq.n	8005810 <__swbuf_r+0x6e>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	07db      	lsls	r3, r3, #31
 800580a:	d5e1      	bpl.n	80057d0 <__swbuf_r+0x2e>
 800580c:	2e0a      	cmp	r6, #10
 800580e:	d1df      	bne.n	80057d0 <__swbuf_r+0x2e>
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f7ff fe14 	bl	8005440 <_fflush_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	d0d9      	beq.n	80057d0 <__swbuf_r+0x2e>
 800581c:	e7d6      	b.n	80057cc <__swbuf_r+0x2a>
	...

08005820 <__swsetup_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4b29      	ldr	r3, [pc, #164]	@ (80058c8 <__swsetup_r+0xa8>)
 8005824:	4605      	mov	r5, r0
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	460c      	mov	r4, r1
 800582a:	b118      	cbz	r0, 8005834 <__swsetup_r+0x14>
 800582c:	6a03      	ldr	r3, [r0, #32]
 800582e:	b90b      	cbnz	r3, 8005834 <__swsetup_r+0x14>
 8005830:	f7ff fece 	bl	80055d0 <__sinit>
 8005834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005838:	0719      	lsls	r1, r3, #28
 800583a:	d422      	bmi.n	8005882 <__swsetup_r+0x62>
 800583c:	06da      	lsls	r2, r3, #27
 800583e:	d407      	bmi.n	8005850 <__swsetup_r+0x30>
 8005840:	2209      	movs	r2, #9
 8005842:	602a      	str	r2, [r5, #0]
 8005844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	f04f 30ff 	mov.w	r0, #4294967295
 800584e:	e033      	b.n	80058b8 <__swsetup_r+0x98>
 8005850:	0758      	lsls	r0, r3, #29
 8005852:	d512      	bpl.n	800587a <__swsetup_r+0x5a>
 8005854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005856:	b141      	cbz	r1, 800586a <__swsetup_r+0x4a>
 8005858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800585c:	4299      	cmp	r1, r3
 800585e:	d002      	beq.n	8005866 <__swsetup_r+0x46>
 8005860:	4628      	mov	r0, r5
 8005862:	f000 f8bd 	bl	80059e0 <_free_r>
 8005866:	2300      	movs	r3, #0
 8005868:	6363      	str	r3, [r4, #52]	@ 0x34
 800586a:	89a3      	ldrh	r3, [r4, #12]
 800586c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	2300      	movs	r3, #0
 8005874:	6063      	str	r3, [r4, #4]
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f043 0308 	orr.w	r3, r3, #8
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	b94b      	cbnz	r3, 800589a <__swsetup_r+0x7a>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800588c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005890:	d003      	beq.n	800589a <__swsetup_r+0x7a>
 8005892:	4621      	mov	r1, r4
 8005894:	4628      	mov	r0, r5
 8005896:	f000 fc91 	bl	80061bc <__smakebuf_r>
 800589a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589e:	f013 0201 	ands.w	r2, r3, #1
 80058a2:	d00a      	beq.n	80058ba <__swsetup_r+0x9a>
 80058a4:	2200      	movs	r2, #0
 80058a6:	60a2      	str	r2, [r4, #8]
 80058a8:	6962      	ldr	r2, [r4, #20]
 80058aa:	4252      	negs	r2, r2
 80058ac:	61a2      	str	r2, [r4, #24]
 80058ae:	6922      	ldr	r2, [r4, #16]
 80058b0:	b942      	cbnz	r2, 80058c4 <__swsetup_r+0xa4>
 80058b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058b6:	d1c5      	bne.n	8005844 <__swsetup_r+0x24>
 80058b8:	bd38      	pop	{r3, r4, r5, pc}
 80058ba:	0799      	lsls	r1, r3, #30
 80058bc:	bf58      	it	pl
 80058be:	6962      	ldrpl	r2, [r4, #20]
 80058c0:	60a2      	str	r2, [r4, #8]
 80058c2:	e7f4      	b.n	80058ae <__swsetup_r+0x8e>
 80058c4:	2000      	movs	r0, #0
 80058c6:	e7f7      	b.n	80058b8 <__swsetup_r+0x98>
 80058c8:	2000001c 	.word	0x2000001c

080058cc <memset>:
 80058cc:	4402      	add	r2, r0
 80058ce:	4603      	mov	r3, r0
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d100      	bne.n	80058d6 <memset+0xa>
 80058d4:	4770      	bx	lr
 80058d6:	f803 1b01 	strb.w	r1, [r3], #1
 80058da:	e7f9      	b.n	80058d0 <memset+0x4>

080058dc <_close_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d06      	ldr	r5, [pc, #24]	@ (80058f8 <_close_r+0x1c>)
 80058e0:	2300      	movs	r3, #0
 80058e2:	4604      	mov	r4, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	f7fb f95d 	bl	8000ba6 <_close>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_close_r+0x1a>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_close_r+0x1a>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	20004bb4 	.word	0x20004bb4

080058fc <_lseek_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4d07      	ldr	r5, [pc, #28]	@ (800591c <_lseek_r+0x20>)
 8005900:	4604      	mov	r4, r0
 8005902:	4608      	mov	r0, r1
 8005904:	4611      	mov	r1, r2
 8005906:	2200      	movs	r2, #0
 8005908:	602a      	str	r2, [r5, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	f7fb f972 	bl	8000bf4 <_lseek>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d102      	bne.n	800591a <_lseek_r+0x1e>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	b103      	cbz	r3, 800591a <_lseek_r+0x1e>
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	20004bb4 	.word	0x20004bb4

08005920 <_read_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4d07      	ldr	r5, [pc, #28]	@ (8005940 <_read_r+0x20>)
 8005924:	4604      	mov	r4, r0
 8005926:	4608      	mov	r0, r1
 8005928:	4611      	mov	r1, r2
 800592a:	2200      	movs	r2, #0
 800592c:	602a      	str	r2, [r5, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	f7fb f900 	bl	8000b34 <_read>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_read_r+0x1e>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_read_r+0x1e>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	20004bb4 	.word	0x20004bb4

08005944 <_write_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4d07      	ldr	r5, [pc, #28]	@ (8005964 <_write_r+0x20>)
 8005948:	4604      	mov	r4, r0
 800594a:	4608      	mov	r0, r1
 800594c:	4611      	mov	r1, r2
 800594e:	2200      	movs	r2, #0
 8005950:	602a      	str	r2, [r5, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	f7fb f90b 	bl	8000b6e <_write>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_write_r+0x1e>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_write_r+0x1e>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	20004bb4 	.word	0x20004bb4

08005968 <__errno>:
 8005968:	4b01      	ldr	r3, [pc, #4]	@ (8005970 <__errno+0x8>)
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	2000001c 	.word	0x2000001c

08005974 <__libc_init_array>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	4d0d      	ldr	r5, [pc, #52]	@ (80059ac <__libc_init_array+0x38>)
 8005978:	4c0d      	ldr	r4, [pc, #52]	@ (80059b0 <__libc_init_array+0x3c>)
 800597a:	1b64      	subs	r4, r4, r5
 800597c:	10a4      	asrs	r4, r4, #2
 800597e:	2600      	movs	r6, #0
 8005980:	42a6      	cmp	r6, r4
 8005982:	d109      	bne.n	8005998 <__libc_init_array+0x24>
 8005984:	4d0b      	ldr	r5, [pc, #44]	@ (80059b4 <__libc_init_array+0x40>)
 8005986:	4c0c      	ldr	r4, [pc, #48]	@ (80059b8 <__libc_init_array+0x44>)
 8005988:	f000 fc86 	bl	8006298 <_init>
 800598c:	1b64      	subs	r4, r4, r5
 800598e:	10a4      	asrs	r4, r4, #2
 8005990:	2600      	movs	r6, #0
 8005992:	42a6      	cmp	r6, r4
 8005994:	d105      	bne.n	80059a2 <__libc_init_array+0x2e>
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	f855 3b04 	ldr.w	r3, [r5], #4
 800599c:	4798      	blx	r3
 800599e:	3601      	adds	r6, #1
 80059a0:	e7ee      	b.n	8005980 <__libc_init_array+0xc>
 80059a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a6:	4798      	blx	r3
 80059a8:	3601      	adds	r6, #1
 80059aa:	e7f2      	b.n	8005992 <__libc_init_array+0x1e>
 80059ac:	08006378 	.word	0x08006378
 80059b0:	08006378 	.word	0x08006378
 80059b4:	08006378 	.word	0x08006378
 80059b8:	0800637c 	.word	0x0800637c

080059bc <__retarget_lock_init_recursive>:
 80059bc:	4770      	bx	lr

080059be <__retarget_lock_acquire_recursive>:
 80059be:	4770      	bx	lr

080059c0 <__retarget_lock_release_recursive>:
 80059c0:	4770      	bx	lr

080059c2 <memcpy>:
 80059c2:	440a      	add	r2, r1
 80059c4:	4291      	cmp	r1, r2
 80059c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80059ca:	d100      	bne.n	80059ce <memcpy+0xc>
 80059cc:	4770      	bx	lr
 80059ce:	b510      	push	{r4, lr}
 80059d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d8:	4291      	cmp	r1, r2
 80059da:	d1f9      	bne.n	80059d0 <memcpy+0xe>
 80059dc:	bd10      	pop	{r4, pc}
	...

080059e0 <_free_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4605      	mov	r5, r0
 80059e4:	2900      	cmp	r1, #0
 80059e6:	d041      	beq.n	8005a6c <_free_r+0x8c>
 80059e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ec:	1f0c      	subs	r4, r1, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bfb8      	it	lt
 80059f2:	18e4      	addlt	r4, r4, r3
 80059f4:	f000 f8e0 	bl	8005bb8 <__malloc_lock>
 80059f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a70 <_free_r+0x90>)
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	b933      	cbnz	r3, 8005a0c <_free_r+0x2c>
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	6014      	str	r4, [r2, #0]
 8005a02:	4628      	mov	r0, r5
 8005a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a08:	f000 b8dc 	b.w	8005bc4 <__malloc_unlock>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d908      	bls.n	8005a22 <_free_r+0x42>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	1821      	adds	r1, r4, r0
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf01      	itttt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	1809      	addeq	r1, r1, r0
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	e7ed      	b.n	80059fe <_free_r+0x1e>
 8005a22:	461a      	mov	r2, r3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b10b      	cbz	r3, 8005a2c <_free_r+0x4c>
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x42>
 8005a2c:	6811      	ldr	r1, [r2, #0]
 8005a2e:	1850      	adds	r0, r2, r1
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x6c>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	4401      	add	r1, r0
 8005a38:	1850      	adds	r0, r2, r1
 8005a3a:	4283      	cmp	r3, r0
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	d1e0      	bne.n	8005a02 <_free_r+0x22>
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	6053      	str	r3, [r2, #4]
 8005a46:	4408      	add	r0, r1
 8005a48:	6010      	str	r0, [r2, #0]
 8005a4a:	e7da      	b.n	8005a02 <_free_r+0x22>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x74>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	e7d6      	b.n	8005a02 <_free_r+0x22>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf04      	itt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	6063      	str	r3, [r4, #4]
 8005a62:	bf04      	itt	eq
 8005a64:	1809      	addeq	r1, r1, r0
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	6054      	str	r4, [r2, #4]
 8005a6a:	e7ca      	b.n	8005a02 <_free_r+0x22>
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	bf00      	nop
 8005a70:	20004bc0 	.word	0x20004bc0

08005a74 <sbrk_aligned>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	4e0f      	ldr	r6, [pc, #60]	@ (8005ab4 <sbrk_aligned+0x40>)
 8005a78:	460c      	mov	r4, r1
 8005a7a:	6831      	ldr	r1, [r6, #0]
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	b911      	cbnz	r1, 8005a86 <sbrk_aligned+0x12>
 8005a80:	f000 fbfa 	bl	8006278 <_sbrk_r>
 8005a84:	6030      	str	r0, [r6, #0]
 8005a86:	4621      	mov	r1, r4
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f000 fbf5 	bl	8006278 <_sbrk_r>
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	d103      	bne.n	8005a9a <sbrk_aligned+0x26>
 8005a92:	f04f 34ff 	mov.w	r4, #4294967295
 8005a96:	4620      	mov	r0, r4
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	1cc4      	adds	r4, r0, #3
 8005a9c:	f024 0403 	bic.w	r4, r4, #3
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d0f8      	beq.n	8005a96 <sbrk_aligned+0x22>
 8005aa4:	1a21      	subs	r1, r4, r0
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 fbe6 	bl	8006278 <_sbrk_r>
 8005aac:	3001      	adds	r0, #1
 8005aae:	d1f2      	bne.n	8005a96 <sbrk_aligned+0x22>
 8005ab0:	e7ef      	b.n	8005a92 <sbrk_aligned+0x1e>
 8005ab2:	bf00      	nop
 8005ab4:	20004bbc 	.word	0x20004bbc

08005ab8 <_malloc_r>:
 8005ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005abc:	1ccd      	adds	r5, r1, #3
 8005abe:	f025 0503 	bic.w	r5, r5, #3
 8005ac2:	3508      	adds	r5, #8
 8005ac4:	2d0c      	cmp	r5, #12
 8005ac6:	bf38      	it	cc
 8005ac8:	250c      	movcc	r5, #12
 8005aca:	2d00      	cmp	r5, #0
 8005acc:	4606      	mov	r6, r0
 8005ace:	db01      	blt.n	8005ad4 <_malloc_r+0x1c>
 8005ad0:	42a9      	cmp	r1, r5
 8005ad2:	d904      	bls.n	8005ade <_malloc_r+0x26>
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	6033      	str	r3, [r6, #0]
 8005ad8:	2000      	movs	r0, #0
 8005ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bb4 <_malloc_r+0xfc>
 8005ae2:	f000 f869 	bl	8005bb8 <__malloc_lock>
 8005ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aea:	461c      	mov	r4, r3
 8005aec:	bb44      	cbnz	r4, 8005b40 <_malloc_r+0x88>
 8005aee:	4629      	mov	r1, r5
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7ff ffbf 	bl	8005a74 <sbrk_aligned>
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	4604      	mov	r4, r0
 8005afa:	d158      	bne.n	8005bae <_malloc_r+0xf6>
 8005afc:	f8d8 4000 	ldr.w	r4, [r8]
 8005b00:	4627      	mov	r7, r4
 8005b02:	2f00      	cmp	r7, #0
 8005b04:	d143      	bne.n	8005b8e <_malloc_r+0xd6>
 8005b06:	2c00      	cmp	r4, #0
 8005b08:	d04b      	beq.n	8005ba2 <_malloc_r+0xea>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	4630      	mov	r0, r6
 8005b10:	eb04 0903 	add.w	r9, r4, r3
 8005b14:	f000 fbb0 	bl	8006278 <_sbrk_r>
 8005b18:	4581      	cmp	r9, r0
 8005b1a:	d142      	bne.n	8005ba2 <_malloc_r+0xea>
 8005b1c:	6821      	ldr	r1, [r4, #0]
 8005b1e:	1a6d      	subs	r5, r5, r1
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7ff ffa6 	bl	8005a74 <sbrk_aligned>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d03a      	beq.n	8005ba2 <_malloc_r+0xea>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	442b      	add	r3, r5
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	f8d8 3000 	ldr.w	r3, [r8]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	bb62      	cbnz	r2, 8005b94 <_malloc_r+0xdc>
 8005b3a:	f8c8 7000 	str.w	r7, [r8]
 8005b3e:	e00f      	b.n	8005b60 <_malloc_r+0xa8>
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	1b52      	subs	r2, r2, r5
 8005b44:	d420      	bmi.n	8005b88 <_malloc_r+0xd0>
 8005b46:	2a0b      	cmp	r2, #11
 8005b48:	d917      	bls.n	8005b7a <_malloc_r+0xc2>
 8005b4a:	1961      	adds	r1, r4, r5
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	6025      	str	r5, [r4, #0]
 8005b50:	bf18      	it	ne
 8005b52:	6059      	strne	r1, [r3, #4]
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	bf08      	it	eq
 8005b58:	f8c8 1000 	streq.w	r1, [r8]
 8005b5c:	5162      	str	r2, [r4, r5]
 8005b5e:	604b      	str	r3, [r1, #4]
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f82f 	bl	8005bc4 <__malloc_unlock>
 8005b66:	f104 000b 	add.w	r0, r4, #11
 8005b6a:	1d23      	adds	r3, r4, #4
 8005b6c:	f020 0007 	bic.w	r0, r0, #7
 8005b70:	1ac2      	subs	r2, r0, r3
 8005b72:	bf1c      	itt	ne
 8005b74:	1a1b      	subne	r3, r3, r0
 8005b76:	50a3      	strne	r3, [r4, r2]
 8005b78:	e7af      	b.n	8005ada <_malloc_r+0x22>
 8005b7a:	6862      	ldr	r2, [r4, #4]
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	bf0c      	ite	eq
 8005b80:	f8c8 2000 	streq.w	r2, [r8]
 8005b84:	605a      	strne	r2, [r3, #4]
 8005b86:	e7eb      	b.n	8005b60 <_malloc_r+0xa8>
 8005b88:	4623      	mov	r3, r4
 8005b8a:	6864      	ldr	r4, [r4, #4]
 8005b8c:	e7ae      	b.n	8005aec <_malloc_r+0x34>
 8005b8e:	463c      	mov	r4, r7
 8005b90:	687f      	ldr	r7, [r7, #4]
 8005b92:	e7b6      	b.n	8005b02 <_malloc_r+0x4a>
 8005b94:	461a      	mov	r2, r3
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	d1fb      	bne.n	8005b94 <_malloc_r+0xdc>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6053      	str	r3, [r2, #4]
 8005ba0:	e7de      	b.n	8005b60 <_malloc_r+0xa8>
 8005ba2:	230c      	movs	r3, #12
 8005ba4:	6033      	str	r3, [r6, #0]
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f000 f80c 	bl	8005bc4 <__malloc_unlock>
 8005bac:	e794      	b.n	8005ad8 <_malloc_r+0x20>
 8005bae:	6005      	str	r5, [r0, #0]
 8005bb0:	e7d6      	b.n	8005b60 <_malloc_r+0xa8>
 8005bb2:	bf00      	nop
 8005bb4:	20004bc0 	.word	0x20004bc0

08005bb8 <__malloc_lock>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	@ (8005bc0 <__malloc_lock+0x8>)
 8005bba:	f7ff bf00 	b.w	80059be <__retarget_lock_acquire_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	20004bb8 	.word	0x20004bb8

08005bc4 <__malloc_unlock>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__malloc_unlock+0x8>)
 8005bc6:	f7ff befb 	b.w	80059c0 <__retarget_lock_release_recursive>
 8005bca:	bf00      	nop
 8005bcc:	20004bb8 	.word	0x20004bb8

08005bd0 <__sfputc_r>:
 8005bd0:	6893      	ldr	r3, [r2, #8]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	b410      	push	{r4}
 8005bd8:	6093      	str	r3, [r2, #8]
 8005bda:	da08      	bge.n	8005bee <__sfputc_r+0x1e>
 8005bdc:	6994      	ldr	r4, [r2, #24]
 8005bde:	42a3      	cmp	r3, r4
 8005be0:	db01      	blt.n	8005be6 <__sfputc_r+0x16>
 8005be2:	290a      	cmp	r1, #10
 8005be4:	d103      	bne.n	8005bee <__sfputc_r+0x1e>
 8005be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bea:	f7ff bdda 	b.w	80057a2 <__swbuf_r>
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	1c58      	adds	r0, r3, #1
 8005bf2:	6010      	str	r0, [r2, #0]
 8005bf4:	7019      	strb	r1, [r3, #0]
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <__sfputs_r>:
 8005bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c00:	4606      	mov	r6, r0
 8005c02:	460f      	mov	r7, r1
 8005c04:	4614      	mov	r4, r2
 8005c06:	18d5      	adds	r5, r2, r3
 8005c08:	42ac      	cmp	r4, r5
 8005c0a:	d101      	bne.n	8005c10 <__sfputs_r+0x12>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e007      	b.n	8005c20 <__sfputs_r+0x22>
 8005c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c14:	463a      	mov	r2, r7
 8005c16:	4630      	mov	r0, r6
 8005c18:	f7ff ffda 	bl	8005bd0 <__sfputc_r>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d1f3      	bne.n	8005c08 <__sfputs_r+0xa>
 8005c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c24 <_vfiprintf_r>:
 8005c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	460d      	mov	r5, r1
 8005c2a:	b09d      	sub	sp, #116	@ 0x74
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	4698      	mov	r8, r3
 8005c30:	4606      	mov	r6, r0
 8005c32:	b118      	cbz	r0, 8005c3c <_vfiprintf_r+0x18>
 8005c34:	6a03      	ldr	r3, [r0, #32]
 8005c36:	b90b      	cbnz	r3, 8005c3c <_vfiprintf_r+0x18>
 8005c38:	f7ff fcca 	bl	80055d0 <__sinit>
 8005c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c3e:	07d9      	lsls	r1, r3, #31
 8005c40:	d405      	bmi.n	8005c4e <_vfiprintf_r+0x2a>
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	059a      	lsls	r2, r3, #22
 8005c46:	d402      	bmi.n	8005c4e <_vfiprintf_r+0x2a>
 8005c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c4a:	f7ff feb8 	bl	80059be <__retarget_lock_acquire_recursive>
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	d501      	bpl.n	8005c58 <_vfiprintf_r+0x34>
 8005c54:	692b      	ldr	r3, [r5, #16]
 8005c56:	b99b      	cbnz	r3, 8005c80 <_vfiprintf_r+0x5c>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f7ff fde0 	bl	8005820 <__swsetup_r>
 8005c60:	b170      	cbz	r0, 8005c80 <_vfiprintf_r+0x5c>
 8005c62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c64:	07dc      	lsls	r4, r3, #31
 8005c66:	d504      	bpl.n	8005c72 <_vfiprintf_r+0x4e>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	b01d      	add	sp, #116	@ 0x74
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	89ab      	ldrh	r3, [r5, #12]
 8005c74:	0598      	lsls	r0, r3, #22
 8005c76:	d4f7      	bmi.n	8005c68 <_vfiprintf_r+0x44>
 8005c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c7a:	f7ff fea1 	bl	80059c0 <__retarget_lock_release_recursive>
 8005c7e:	e7f3      	b.n	8005c68 <_vfiprintf_r+0x44>
 8005c80:	2300      	movs	r3, #0
 8005c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c84:	2320      	movs	r3, #32
 8005c86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c8e:	2330      	movs	r3, #48	@ 0x30
 8005c90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e40 <_vfiprintf_r+0x21c>
 8005c94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c98:	f04f 0901 	mov.w	r9, #1
 8005c9c:	4623      	mov	r3, r4
 8005c9e:	469a      	mov	sl, r3
 8005ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca4:	b10a      	cbz	r2, 8005caa <_vfiprintf_r+0x86>
 8005ca6:	2a25      	cmp	r2, #37	@ 0x25
 8005ca8:	d1f9      	bne.n	8005c9e <_vfiprintf_r+0x7a>
 8005caa:	ebba 0b04 	subs.w	fp, sl, r4
 8005cae:	d00b      	beq.n	8005cc8 <_vfiprintf_r+0xa4>
 8005cb0:	465b      	mov	r3, fp
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7ff ffa1 	bl	8005bfe <__sfputs_r>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f000 80a7 	beq.w	8005e10 <_vfiprintf_r+0x1ec>
 8005cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cc4:	445a      	add	r2, fp
 8005cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 809f 	beq.w	8005e10 <_vfiprintf_r+0x1ec>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cdc:	f10a 0a01 	add.w	sl, sl, #1
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ce8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cea:	4654      	mov	r4, sl
 8005cec:	2205      	movs	r2, #5
 8005cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf2:	4853      	ldr	r0, [pc, #332]	@ (8005e40 <_vfiprintf_r+0x21c>)
 8005cf4:	f7fa fa8c 	bl	8000210 <memchr>
 8005cf8:	9a04      	ldr	r2, [sp, #16]
 8005cfa:	b9d8      	cbnz	r0, 8005d34 <_vfiprintf_r+0x110>
 8005cfc:	06d1      	lsls	r1, r2, #27
 8005cfe:	bf44      	itt	mi
 8005d00:	2320      	movmi	r3, #32
 8005d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d06:	0713      	lsls	r3, r2, #28
 8005d08:	bf44      	itt	mi
 8005d0a:	232b      	movmi	r3, #43	@ 0x2b
 8005d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d10:	f89a 3000 	ldrb.w	r3, [sl]
 8005d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d16:	d015      	beq.n	8005d44 <_vfiprintf_r+0x120>
 8005d18:	9a07      	ldr	r2, [sp, #28]
 8005d1a:	4654      	mov	r4, sl
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f04f 0c0a 	mov.w	ip, #10
 8005d22:	4621      	mov	r1, r4
 8005d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d28:	3b30      	subs	r3, #48	@ 0x30
 8005d2a:	2b09      	cmp	r3, #9
 8005d2c:	d94b      	bls.n	8005dc6 <_vfiprintf_r+0x1a2>
 8005d2e:	b1b0      	cbz	r0, 8005d5e <_vfiprintf_r+0x13a>
 8005d30:	9207      	str	r2, [sp, #28]
 8005d32:	e014      	b.n	8005d5e <_vfiprintf_r+0x13a>
 8005d34:	eba0 0308 	sub.w	r3, r0, r8
 8005d38:	fa09 f303 	lsl.w	r3, r9, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	9304      	str	r3, [sp, #16]
 8005d40:	46a2      	mov	sl, r4
 8005d42:	e7d2      	b.n	8005cea <_vfiprintf_r+0xc6>
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	1d19      	adds	r1, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	9103      	str	r1, [sp, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bfbb      	ittet	lt
 8005d50:	425b      	neglt	r3, r3
 8005d52:	f042 0202 	orrlt.w	r2, r2, #2
 8005d56:	9307      	strge	r3, [sp, #28]
 8005d58:	9307      	strlt	r3, [sp, #28]
 8005d5a:	bfb8      	it	lt
 8005d5c:	9204      	strlt	r2, [sp, #16]
 8005d5e:	7823      	ldrb	r3, [r4, #0]
 8005d60:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d62:	d10a      	bne.n	8005d7a <_vfiprintf_r+0x156>
 8005d64:	7863      	ldrb	r3, [r4, #1]
 8005d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d68:	d132      	bne.n	8005dd0 <_vfiprintf_r+0x1ac>
 8005d6a:	9b03      	ldr	r3, [sp, #12]
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	9203      	str	r2, [sp, #12]
 8005d72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d76:	3402      	adds	r4, #2
 8005d78:	9305      	str	r3, [sp, #20]
 8005d7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e50 <_vfiprintf_r+0x22c>
 8005d7e:	7821      	ldrb	r1, [r4, #0]
 8005d80:	2203      	movs	r2, #3
 8005d82:	4650      	mov	r0, sl
 8005d84:	f7fa fa44 	bl	8000210 <memchr>
 8005d88:	b138      	cbz	r0, 8005d9a <_vfiprintf_r+0x176>
 8005d8a:	9b04      	ldr	r3, [sp, #16]
 8005d8c:	eba0 000a 	sub.w	r0, r0, sl
 8005d90:	2240      	movs	r2, #64	@ 0x40
 8005d92:	4082      	lsls	r2, r0
 8005d94:	4313      	orrs	r3, r2
 8005d96:	3401      	adds	r4, #1
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9e:	4829      	ldr	r0, [pc, #164]	@ (8005e44 <_vfiprintf_r+0x220>)
 8005da0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005da4:	2206      	movs	r2, #6
 8005da6:	f7fa fa33 	bl	8000210 <memchr>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d03f      	beq.n	8005e2e <_vfiprintf_r+0x20a>
 8005dae:	4b26      	ldr	r3, [pc, #152]	@ (8005e48 <_vfiprintf_r+0x224>)
 8005db0:	bb1b      	cbnz	r3, 8005dfa <_vfiprintf_r+0x1d6>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	3307      	adds	r3, #7
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	3308      	adds	r3, #8
 8005dbc:	9303      	str	r3, [sp, #12]
 8005dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc0:	443b      	add	r3, r7
 8005dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dc4:	e76a      	b.n	8005c9c <_vfiprintf_r+0x78>
 8005dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dca:	460c      	mov	r4, r1
 8005dcc:	2001      	movs	r0, #1
 8005dce:	e7a8      	b.n	8005d22 <_vfiprintf_r+0xfe>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	3401      	adds	r4, #1
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	f04f 0c0a 	mov.w	ip, #10
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de2:	3a30      	subs	r2, #48	@ 0x30
 8005de4:	2a09      	cmp	r2, #9
 8005de6:	d903      	bls.n	8005df0 <_vfiprintf_r+0x1cc>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0c6      	beq.n	8005d7a <_vfiprintf_r+0x156>
 8005dec:	9105      	str	r1, [sp, #20]
 8005dee:	e7c4      	b.n	8005d7a <_vfiprintf_r+0x156>
 8005df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df4:	4604      	mov	r4, r0
 8005df6:	2301      	movs	r3, #1
 8005df8:	e7f0      	b.n	8005ddc <_vfiprintf_r+0x1b8>
 8005dfa:	ab03      	add	r3, sp, #12
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	462a      	mov	r2, r5
 8005e00:	4b12      	ldr	r3, [pc, #72]	@ (8005e4c <_vfiprintf_r+0x228>)
 8005e02:	a904      	add	r1, sp, #16
 8005e04:	4630      	mov	r0, r6
 8005e06:	f3af 8000 	nop.w
 8005e0a:	4607      	mov	r7, r0
 8005e0c:	1c78      	adds	r0, r7, #1
 8005e0e:	d1d6      	bne.n	8005dbe <_vfiprintf_r+0x19a>
 8005e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e12:	07d9      	lsls	r1, r3, #31
 8005e14:	d405      	bmi.n	8005e22 <_vfiprintf_r+0x1fe>
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	059a      	lsls	r2, r3, #22
 8005e1a:	d402      	bmi.n	8005e22 <_vfiprintf_r+0x1fe>
 8005e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e1e:	f7ff fdcf 	bl	80059c0 <__retarget_lock_release_recursive>
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	065b      	lsls	r3, r3, #25
 8005e26:	f53f af1f 	bmi.w	8005c68 <_vfiprintf_r+0x44>
 8005e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e2c:	e71e      	b.n	8005c6c <_vfiprintf_r+0x48>
 8005e2e:	ab03      	add	r3, sp, #12
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	462a      	mov	r2, r5
 8005e34:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <_vfiprintf_r+0x228>)
 8005e36:	a904      	add	r1, sp, #16
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f000 f879 	bl	8005f30 <_printf_i>
 8005e3e:	e7e4      	b.n	8005e0a <_vfiprintf_r+0x1e6>
 8005e40:	0800633c 	.word	0x0800633c
 8005e44:	08006346 	.word	0x08006346
 8005e48:	00000000 	.word	0x00000000
 8005e4c:	08005bff 	.word	0x08005bff
 8005e50:	08006342 	.word	0x08006342

08005e54 <_printf_common>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	4616      	mov	r6, r2
 8005e5a:	4698      	mov	r8, r3
 8005e5c:	688a      	ldr	r2, [r1, #8]
 8005e5e:	690b      	ldr	r3, [r1, #16]
 8005e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e64:	4293      	cmp	r3, r2
 8005e66:	bfb8      	it	lt
 8005e68:	4613      	movlt	r3, r2
 8005e6a:	6033      	str	r3, [r6, #0]
 8005e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e70:	4607      	mov	r7, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	b10a      	cbz	r2, 8005e7a <_printf_common+0x26>
 8005e76:	3301      	adds	r3, #1
 8005e78:	6033      	str	r3, [r6, #0]
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	0699      	lsls	r1, r3, #26
 8005e7e:	bf42      	ittt	mi
 8005e80:	6833      	ldrmi	r3, [r6, #0]
 8005e82:	3302      	addmi	r3, #2
 8005e84:	6033      	strmi	r3, [r6, #0]
 8005e86:	6825      	ldr	r5, [r4, #0]
 8005e88:	f015 0506 	ands.w	r5, r5, #6
 8005e8c:	d106      	bne.n	8005e9c <_printf_common+0x48>
 8005e8e:	f104 0a19 	add.w	sl, r4, #25
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	6832      	ldr	r2, [r6, #0]
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dc26      	bgt.n	8005eea <_printf_common+0x96>
 8005e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	3b00      	subs	r3, #0
 8005ea4:	bf18      	it	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	0692      	lsls	r2, r2, #26
 8005eaa:	d42b      	bmi.n	8005f04 <_printf_common+0xb0>
 8005eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c8      	blx	r9
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d01e      	beq.n	8005ef8 <_printf_common+0xa4>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	6922      	ldr	r2, [r4, #16]
 8005ebe:	f003 0306 	and.w	r3, r3, #6
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	bf02      	ittt	eq
 8005ec6:	68e5      	ldreq	r5, [r4, #12]
 8005ec8:	6833      	ldreq	r3, [r6, #0]
 8005eca:	1aed      	subeq	r5, r5, r3
 8005ecc:	68a3      	ldr	r3, [r4, #8]
 8005ece:	bf0c      	ite	eq
 8005ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed4:	2500      	movne	r5, #0
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	bfc4      	itt	gt
 8005eda:	1a9b      	subgt	r3, r3, r2
 8005edc:	18ed      	addgt	r5, r5, r3
 8005ede:	2600      	movs	r6, #0
 8005ee0:	341a      	adds	r4, #26
 8005ee2:	42b5      	cmp	r5, r6
 8005ee4:	d11a      	bne.n	8005f1c <_printf_common+0xc8>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e008      	b.n	8005efc <_printf_common+0xa8>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4652      	mov	r2, sl
 8005eee:	4641      	mov	r1, r8
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	47c8      	blx	r9
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d103      	bne.n	8005f00 <_printf_common+0xac>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	3501      	adds	r5, #1
 8005f02:	e7c6      	b.n	8005e92 <_printf_common+0x3e>
 8005f04:	18e1      	adds	r1, r4, r3
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	2030      	movs	r0, #48	@ 0x30
 8005f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f0e:	4422      	add	r2, r4
 8005f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f18:	3302      	adds	r3, #2
 8005f1a:	e7c7      	b.n	8005eac <_printf_common+0x58>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4641      	mov	r1, r8
 8005f22:	4638      	mov	r0, r7
 8005f24:	47c8      	blx	r9
 8005f26:	3001      	adds	r0, #1
 8005f28:	d0e6      	beq.n	8005ef8 <_printf_common+0xa4>
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7d9      	b.n	8005ee2 <_printf_common+0x8e>
	...

08005f30 <_printf_i>:
 8005f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	7e0f      	ldrb	r7, [r1, #24]
 8005f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f38:	2f78      	cmp	r7, #120	@ 0x78
 8005f3a:	4691      	mov	r9, r2
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	469a      	mov	sl, r3
 8005f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f46:	d807      	bhi.n	8005f58 <_printf_i+0x28>
 8005f48:	2f62      	cmp	r7, #98	@ 0x62
 8005f4a:	d80a      	bhi.n	8005f62 <_printf_i+0x32>
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	f000 80d2 	beq.w	80060f6 <_printf_i+0x1c6>
 8005f52:	2f58      	cmp	r7, #88	@ 0x58
 8005f54:	f000 80b9 	beq.w	80060ca <_printf_i+0x19a>
 8005f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f60:	e03a      	b.n	8005fd8 <_printf_i+0xa8>
 8005f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f66:	2b15      	cmp	r3, #21
 8005f68:	d8f6      	bhi.n	8005f58 <_printf_i+0x28>
 8005f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8005f70 <_printf_i+0x40>)
 8005f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f70:	08005fc9 	.word	0x08005fc9
 8005f74:	08005fdd 	.word	0x08005fdd
 8005f78:	08005f59 	.word	0x08005f59
 8005f7c:	08005f59 	.word	0x08005f59
 8005f80:	08005f59 	.word	0x08005f59
 8005f84:	08005f59 	.word	0x08005f59
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005f59 	.word	0x08005f59
 8005f90:	08005f59 	.word	0x08005f59
 8005f94:	08005f59 	.word	0x08005f59
 8005f98:	08005f59 	.word	0x08005f59
 8005f9c:	080060dd 	.word	0x080060dd
 8005fa0:	08006007 	.word	0x08006007
 8005fa4:	08006097 	.word	0x08006097
 8005fa8:	08005f59 	.word	0x08005f59
 8005fac:	08005f59 	.word	0x08005f59
 8005fb0:	080060ff 	.word	0x080060ff
 8005fb4:	08005f59 	.word	0x08005f59
 8005fb8:	08006007 	.word	0x08006007
 8005fbc:	08005f59 	.word	0x08005f59
 8005fc0:	08005f59 	.word	0x08005f59
 8005fc4:	0800609f 	.word	0x0800609f
 8005fc8:	6833      	ldr	r3, [r6, #0]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6032      	str	r2, [r6, #0]
 8005fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e09d      	b.n	8006118 <_printf_i+0x1e8>
 8005fdc:	6833      	ldr	r3, [r6, #0]
 8005fde:	6820      	ldr	r0, [r4, #0]
 8005fe0:	1d19      	adds	r1, r3, #4
 8005fe2:	6031      	str	r1, [r6, #0]
 8005fe4:	0606      	lsls	r6, r0, #24
 8005fe6:	d501      	bpl.n	8005fec <_printf_i+0xbc>
 8005fe8:	681d      	ldr	r5, [r3, #0]
 8005fea:	e003      	b.n	8005ff4 <_printf_i+0xc4>
 8005fec:	0645      	lsls	r5, r0, #25
 8005fee:	d5fb      	bpl.n	8005fe8 <_printf_i+0xb8>
 8005ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ff4:	2d00      	cmp	r5, #0
 8005ff6:	da03      	bge.n	8006000 <_printf_i+0xd0>
 8005ff8:	232d      	movs	r3, #45	@ 0x2d
 8005ffa:	426d      	negs	r5, r5
 8005ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006000:	4859      	ldr	r0, [pc, #356]	@ (8006168 <_printf_i+0x238>)
 8006002:	230a      	movs	r3, #10
 8006004:	e011      	b.n	800602a <_printf_i+0xfa>
 8006006:	6821      	ldr	r1, [r4, #0]
 8006008:	6833      	ldr	r3, [r6, #0]
 800600a:	0608      	lsls	r0, r1, #24
 800600c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006010:	d402      	bmi.n	8006018 <_printf_i+0xe8>
 8006012:	0649      	lsls	r1, r1, #25
 8006014:	bf48      	it	mi
 8006016:	b2ad      	uxthmi	r5, r5
 8006018:	2f6f      	cmp	r7, #111	@ 0x6f
 800601a:	4853      	ldr	r0, [pc, #332]	@ (8006168 <_printf_i+0x238>)
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	bf14      	ite	ne
 8006020:	230a      	movne	r3, #10
 8006022:	2308      	moveq	r3, #8
 8006024:	2100      	movs	r1, #0
 8006026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800602a:	6866      	ldr	r6, [r4, #4]
 800602c:	60a6      	str	r6, [r4, #8]
 800602e:	2e00      	cmp	r6, #0
 8006030:	bfa2      	ittt	ge
 8006032:	6821      	ldrge	r1, [r4, #0]
 8006034:	f021 0104 	bicge.w	r1, r1, #4
 8006038:	6021      	strge	r1, [r4, #0]
 800603a:	b90d      	cbnz	r5, 8006040 <_printf_i+0x110>
 800603c:	2e00      	cmp	r6, #0
 800603e:	d04b      	beq.n	80060d8 <_printf_i+0x1a8>
 8006040:	4616      	mov	r6, r2
 8006042:	fbb5 f1f3 	udiv	r1, r5, r3
 8006046:	fb03 5711 	mls	r7, r3, r1, r5
 800604a:	5dc7      	ldrb	r7, [r0, r7]
 800604c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006050:	462f      	mov	r7, r5
 8006052:	42bb      	cmp	r3, r7
 8006054:	460d      	mov	r5, r1
 8006056:	d9f4      	bls.n	8006042 <_printf_i+0x112>
 8006058:	2b08      	cmp	r3, #8
 800605a:	d10b      	bne.n	8006074 <_printf_i+0x144>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	07df      	lsls	r7, r3, #31
 8006060:	d508      	bpl.n	8006074 <_printf_i+0x144>
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	6861      	ldr	r1, [r4, #4]
 8006066:	4299      	cmp	r1, r3
 8006068:	bfde      	ittt	le
 800606a:	2330      	movle	r3, #48	@ 0x30
 800606c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006074:	1b92      	subs	r2, r2, r6
 8006076:	6122      	str	r2, [r4, #16]
 8006078:	f8cd a000 	str.w	sl, [sp]
 800607c:	464b      	mov	r3, r9
 800607e:	aa03      	add	r2, sp, #12
 8006080:	4621      	mov	r1, r4
 8006082:	4640      	mov	r0, r8
 8006084:	f7ff fee6 	bl	8005e54 <_printf_common>
 8006088:	3001      	adds	r0, #1
 800608a:	d14a      	bne.n	8006122 <_printf_i+0x1f2>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	b004      	add	sp, #16
 8006092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f043 0320 	orr.w	r3, r3, #32
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	4833      	ldr	r0, [pc, #204]	@ (800616c <_printf_i+0x23c>)
 80060a0:	2778      	movs	r7, #120	@ 0x78
 80060a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	6831      	ldr	r1, [r6, #0]
 80060aa:	061f      	lsls	r7, r3, #24
 80060ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80060b0:	d402      	bmi.n	80060b8 <_printf_i+0x188>
 80060b2:	065f      	lsls	r7, r3, #25
 80060b4:	bf48      	it	mi
 80060b6:	b2ad      	uxthmi	r5, r5
 80060b8:	6031      	str	r1, [r6, #0]
 80060ba:	07d9      	lsls	r1, r3, #31
 80060bc:	bf44      	itt	mi
 80060be:	f043 0320 	orrmi.w	r3, r3, #32
 80060c2:	6023      	strmi	r3, [r4, #0]
 80060c4:	b11d      	cbz	r5, 80060ce <_printf_i+0x19e>
 80060c6:	2310      	movs	r3, #16
 80060c8:	e7ac      	b.n	8006024 <_printf_i+0xf4>
 80060ca:	4827      	ldr	r0, [pc, #156]	@ (8006168 <_printf_i+0x238>)
 80060cc:	e7e9      	b.n	80060a2 <_printf_i+0x172>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	f023 0320 	bic.w	r3, r3, #32
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	e7f6      	b.n	80060c6 <_printf_i+0x196>
 80060d8:	4616      	mov	r6, r2
 80060da:	e7bd      	b.n	8006058 <_printf_i+0x128>
 80060dc:	6833      	ldr	r3, [r6, #0]
 80060de:	6825      	ldr	r5, [r4, #0]
 80060e0:	6961      	ldr	r1, [r4, #20]
 80060e2:	1d18      	adds	r0, r3, #4
 80060e4:	6030      	str	r0, [r6, #0]
 80060e6:	062e      	lsls	r6, r5, #24
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	d501      	bpl.n	80060f0 <_printf_i+0x1c0>
 80060ec:	6019      	str	r1, [r3, #0]
 80060ee:	e002      	b.n	80060f6 <_printf_i+0x1c6>
 80060f0:	0668      	lsls	r0, r5, #25
 80060f2:	d5fb      	bpl.n	80060ec <_printf_i+0x1bc>
 80060f4:	8019      	strh	r1, [r3, #0]
 80060f6:	2300      	movs	r3, #0
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	4616      	mov	r6, r2
 80060fc:	e7bc      	b.n	8006078 <_printf_i+0x148>
 80060fe:	6833      	ldr	r3, [r6, #0]
 8006100:	1d1a      	adds	r2, r3, #4
 8006102:	6032      	str	r2, [r6, #0]
 8006104:	681e      	ldr	r6, [r3, #0]
 8006106:	6862      	ldr	r2, [r4, #4]
 8006108:	2100      	movs	r1, #0
 800610a:	4630      	mov	r0, r6
 800610c:	f7fa f880 	bl	8000210 <memchr>
 8006110:	b108      	cbz	r0, 8006116 <_printf_i+0x1e6>
 8006112:	1b80      	subs	r0, r0, r6
 8006114:	6060      	str	r0, [r4, #4]
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	6123      	str	r3, [r4, #16]
 800611a:	2300      	movs	r3, #0
 800611c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006120:	e7aa      	b.n	8006078 <_printf_i+0x148>
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	4632      	mov	r2, r6
 8006126:	4649      	mov	r1, r9
 8006128:	4640      	mov	r0, r8
 800612a:	47d0      	blx	sl
 800612c:	3001      	adds	r0, #1
 800612e:	d0ad      	beq.n	800608c <_printf_i+0x15c>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	079b      	lsls	r3, r3, #30
 8006134:	d413      	bmi.n	800615e <_printf_i+0x22e>
 8006136:	68e0      	ldr	r0, [r4, #12]
 8006138:	9b03      	ldr	r3, [sp, #12]
 800613a:	4298      	cmp	r0, r3
 800613c:	bfb8      	it	lt
 800613e:	4618      	movlt	r0, r3
 8006140:	e7a6      	b.n	8006090 <_printf_i+0x160>
 8006142:	2301      	movs	r3, #1
 8006144:	4632      	mov	r2, r6
 8006146:	4649      	mov	r1, r9
 8006148:	4640      	mov	r0, r8
 800614a:	47d0      	blx	sl
 800614c:	3001      	adds	r0, #1
 800614e:	d09d      	beq.n	800608c <_printf_i+0x15c>
 8006150:	3501      	adds	r5, #1
 8006152:	68e3      	ldr	r3, [r4, #12]
 8006154:	9903      	ldr	r1, [sp, #12]
 8006156:	1a5b      	subs	r3, r3, r1
 8006158:	42ab      	cmp	r3, r5
 800615a:	dcf2      	bgt.n	8006142 <_printf_i+0x212>
 800615c:	e7eb      	b.n	8006136 <_printf_i+0x206>
 800615e:	2500      	movs	r5, #0
 8006160:	f104 0619 	add.w	r6, r4, #25
 8006164:	e7f5      	b.n	8006152 <_printf_i+0x222>
 8006166:	bf00      	nop
 8006168:	0800634d 	.word	0x0800634d
 800616c:	0800635e 	.word	0x0800635e

08006170 <__swhatbuf_r>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	460c      	mov	r4, r1
 8006174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006178:	2900      	cmp	r1, #0
 800617a:	b096      	sub	sp, #88	@ 0x58
 800617c:	4615      	mov	r5, r2
 800617e:	461e      	mov	r6, r3
 8006180:	da0d      	bge.n	800619e <__swhatbuf_r+0x2e>
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006188:	f04f 0100 	mov.w	r1, #0
 800618c:	bf14      	ite	ne
 800618e:	2340      	movne	r3, #64	@ 0x40
 8006190:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006194:	2000      	movs	r0, #0
 8006196:	6031      	str	r1, [r6, #0]
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	b016      	add	sp, #88	@ 0x58
 800619c:	bd70      	pop	{r4, r5, r6, pc}
 800619e:	466a      	mov	r2, sp
 80061a0:	f000 f848 	bl	8006234 <_fstat_r>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	dbec      	blt.n	8006182 <__swhatbuf_r+0x12>
 80061a8:	9901      	ldr	r1, [sp, #4]
 80061aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80061ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061b2:	4259      	negs	r1, r3
 80061b4:	4159      	adcs	r1, r3
 80061b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061ba:	e7eb      	b.n	8006194 <__swhatbuf_r+0x24>

080061bc <__smakebuf_r>:
 80061bc:	898b      	ldrh	r3, [r1, #12]
 80061be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061c0:	079d      	lsls	r5, r3, #30
 80061c2:	4606      	mov	r6, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	d507      	bpl.n	80061d8 <__smakebuf_r+0x1c>
 80061c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	2301      	movs	r3, #1
 80061d2:	6163      	str	r3, [r4, #20]
 80061d4:	b003      	add	sp, #12
 80061d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d8:	ab01      	add	r3, sp, #4
 80061da:	466a      	mov	r2, sp
 80061dc:	f7ff ffc8 	bl	8006170 <__swhatbuf_r>
 80061e0:	9f00      	ldr	r7, [sp, #0]
 80061e2:	4605      	mov	r5, r0
 80061e4:	4639      	mov	r1, r7
 80061e6:	4630      	mov	r0, r6
 80061e8:	f7ff fc66 	bl	8005ab8 <_malloc_r>
 80061ec:	b948      	cbnz	r0, 8006202 <__smakebuf_r+0x46>
 80061ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f2:	059a      	lsls	r2, r3, #22
 80061f4:	d4ee      	bmi.n	80061d4 <__smakebuf_r+0x18>
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	f043 0302 	orr.w	r3, r3, #2
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	e7e2      	b.n	80061c8 <__smakebuf_r+0xc>
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	6020      	str	r0, [r4, #0]
 8006206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	9b01      	ldr	r3, [sp, #4]
 800620e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006212:	b15b      	cbz	r3, 800622c <__smakebuf_r+0x70>
 8006214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006218:	4630      	mov	r0, r6
 800621a:	f000 f81d 	bl	8006258 <_isatty_r>
 800621e:	b128      	cbz	r0, 800622c <__smakebuf_r+0x70>
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	81a3      	strh	r3, [r4, #12]
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	431d      	orrs	r5, r3
 8006230:	81a5      	strh	r5, [r4, #12]
 8006232:	e7cf      	b.n	80061d4 <__smakebuf_r+0x18>

08006234 <_fstat_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d07      	ldr	r5, [pc, #28]	@ (8006254 <_fstat_r+0x20>)
 8006238:	2300      	movs	r3, #0
 800623a:	4604      	mov	r4, r0
 800623c:	4608      	mov	r0, r1
 800623e:	4611      	mov	r1, r2
 8006240:	602b      	str	r3, [r5, #0]
 8006242:	f7fa fcbc 	bl	8000bbe <_fstat>
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	d102      	bne.n	8006250 <_fstat_r+0x1c>
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	b103      	cbz	r3, 8006250 <_fstat_r+0x1c>
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	bd38      	pop	{r3, r4, r5, pc}
 8006252:	bf00      	nop
 8006254:	20004bb4 	.word	0x20004bb4

08006258 <_isatty_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d06      	ldr	r5, [pc, #24]	@ (8006274 <_isatty_r+0x1c>)
 800625c:	2300      	movs	r3, #0
 800625e:	4604      	mov	r4, r0
 8006260:	4608      	mov	r0, r1
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	f7fa fcbb 	bl	8000bde <_isatty>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_isatty_r+0x1a>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_isatty_r+0x1a>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	20004bb4 	.word	0x20004bb4

08006278 <_sbrk_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d06      	ldr	r5, [pc, #24]	@ (8006294 <_sbrk_r+0x1c>)
 800627c:	2300      	movs	r3, #0
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	602b      	str	r3, [r5, #0]
 8006284:	f7fa fcc4 	bl	8000c10 <_sbrk>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_sbrk_r+0x1a>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_sbrk_r+0x1a>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	20004bb4 	.word	0x20004bb4

08006298 <_init>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	bf00      	nop
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr

080062a4 <_fini>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr
