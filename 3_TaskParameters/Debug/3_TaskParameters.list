
3_TaskParameters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000619c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800636c  0800636c  0000736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800643c  0800643c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  0800643c  0800643c  0000743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006444  08006444  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006448  08006448  00007448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800644c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b5c  2000006c  080064b8  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc8  080064b8  00008bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001747f  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c3  00000000  00000000  0001f51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  000229e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001052  00000000  00000000  00023ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049c2  00000000  00000000  00024f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179f5  00000000  00000000  000298fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd151  00000000  00000000  000412f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006018  00000000  00000000  0011e488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  001244a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006354 	.word	0x08006354

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006354 	.word	0x08006354

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
typedef uint32_t TaskProfiler;
TaskProfiler BlueTaskProfiler,RedTaskProfiler, GreenTaskProfiler,
				OrangeTaskProfiler;

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af02      	add	r7, sp, #8

	HAL_Init();
 80005a6:	f000 fb89 	bl	8000cbc <HAL_Init>

	SystemClock_Config();
 80005aa:	f000 f8a7 	bl	80006fc <SystemClock_Config>

	MX_GPIO_Init();
 80005ae:	f000 f93d 	bl	800082c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 f911 	bl	80007d8 <MX_USART2_UART_Init>

	xTaskCreate(vBlueLedController,
 80005b6:	2300      	movs	r3, #0
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2264      	movs	r2, #100	@ 0x64
 80005c2:	4914      	ldr	r1, [pc, #80]	@ (8000614 <main+0x74>)
 80005c4:	4814      	ldr	r0, [pc, #80]	@ (8000618 <main+0x78>)
 80005c6:	f003 f979 	bl	80038bc <xTaskCreate>
			  100,
			  NULL,
			  1,
			  NULL);

	xTaskCreate(vRedLedController,
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2264      	movs	r2, #100	@ 0x64
 80005d6:	4911      	ldr	r1, [pc, #68]	@ (800061c <main+0x7c>)
 80005d8:	4811      	ldr	r0, [pc, #68]	@ (8000620 <main+0x80>)
 80005da:	f003 f96f 	bl	80038bc <xTaskCreate>
			  100,
			  NULL,
			  1,
			  NULL);

	xTaskCreate(vGreenLedController,
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2264      	movs	r2, #100	@ 0x64
 80005ea:	490e      	ldr	r1, [pc, #56]	@ (8000624 <main+0x84>)
 80005ec:	480e      	ldr	r0, [pc, #56]	@ (8000628 <main+0x88>)
 80005ee:	f003 f965 	bl	80038bc <xTaskCreate>
			  100,
			  NULL,
			  1,
			  NULL);

	xTaskCreate(vOrangeLedController,
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2264      	movs	r2, #100	@ 0x64
 80005fe:	490b      	ldr	r1, [pc, #44]	@ (800062c <main+0x8c>)
 8000600:	480b      	ldr	r0, [pc, #44]	@ (8000630 <main+0x90>)
 8000602:	f003 f95b 	bl	80038bc <xTaskCreate>
			  100,
			  NULL,
			  1,
			  NULL);

	vTaskStartScheduler();
 8000606:	f003 fa9f 	bl	8003b48 <vTaskStartScheduler>

	while (1)
	{
	  printf("Hello from stm32 \n\r");
 800060a:	480a      	ldr	r0, [pc, #40]	@ (8000634 <main+0x94>)
 800060c:	f005 f826 	bl	800565c <iprintf>
 8000610:	e7fb      	b.n	800060a <main+0x6a>
 8000612:	bf00      	nop
 8000614:	0800636c 	.word	0x0800636c
 8000618:	08000639 	.word	0x08000639
 800061c:	08006380 	.word	0x08006380
 8000620:	08000661 	.word	0x08000661
 8000624:	08006394 	.word	0x08006394
 8000628:	08000689 	.word	0x08000689
 800062c:	080063ac 	.word	0x080063ac
 8000630:	080006b1 	.word	0x080006b1
 8000634:	080063c4 	.word	0x080063c4

08000638 <vBlueLedController>:
	}
}


void vBlueLedController(void *pvParameter)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlueTaskProfiler++;
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <vBlueLedController+0x20>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <vBlueLedController+0x20>)
 8000648:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, BLUE);
 800064a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064e:	4803      	ldr	r0, [pc, #12]	@ (800065c <vBlueLedController+0x24>)
 8000650:	f000 fe05 	bl	800125e <HAL_GPIO_TogglePin>
		BlueTaskProfiler++;
 8000654:	bf00      	nop
 8000656:	e7f3      	b.n	8000640 <vBlueLedController+0x8>
 8000658:	200000d0 	.word	0x200000d0
 800065c:	40020c00 	.word	0x40020c00

08000660 <vRedLedController>:
	}
}

void vRedLedController(void *pvParameter)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <vRedLedController+0x20>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <vRedLedController+0x20>)
 8000670:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, RED);
 8000672:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000676:	4803      	ldr	r0, [pc, #12]	@ (8000684 <vRedLedController+0x24>)
 8000678:	f000 fdf1 	bl	800125e <HAL_GPIO_TogglePin>
		RedTaskProfiler++;
 800067c:	bf00      	nop
 800067e:	e7f3      	b.n	8000668 <vRedLedController+0x8>
 8000680:	200000d4 	.word	0x200000d4
 8000684:	40020c00 	.word	0x40020c00

08000688 <vGreenLedController>:
	}
}

void vGreenLedController(void *pvParameter)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <vGreenLedController+0x20>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <vGreenLedController+0x20>)
 8000698:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, GREEN);
 800069a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800069e:	4803      	ldr	r0, [pc, #12]	@ (80006ac <vGreenLedController+0x24>)
 80006a0:	f000 fddd 	bl	800125e <HAL_GPIO_TogglePin>
		GreenTaskProfiler++;
 80006a4:	bf00      	nop
 80006a6:	e7f3      	b.n	8000690 <vGreenLedController+0x8>
 80006a8:	200000d8 	.word	0x200000d8
 80006ac:	40020c00 	.word	0x40020c00

080006b0 <vOrangeLedController>:
	}
}

void vOrangeLedController(void *pvParameter)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		OrangeTaskProfiler++;
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <vOrangeLedController+0x20>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <vOrangeLedController+0x20>)
 80006c0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, ORANGE);
 80006c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c6:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <vOrangeLedController+0x24>)
 80006c8:	f000 fdc9 	bl	800125e <HAL_GPIO_TogglePin>
		OrangeTaskProfiler++;
 80006cc:	bf00      	nop
 80006ce:	e7f3      	b.n	80006b8 <vOrangeLedController+0x8>
 80006d0:	200000dc 	.word	0x200000dc
 80006d4:	40020c00 	.word	0x40020c00

080006d8 <__io_putchar>:
	}
}

//this function for printf to be used in printing sentences
int __io_putchar(int ch)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 80006e0:	1d39      	adds	r1, r7, #4
 80006e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006e6:	2201      	movs	r2, #1
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <__io_putchar+0x20>)
 80006ea:	f001 fed9 	bl	80024a0 <HAL_UART_Transmit>
	return ch;
 80006ee:	687b      	ldr	r3, [r7, #4]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000088 	.word	0x20000088

080006fc <SystemClock_Config>:

void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	@ 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 fffb 	bl	8005706 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b2a      	ldr	r3, [pc, #168]	@ (80007d0 <SystemClock_Config+0xd4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a29      	ldr	r2, [pc, #164]	@ (80007d0 <SystemClock_Config+0xd4>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <SystemClock_Config+0xd4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000748:	4a22      	ldr	r2, [pc, #136]	@ (80007d4 <SystemClock_Config+0xd8>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <SystemClock_Config+0xd8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000778:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f8fe 	bl	800198c <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000796:	f000 f89f 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fd6c 	bl	8001294 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007c2:	f000 f889 	bl	80008d8 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f001 fdf6 	bl	8002400 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f85d 	bl	80008d8 <Error_Handler>
  }

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000088 	.word	0x20000088
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_GPIO_Init+0x80>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <MX_GPIO_Init+0x80>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_GPIO_Init+0x80>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]


  /*enable clock access to port*/
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_GPIO_Init+0x80>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <MX_GPIO_Init+0x80>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_GPIO_Init+0x80>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  /*reset pins*/
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14|
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <MX_GPIO_Init+0x84>)
 8000882:	f000 fcd3 	bl	800122c <HAL_GPIO_WritePin>
		  GPIO_PIN_15, GPIO_PIN_RESET);
  /*configure pins*/
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14|
 8000886:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800088a:	60fb      	str	r3, [r7, #12]
		  	  	  	  	GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  /*initialize pins*/
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_GPIO_Init+0x84>)
 80008a0:	f000 fb30 	bl	8000f04 <HAL_GPIO_Init>

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020c00 	.word	0x40020c00

080008b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c6:	f000 fa1b 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010000 	.word	0x40010000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_MspInit+0x54>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	4a11      	ldr	r2, [pc, #68]	@ (8000938 <HAL_MspInit+0x54>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <HAL_MspInit+0x54>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_MspInit+0x54>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	210f      	movs	r1, #15
 8000926:	f06f 0001 	mvn.w	r0, #1
 800092a:	f000 fac1 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	@ 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <HAL_UART_MspInit+0x84>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12b      	bne.n	80009b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	6413      	str	r3, [r2, #64]	@ 0x40
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <HAL_UART_MspInit+0x8c>)
 80009b2:	f000 faa7 	bl	8000f04 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	@ 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	@ 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a9c <HAL_InitTick+0xd0>)
 80009e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e4:	4a2d      	ldr	r2, [pc, #180]	@ (8000a9c <HAL_InitTick+0xd0>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ec:	4b2b      	ldr	r3, [pc, #172]	@ (8000a9c <HAL_InitTick+0xd0>)
 80009ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 020c 	add.w	r2, r7, #12
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fd60 	bl	80014c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a08:	f000 fd4a 	bl	80014a0 <HAL_RCC_GetPCLK2Freq>
 8000a0c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a10:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <HAL_InitTick+0xd4>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a1e:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <HAL_InitTick+0xdc>)
 8000a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a22:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a42:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a44:	f001 fa40 	bl	8001ec8 <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d11b      	bne.n	8000a8e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a56:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <HAL_InitTick+0xd8>)
 8000a58:	f001 fa90 	bl	8001f7c <HAL_TIM_Base_Start_IT>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d111      	bne.n	8000a8e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a6a:	2019      	movs	r0, #25
 8000a6c:	f000 fa3c 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b0f      	cmp	r3, #15
 8000a74:	d808      	bhi.n	8000a88 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a76:	2200      	movs	r2, #0
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f000 fa18 	bl	8000eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a80:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <HAL_InitTick+0xe0>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e002      	b.n	8000a8e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3730      	adds	r7, #48	@ 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	200000e0 	.word	0x200000e0
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	20000004 	.word	0x20000004

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000aee:	f001 fab5 	bl	800205c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000e0 	.word	0x200000e0

08000afc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
  }

  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e009      	b.n	8000b5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fdc1 	bl	80006d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf1      	blt.n	8000b48 <_write+0x12>
  }
  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
  return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f004 fdcc 	bl	80057a4 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	20000128 	.word	0x20000128
 8000c40:	20004bc8 	.word	0x20004bc8

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	@ (8000ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f004 fd8b 	bl	80057b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc81 	bl	80005a0 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cac:	0800644c 	.word	0x0800644c
  ldr r2, =_sbss
 8000cb0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cb4:	20004bc8 	.word	0x20004bc8

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8d8 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f7ff fe6e 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fdf8 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	2000012c 	.word	0x2000012c

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000012c 	.word	0x2000012c

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	@ (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	@ (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	@ 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e165      	b.n	80011ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8154 	bne.w	80011e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80ae 	beq.w	80011e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b5d      	ldr	r3, [pc, #372]	@ (8001204 <HAL_GPIO_Init+0x300>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	4a5c      	ldr	r2, [pc, #368]	@ (8001204 <HAL_GPIO_Init+0x300>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001098:	6453      	str	r3, [r2, #68]	@ 0x44
 800109a:	4b5a      	ldr	r3, [pc, #360]	@ (8001204 <HAL_GPIO_Init+0x300>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a58      	ldr	r2, [pc, #352]	@ (8001208 <HAL_GPIO_Init+0x304>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	@ (800120c <HAL_GPIO_Init+0x308>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001210 <HAL_GPIO_Init+0x30c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001214 <HAL_GPIO_Init+0x310>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001218 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4b      	ldr	r2, [pc, #300]	@ (800121c <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x20a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001220 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x206>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a49      	ldr	r2, [pc, #292]	@ (8001224 <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x202>
 8001102:	2306      	movs	r3, #6
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 8001106:	2307      	movs	r3, #7
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	@ (8001208 <HAL_GPIO_Init+0x304>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b3a      	ldr	r3, [pc, #232]	@ (8001228 <HAL_GPIO_Init+0x324>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a31      	ldr	r2, [pc, #196]	@ (8001228 <HAL_GPIO_Init+0x324>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b2f      	ldr	r3, [pc, #188]	@ (8001228 <HAL_GPIO_Init+0x324>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a26      	ldr	r2, [pc, #152]	@ (8001228 <HAL_GPIO_Init+0x324>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <HAL_GPIO_Init+0x324>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <HAL_GPIO_Init+0x324>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <HAL_GPIO_Init+0x324>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a11      	ldr	r2, [pc, #68]	@ (8001228 <HAL_GPIO_Init+0x324>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f ae96 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001270:	887a      	ldrh	r2, [r7, #2]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	041a      	lsls	r2, r3, #16
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43d9      	mvns	r1, r3
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	400b      	ands	r3, r1
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0cc      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a8:	4b68      	ldr	r3, [pc, #416]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d90c      	bls.n	80012d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b65      	ldr	r3, [pc, #404]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	4b63      	ldr	r3, [pc, #396]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0b8      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d020      	beq.n	800131e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012e8:	4b59      	ldr	r3, [pc, #356]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a58      	ldr	r2, [pc, #352]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001300:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800130a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800130c:	4b50      	ldr	r3, [pc, #320]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	494d      	ldr	r1, [pc, #308]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	4313      	orrs	r3, r2
 800131c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d044      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d107      	bne.n	8001342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b47      	ldr	r3, [pc, #284]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d119      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e07f      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d003      	beq.n	8001352 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134e:	2b03      	cmp	r3, #3
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001352:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e06f      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e067      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f023 0203 	bic.w	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4934      	ldr	r1, [pc, #208]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	4313      	orrs	r3, r2
 8001382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001384:	f7ff fcd0 	bl	8000d28 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138c:	f7ff fccc 	bl	8000d28 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e04f      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 020c 	and.w	r2, r3, #12
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1eb      	bne.n	800138c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b4:	4b25      	ldr	r3, [pc, #148]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d20c      	bcs.n	80013dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b22      	ldr	r3, [pc, #136]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b20      	ldr	r3, [pc, #128]	@ (800144c <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e032      	b.n	8001442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4916      	ldr	r1, [pc, #88]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d009      	beq.n	800141a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	490e      	ldr	r1, [pc, #56]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	4313      	orrs	r3, r2
 8001418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800141a:	f000 f887 	bl	800152c <HAL_RCC_GetSysClockFreq>
 800141e:	4602      	mov	r2, r0
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	490a      	ldr	r1, [pc, #40]	@ (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	5ccb      	ldrb	r3, [r1, r3]
 800142e:	fa22 f303 	lsr.w	r3, r2, r3
 8001432:	4a09      	ldr	r2, [pc, #36]	@ (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_RCC_ClockConfig+0x1c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fac6 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00
 8001450:	40023800 	.word	0x40023800
 8001454:	080063f0 	.word	0x080063f0
 8001458:	20000000 	.word	0x20000000
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_RCC_GetHCLKFreq+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000

08001478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800147c:	f7ff fff0 	bl	8001460 <HAL_RCC_GetHCLKFreq>
 8001480:	4602      	mov	r2, r0
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0a9b      	lsrs	r3, r3, #10
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	4903      	ldr	r1, [pc, #12]	@ (800149c <HAL_RCC_GetPCLK1Freq+0x24>)
 800148e:	5ccb      	ldrb	r3, [r1, r3]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	08006400 	.word	0x08006400

080014a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a4:	f7ff ffdc 	bl	8001460 <HAL_RCC_GetHCLKFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	0b5b      	lsrs	r3, r3, #13
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	4903      	ldr	r1, [pc, #12]	@ (80014c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	08006400 	.word	0x08006400

080014c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	220f      	movs	r2, #15
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_RCC_GetClockConfig+0x5c>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_RCC_GetClockConfig+0x5c>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <HAL_RCC_GetClockConfig+0x5c>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <HAL_RCC_GetClockConfig+0x5c>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <HAL_RCC_GetClockConfig+0x60>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 020f 	and.w	r2, r3, #15
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40023c00 	.word	0x40023c00

0800152c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800152c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001530:	b0ae      	sub	sp, #184	@ 0xb8
 8001532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001552:	4bcb      	ldr	r3, [pc, #812]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b0c      	cmp	r3, #12
 800155c:	f200 8206 	bhi.w	800196c <HAL_RCC_GetSysClockFreq+0x440>
 8001560:	a201      	add	r2, pc, #4	@ (adr r2, 8001568 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	0800159d 	.word	0x0800159d
 800156c:	0800196d 	.word	0x0800196d
 8001570:	0800196d 	.word	0x0800196d
 8001574:	0800196d 	.word	0x0800196d
 8001578:	080015a5 	.word	0x080015a5
 800157c:	0800196d 	.word	0x0800196d
 8001580:	0800196d 	.word	0x0800196d
 8001584:	0800196d 	.word	0x0800196d
 8001588:	080015ad 	.word	0x080015ad
 800158c:	0800196d 	.word	0x0800196d
 8001590:	0800196d 	.word	0x0800196d
 8001594:	0800196d 	.word	0x0800196d
 8001598:	0800179d 	.word	0x0800179d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800159c:	4bb9      	ldr	r3, [pc, #740]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x358>)
 800159e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015a2:	e1e7      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015a4:	4bb8      	ldr	r3, [pc, #736]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015aa:	e1e3      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ac:	4bb4      	ldr	r3, [pc, #720]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b8:	4bb1      	ldr	r3, [pc, #708]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d071      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c4:	4bae      	ldr	r3, [pc, #696]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	2200      	movs	r2, #0
 80015cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015ea:	4622      	mov	r2, r4
 80015ec:	462b      	mov	r3, r5
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	f04f 0100 	mov.w	r1, #0
 80015f6:	0159      	lsls	r1, r3, #5
 80015f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015fc:	0150      	lsls	r0, r2, #5
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4621      	mov	r1, r4
 8001604:	1a51      	subs	r1, r2, r1
 8001606:	6439      	str	r1, [r7, #64]	@ 0x40
 8001608:	4629      	mov	r1, r5
 800160a:	eb63 0301 	sbc.w	r3, r3, r1
 800160e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800161c:	4649      	mov	r1, r9
 800161e:	018b      	lsls	r3, r1, #6
 8001620:	4641      	mov	r1, r8
 8001622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001626:	4641      	mov	r1, r8
 8001628:	018a      	lsls	r2, r1, #6
 800162a:	4641      	mov	r1, r8
 800162c:	1a51      	subs	r1, r2, r1
 800162e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001630:	4649      	mov	r1, r9
 8001632:	eb63 0301 	sbc.w	r3, r3, r1
 8001636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001644:	4649      	mov	r1, r9
 8001646:	00cb      	lsls	r3, r1, #3
 8001648:	4641      	mov	r1, r8
 800164a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800164e:	4641      	mov	r1, r8
 8001650:	00ca      	lsls	r2, r1, #3
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	4603      	mov	r3, r0
 8001658:	4622      	mov	r2, r4
 800165a:	189b      	adds	r3, r3, r2
 800165c:	633b      	str	r3, [r7, #48]	@ 0x30
 800165e:	462b      	mov	r3, r5
 8001660:	460a      	mov	r2, r1
 8001662:	eb42 0303 	adc.w	r3, r2, r3
 8001666:	637b      	str	r3, [r7, #52]	@ 0x34
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001674:	4629      	mov	r1, r5
 8001676:	024b      	lsls	r3, r1, #9
 8001678:	4621      	mov	r1, r4
 800167a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800167e:	4621      	mov	r1, r4
 8001680:	024a      	lsls	r2, r1, #9
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800168a:	2200      	movs	r2, #0
 800168c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001690:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001694:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001698:	f7fe fe0a 	bl	80002b0 <__aeabi_uldivmod>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4613      	mov	r3, r2
 80016a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016a6:	e067      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a8:	4b75      	ldr	r3, [pc, #468]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016c2:	2300      	movs	r3, #0
 80016c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016ca:	4622      	mov	r2, r4
 80016cc:	462b      	mov	r3, r5
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	0159      	lsls	r1, r3, #5
 80016d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016dc:	0150      	lsls	r0, r2, #5
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4621      	mov	r1, r4
 80016e4:	1a51      	subs	r1, r2, r1
 80016e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016e8:	4629      	mov	r1, r5
 80016ea:	eb63 0301 	sbc.w	r3, r3, r1
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016fc:	4649      	mov	r1, r9
 80016fe:	018b      	lsls	r3, r1, #6
 8001700:	4641      	mov	r1, r8
 8001702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001706:	4641      	mov	r1, r8
 8001708:	018a      	lsls	r2, r1, #6
 800170a:	4641      	mov	r1, r8
 800170c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001710:	4649      	mov	r1, r9
 8001712:	eb63 0b01 	sbc.w	fp, r3, r1
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001722:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001726:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800172a:	4692      	mov	sl, r2
 800172c:	469b      	mov	fp, r3
 800172e:	4623      	mov	r3, r4
 8001730:	eb1a 0303 	adds.w	r3, sl, r3
 8001734:	623b      	str	r3, [r7, #32]
 8001736:	462b      	mov	r3, r5
 8001738:	eb4b 0303 	adc.w	r3, fp, r3
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800174a:	4629      	mov	r1, r5
 800174c:	028b      	lsls	r3, r1, #10
 800174e:	4621      	mov	r1, r4
 8001750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001754:	4621      	mov	r1, r4
 8001756:	028a      	lsls	r2, r1, #10
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001760:	2200      	movs	r2, #0
 8001762:	673b      	str	r3, [r7, #112]	@ 0x70
 8001764:	677a      	str	r2, [r7, #116]	@ 0x74
 8001766:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800176a:	f7fe fda1 	bl	80002b0 <__aeabi_uldivmod>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4613      	mov	r3, r2
 8001774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001778:	4b41      	ldr	r3, [pc, #260]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800178a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800178e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800179a:	e0eb      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800179c:	4b38      	ldr	r3, [pc, #224]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a8:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d06b      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b4:	4b32      	ldr	r3, [pc, #200]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x354>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	2200      	movs	r2, #0
 80017bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80017c8:	2300      	movs	r3, #0
 80017ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80017cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017d0:	4622      	mov	r2, r4
 80017d2:	462b      	mov	r3, r5
 80017d4:	f04f 0000 	mov.w	r0, #0
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	0159      	lsls	r1, r3, #5
 80017de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e2:	0150      	lsls	r0, r2, #5
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4621      	mov	r1, r4
 80017ea:	1a51      	subs	r1, r2, r1
 80017ec:	61b9      	str	r1, [r7, #24]
 80017ee:	4629      	mov	r1, r5
 80017f0:	eb63 0301 	sbc.w	r3, r3, r1
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001802:	4659      	mov	r1, fp
 8001804:	018b      	lsls	r3, r1, #6
 8001806:	4651      	mov	r1, sl
 8001808:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180c:	4651      	mov	r1, sl
 800180e:	018a      	lsls	r2, r1, #6
 8001810:	4651      	mov	r1, sl
 8001812:	ebb2 0801 	subs.w	r8, r2, r1
 8001816:	4659      	mov	r1, fp
 8001818:	eb63 0901 	sbc.w	r9, r3, r1
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001828:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001830:	4690      	mov	r8, r2
 8001832:	4699      	mov	r9, r3
 8001834:	4623      	mov	r3, r4
 8001836:	eb18 0303 	adds.w	r3, r8, r3
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	462b      	mov	r3, r5
 800183e:	eb49 0303 	adc.w	r3, r9, r3
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001850:	4629      	mov	r1, r5
 8001852:	024b      	lsls	r3, r1, #9
 8001854:	4621      	mov	r1, r4
 8001856:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800185a:	4621      	mov	r1, r4
 800185c:	024a      	lsls	r2, r1, #9
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001866:	2200      	movs	r2, #0
 8001868:	65bb      	str	r3, [r7, #88]	@ 0x58
 800186a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800186c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001870:	f7fe fd1e 	bl	80002b0 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800187e:	e065      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x420>
 8001880:	40023800 	.word	0x40023800
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188c:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x458>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	2200      	movs	r2, #0
 8001894:	4618      	mov	r0, r3
 8001896:	4611      	mov	r1, r2
 8001898:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800189c:	653b      	str	r3, [r7, #80]	@ 0x50
 800189e:	2300      	movs	r3, #0
 80018a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80018a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018a6:	4642      	mov	r2, r8
 80018a8:	464b      	mov	r3, r9
 80018aa:	f04f 0000 	mov.w	r0, #0
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	0159      	lsls	r1, r3, #5
 80018b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b8:	0150      	lsls	r0, r2, #5
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4641      	mov	r1, r8
 80018c0:	1a51      	subs	r1, r2, r1
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	4649      	mov	r1, r9
 80018c6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018d8:	4659      	mov	r1, fp
 80018da:	018b      	lsls	r3, r1, #6
 80018dc:	4651      	mov	r1, sl
 80018de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e2:	4651      	mov	r1, sl
 80018e4:	018a      	lsls	r2, r1, #6
 80018e6:	4651      	mov	r1, sl
 80018e8:	1a54      	subs	r4, r2, r1
 80018ea:	4659      	mov	r1, fp
 80018ec:	eb63 0501 	sbc.w	r5, r3, r1
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	00eb      	lsls	r3, r5, #3
 80018fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018fe:	00e2      	lsls	r2, r4, #3
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	4643      	mov	r3, r8
 8001906:	18e3      	adds	r3, r4, r3
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	464b      	mov	r3, r9
 800190c:	eb45 0303 	adc.w	r3, r5, r3
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800191e:	4629      	mov	r1, r5
 8001920:	028b      	lsls	r3, r1, #10
 8001922:	4621      	mov	r1, r4
 8001924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001928:	4621      	mov	r1, r4
 800192a:	028a      	lsls	r2, r1, #10
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001934:	2200      	movs	r2, #0
 8001936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001938:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800193a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800193e:	f7fe fcb7 	bl	80002b0 <__aeabi_uldivmod>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4613      	mov	r3, r2
 8001948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x458>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0f1b      	lsrs	r3, r3, #28
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800195a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800195e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800196a:	e003      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x45c>)
 800196e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001972:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001978:	4618      	mov	r0, r3
 800197a:	37b8      	adds	r7, #184	@ 0xb8
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400

0800198c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e28d      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8083 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019ac:	4b94      	ldr	r3, [pc, #592]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d019      	beq.n	80019ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019b8:	4b91      	ldr	r3, [pc, #580]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019d0:	d00c      	beq.n	80019ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d112      	bne.n	8001a04 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019de:	4b88      	ldr	r3, [pc, #544]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ea:	d10b      	bne.n	8001a04 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	4b84      	ldr	r3, [pc, #528]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d05b      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x124>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d157      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e25a      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a0c:	d106      	bne.n	8001a1c <HAL_RCC_OscConfig+0x90>
 8001a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7b      	ldr	r2, [pc, #492]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e01d      	b.n	8001a58 <HAL_RCC_OscConfig+0xcc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0xb4>
 8001a26:	4b76      	ldr	r3, [pc, #472]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a75      	ldr	r2, [pc, #468]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b73      	ldr	r3, [pc, #460]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a72      	ldr	r2, [pc, #456]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0xcc>
 8001a40:	4b6f      	ldr	r3, [pc, #444]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6e      	ldr	r2, [pc, #440]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a6b      	ldr	r2, [pc, #428]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f962 	bl	8000d28 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f95e 	bl	8000d28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e21f      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b61      	ldr	r3, [pc, #388]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0xdc>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f94e 	bl	8000d28 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff f94a 	bl	8000d28 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	@ 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e20b      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	4b57      	ldr	r3, [pc, #348]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x104>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d06f      	beq.n	8001b9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001abe:	4b50      	ldr	r3, [pc, #320]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d017      	beq.n	8001afa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aca:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d105      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b44      	ldr	r3, [pc, #272]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x186>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1d3      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4937      	ldr	r1, [pc, #220]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <HAL_RCC_OscConfig+0x278>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f8f7 	bl	8000d28 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff f8f3 	bl	8000d28 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e1b4      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4925      	ldr	r1, [pc, #148]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <HAL_RCC_OscConfig+0x278>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff f8d6 	bl	8000d28 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff f8d2 	bl	8000d28 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e193      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d036      	beq.n	8001c18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f8b6 	bl	8000d28 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f8b2 	bl	8000d28 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e173      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x234>
 8001bde:	e01b      	b.n	8001c18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_RCC_OscConfig+0x27c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff f89f 	bl	8000d28 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	e00e      	b.n	8001c0c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bee:	f7ff f89b 	bl	8000d28 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d907      	bls.n	8001c0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e15c      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
 8001c00:	40023800 	.word	0x40023800
 8001c04:	42470000 	.word	0x42470000
 8001c08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	4b8a      	ldr	r3, [pc, #552]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ea      	bne.n	8001bee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8097 	beq.w	8001d54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b83      	ldr	r3, [pc, #524]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b7c      	ldr	r3, [pc, #496]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b79      	ldr	r3, [pc, #484]	@ (8001e3c <HAL_RCC_OscConfig+0x4b0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b76      	ldr	r3, [pc, #472]	@ (8001e3c <HAL_RCC_OscConfig+0x4b0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a75      	ldr	r2, [pc, #468]	@ (8001e3c <HAL_RCC_OscConfig+0x4b0>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f85b 	bl	8000d28 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff f857 	bl	8000d28 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e118      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b6c      	ldr	r3, [pc, #432]	@ (8001e3c <HAL_RCC_OscConfig+0x4b0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x31e>
 8001c9c:	4b66      	ldr	r3, [pc, #408]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca0:	4a65      	ldr	r2, [pc, #404]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x358>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x340>
 8001cb2:	4b61      	ldr	r3, [pc, #388]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb6:	4a60      	ldr	r2, [pc, #384]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cbe:	4b5e      	ldr	r3, [pc, #376]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x358>
 8001ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd0:	4a59      	ldr	r2, [pc, #356]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd8:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cdc:	4a56      	ldr	r2, [pc, #344]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001cde:	f023 0304 	bic.w	r3, r3, #4
 8001ce2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d015      	beq.n	8001d18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff f81c 	bl	8000d28 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7ff f818 	bl	8000d28 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0d7      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0ee      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x368>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff f806 	bl	8000d28 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff f802 	bl	8000d28 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e0c1      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d36:	4b40      	ldr	r3, [pc, #256]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ee      	bne.n	8001d20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80ad 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d5e:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d060      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d145      	bne.n	8001dfe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b33      	ldr	r3, [pc, #204]	@ (8001e40 <HAL_RCC_OscConfig+0x4b4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe ffd6 	bl	8000d28 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7fe ffd2 	bl	8000d28 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e093      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	019b      	lsls	r3, r3, #6
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	3b01      	subs	r3, #1
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	071b      	lsls	r3, r3, #28
 8001dca:	491b      	ldr	r1, [pc, #108]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <HAL_RCC_OscConfig+0x4b4>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7fe ffa7 	bl	8000d28 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe ffa3 	bl	8000d28 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e064      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x452>
 8001dfc:	e05c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <HAL_RCC_OscConfig+0x4b4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe ff90 	bl	8000d28 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe ff8c 	bl	8000d28 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e04d      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x480>
 8001e2a:	e045      	b.n	8001eb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e040      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <HAL_RCC_OscConfig+0x538>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d030      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d129      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d122      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d119      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d10f      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e041      	b.n	8001f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f839 	bl	8001f66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3304      	adds	r3, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f000 f9c0 	bl	800228c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d001      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e04e      	b.n	8002032 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a23      	ldr	r2, [pc, #140]	@ (8002040 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d022      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x80>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbe:	d01d      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x80>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002044 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d018      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x80>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1e      	ldr	r2, [pc, #120]	@ (8002048 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x80>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <HAL_TIM_Base_Start_IT+0xd0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00e      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x80>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d009      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x80>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a19      	ldr	r2, [pc, #100]	@ (8002054 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x80>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a18      	ldr	r2, [pc, #96]	@ (8002058 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d010      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201e:	e007      	b.n	8002030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40000400 	.word	0x40000400
 8002048:	40000800 	.word	0x40000800
 800204c:	40000c00 	.word	0x40000c00
 8002050:	40010400 	.word	0x40010400
 8002054:	40014000 	.word	0x40014000
 8002058:	40001800 	.word	0x40001800

0800205c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d020      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01b      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0202 	mvn.w	r2, #2
 8002090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8d2 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8c4 	bl	800223c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8d5 	bl	8002264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d020      	beq.n	800210c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0204 	mvn.w	r2, #4
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2202      	movs	r2, #2
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8ac 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f89e 	bl	800223c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f8af 	bl	8002264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d020      	beq.n	8002158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0208 	mvn.w	r2, #8
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2204      	movs	r2, #4
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f886 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f878 	bl	800223c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f889 	bl	8002264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0210 	mvn.w	r2, #16
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2208      	movs	r2, #8
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f860 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f852 	bl	800223c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f863 	bl	8002264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0201 	mvn.w	r2, #1
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fb76 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00c      	beq.n	80021ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f900 	bl	80023ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f834 	bl	8002278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0220 	mvn.w	r2, #32
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8d2 	bl	80023d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a43      	ldr	r2, [pc, #268]	@ (80023ac <TIM_Base_SetConfig+0x120>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d013      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022aa:	d00f      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a40      	ldr	r2, [pc, #256]	@ (80023b0 <TIM_Base_SetConfig+0x124>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00b      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3f      	ldr	r2, [pc, #252]	@ (80023b4 <TIM_Base_SetConfig+0x128>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3e      	ldr	r2, [pc, #248]	@ (80023b8 <TIM_Base_SetConfig+0x12c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3d      	ldr	r2, [pc, #244]	@ (80023bc <TIM_Base_SetConfig+0x130>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d108      	bne.n	80022de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a32      	ldr	r2, [pc, #200]	@ (80023ac <TIM_Base_SetConfig+0x120>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02b      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ec:	d027      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2f      	ldr	r2, [pc, #188]	@ (80023b0 <TIM_Base_SetConfig+0x124>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d023      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2e      	ldr	r2, [pc, #184]	@ (80023b4 <TIM_Base_SetConfig+0x128>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01f      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a2d      	ldr	r2, [pc, #180]	@ (80023b8 <TIM_Base_SetConfig+0x12c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01b      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2c      	ldr	r2, [pc, #176]	@ (80023bc <TIM_Base_SetConfig+0x130>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d017      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <TIM_Base_SetConfig+0x134>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2a      	ldr	r2, [pc, #168]	@ (80023c4 <TIM_Base_SetConfig+0x138>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00f      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a29      	ldr	r2, [pc, #164]	@ (80023c8 <TIM_Base_SetConfig+0x13c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a28      	ldr	r2, [pc, #160]	@ (80023cc <TIM_Base_SetConfig+0x140>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a27      	ldr	r2, [pc, #156]	@ (80023d0 <TIM_Base_SetConfig+0x144>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a26      	ldr	r2, [pc, #152]	@ (80023d4 <TIM_Base_SetConfig+0x148>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d108      	bne.n	8002350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a0e      	ldr	r2, [pc, #56]	@ (80023ac <TIM_Base_SetConfig+0x120>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d003      	beq.n	800237e <TIM_Base_SetConfig+0xf2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a10      	ldr	r2, [pc, #64]	@ (80023bc <TIM_Base_SetConfig+0x130>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d103      	bne.n	8002386 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f043 0204 	orr.w	r2, r3, #4
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40000c00 	.word	0x40000c00
 80023bc:	40010400 	.word	0x40010400
 80023c0:	40014000 	.word	0x40014000
 80023c4:	40014400 	.word	0x40014400
 80023c8:	40014800 	.word	0x40014800
 80023cc:	40001800 	.word	0x40001800
 80023d0:	40001c00 	.word	0x40001c00
 80023d4:	40002000 	.word	0x40002000

080023d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e042      	b.n	8002498 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fa88 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2224      	movs	r2, #36	@ 0x24
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f973 	bl	8002730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d175      	bne.n	80025ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_UART_Transmit+0x2c>
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e06e      	b.n	80025ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2221      	movs	r2, #33	@ 0x21
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024de:	f7fe fc23 	bl	8000d28 <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f8:	d108      	bne.n	800250c <HAL_UART_Transmit+0x6c>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	e003      	b.n	8002514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002514:	e02e      	b.n	8002574 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	2180      	movs	r1, #128	@ 0x80
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f848 	bl	80025b6 <UART_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e03a      	b.n	80025ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3302      	adds	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e007      	b.n	8002566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1cb      	bne.n	8002516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2200      	movs	r2, #0
 8002586:	2140      	movs	r1, #64	@ 0x40
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f814 	bl	80025b6 <UART_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e006      	b.n	80025ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c6:	e03b      	b.n	8002640 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ce:	d037      	beq.n	8002640 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d0:	f7fe fbaa 	bl	8000d28 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d302      	bcc.n	80025e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e03a      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d023      	beq.n	8002640 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b80      	cmp	r3, #128	@ 0x80
 80025fc:	d020      	beq.n	8002640 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b40      	cmp	r3, #64	@ 0x40
 8002602:	d01d      	beq.n	8002640 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b08      	cmp	r3, #8
 8002610:	d116      	bne.n	8002640 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f81d 	bl	8002668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2208      	movs	r2, #8
 8002632:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e00f      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4013      	ands	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	429a      	cmp	r2, r3
 800265c:	d0b4      	beq.n	80025c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002668:	b480      	push	{r7}
 800266a:	b095      	sub	sp, #84	@ 0x54
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267a:	e853 3f00 	ldrex	r3, [r3]
 800267e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002682:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002690:	643a      	str	r2, [r7, #64]	@ 0x40
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002694:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002696:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002698:	e841 2300 	strex	r3, r2, [r1]
 800269c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e5      	bne.n	8002670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3314      	adds	r3, #20
 80026aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	e853 3f00 	ldrex	r3, [r3]
 80026b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3314      	adds	r3, #20
 80026c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026cc:	e841 2300 	strex	r3, r2, [r1]
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e5      	bne.n	80026a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d119      	bne.n	8002714 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	330c      	adds	r3, #12
 80026e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	e853 3f00 	ldrex	r3, [r3]
 80026ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f023 0310 	bic.w	r3, r3, #16
 80026f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002700:	61ba      	str	r2, [r7, #24]
 8002702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002704:	6979      	ldr	r1, [r7, #20]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	e841 2300 	strex	r3, r2, [r1]
 800270c:	613b      	str	r3, [r7, #16]
   return(result);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e5      	bne.n	80026e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002722:	bf00      	nop
 8002724:	3754      	adds	r7, #84	@ 0x54
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002734:	b0c0      	sub	sp, #256	@ 0x100
 8002736:	af00      	add	r7, sp, #0
 8002738:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274c:	68d9      	ldr	r1, [r3, #12]
 800274e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	ea40 0301 	orr.w	r3, r0, r1
 8002758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800275a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	431a      	orrs	r2, r3
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	431a      	orrs	r2, r3
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002788:	f021 010c 	bic.w	r1, r1, #12
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002796:	430b      	orrs	r3, r1
 8002798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80027a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027aa:	6999      	ldr	r1, [r3, #24]
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	ea40 0301 	orr.w	r3, r0, r1
 80027b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b8f      	ldr	r3, [pc, #572]	@ (80029fc <UART_SetConfig+0x2cc>)
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d005      	beq.n	80027d0 <UART_SetConfig+0xa0>
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002a00 <UART_SetConfig+0x2d0>)
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d104      	bne.n	80027da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027d0:	f7fe fe66 	bl	80014a0 <HAL_RCC_GetPCLK2Freq>
 80027d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027d8:	e003      	b.n	80027e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027da:	f7fe fe4d 	bl	8001478 <HAL_RCC_GetPCLK1Freq>
 80027de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027ec:	f040 810c 	bne.w	8002a08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002802:	4622      	mov	r2, r4
 8002804:	462b      	mov	r3, r5
 8002806:	1891      	adds	r1, r2, r2
 8002808:	65b9      	str	r1, [r7, #88]	@ 0x58
 800280a:	415b      	adcs	r3, r3
 800280c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800280e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002812:	4621      	mov	r1, r4
 8002814:	eb12 0801 	adds.w	r8, r2, r1
 8002818:	4629      	mov	r1, r5
 800281a:	eb43 0901 	adc.w	r9, r3, r1
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800282a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800282e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002832:	4690      	mov	r8, r2
 8002834:	4699      	mov	r9, r3
 8002836:	4623      	mov	r3, r4
 8002838:	eb18 0303 	adds.w	r3, r8, r3
 800283c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002840:	462b      	mov	r3, r5
 8002842:	eb49 0303 	adc.w	r3, r9, r3
 8002846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800284a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002856:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800285a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800285e:	460b      	mov	r3, r1
 8002860:	18db      	adds	r3, r3, r3
 8002862:	653b      	str	r3, [r7, #80]	@ 0x50
 8002864:	4613      	mov	r3, r2
 8002866:	eb42 0303 	adc.w	r3, r2, r3
 800286a:	657b      	str	r3, [r7, #84]	@ 0x54
 800286c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002874:	f7fd fd1c 	bl	80002b0 <__aeabi_uldivmod>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4b61      	ldr	r3, [pc, #388]	@ (8002a04 <UART_SetConfig+0x2d4>)
 800287e:	fba3 2302 	umull	r2, r3, r3, r2
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	011c      	lsls	r4, r3, #4
 8002886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800288a:	2200      	movs	r2, #0
 800288c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002890:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002898:	4642      	mov	r2, r8
 800289a:	464b      	mov	r3, r9
 800289c:	1891      	adds	r1, r2, r2
 800289e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80028a0:	415b      	adcs	r3, r3
 80028a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028a8:	4641      	mov	r1, r8
 80028aa:	eb12 0a01 	adds.w	sl, r2, r1
 80028ae:	4649      	mov	r1, r9
 80028b0:	eb43 0b01 	adc.w	fp, r3, r1
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c8:	4692      	mov	sl, r2
 80028ca:	469b      	mov	fp, r3
 80028cc:	4643      	mov	r3, r8
 80028ce:	eb1a 0303 	adds.w	r3, sl, r3
 80028d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028d6:	464b      	mov	r3, r9
 80028d8:	eb4b 0303 	adc.w	r3, fp, r3
 80028dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028f4:	460b      	mov	r3, r1
 80028f6:	18db      	adds	r3, r3, r3
 80028f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80028fa:	4613      	mov	r3, r2
 80028fc:	eb42 0303 	adc.w	r3, r2, r3
 8002900:	647b      	str	r3, [r7, #68]	@ 0x44
 8002902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800290a:	f7fd fcd1 	bl	80002b0 <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4611      	mov	r1, r2
 8002914:	4b3b      	ldr	r3, [pc, #236]	@ (8002a04 <UART_SetConfig+0x2d4>)
 8002916:	fba3 2301 	umull	r2, r3, r3, r1
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2264      	movs	r2, #100	@ 0x64
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	1acb      	subs	r3, r1, r3
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800292a:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <UART_SetConfig+0x2d4>)
 800292c:	fba3 2302 	umull	r2, r3, r3, r2
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002938:	441c      	add	r4, r3
 800293a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800293e:	2200      	movs	r2, #0
 8002940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002944:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800294c:	4642      	mov	r2, r8
 800294e:	464b      	mov	r3, r9
 8002950:	1891      	adds	r1, r2, r2
 8002952:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002954:	415b      	adcs	r3, r3
 8002956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800295c:	4641      	mov	r1, r8
 800295e:	1851      	adds	r1, r2, r1
 8002960:	6339      	str	r1, [r7, #48]	@ 0x30
 8002962:	4649      	mov	r1, r9
 8002964:	414b      	adcs	r3, r1
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002974:	4659      	mov	r1, fp
 8002976:	00cb      	lsls	r3, r1, #3
 8002978:	4651      	mov	r1, sl
 800297a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800297e:	4651      	mov	r1, sl
 8002980:	00ca      	lsls	r2, r1, #3
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	4603      	mov	r3, r0
 8002988:	4642      	mov	r2, r8
 800298a:	189b      	adds	r3, r3, r2
 800298c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002990:	464b      	mov	r3, r9
 8002992:	460a      	mov	r2, r1
 8002994:	eb42 0303 	adc.w	r3, r2, r3
 8002998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80029ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80029b0:	460b      	mov	r3, r1
 80029b2:	18db      	adds	r3, r3, r3
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b6:	4613      	mov	r3, r2
 80029b8:	eb42 0303 	adc.w	r3, r2, r3
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029c6:	f7fd fc73 	bl	80002b0 <__aeabi_uldivmod>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <UART_SetConfig+0x2d4>)
 80029d0:	fba3 1302 	umull	r1, r3, r3, r2
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	2164      	movs	r1, #100	@ 0x64
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	3332      	adds	r3, #50	@ 0x32
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <UART_SetConfig+0x2d4>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	f003 0207 	and.w	r2, r3, #7
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4422      	add	r2, r4
 80029f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029f8:	e106      	b.n	8002c08 <UART_SetConfig+0x4d8>
 80029fa:	bf00      	nop
 80029fc:	40011000 	.word	0x40011000
 8002a00:	40011400 	.word	0x40011400
 8002a04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	1891      	adds	r1, r2, r2
 8002a20:	6239      	str	r1, [r7, #32]
 8002a22:	415b      	adcs	r3, r3
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a2a:	4641      	mov	r1, r8
 8002a2c:	1854      	adds	r4, r2, r1
 8002a2e:	4649      	mov	r1, r9
 8002a30:	eb43 0501 	adc.w	r5, r3, r1
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	00eb      	lsls	r3, r5, #3
 8002a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a42:	00e2      	lsls	r2, r4, #3
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	4643      	mov	r3, r8
 8002a4a:	18e3      	adds	r3, r4, r3
 8002a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a50:	464b      	mov	r3, r9
 8002a52:	eb45 0303 	adc.w	r3, r5, r3
 8002a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a76:	4629      	mov	r1, r5
 8002a78:	008b      	lsls	r3, r1, #2
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a80:	4621      	mov	r1, r4
 8002a82:	008a      	lsls	r2, r1, #2
 8002a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a88:	f7fd fc12 	bl	80002b0 <__aeabi_uldivmod>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4b60      	ldr	r3, [pc, #384]	@ (8002c14 <UART_SetConfig+0x4e4>)
 8002a92:	fba3 2302 	umull	r2, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	011c      	lsls	r4, r3, #4
 8002a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002aa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002aa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002aac:	4642      	mov	r2, r8
 8002aae:	464b      	mov	r3, r9
 8002ab0:	1891      	adds	r1, r2, r2
 8002ab2:	61b9      	str	r1, [r7, #24]
 8002ab4:	415b      	adcs	r3, r3
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002abc:	4641      	mov	r1, r8
 8002abe:	1851      	adds	r1, r2, r1
 8002ac0:	6139      	str	r1, [r7, #16]
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	414b      	adcs	r3, r1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	00cb      	lsls	r3, r1, #3
 8002ad8:	4651      	mov	r1, sl
 8002ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ade:	4651      	mov	r1, sl
 8002ae0:	00ca      	lsls	r2, r1, #3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4642      	mov	r2, r8
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002af0:	464b      	mov	r3, r9
 8002af2:	460a      	mov	r2, r1
 8002af4:	eb42 0303 	adc.w	r3, r2, r3
 8002af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b14:	4649      	mov	r1, r9
 8002b16:	008b      	lsls	r3, r1, #2
 8002b18:	4641      	mov	r1, r8
 8002b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b1e:	4641      	mov	r1, r8
 8002b20:	008a      	lsls	r2, r1, #2
 8002b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b26:	f7fd fbc3 	bl	80002b0 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <UART_SetConfig+0x4e4>)
 8002b32:	fba3 2301 	umull	r2, r3, r3, r1
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2264      	movs	r2, #100	@ 0x64
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	1acb      	subs	r3, r1, r3
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	3332      	adds	r3, #50	@ 0x32
 8002b44:	4a33      	ldr	r2, [pc, #204]	@ (8002c14 <UART_SetConfig+0x4e4>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b50:	441c      	add	r4, r3
 8002b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b56:	2200      	movs	r2, #0
 8002b58:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b60:	4642      	mov	r2, r8
 8002b62:	464b      	mov	r3, r9
 8002b64:	1891      	adds	r1, r2, r2
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	415b      	adcs	r3, r3
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b70:	4641      	mov	r1, r8
 8002b72:	1851      	adds	r1, r2, r1
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	4649      	mov	r1, r9
 8002b78:	414b      	adcs	r3, r1
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b88:	4659      	mov	r1, fp
 8002b8a:	00cb      	lsls	r3, r1, #3
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b92:	4651      	mov	r1, sl
 8002b94:	00ca      	lsls	r2, r1, #3
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4642      	mov	r2, r8
 8002b9e:	189b      	adds	r3, r3, r2
 8002ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	460a      	mov	r2, r1
 8002ba6:	eb42 0303 	adc.w	r3, r2, r3
 8002baa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	008b      	lsls	r3, r1, #2
 8002bc8:	4641      	mov	r1, r8
 8002bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bce:	4641      	mov	r1, r8
 8002bd0:	008a      	lsls	r2, r1, #2
 8002bd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bd6:	f7fd fb6b 	bl	80002b0 <__aeabi_uldivmod>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <UART_SetConfig+0x4e4>)
 8002be0:	fba3 1302 	umull	r1, r3, r3, r2
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	2164      	movs	r1, #100	@ 0x64
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	3332      	adds	r3, #50	@ 0x32
 8002bf2:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <UART_SetConfig+0x4e4>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	f003 020f 	and.w	r2, r3, #15
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4422      	add	r2, r4
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c14:	51eb851f 	.word	0x51eb851f

08002c18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <SysTick_Handler+0x1c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002c20:	f001 fbe0 	bl	80043e4 <xTaskGetSchedulerState>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c2a:	f002 f9d5 	bl	8004fd8 <xPortSysTickHandler>
  }
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4a06      	ldr	r2, [pc, #24]	@ (8002c68 <vApplicationGetIdleTaskMemory+0x30>)
 8002c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	601a      	str	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000130 	.word	0x20000130
 8002c68:	2000018c 	.word	0x2000018c

08002c6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	@ (8002c98 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4a06      	ldr	r2, [pc, #24]	@ (8002c9c <vApplicationGetTimerTaskMemory+0x30>)
 8002c82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c8a:	601a      	str	r2, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	2000038c 	.word	0x2000038c
 8002c9c:	200003e8 	.word	0x200003e8

08002ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 0208 	add.w	r2, r3, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f103 0208 	add.w	r2, r3, #8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f103 0208 	add.w	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	601a      	str	r2, [r3, #0]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d103      	bne.n	8002d62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e00c      	b.n	8002d7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3308      	adds	r3, #8
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	e002      	b.n	8002d70 <vListInsert+0x2e>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d2f6      	bcs.n	8002d6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	601a      	str	r2, [r3, #0]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6892      	ldr	r2, [r2, #8]
 8002dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6852      	ldr	r2, [r2, #4]
 8002dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d103      	bne.n	8002de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e34:	f002 f840 	bl	8004eb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	441a      	add	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e64:	3b01      	subs	r3, #1
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	22ff      	movs	r2, #255	@ 0xff
 8002e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	22ff      	movs	r2, #255	@ 0xff
 8002e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d114      	bne.n	8002eb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01a      	beq.n	8002ec8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3310      	adds	r3, #16
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f8e4 	bl	8004064 <xTaskRemoveFromEventList>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d012      	beq.n	8002ec8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <xQueueGenericReset+0xd0>)
 8002ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	e009      	b.n	8002ec8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3310      	adds	r3, #16
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fef1 	bl	8002ca0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3324      	adds	r3, #36	@ 0x24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff feec 	bl	8002ca0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ec8:	f002 f828 	bl	8004f1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08e      	sub	sp, #56	@ 0x38
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	e7fd      	b.n	8002f22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <xQueueGenericCreateStatic+0x56>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <xQueueGenericCreateStatic+0x5a>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <xQueueGenericCreateStatic+0x5c>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10b      	bne.n	8002f54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	623b      	str	r3, [r7, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <xQueueGenericCreateStatic+0x84>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <xQueueGenericCreateStatic+0x88>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <xQueueGenericCreateStatic+0x8a>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	61fb      	str	r3, [r7, #28]
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	e7fd      	b.n	8002f7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f82:	2350      	movs	r3, #80	@ 0x50
 8002f84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b50      	cmp	r3, #80	@ 0x50
 8002f8a:	d00b      	beq.n	8002fa4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	61bb      	str	r3, [r7, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002fa4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f805 	bl	8002fd6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3730      	adds	r7, #48	@ 0x30
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d103      	bne.n	8002ff2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e002      	b.n	8002ff8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003004:	2101      	movs	r1, #1
 8003006:	69b8      	ldr	r0, [r7, #24]
 8003008:	f7ff fefe 	bl	8002e08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08e      	sub	sp, #56	@ 0x38
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800302a:	2300      	movs	r3, #0
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <xQueueGenericSend+0x34>
	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800304a:	bf00      	nop
 800304c:	bf00      	nop
 800304e:	e7fd      	b.n	800304c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d103      	bne.n	800305e <xQueueGenericSend+0x42>
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <xQueueGenericSend+0x46>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <xQueueGenericSend+0x48>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <xQueueGenericSend+0x64>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d103      	bne.n	800308e <xQueueGenericSend+0x72>
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <xQueueGenericSend+0x76>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <xQueueGenericSend+0x78>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <xQueueGenericSend+0x94>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	623b      	str	r3, [r7, #32]
}
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030b0:	f001 f998 	bl	80043e4 <xTaskGetSchedulerState>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <xQueueGenericSend+0xa4>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <xQueueGenericSend+0xa8>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <xQueueGenericSend+0xaa>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	61fb      	str	r3, [r7, #28]
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	e7fd      	b.n	80030de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030e2:	f001 fee9 	bl	8004eb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <xQueueGenericSend+0xdc>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d129      	bne.n	800314c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030fe:	f000 fa0f 	bl	8003520 <prvCopyDataToQueue>
 8003102:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800310c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310e:	3324      	adds	r3, #36	@ 0x24
 8003110:	4618      	mov	r0, r3
 8003112:	f000 ffa7 	bl	8004064 <xTaskRemoveFromEventList>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800311c:	4b3f      	ldr	r3, [pc, #252]	@ (800321c <xQueueGenericSend+0x200>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	e00a      	b.n	8003144 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003134:	4b39      	ldr	r3, [pc, #228]	@ (800321c <xQueueGenericSend+0x200>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003144:	f001 feea 	bl	8004f1c <vPortExitCritical>
				return pdPASS;
 8003148:	2301      	movs	r3, #1
 800314a:	e063      	b.n	8003214 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003152:	f001 fee3 	bl	8004f1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003156:	2300      	movs	r3, #0
 8003158:	e05c      	b.n	8003214 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4618      	mov	r0, r3
 8003166:	f000 ffe1 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800316a:	2301      	movs	r3, #1
 800316c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800316e:	f001 fed5 	bl	8004f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003172:	f000 fd51 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003176:	f001 fe9f 	bl	8004eb8 <vPortEnterCritical>
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003180:	b25b      	sxtb	r3, r3
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d103      	bne.n	8003190 <xQueueGenericSend+0x174>
 8003188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003196:	b25b      	sxtb	r3, r3
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d103      	bne.n	80031a6 <xQueueGenericSend+0x18a>
 800319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031a6:	f001 feb9 	bl	8004f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031aa:	1d3a      	adds	r2, r7, #4
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 ffd0 	bl	8004158 <xTaskCheckForTimeOut>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d124      	bne.n	8003208 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031c0:	f000 faa6 	bl	8003710 <prvIsQueueFull>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d018      	beq.n	80031fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	3310      	adds	r3, #16
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fef4 	bl	8003fc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031da:	f000 fa31 	bl	8003640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031de:	f000 fd29 	bl	8003c34 <xTaskResumeAll>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f af7c 	bne.w	80030e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <xQueueGenericSend+0x200>)
 80031ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	e772      	b.n	80030e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031fe:	f000 fa1f 	bl	8003640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003202:	f000 fd17 	bl	8003c34 <xTaskResumeAll>
 8003206:	e76c      	b.n	80030e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800320a:	f000 fa19 	bl	8003640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800320e:	f000 fd11 	bl	8003c34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003212:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003214:	4618      	mov	r0, r3
 8003216:	3738      	adds	r7, #56	@ 0x38
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b090      	sub	sp, #64	@ 0x40
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <xQueueGenericSendFromISR+0x3e>
 8003256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <xQueueGenericSendFromISR+0x42>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <xQueueGenericSendFromISR+0x44>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d103      	bne.n	800328e <xQueueGenericSendFromISR+0x6e>
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <xQueueGenericSendFromISR+0x72>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <xQueueGenericSendFromISR+0x74>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	623b      	str	r3, [r7, #32]
}
 80032aa:	bf00      	nop
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032b0:	f001 fee2 	bl	8005078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032b4:	f3ef 8211 	mrs	r2, BASEPRI
 80032b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	61fa      	str	r2, [r7, #28]
 80032ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	429a      	cmp	r2, r3
 80032da:	d302      	bcc.n	80032e2 <xQueueGenericSendFromISR+0xc2>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d12f      	bne.n	8003342 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032f8:	f000 f912 	bl	8003520 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d112      	bne.n	800332c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800330e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003310:	3324      	adds	r3, #36	@ 0x24
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fea6 	bl	8004064 <xTaskRemoveFromEventList>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e007      	b.n	800333c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800332c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003330:	3301      	adds	r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	b25a      	sxtb	r2, r3
 8003336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800333c:	2301      	movs	r3, #1
 800333e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003340:	e001      	b.n	8003346 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003342:	2300      	movs	r3, #0
 8003344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003348:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003350:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003354:	4618      	mov	r0, r3
 8003356:	3740      	adds	r7, #64	@ 0x40
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	@ 0x30
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <xQueueReceive+0x32>
	__asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	623b      	str	r3, [r7, #32]
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	e7fd      	b.n	800338a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <xQueueReceive+0x40>
 8003394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <xQueueReceive+0x44>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <xQueueReceive+0x46>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <xQueueReceive+0x62>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	61fb      	str	r3, [r7, #28]
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	e7fd      	b.n	80033ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033be:	f001 f811 	bl	80043e4 <xTaskGetSchedulerState>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <xQueueReceive+0x72>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xQueueReceive+0x76>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueReceive+0x78>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <xQueueReceive+0x94>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61bb      	str	r3, [r7, #24]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033f0:	f001 fd62 	bl	8004eb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01f      	beq.n	8003440 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003404:	f000 f8f6 	bl	80035f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	1e5a      	subs	r2, r3, #1
 800340c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341a:	3310      	adds	r3, #16
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fe21 	bl	8004064 <xTaskRemoveFromEventList>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003428:	4b3c      	ldr	r3, [pc, #240]	@ (800351c <xQueueReceive+0x1c0>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003438:	f001 fd70 	bl	8004f1c <vPortExitCritical>
				return pdPASS;
 800343c:	2301      	movs	r3, #1
 800343e:	e069      	b.n	8003514 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003446:	f001 fd69 	bl	8004f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800344a:	2300      	movs	r3, #0
 800344c:	e062      	b.n	8003514 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d106      	bne.n	8003462 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003454:	f107 0310 	add.w	r3, r7, #16
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fe67 	bl	800412c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800345e:	2301      	movs	r3, #1
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003462:	f001 fd5b 	bl	8004f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003466:	f000 fbd7 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800346a:	f001 fd25 	bl	8004eb8 <vPortEnterCritical>
 800346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003474:	b25b      	sxtb	r3, r3
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d103      	bne.n	8003484 <xQueueReceive+0x128>
 800347c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800348a:	b25b      	sxtb	r3, r3
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d103      	bne.n	800349a <xQueueReceive+0x13e>
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800349a:	f001 fd3f 	bl	8004f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800349e:	1d3a      	adds	r2, r7, #4
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fe56 	bl	8004158 <xTaskCheckForTimeOut>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d123      	bne.n	80034fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034b4:	f000 f916 	bl	80036e4 <prvIsQueueEmpty>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d017      	beq.n	80034ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c0:	3324      	adds	r3, #36	@ 0x24
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fd7a 	bl	8003fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ce:	f000 f8b7 	bl	8003640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034d2:	f000 fbaf 	bl	8003c34 <xTaskResumeAll>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d189      	bne.n	80033f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <xQueueReceive+0x1c0>)
 80034de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	e780      	b.n	80033f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034f0:	f000 f8a6 	bl	8003640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034f4:	f000 fb9e 	bl	8003c34 <xTaskResumeAll>
 80034f8:	e77a      	b.n	80033f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034fc:	f000 f8a0 	bl	8003640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003500:	f000 fb98 	bl	8003c34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003506:	f000 f8ed 	bl	80036e4 <prvIsQueueEmpty>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	f43f af6f 	beq.w	80033f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003514:	4618      	mov	r0, r3
 8003516:	3730      	adds	r7, #48	@ 0x30
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10d      	bne.n	800355a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d14d      	bne.n	80035e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 ff68 	bl	8004420 <xTaskPriorityDisinherit>
 8003550:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	e043      	b.n	80035e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d119      	bne.n	8003594 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6858      	ldr	r0, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	461a      	mov	r2, r3
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	f002 f947 	bl	80057fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	441a      	add	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	d32b      	bcc.n	80035e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e026      	b.n	80035e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68d8      	ldr	r0, [r3, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	461a      	mov	r2, r3
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	f002 f92d 	bl	80057fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	425b      	negs	r3, r3
 80035ae:	441a      	add	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d207      	bcs.n	80035d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	425b      	negs	r3, r3
 80035ca:	441a      	add	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d105      	bne.n	80035e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	3b01      	subs	r3, #1
 80035e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80035ea:	697b      	ldr	r3, [r7, #20]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d018      	beq.n	8003638 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	441a      	add	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d303      	bcc.n	8003628 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68d9      	ldr	r1, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	461a      	mov	r2, r3
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	f002 f8e3 	bl	80057fe <memcpy>
	}
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003648:	f001 fc36 	bl	8004eb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003652:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003654:	e011      	b.n	800367a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d012      	beq.n	8003684 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3324      	adds	r3, #36	@ 0x24
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fcfe 	bl	8004064 <xTaskRemoveFromEventList>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800366e:	f000 fdd7 	bl	8004220 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	3b01      	subs	r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	dce9      	bgt.n	8003656 <prvUnlockQueue+0x16>
 8003682:	e000      	b.n	8003686 <prvUnlockQueue+0x46>
					break;
 8003684:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	22ff      	movs	r2, #255	@ 0xff
 800368a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800368e:	f001 fc45 	bl	8004f1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003692:	f001 fc11 	bl	8004eb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800369c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800369e:	e011      	b.n	80036c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d012      	beq.n	80036ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3310      	adds	r3, #16
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fcd9 	bl	8004064 <xTaskRemoveFromEventList>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036b8:	f000 fdb2 	bl	8004220 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036bc:	7bbb      	ldrb	r3, [r7, #14]
 80036be:	3b01      	subs	r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	dce9      	bgt.n	80036a0 <prvUnlockQueue+0x60>
 80036cc:	e000      	b.n	80036d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	22ff      	movs	r2, #255	@ 0xff
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80036d8:	f001 fc20 	bl	8004f1c <vPortExitCritical>
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036ec:	f001 fbe4 	bl	8004eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e001      	b.n	8003702 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003702:	f001 fc0b 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003718:	f001 fbce 	bl	8004eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003724:	429a      	cmp	r2, r3
 8003726:	d102      	bne.n	800372e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003728:	2301      	movs	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e001      	b.n	8003732 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003732:	f001 fbf3 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	e014      	b.n	800377a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003750:	4a0f      	ldr	r2, [pc, #60]	@ (8003790 <vQueueAddToRegistry+0x50>)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800375c:	490c      	ldr	r1, [pc, #48]	@ (8003790 <vQueueAddToRegistry+0x50>)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003766:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <vQueueAddToRegistry+0x50>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003772:	e006      	b.n	8003782 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3301      	adds	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b07      	cmp	r3, #7
 800377e:	d9e7      	bls.n	8003750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	200007e8 	.word	0x200007e8

08003794 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037a4:	f001 fb88 	bl	8004eb8 <vPortEnterCritical>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d103      	bne.n	80037be <vQueueWaitForMessageRestricted+0x2a>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d103      	bne.n	80037d4 <vQueueWaitForMessageRestricted+0x40>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037d4:	f001 fba2 	bl	8004f1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3324      	adds	r3, #36	@ 0x24
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fc0f 	bl	800400c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037ee:	6978      	ldr	r0, [r7, #20]
 80037f0:	f7ff ff26 	bl	8003640 <prvUnlockQueue>
	}
 80037f4:	bf00      	nop
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08e      	sub	sp, #56	@ 0x38
 8003800:	af04      	add	r7, sp, #16
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10b      	bne.n	8003828 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	623b      	str	r3, [r7, #32]
}
 8003822:	bf00      	nop
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10b      	bne.n	8003846 <xTaskCreateStatic+0x4a>
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	61fb      	str	r3, [r7, #28]
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	e7fd      	b.n	8003842 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003846:	235c      	movs	r3, #92	@ 0x5c
 8003848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b5c      	cmp	r3, #92	@ 0x5c
 800384e:	d00b      	beq.n	8003868 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	61bb      	str	r3, [r7, #24]
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003868:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800386a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01e      	beq.n	80038ae <xTaskCreateStatic+0xb2>
 8003870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01b      	beq.n	80038ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800387e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003888:	2300      	movs	r3, #0
 800388a:	9303      	str	r3, [sp, #12]
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	9302      	str	r3, [sp, #8]
 8003890:	f107 0314 	add.w	r3, r7, #20
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f850 	bl	8003946 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038a8:	f000 f8de 	bl	8003a68 <prvAddNewTaskToReadyList>
 80038ac:	e001      	b.n	80038b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038b2:	697b      	ldr	r3, [r7, #20]
	}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3728      	adds	r7, #40	@ 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	@ 0x30
 80038c0:	af04      	add	r7, sp, #16
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 fc13 	bl	80050fc <pvPortMalloc>
 80038d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00e      	beq.n	80038fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038de:	205c      	movs	r0, #92	@ 0x5c
 80038e0:	f001 fc0c 	bl	80050fc <pvPortMalloc>
 80038e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80038f2:	e005      	b.n	8003900 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038f4:	6978      	ldr	r0, [r7, #20]
 80038f6:	f001 fccf 	bl	8005298 <vPortFree>
 80038fa:	e001      	b.n	8003900 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d017      	beq.n	8003936 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	2300      	movs	r3, #0
 8003912:	9303      	str	r3, [sp, #12]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	9302      	str	r3, [sp, #8]
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f80e 	bl	8003946 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800392a:	69f8      	ldr	r0, [r7, #28]
 800392c:	f000 f89c 	bl	8003a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003930:	2301      	movs	r3, #1
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e002      	b.n	800393c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003936:	f04f 33ff 	mov.w	r3, #4294967295
 800393a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800393c:	69bb      	ldr	r3, [r7, #24]
	}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b088      	sub	sp, #32
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	461a      	mov	r2, r3
 800395e:	21a5      	movs	r1, #165	@ 0xa5
 8003960:	f001 fed1 	bl	8005706 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800396e:	3b01      	subs	r3, #1
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f023 0307 	bic.w	r3, r3, #7
 800397c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	617b      	str	r3, [r7, #20]
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01f      	beq.n	80039e6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	e012      	b.n	80039d2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	7819      	ldrb	r1, [r3, #0]
 80039b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	3334      	adds	r3, #52	@ 0x34
 80039bc:	460a      	mov	r2, r1
 80039be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	d9e9      	bls.n	80039ac <prvInitialiseNewTask+0x66>
 80039d8:	e000      	b.n	80039dc <prvInitialiseNewTask+0x96>
			{
				break;
 80039da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039e4:	e003      	b.n	80039ee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f0:	2b37      	cmp	r3, #55	@ 0x37
 80039f2:	d901      	bls.n	80039f8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039f4:	2337      	movs	r3, #55	@ 0x37
 80039f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a02:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a06:	2200      	movs	r2, #0
 8003a08:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff f966 	bl	8002ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a16:	3318      	adds	r3, #24
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff f961 	bl	8002ce0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a32:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	2200      	movs	r2, #0
 8003a38:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	68f9      	ldr	r1, [r7, #12]
 8003a46:	69b8      	ldr	r0, [r7, #24]
 8003a48:	f001 f908 	bl	8004c5c <pxPortInitialiseStack>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a5e:	bf00      	nop
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a70:	f001 fa22 	bl	8004eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a74:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <prvAddNewTaskToReadyList+0xc4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b2c <prvAddNewTaskToReadyList+0xc4>)
 8003a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a86:	4a2a      	ldr	r2, [pc, #168]	@ (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a8c:	4b27      	ldr	r3, [pc, #156]	@ (8003b2c <prvAddNewTaskToReadyList+0xc4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d110      	bne.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a94:	f000 fbe8 	bl	8004268 <prvInitialiseTaskLists>
 8003a98:	e00d      	b.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a9a:	4b26      	ldr	r3, [pc, #152]	@ (8003b34 <prvAddNewTaskToReadyList+0xcc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aa2:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d802      	bhi.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ab6:	4b20      	ldr	r3, [pc, #128]	@ (8003b38 <prvAddNewTaskToReadyList+0xd0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b38 <prvAddNewTaskToReadyList+0xd0>)
 8003abe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <prvAddNewTaskToReadyList+0xd0>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <prvAddNewTaskToReadyList+0xd4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d903      	bls.n	8003adc <prvAddNewTaskToReadyList+0x74>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <prvAddNewTaskToReadyList+0xd4>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4a15      	ldr	r2, [pc, #84]	@ (8003b40 <prvAddNewTaskToReadyList+0xd8>)
 8003aea:	441a      	add	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f7ff f901 	bl	8002cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003af8:	f001 fa10 	bl	8004f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003afc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <prvAddNewTaskToReadyList+0xcc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d207      	bcs.n	8003b22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <prvAddNewTaskToReadyList+0xdc>)
 8003b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000cfc 	.word	0x20000cfc
 8003b30:	20000828 	.word	0x20000828
 8003b34:	20000d08 	.word	0x20000d08
 8003b38:	20000d18 	.word	0x20000d18
 8003b3c:	20000d04 	.word	0x20000d04
 8003b40:	2000082c 	.word	0x2000082c
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	@ 0x28
 8003b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b56:	463a      	mov	r2, r7
 8003b58:	1d39      	adds	r1, r7, #4
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f86a 	bl	8002c38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b64:	6839      	ldr	r1, [r7, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	9202      	str	r2, [sp, #8]
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2300      	movs	r3, #0
 8003b74:	460a      	mov	r2, r1
 8003b76:	4922      	ldr	r1, [pc, #136]	@ (8003c00 <vTaskStartScheduler+0xb8>)
 8003b78:	4822      	ldr	r0, [pc, #136]	@ (8003c04 <vTaskStartScheduler+0xbc>)
 8003b7a:	f7ff fe3f 	bl	80037fc <xTaskCreateStatic>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4a21      	ldr	r2, [pc, #132]	@ (8003c08 <vTaskStartScheduler+0xc0>)
 8003b82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b84:	4b20      	ldr	r3, [pc, #128]	@ (8003c08 <vTaskStartScheduler+0xc0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e001      	b.n	8003b96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d102      	bne.n	8003ba2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b9c:	f000 fd04 	bl	80045a8 <xTimerCreateTimerTask>
 8003ba0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d116      	bne.n	8003bd6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	613b      	str	r3, [r7, #16]
}
 8003bba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bbc:	4b13      	ldr	r3, [pc, #76]	@ (8003c0c <vTaskStartScheduler+0xc4>)
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <vTaskStartScheduler+0xc8>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bca:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <vTaskStartScheduler+0xcc>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bd0:	f001 f8ce 	bl	8004d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bd4:	e00f      	b.n	8003bf6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d10b      	bne.n	8003bf6 <vTaskStartScheduler+0xae>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	60fb      	str	r3, [r7, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	e7fd      	b.n	8003bf2 <vTaskStartScheduler+0xaa>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	080063d8 	.word	0x080063d8
 8003c04:	08004239 	.word	0x08004239
 8003c08:	20000d20 	.word	0x20000d20
 8003c0c:	20000d1c 	.word	0x20000d1c
 8003c10:	20000d08 	.word	0x20000d08
 8003c14:	20000d00 	.word	0x20000d00

08003c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c1c:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <vTaskSuspendAll+0x18>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a03      	ldr	r2, [pc, #12]	@ (8003c30 <vTaskSuspendAll+0x18>)
 8003c24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	20000d24 	.word	0x20000d24

08003c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c42:	4b42      	ldr	r3, [pc, #264]	@ (8003d4c <xTaskResumeAll+0x118>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	603b      	str	r3, [r7, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	e7fd      	b.n	8003c5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c62:	f001 f929 	bl	8004eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c66:	4b39      	ldr	r3, [pc, #228]	@ (8003d4c <xTaskResumeAll+0x118>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	4a37      	ldr	r2, [pc, #220]	@ (8003d4c <xTaskResumeAll+0x118>)
 8003c6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c70:	4b36      	ldr	r3, [pc, #216]	@ (8003d4c <xTaskResumeAll+0x118>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d162      	bne.n	8003d3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c78:	4b35      	ldr	r3, [pc, #212]	@ (8003d50 <xTaskResumeAll+0x11c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05e      	beq.n	8003d3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c80:	e02f      	b.n	8003ce2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c82:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <xTaskResumeAll+0x120>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff f890 	bl	8002db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f88b 	bl	8002db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d58 <xTaskResumeAll+0x124>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d903      	bls.n	8003cb2 <xTaskResumeAll+0x7e>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	4a2a      	ldr	r2, [pc, #168]	@ (8003d58 <xTaskResumeAll+0x124>)
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4a27      	ldr	r2, [pc, #156]	@ (8003d5c <xTaskResumeAll+0x128>)
 8003cc0:	441a      	add	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f7ff f816 	bl	8002cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd2:	4b23      	ldr	r3, [pc, #140]	@ (8003d60 <xTaskResumeAll+0x12c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003cdc:	4b21      	ldr	r3, [pc, #132]	@ (8003d64 <xTaskResumeAll+0x130>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d54 <xTaskResumeAll+0x120>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1cb      	bne.n	8003c82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cf0:	f000 fb58 	bl	80043a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d68 <xTaskResumeAll+0x134>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d010      	beq.n	8003d22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d00:	f000 f846 	bl	8003d90 <xTaskIncrementTick>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d0a:	4b16      	ldr	r3, [pc, #88]	@ (8003d64 <xTaskResumeAll+0x130>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f1      	bne.n	8003d00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <xTaskResumeAll+0x134>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <xTaskResumeAll+0x130>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d6c <xTaskResumeAll+0x138>)
 8003d30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d3e:	f001 f8ed 	bl	8004f1c <vPortExitCritical>

	return xAlreadyYielded;
 8003d42:	68bb      	ldr	r3, [r7, #8]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000d24 	.word	0x20000d24
 8003d50:	20000cfc 	.word	0x20000cfc
 8003d54:	20000cbc 	.word	0x20000cbc
 8003d58:	20000d04 	.word	0x20000d04
 8003d5c:	2000082c 	.word	0x2000082c
 8003d60:	20000828 	.word	0x20000828
 8003d64:	20000d10 	.word	0x20000d10
 8003d68:	20000d0c 	.word	0x20000d0c
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d76:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <xTaskGetTickCount+0x1c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d7c:	687b      	ldr	r3, [r7, #4]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000d00 	.word	0x20000d00

08003d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ed8 <xTaskIncrementTick+0x148>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f040 8090 	bne.w	8003ec4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003da4:	4b4d      	ldr	r3, [pc, #308]	@ (8003edc <xTaskIncrementTick+0x14c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dac:	4a4b      	ldr	r2, [pc, #300]	@ (8003edc <xTaskIncrementTick+0x14c>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d121      	bne.n	8003dfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003db8:	4b49      	ldr	r3, [pc, #292]	@ (8003ee0 <xTaskIncrementTick+0x150>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <xTaskIncrementTick+0x4a>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	603b      	str	r3, [r7, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	e7fd      	b.n	8003dd6 <xTaskIncrementTick+0x46>
 8003dda:	4b41      	ldr	r3, [pc, #260]	@ (8003ee0 <xTaskIncrementTick+0x150>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	4b40      	ldr	r3, [pc, #256]	@ (8003ee4 <xTaskIncrementTick+0x154>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ee0 <xTaskIncrementTick+0x150>)
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ee4 <xTaskIncrementTick+0x154>)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee8 <xTaskIncrementTick+0x158>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ee8 <xTaskIncrementTick+0x158>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	f000 fad4 	bl	80043a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003eec <xTaskIncrementTick+0x15c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d349      	bcc.n	8003e9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e06:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <xTaskIncrementTick+0x150>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d104      	bne.n	8003e1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e10:	4b36      	ldr	r3, [pc, #216]	@ (8003eec <xTaskIncrementTick+0x15c>)
 8003e12:	f04f 32ff 	mov.w	r2, #4294967295
 8003e16:	601a      	str	r2, [r3, #0]
					break;
 8003e18:	e03f      	b.n	8003e9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ee0 <xTaskIncrementTick+0x150>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d203      	bcs.n	8003e3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e32:	4a2e      	ldr	r2, [pc, #184]	@ (8003eec <xTaskIncrementTick+0x15c>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e38:	e02f      	b.n	8003e9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe ffb8 	bl	8002db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3318      	adds	r3, #24
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe ffaf 	bl	8002db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5a:	4b25      	ldr	r3, [pc, #148]	@ (8003ef0 <xTaskIncrementTick+0x160>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d903      	bls.n	8003e6a <xTaskIncrementTick+0xda>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	4a22      	ldr	r2, [pc, #136]	@ (8003ef0 <xTaskIncrementTick+0x160>)
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <xTaskIncrementTick+0x164>)
 8003e78:	441a      	add	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f7fe ff3a 	bl	8002cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <xTaskIncrementTick+0x168>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d3b8      	bcc.n	8003e06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e98:	e7b5      	b.n	8003e06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e9a:	4b17      	ldr	r3, [pc, #92]	@ (8003ef8 <xTaskIncrementTick+0x168>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea0:	4914      	ldr	r1, [pc, #80]	@ (8003ef4 <xTaskIncrementTick+0x164>)
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d901      	bls.n	8003eb6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003eb6:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <xTaskIncrementTick+0x16c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e004      	b.n	8003ece <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f00 <xTaskIncrementTick+0x170>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	4a0d      	ldr	r2, [pc, #52]	@ (8003f00 <xTaskIncrementTick+0x170>)
 8003ecc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ece:	697b      	ldr	r3, [r7, #20]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000d24 	.word	0x20000d24
 8003edc:	20000d00 	.word	0x20000d00
 8003ee0:	20000cb4 	.word	0x20000cb4
 8003ee4:	20000cb8 	.word	0x20000cb8
 8003ee8:	20000d14 	.word	0x20000d14
 8003eec:	20000d1c 	.word	0x20000d1c
 8003ef0:	20000d04 	.word	0x20000d04
 8003ef4:	2000082c 	.word	0x2000082c
 8003ef8:	20000828 	.word	0x20000828
 8003efc:	20000d10 	.word	0x20000d10
 8003f00:	20000d0c 	.word	0x20000d0c

08003f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <vTaskSwitchContext+0xa8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f12:	4b27      	ldr	r3, [pc, #156]	@ (8003fb0 <vTaskSwitchContext+0xac>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f18:	e042      	b.n	8003fa0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003f1a:	4b25      	ldr	r3, [pc, #148]	@ (8003fb0 <vTaskSwitchContext+0xac>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f20:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <vTaskSwitchContext+0xb0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	e011      	b.n	8003f4c <vTaskSwitchContext+0x48>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <vTaskSwitchContext+0x42>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	607b      	str	r3, [r7, #4]
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	e7fd      	b.n	8003f42 <vTaskSwitchContext+0x3e>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	491a      	ldr	r1, [pc, #104]	@ (8003fb8 <vTaskSwitchContext+0xb4>)
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0e3      	beq.n	8003f28 <vTaskSwitchContext+0x24>
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4a13      	ldr	r2, [pc, #76]	@ (8003fb8 <vTaskSwitchContext+0xb4>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3308      	adds	r3, #8
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d104      	bne.n	8003f90 <vTaskSwitchContext+0x8c>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4a09      	ldr	r2, [pc, #36]	@ (8003fbc <vTaskSwitchContext+0xb8>)
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4a06      	ldr	r2, [pc, #24]	@ (8003fb4 <vTaskSwitchContext+0xb0>)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20000d24 	.word	0x20000d24
 8003fb0:	20000d10 	.word	0x20000d10
 8003fb4:	20000d04 	.word	0x20000d04
 8003fb8:	2000082c 	.word	0x2000082c
 8003fbc:	20000828 	.word	0x20000828

08003fc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	60fb      	str	r3, [r7, #12]
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fe8:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <vTaskPlaceOnEventList+0x48>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3318      	adds	r3, #24
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fe fea6 	bl	8002d42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	6838      	ldr	r0, [r7, #0]
 8003ffa:	f000 fa81 	bl	8004500 <prvAddCurrentTaskToDelayedList>
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000828 	.word	0x20000828

0800400c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	617b      	str	r3, [r7, #20]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004036:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <vTaskPlaceOnEventListRestricted+0x54>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3318      	adds	r3, #24
 800403c:	4619      	mov	r1, r3
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7fe fe5b 	bl	8002cfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f000 fa54 	bl	8004500 <prvAddCurrentTaskToDelayedList>
	}
 8004058:	bf00      	nop
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000828 	.word	0x20000828

08004064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60fb      	str	r3, [r7, #12]
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3318      	adds	r3, #24
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fe8c 	bl	8002db4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409c:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <xTaskRemoveFromEventList+0xb0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11d      	bne.n	80040e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fe83 	bl	8002db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b2:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <xTaskRemoveFromEventList+0xb4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <xTaskRemoveFromEventList+0x5e>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <xTaskRemoveFromEventList+0xb4>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4a13      	ldr	r2, [pc, #76]	@ (800411c <xTaskRemoveFromEventList+0xb8>)
 80040d0:	441a      	add	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f7fe fe0e 	bl	8002cfa <vListInsertEnd>
 80040de:	e005      	b.n	80040ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3318      	adds	r3, #24
 80040e4:	4619      	mov	r1, r3
 80040e6:	480e      	ldr	r0, [pc, #56]	@ (8004120 <xTaskRemoveFromEventList+0xbc>)
 80040e8:	f7fe fe07 	bl	8002cfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <xTaskRemoveFromEventList+0xc0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d905      	bls.n	8004106 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040fa:	2301      	movs	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <xTaskRemoveFromEventList+0xc4>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e001      	b.n	800410a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800410a:	697b      	ldr	r3, [r7, #20]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000d24 	.word	0x20000d24
 8004118:	20000d04 	.word	0x20000d04
 800411c:	2000082c 	.word	0x2000082c
 8004120:	20000cbc 	.word	0x20000cbc
 8004124:	20000828 	.word	0x20000828
 8004128:	20000d10 	.word	0x20000d10

0800412c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <vTaskInternalSetTimeOutState+0x24>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <vTaskInternalSetTimeOutState+0x28>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000d14 	.word	0x20000d14
 8004154:	20000d00 	.word	0x20000d00

08004158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	613b      	str	r3, [r7, #16]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60fb      	str	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	e7fd      	b.n	800419a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800419e:	f000 fe8b 	bl	8004eb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004218 <xTaskCheckForTimeOut+0xc0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d102      	bne.n	80041c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e023      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b15      	ldr	r3, [pc, #84]	@ (800421c <xTaskCheckForTimeOut+0xc4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d007      	beq.n	80041de <xTaskCheckForTimeOut+0x86>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e015      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d20b      	bcs.n	8004200 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff99 	bl	800412c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e004      	b.n	800420a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004206:	2301      	movs	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800420a:	f000 fe87 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 800420e:	69fb      	ldr	r3, [r7, #28]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000d00 	.word	0x20000d00
 800421c:	20000d14 	.word	0x20000d14

08004220 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <vTaskMissedYield+0x14>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000d10 	.word	0x20000d10

08004238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004240:	f000 f852 	bl	80042e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <prvIdleTask+0x28>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d9f9      	bls.n	8004240 <prvIdleTask+0x8>
			{
				taskYIELD();
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <prvIdleTask+0x2c>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800425c:	e7f0      	b.n	8004240 <prvIdleTask+0x8>
 800425e:	bf00      	nop
 8004260:	2000082c 	.word	0x2000082c
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	e00c      	b.n	800428e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4a12      	ldr	r2, [pc, #72]	@ (80042c8 <prvInitialiseTaskLists+0x60>)
 8004280:	4413      	add	r3, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fd0c 	bl	8002ca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3301      	adds	r3, #1
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b37      	cmp	r3, #55	@ 0x37
 8004292:	d9ef      	bls.n	8004274 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004294:	480d      	ldr	r0, [pc, #52]	@ (80042cc <prvInitialiseTaskLists+0x64>)
 8004296:	f7fe fd03 	bl	8002ca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800429a:	480d      	ldr	r0, [pc, #52]	@ (80042d0 <prvInitialiseTaskLists+0x68>)
 800429c:	f7fe fd00 	bl	8002ca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042a0:	480c      	ldr	r0, [pc, #48]	@ (80042d4 <prvInitialiseTaskLists+0x6c>)
 80042a2:	f7fe fcfd 	bl	8002ca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042a6:	480c      	ldr	r0, [pc, #48]	@ (80042d8 <prvInitialiseTaskLists+0x70>)
 80042a8:	f7fe fcfa 	bl	8002ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042ac:	480b      	ldr	r0, [pc, #44]	@ (80042dc <prvInitialiseTaskLists+0x74>)
 80042ae:	f7fe fcf7 	bl	8002ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042b2:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <prvInitialiseTaskLists+0x78>)
 80042b4:	4a05      	ldr	r2, [pc, #20]	@ (80042cc <prvInitialiseTaskLists+0x64>)
 80042b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <prvInitialiseTaskLists+0x7c>)
 80042ba:	4a05      	ldr	r2, [pc, #20]	@ (80042d0 <prvInitialiseTaskLists+0x68>)
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	2000082c 	.word	0x2000082c
 80042cc:	20000c8c 	.word	0x20000c8c
 80042d0:	20000ca0 	.word	0x20000ca0
 80042d4:	20000cbc 	.word	0x20000cbc
 80042d8:	20000cd0 	.word	0x20000cd0
 80042dc:	20000ce8 	.word	0x20000ce8
 80042e0:	20000cb4 	.word	0x20000cb4
 80042e4:	20000cb8 	.word	0x20000cb8

080042e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042ee:	e019      	b.n	8004324 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042f0:	f000 fde2 	bl	8004eb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f4:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <prvCheckTasksWaitingTermination+0x50>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fd57 	bl	8002db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004306:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <prvCheckTasksWaitingTermination+0x54>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3b01      	subs	r3, #1
 800430c:	4a0b      	ldr	r2, [pc, #44]	@ (800433c <prvCheckTasksWaitingTermination+0x54>)
 800430e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <prvCheckTasksWaitingTermination+0x58>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3b01      	subs	r3, #1
 8004316:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <prvCheckTasksWaitingTermination+0x58>)
 8004318:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800431a:	f000 fdff 	bl	8004f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f810 	bl	8004344 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <prvCheckTasksWaitingTermination+0x58>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e1      	bne.n	80042f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000cd0 	.word	0x20000cd0
 800433c:	20000cfc 	.word	0x20000cfc
 8004340:	20000ce4 	.word	0x20000ce4

08004344 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	4618      	mov	r0, r3
 800435c:	f000 ff9c 	bl	8005298 <vPortFree>
				vPortFree( pxTCB );
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 ff99 	bl	8005298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004366:	e019      	b.n	800439c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800436e:	2b01      	cmp	r3, #1
 8004370:	d103      	bne.n	800437a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 ff90 	bl	8005298 <vPortFree>
	}
 8004378:	e010      	b.n	800439c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004380:	2b02      	cmp	r3, #2
 8004382:	d00b      	beq.n	800439c <prvDeleteTCB+0x58>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <prvDeleteTCB+0x54>
	}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043aa:	4b0c      	ldr	r3, [pc, #48]	@ (80043dc <prvResetNextTaskUnblockTime+0x38>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d104      	bne.n	80043be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <prvResetNextTaskUnblockTime+0x3c>)
 80043b6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043bc:	e008      	b.n	80043d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043be:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <prvResetNextTaskUnblockTime+0x38>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4a04      	ldr	r2, [pc, #16]	@ (80043e0 <prvResetNextTaskUnblockTime+0x3c>)
 80043ce:	6013      	str	r3, [r2, #0]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20000cb4 	.word	0x20000cb4
 80043e0:	20000d1c 	.word	0x20000d1c

080043e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <xTaskGetSchedulerState+0x34>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043f2:	2301      	movs	r3, #1
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	e008      	b.n	800440a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f8:	4b08      	ldr	r3, [pc, #32]	@ (800441c <xTaskGetSchedulerState+0x38>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004400:	2302      	movs	r3, #2
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	e001      	b.n	800440a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800440a:	687b      	ldr	r3, [r7, #4]
	}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000d08 	.word	0x20000d08
 800441c:	20000d24 	.word	0x20000d24

08004420 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d058      	beq.n	80044e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004436:	4b2f      	ldr	r3, [pc, #188]	@ (80044f4 <xTaskPriorityDisinherit+0xd4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	429a      	cmp	r2, r3
 800443e:	d00b      	beq.n	8004458 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60fb      	str	r3, [r7, #12]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	60bb      	str	r3, [r7, #8]
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448a:	429a      	cmp	r2, r3
 800448c:	d02c      	beq.n	80044e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d128      	bne.n	80044e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3304      	adds	r3, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fc8a 	bl	8002db4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b8:	4b0f      	ldr	r3, [pc, #60]	@ (80044f8 <xTaskPriorityDisinherit+0xd8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d903      	bls.n	80044c8 <xTaskPriorityDisinherit+0xa8>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	4a0c      	ldr	r2, [pc, #48]	@ (80044f8 <xTaskPriorityDisinherit+0xd8>)
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4a09      	ldr	r2, [pc, #36]	@ (80044fc <xTaskPriorityDisinherit+0xdc>)
 80044d6:	441a      	add	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f7fe fc0b 	bl	8002cfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044e8:	697b      	ldr	r3, [r7, #20]
	}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000828 	.word	0x20000828
 80044f8:	20000d04 	.word	0x20000d04
 80044fc:	2000082c 	.word	0x2000082c

08004500 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800450a:	4b21      	ldr	r3, [pc, #132]	@ (8004590 <prvAddCurrentTaskToDelayedList+0x90>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004510:	4b20      	ldr	r3, [pc, #128]	@ (8004594 <prvAddCurrentTaskToDelayedList+0x94>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3304      	adds	r3, #4
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fc4c 	bl	8002db4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d10a      	bne.n	800453a <prvAddCurrentTaskToDelayedList+0x3a>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800452a:	4b1a      	ldr	r3, [pc, #104]	@ (8004594 <prvAddCurrentTaskToDelayedList+0x94>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4819      	ldr	r0, [pc, #100]	@ (8004598 <prvAddCurrentTaskToDelayedList+0x98>)
 8004534:	f7fe fbe1 	bl	8002cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004538:	e026      	b.n	8004588 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4413      	add	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004542:	4b14      	ldr	r3, [pc, #80]	@ (8004594 <prvAddCurrentTaskToDelayedList+0x94>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	429a      	cmp	r2, r3
 8004550:	d209      	bcs.n	8004566 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004552:	4b12      	ldr	r3, [pc, #72]	@ (800459c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <prvAddCurrentTaskToDelayedList+0x94>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f7fe fbef 	bl	8002d42 <vListInsert>
}
 8004564:	e010      	b.n	8004588 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004566:	4b0e      	ldr	r3, [pc, #56]	@ (80045a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <prvAddCurrentTaskToDelayedList+0x94>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7fe fbe5 	bl	8002d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004578:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	d202      	bcs.n	8004588 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004582:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6013      	str	r3, [r2, #0]
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000d00 	.word	0x20000d00
 8004594:	20000828 	.word	0x20000828
 8004598:	20000ce8 	.word	0x20000ce8
 800459c:	20000cb8 	.word	0x20000cb8
 80045a0:	20000cb4 	.word	0x20000cb4
 80045a4:	20000d1c 	.word	0x20000d1c

080045a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	@ 0x28
 80045ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045b2:	f000 fb13 	bl	8004bdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045b6:	4b1d      	ldr	r3, [pc, #116]	@ (800462c <xTimerCreateTimerTask+0x84>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d021      	beq.n	8004602 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045c6:	1d3a      	adds	r2, r7, #4
 80045c8:	f107 0108 	add.w	r1, r7, #8
 80045cc:	f107 030c 	add.w	r3, r7, #12
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fb4b 	bl	8002c6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	9202      	str	r2, [sp, #8]
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	2302      	movs	r3, #2
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	2300      	movs	r3, #0
 80045e6:	460a      	mov	r2, r1
 80045e8:	4911      	ldr	r1, [pc, #68]	@ (8004630 <xTimerCreateTimerTask+0x88>)
 80045ea:	4812      	ldr	r0, [pc, #72]	@ (8004634 <xTimerCreateTimerTask+0x8c>)
 80045ec:	f7ff f906 	bl	80037fc <xTaskCreateStatic>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4a11      	ldr	r2, [pc, #68]	@ (8004638 <xTimerCreateTimerTask+0x90>)
 80045f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045f6:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <xTimerCreateTimerTask+0x90>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045fe:	2301      	movs	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	613b      	str	r3, [r7, #16]
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004620:	697b      	ldr	r3, [r7, #20]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000d58 	.word	0x20000d58
 8004630:	080063e0 	.word	0x080063e0
 8004634:	08004775 	.word	0x08004775
 8004638:	20000d5c 	.word	0x20000d5c

0800463c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	@ 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <xTimerGenericCommand+0x30>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	623b      	str	r3, [r7, #32]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800466c:	4b19      	ldr	r3, [pc, #100]	@ (80046d4 <xTimerGenericCommand+0x98>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d02a      	beq.n	80046ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	dc18      	bgt.n	80046b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004686:	f7ff fead 	bl	80043e4 <xTaskGetSchedulerState>
 800468a:	4603      	mov	r3, r0
 800468c:	2b02      	cmp	r3, #2
 800468e:	d109      	bne.n	80046a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004690:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <xTimerGenericCommand+0x98>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	f107 0110 	add.w	r1, r7, #16
 8004698:	2300      	movs	r3, #0
 800469a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800469c:	f7fe fcbe 	bl	800301c <xQueueGenericSend>
 80046a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80046a2:	e012      	b.n	80046ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <xTimerGenericCommand+0x98>)
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	f107 0110 	add.w	r1, r7, #16
 80046ac:	2300      	movs	r3, #0
 80046ae:	2200      	movs	r2, #0
 80046b0:	f7fe fcb4 	bl	800301c <xQueueGenericSend>
 80046b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80046b6:	e008      	b.n	80046ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <xTimerGenericCommand+0x98>)
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	f107 0110 	add.w	r1, r7, #16
 80046c0:	2300      	movs	r3, #0
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	f7fe fdac 	bl	8003220 <xQueueGenericSendFromISR>
 80046c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3728      	adds	r7, #40	@ 0x28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000d58 	.word	0x20000d58

080046d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af02      	add	r7, sp, #8
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e2:	4b23      	ldr	r3, [pc, #140]	@ (8004770 <prvProcessExpiredTimer+0x98>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fb5f 	bl	8002db4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d023      	beq.n	800474c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	18d1      	adds	r1, r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	6978      	ldr	r0, [r7, #20]
 8004712:	f000 f8d5 	bl	80048c0 <prvInsertTimerInActiveList>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800471c:	2300      	movs	r3, #0
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2300      	movs	r3, #0
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	2100      	movs	r1, #0
 8004726:	6978      	ldr	r0, [r7, #20]
 8004728:	f7ff ff88 	bl	800463c <xTimerGenericCommand>
 800472c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d114      	bne.n	800475e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	60fb      	str	r3, [r7, #12]
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	b2da      	uxtb	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	4798      	blx	r3
}
 8004766:	bf00      	nop
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000d50 	.word	0x20000d50

08004774 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	4618      	mov	r0, r3
 8004782:	f000 f859 	bl	8004838 <prvGetNextExpireTime>
 8004786:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4619      	mov	r1, r3
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f805 	bl	800479c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004792:	f000 f8d7 	bl	8004944 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004796:	bf00      	nop
 8004798:	e7f0      	b.n	800477c <prvTimerTask+0x8>
	...

0800479c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047a6:	f7ff fa37 	bl	8003c18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f866 	bl	8004880 <prvSampleTimeNow>
 80047b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d130      	bne.n	800481e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <prvProcessTimerOrBlockTask+0x3c>
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d806      	bhi.n	80047d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047ca:	f7ff fa33 	bl	8003c34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ff81 	bl	80046d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047d6:	e024      	b.n	8004822 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047de:	4b13      	ldr	r3, [pc, #76]	@ (800482c <prvProcessTimerOrBlockTask+0x90>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <prvProcessTimerOrBlockTask+0x50>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <prvProcessTimerOrBlockTask+0x52>
 80047ec:	2300      	movs	r3, #0
 80047ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004830 <prvProcessTimerOrBlockTask+0x94>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4619      	mov	r1, r3
 80047fe:	f7fe ffc9 	bl	8003794 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004802:	f7ff fa17 	bl	8003c34 <xTaskResumeAll>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800480c:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <prvProcessTimerOrBlockTask+0x98>)
 800480e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	f3bf 8f6f 	isb	sy
}
 800481c:	e001      	b.n	8004822 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800481e:	f7ff fa09 	bl	8003c34 <xTaskResumeAll>
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000d54 	.word	0x20000d54
 8004830:	20000d58 	.word	0x20000d58
 8004834:	e000ed04 	.word	0xe000ed04

08004838 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004840:	4b0e      	ldr	r3, [pc, #56]	@ (800487c <prvGetNextExpireTime+0x44>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <prvGetNextExpireTime+0x16>
 800484a:	2201      	movs	r2, #1
 800484c:	e000      	b.n	8004850 <prvGetNextExpireTime+0x18>
 800484e:	2200      	movs	r2, #0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800485c:	4b07      	ldr	r3, [pc, #28]	@ (800487c <prvGetNextExpireTime+0x44>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e001      	b.n	800486c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800486c:	68fb      	ldr	r3, [r7, #12]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000d50 	.word	0x20000d50

08004880 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004888:	f7ff fa72 	bl	8003d70 <xTaskGetTickCount>
 800488c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800488e:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <prvSampleTimeNow+0x3c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	429a      	cmp	r2, r3
 8004896:	d205      	bcs.n	80048a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004898:	f000 f93a 	bl	8004b10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e002      	b.n	80048aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048aa:	4a04      	ldr	r2, [pc, #16]	@ (80048bc <prvSampleTimeNow+0x3c>)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000d60 	.word	0x20000d60

080048c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d812      	bhi.n	800490c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e01b      	b.n	8004932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048fa:	4b10      	ldr	r3, [pc, #64]	@ (800493c <prvInsertTimerInActiveList+0x7c>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3304      	adds	r3, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7fe fa1c 	bl	8002d42 <vListInsert>
 800490a:	e012      	b.n	8004932 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d206      	bcs.n	8004922 <prvInsertTimerInActiveList+0x62>
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d302      	bcc.n	8004922 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800491c:	2301      	movs	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	e007      	b.n	8004932 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <prvInsertTimerInActiveList+0x80>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3304      	adds	r3, #4
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f7fe fa08 	bl	8002d42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004932:	697b      	ldr	r3, [r7, #20]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000d54 	.word	0x20000d54
 8004940:	20000d50 	.word	0x20000d50

08004944 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08e      	sub	sp, #56	@ 0x38
 8004948:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800494a:	e0ce      	b.n	8004aea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	da19      	bge.n	8004986 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	3304      	adds	r3, #4
 8004956:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10b      	bne.n	8004976 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	61fb      	str	r3, [r7, #28]
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	e7fd      	b.n	8004972 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800497c:	6850      	ldr	r0, [r2, #4]
 800497e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004980:	6892      	ldr	r2, [r2, #8]
 8004982:	4611      	mov	r1, r2
 8004984:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f2c0 80ae 	blt.w	8004aea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800499a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499c:	3304      	adds	r3, #4
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe fa08 	bl	8002db4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049a4:	463b      	mov	r3, r7
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff6a 	bl	8004880 <prvSampleTimeNow>
 80049ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b09      	cmp	r3, #9
 80049b2:	f200 8097 	bhi.w	8004ae4 <prvProcessReceivedCommands+0x1a0>
 80049b6:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <prvProcessReceivedCommands+0x78>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	080049e5 	.word	0x080049e5
 80049c8:	08004a5b 	.word	0x08004a5b
 80049cc:	08004a6f 	.word	0x08004a6f
 80049d0:	08004abb 	.word	0x08004abb
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049e5 	.word	0x080049e5
 80049dc:	08004a5b 	.word	0x08004a5b
 80049e0:	08004a6f 	.word	0x08004a6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	18d1      	adds	r1, r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a04:	f7ff ff5c 	bl	80048c0 <prvInsertTimerInActiveList>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d06c      	beq.n	8004ae8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d061      	beq.n	8004ae8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	441a      	add	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2300      	movs	r3, #0
 8004a32:	2100      	movs	r1, #0
 8004a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a36:	f7ff fe01 	bl	800463c <xTimerGenericCommand>
 8004a3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d152      	bne.n	8004ae8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	61bb      	str	r3, [r7, #24]
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a6c:	e03d      	b.n	8004aea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	617b      	str	r3, [r7, #20]
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	18d1      	adds	r1, r2, r3
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ab4:	f7ff ff04 	bl	80048c0 <prvInsertTimerInActiveList>
					break;
 8004ab8:	e017      	b.n	8004aea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d103      	bne.n	8004ad0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004ac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aca:	f000 fbe5 	bl	8005298 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ace:	e00c      	b.n	8004aea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ae2:	e002      	b.n	8004aea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <prvProcessReceivedCommands+0x1a6>
					break;
 8004ae8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aea:	4b08      	ldr	r3, [pc, #32]	@ (8004b0c <prvProcessReceivedCommands+0x1c8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1d39      	adds	r1, r7, #4
 8004af0:	2200      	movs	r2, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fc32 	bl	800335c <xQueueReceive>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f47f af26 	bne.w	800494c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	3730      	adds	r7, #48	@ 0x30
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000d58 	.word	0x20000d58

08004b10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b16:	e049      	b.n	8004bac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b18:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd4 <prvSwitchTimerLists+0xc4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b22:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd4 <prvSwitchTimerLists+0xc4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe f93f 	bl	8002db4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02f      	beq.n	8004bac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d90e      	bls.n	8004b7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd4 <prvSwitchTimerLists+0xc4>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4619      	mov	r1, r3
 8004b74:	4610      	mov	r0, r2
 8004b76:	f7fe f8e4 	bl	8002d42 <vListInsert>
 8004b7a:	e017      	b.n	8004bac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2300      	movs	r3, #0
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	2100      	movs	r1, #0
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff fd58 	bl	800463c <xTimerGenericCommand>
 8004b8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	603b      	str	r3, [r7, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	e7fd      	b.n	8004ba8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bac:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <prvSwitchTimerLists+0xc4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1b0      	bne.n	8004b18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bb6:	4b07      	ldr	r3, [pc, #28]	@ (8004bd4 <prvSwitchTimerLists+0xc4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <prvSwitchTimerLists+0xc8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a04      	ldr	r2, [pc, #16]	@ (8004bd4 <prvSwitchTimerLists+0xc4>)
 8004bc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bc4:	4a04      	ldr	r2, [pc, #16]	@ (8004bd8 <prvSwitchTimerLists+0xc8>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	6013      	str	r3, [r2, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000d50 	.word	0x20000d50
 8004bd8:	20000d54 	.word	0x20000d54

08004bdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004be2:	f000 f969 	bl	8004eb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004be6:	4b15      	ldr	r3, [pc, #84]	@ (8004c3c <prvCheckForValidListAndQueue+0x60>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d120      	bne.n	8004c30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bee:	4814      	ldr	r0, [pc, #80]	@ (8004c40 <prvCheckForValidListAndQueue+0x64>)
 8004bf0:	f7fe f856 	bl	8002ca0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bf4:	4813      	ldr	r0, [pc, #76]	@ (8004c44 <prvCheckForValidListAndQueue+0x68>)
 8004bf6:	f7fe f853 	bl	8002ca0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bfa:	4b13      	ldr	r3, [pc, #76]	@ (8004c48 <prvCheckForValidListAndQueue+0x6c>)
 8004bfc:	4a10      	ldr	r2, [pc, #64]	@ (8004c40 <prvCheckForValidListAndQueue+0x64>)
 8004bfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c00:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <prvCheckForValidListAndQueue+0x70>)
 8004c02:	4a10      	ldr	r2, [pc, #64]	@ (8004c44 <prvCheckForValidListAndQueue+0x68>)
 8004c04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c06:	2300      	movs	r3, #0
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <prvCheckForValidListAndQueue+0x74>)
 8004c0c:	4a11      	ldr	r2, [pc, #68]	@ (8004c54 <prvCheckForValidListAndQueue+0x78>)
 8004c0e:	2110      	movs	r1, #16
 8004c10:	200a      	movs	r0, #10
 8004c12:	f7fe f963 	bl	8002edc <xQueueGenericCreateStatic>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4a08      	ldr	r2, [pc, #32]	@ (8004c3c <prvCheckForValidListAndQueue+0x60>)
 8004c1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c1c:	4b07      	ldr	r3, [pc, #28]	@ (8004c3c <prvCheckForValidListAndQueue+0x60>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <prvCheckForValidListAndQueue+0x60>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	490b      	ldr	r1, [pc, #44]	@ (8004c58 <prvCheckForValidListAndQueue+0x7c>)
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fd88 	bl	8003740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c30:	f000 f974 	bl	8004f1c <vPortExitCritical>
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000d58 	.word	0x20000d58
 8004c40:	20000d28 	.word	0x20000d28
 8004c44:	20000d3c 	.word	0x20000d3c
 8004c48:	20000d50 	.word	0x20000d50
 8004c4c:	20000d54 	.word	0x20000d54
 8004c50:	20000e04 	.word	0x20000e04
 8004c54:	20000d64 	.word	0x20000d64
 8004c58:	080063e8 	.word	0x080063e8

08004c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3b04      	subs	r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f023 0201 	bic.w	r2, r3, #1
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b04      	subs	r3, #4
 8004c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc0 <pxPortInitialiseStack+0x64>)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3b14      	subs	r3, #20
 8004c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f06f 0202 	mvn.w	r2, #2
 8004caa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3b20      	subs	r3, #32
 8004cb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	08004cc5 	.word	0x08004cc5

08004cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cce:	4b13      	ldr	r3, [pc, #76]	@ (8004d1c <prvTaskExitError+0x58>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d00b      	beq.n	8004cf0 <prvTaskExitError+0x2c>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	60fb      	str	r3, [r7, #12]
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <prvTaskExitError+0x28>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60bb      	str	r3, [r7, #8]
}
 8004d02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d04:	bf00      	nop
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0fc      	beq.n	8004d06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	2000000c 	.word	0x2000000c

08004d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <pxCurrentTCBConst2>)
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	6808      	ldr	r0, [r1, #0]
 8004d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	f380 8809 	msr	PSP, r0
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8811 	msr	BASEPRI, r0
 8004d3a:	4770      	bx	lr
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst2>:
 8004d40:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d48:	4808      	ldr	r0, [pc, #32]	@ (8004d6c <prvPortStartFirstTask+0x24>)
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	f380 8808 	msr	MSP, r0
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8814 	msr	CONTROL, r0
 8004d5a:	b662      	cpsie	i
 8004d5c:	b661      	cpsie	f
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	df00      	svc	0
 8004d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d6a:	bf00      	nop
 8004d6c:	e000ed08 	.word	0xe000ed08

08004d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d76:	4b47      	ldr	r3, [pc, #284]	@ (8004e94 <xPortStartScheduler+0x124>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a47      	ldr	r2, [pc, #284]	@ (8004e98 <xPortStartScheduler+0x128>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10b      	bne.n	8004d98 <xPortStartScheduler+0x28>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	613b      	str	r3, [r7, #16]
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d98:	4b3e      	ldr	r3, [pc, #248]	@ (8004e94 <xPortStartScheduler+0x124>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e9c <xPortStartScheduler+0x12c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10b      	bne.n	8004dba <xPortStartScheduler+0x4a>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60fb      	str	r3, [r7, #12]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dba:	4b39      	ldr	r3, [pc, #228]	@ (8004ea0 <xPortStartScheduler+0x130>)
 8004dbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	22ff      	movs	r2, #255	@ 0xff
 8004dca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4b31      	ldr	r3, [pc, #196]	@ (8004ea4 <xPortStartScheduler+0x134>)
 8004de0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004de2:	4b31      	ldr	r3, [pc, #196]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004de4:	2207      	movs	r2, #7
 8004de6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004de8:	e009      	b.n	8004dfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004dea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004df2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e06:	2b80      	cmp	r3, #128	@ 0x80
 8004e08:	d0ef      	beq.n	8004dea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1c3 0307 	rsb	r3, r3, #7
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d00b      	beq.n	8004e2e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	60bb      	str	r3, [r7, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e40:	4a19      	ldr	r2, [pc, #100]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e4c:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e58:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e64:	f000 f8da 	bl	800501c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <xPortStartScheduler+0x140>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e6e:	f000 f8f9 	bl	8005064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e72:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <xPortStartScheduler+0x144>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a0f      	ldr	r2, [pc, #60]	@ (8004eb4 <xPortStartScheduler+0x144>)
 8004e78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e7e:	f7ff ff63 	bl	8004d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e82:	f7ff f83f 	bl	8003f04 <vTaskSwitchContext>
	prvTaskExitError();
 8004e86:	f7ff ff1d 	bl	8004cc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	e000ed00 	.word	0xe000ed00
 8004e98:	410fc271 	.word	0x410fc271
 8004e9c:	410fc270 	.word	0x410fc270
 8004ea0:	e000e400 	.word	0xe000e400
 8004ea4:	20000e54 	.word	0x20000e54
 8004ea8:	20000e58 	.word	0x20000e58
 8004eac:	e000ed20 	.word	0xe000ed20
 8004eb0:	2000000c 	.word	0x2000000c
 8004eb4:	e000ef34 	.word	0xe000ef34

08004eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ed2:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004eda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004edc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d110      	bne.n	8004f06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <vPortEnterCritical+0x60>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <vPortEnterCritical+0x4e>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	603b      	str	r3, [r7, #0]
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	e7fd      	b.n	8004f02 <vPortEnterCritical+0x4a>
	}
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	2000000c 	.word	0x2000000c
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f22:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <vPortExitCritical+0x26>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	607b      	str	r3, [r7, #4]
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	e7fd      	b.n	8004f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f42:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	4a08      	ldr	r2, [pc, #32]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f4c:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <vPortExitCritical+0x44>
 8004f54:	2300      	movs	r3, #0
 8004f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f383 8811 	msr	BASEPRI, r3
}
 8004f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	2000000c 	.word	0x2000000c

08004f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f70:	f3ef 8009 	mrs	r0, PSP
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <pxCurrentTCBConst>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	f01e 0f10 	tst.w	lr, #16
 8004f80:	bf08      	it	eq
 8004f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8a:	6010      	str	r0, [r2, #0]
 8004f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f94:	f380 8811 	msr	BASEPRI, r0
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f7fe ffb0 	bl	8003f04 <vTaskSwitchContext>
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f380 8811 	msr	BASEPRI, r0
 8004fac:	bc09      	pop	{r0, r3}
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	6808      	ldr	r0, [r1, #0]
 8004fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb6:	f01e 0f10 	tst.w	lr, #16
 8004fba:	bf08      	it	eq
 8004fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fc0:	f380 8809 	msr	PSP, r0
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst>:
 8004fd0:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ff2:	f7fe fecd 	bl	8003d90 <xTaskIncrementTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <xPortSysTickHandler+0x40>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f383 8811 	msr	BASEPRI, r3
}
 800500e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005026:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <vPortSetupTimerInterrupt+0x38>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800502c:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <vPortSetupTimerInterrupt+0x3c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0a      	ldr	r2, [pc, #40]	@ (800505c <vPortSetupTimerInterrupt+0x40>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <vPortSetupTimerInterrupt+0x44>)
 800503a:	3b01      	subs	r3, #1
 800503c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503e:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005040:	2207      	movs	r2, #7
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	e000e010 	.word	0xe000e010
 8005054:	e000e018 	.word	0xe000e018
 8005058:	20000000 	.word	0x20000000
 800505c:	10624dd3 	.word	0x10624dd3
 8005060:	e000e014 	.word	0xe000e014

08005064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005074 <vPortEnableVFP+0x10>
 8005068:	6801      	ldr	r1, [r0, #0]
 800506a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800506e:	6001      	str	r1, [r0, #0]
 8005070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005072:	bf00      	nop
 8005074:	e000ed88 	.word	0xe000ed88

08005078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800507e:	f3ef 8305 	mrs	r3, IPSR
 8005082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	d915      	bls.n	80050b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800508a:	4a18      	ldr	r2, [pc, #96]	@ (80050ec <vPortValidateInterruptPriority+0x74>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005094:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <vPortValidateInterruptPriority+0x78>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	7afa      	ldrb	r2, [r7, #11]
 800509a:	429a      	cmp	r2, r3
 800509c:	d20b      	bcs.n	80050b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	607b      	str	r3, [r7, #4]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050b6:	4b0f      	ldr	r3, [pc, #60]	@ (80050f4 <vPortValidateInterruptPriority+0x7c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050be:	4b0e      	ldr	r3, [pc, #56]	@ (80050f8 <vPortValidateInterruptPriority+0x80>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d90b      	bls.n	80050de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	603b      	str	r3, [r7, #0]
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	e7fd      	b.n	80050da <vPortValidateInterruptPriority+0x62>
	}
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000e3f0 	.word	0xe000e3f0
 80050f0:	20000e54 	.word	0x20000e54
 80050f4:	e000ed0c 	.word	0xe000ed0c
 80050f8:	20000e58 	.word	0x20000e58

080050fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	@ 0x28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005108:	f7fe fd86 	bl	8003c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800510c:	4b5c      	ldr	r3, [pc, #368]	@ (8005280 <pvPortMalloc+0x184>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005114:	f000 f924 	bl	8005360 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005118:	4b5a      	ldr	r3, [pc, #360]	@ (8005284 <pvPortMalloc+0x188>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 8095 	bne.w	8005250 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01e      	beq.n	800516a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800512c:	2208      	movs	r2, #8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d015      	beq.n	800516a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	3308      	adds	r3, #8
 8005146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <pvPortMalloc+0x6e>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	617b      	str	r3, [r7, #20]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d06f      	beq.n	8005250 <pvPortMalloc+0x154>
 8005170:	4b45      	ldr	r3, [pc, #276]	@ (8005288 <pvPortMalloc+0x18c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d86a      	bhi.n	8005250 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800517a:	4b44      	ldr	r3, [pc, #272]	@ (800528c <pvPortMalloc+0x190>)
 800517c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800517e:	4b43      	ldr	r3, [pc, #268]	@ (800528c <pvPortMalloc+0x190>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005184:	e004      	b.n	8005190 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d903      	bls.n	80051a2 <pvPortMalloc+0xa6>
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f1      	bne.n	8005186 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051a2:	4b37      	ldr	r3, [pc, #220]	@ (8005280 <pvPortMalloc+0x184>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d051      	beq.n	8005250 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2208      	movs	r2, #8
 80051b2:	4413      	add	r3, r2
 80051b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	1ad2      	subs	r2, r2, r3
 80051c6:	2308      	movs	r3, #8
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d920      	bls.n	8005210 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <pvPortMalloc+0xfc>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	613b      	str	r3, [r7, #16]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800520a:	69b8      	ldr	r0, [r7, #24]
 800520c:	f000 f90a 	bl	8005424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005210:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <pvPortMalloc+0x18c>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	4a1b      	ldr	r2, [pc, #108]	@ (8005288 <pvPortMalloc+0x18c>)
 800521c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800521e:	4b1a      	ldr	r3, [pc, #104]	@ (8005288 <pvPortMalloc+0x18c>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b1b      	ldr	r3, [pc, #108]	@ (8005290 <pvPortMalloc+0x194>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d203      	bcs.n	8005232 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800522a:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <pvPortMalloc+0x18c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <pvPortMalloc+0x194>)
 8005230:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	4b13      	ldr	r3, [pc, #76]	@ (8005284 <pvPortMalloc+0x188>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	431a      	orrs	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005246:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <pvPortMalloc+0x198>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a11      	ldr	r2, [pc, #68]	@ (8005294 <pvPortMalloc+0x198>)
 800524e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005250:	f7fe fcf0 	bl	8003c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <pvPortMalloc+0x17a>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60fb      	str	r3, [r7, #12]
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	e7fd      	b.n	8005272 <pvPortMalloc+0x176>
	return pvReturn;
 8005276:	69fb      	ldr	r3, [r7, #28]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	@ 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20004a64 	.word	0x20004a64
 8005284:	20004a78 	.word	0x20004a78
 8005288:	20004a68 	.word	0x20004a68
 800528c:	20004a5c 	.word	0x20004a5c
 8005290:	20004a6c 	.word	0x20004a6c
 8005294:	20004a70 	.word	0x20004a70

08005298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d04f      	beq.n	800534a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052aa:	2308      	movs	r3, #8
 80052ac:	425b      	negs	r3, r3
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <vPortFree+0xbc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <vPortFree+0x46>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <vPortFree+0x66>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60bb      	str	r3, [r7, #8]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	4b14      	ldr	r3, [pc, #80]	@ (8005354 <vPortFree+0xbc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4013      	ands	r3, r2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01e      	beq.n	800534a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11a      	bne.n	800534a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <vPortFree+0xbc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	43db      	mvns	r3, r3
 800531e:	401a      	ands	r2, r3
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005324:	f7fe fc78 	bl	8003c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <vPortFree+0xc0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4413      	add	r3, r2
 8005332:	4a09      	ldr	r2, [pc, #36]	@ (8005358 <vPortFree+0xc0>)
 8005334:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005336:	6938      	ldr	r0, [r7, #16]
 8005338:	f000 f874 	bl	8005424 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800533c:	4b07      	ldr	r3, [pc, #28]	@ (800535c <vPortFree+0xc4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	4a06      	ldr	r2, [pc, #24]	@ (800535c <vPortFree+0xc4>)
 8005344:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005346:	f7fe fc75 	bl	8003c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800534a:	bf00      	nop
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20004a78 	.word	0x20004a78
 8005358:	20004a68 	.word	0x20004a68
 800535c:	20004a74 	.word	0x20004a74

08005360 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005366:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800536a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800536c:	4b27      	ldr	r3, [pc, #156]	@ (800540c <prvHeapInit+0xac>)
 800536e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3307      	adds	r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	4a1f      	ldr	r2, [pc, #124]	@ (800540c <prvHeapInit+0xac>)
 8005390:	4413      	add	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005398:	4a1d      	ldr	r2, [pc, #116]	@ (8005410 <prvHeapInit+0xb0>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800539e:	4b1c      	ldr	r3, [pc, #112]	@ (8005410 <prvHeapInit+0xb0>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	4413      	add	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053ac:	2208      	movs	r2, #8
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4a15      	ldr	r2, [pc, #84]	@ (8005414 <prvHeapInit+0xb4>)
 80053c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053c2:	4b14      	ldr	r3, [pc, #80]	@ (8005414 <prvHeapInit+0xb4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2200      	movs	r2, #0
 80053c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053ca:	4b12      	ldr	r3, [pc, #72]	@ (8005414 <prvHeapInit+0xb4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <prvHeapInit+0xb4>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005418 <prvHeapInit+0xb8>)
 80053ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4a09      	ldr	r2, [pc, #36]	@ (800541c <prvHeapInit+0xbc>)
 80053f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <prvHeapInit+0xc0>)
 80053fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053fe:	601a      	str	r2, [r3, #0]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	20000e5c 	.word	0x20000e5c
 8005410:	20004a5c 	.word	0x20004a5c
 8005414:	20004a64 	.word	0x20004a64
 8005418:	20004a6c 	.word	0x20004a6c
 800541c:	20004a68 	.word	0x20004a68
 8005420:	20004a78 	.word	0x20004a78

08005424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800542c:	4b28      	ldr	r3, [pc, #160]	@ (80054d0 <prvInsertBlockIntoFreeList+0xac>)
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e002      	b.n	8005438 <prvInsertBlockIntoFreeList+0x14>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d8f7      	bhi.n	8005432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d108      	bne.n	8005466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	441a      	add	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d118      	bne.n	80054ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <prvInsertBlockIntoFreeList+0xb0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d00d      	beq.n	80054a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e008      	b.n	80054b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054a2:	4b0c      	ldr	r3, [pc, #48]	@ (80054d4 <prvInsertBlockIntoFreeList+0xb0>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e003      	b.n	80054b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d002      	beq.n	80054c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20004a5c 	.word	0x20004a5c
 80054d4:	20004a64 	.word	0x20004a64

080054d8 <std>:
 80054d8:	2300      	movs	r3, #0
 80054da:	b510      	push	{r4, lr}
 80054dc:	4604      	mov	r4, r0
 80054de:	e9c0 3300 	strd	r3, r3, [r0]
 80054e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054e6:	6083      	str	r3, [r0, #8]
 80054e8:	8181      	strh	r1, [r0, #12]
 80054ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80054ec:	81c2      	strh	r2, [r0, #14]
 80054ee:	6183      	str	r3, [r0, #24]
 80054f0:	4619      	mov	r1, r3
 80054f2:	2208      	movs	r2, #8
 80054f4:	305c      	adds	r0, #92	@ 0x5c
 80054f6:	f000 f906 	bl	8005706 <memset>
 80054fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <std+0x58>)
 80054fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80054fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <std+0x5c>)
 8005500:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <std+0x60>)
 8005504:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <std+0x64>)
 8005508:	6323      	str	r3, [r4, #48]	@ 0x30
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <std+0x68>)
 800550c:	6224      	str	r4, [r4, #32]
 800550e:	429c      	cmp	r4, r3
 8005510:	d006      	beq.n	8005520 <std+0x48>
 8005512:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005516:	4294      	cmp	r4, r2
 8005518:	d002      	beq.n	8005520 <std+0x48>
 800551a:	33d0      	adds	r3, #208	@ 0xd0
 800551c:	429c      	cmp	r4, r3
 800551e:	d105      	bne.n	800552c <std+0x54>
 8005520:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005528:	f000 b966 	b.w	80057f8 <__retarget_lock_init_recursive>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	bf00      	nop
 8005530:	08005681 	.word	0x08005681
 8005534:	080056a3 	.word	0x080056a3
 8005538:	080056db 	.word	0x080056db
 800553c:	080056ff 	.word	0x080056ff
 8005540:	20004a7c 	.word	0x20004a7c

08005544 <stdio_exit_handler>:
 8005544:	4a02      	ldr	r2, [pc, #8]	@ (8005550 <stdio_exit_handler+0xc>)
 8005546:	4903      	ldr	r1, [pc, #12]	@ (8005554 <stdio_exit_handler+0x10>)
 8005548:	4803      	ldr	r0, [pc, #12]	@ (8005558 <stdio_exit_handler+0x14>)
 800554a:	f000 b869 	b.w	8005620 <_fwalk_sglue>
 800554e:	bf00      	nop
 8005550:	20000010 	.word	0x20000010
 8005554:	080060b5 	.word	0x080060b5
 8005558:	20000020 	.word	0x20000020

0800555c <cleanup_stdio>:
 800555c:	6841      	ldr	r1, [r0, #4]
 800555e:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <cleanup_stdio+0x34>)
 8005560:	4299      	cmp	r1, r3
 8005562:	b510      	push	{r4, lr}
 8005564:	4604      	mov	r4, r0
 8005566:	d001      	beq.n	800556c <cleanup_stdio+0x10>
 8005568:	f000 fda4 	bl	80060b4 <_fflush_r>
 800556c:	68a1      	ldr	r1, [r4, #8]
 800556e:	4b09      	ldr	r3, [pc, #36]	@ (8005594 <cleanup_stdio+0x38>)
 8005570:	4299      	cmp	r1, r3
 8005572:	d002      	beq.n	800557a <cleanup_stdio+0x1e>
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fd9d 	bl	80060b4 <_fflush_r>
 800557a:	68e1      	ldr	r1, [r4, #12]
 800557c:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <cleanup_stdio+0x3c>)
 800557e:	4299      	cmp	r1, r3
 8005580:	d004      	beq.n	800558c <cleanup_stdio+0x30>
 8005582:	4620      	mov	r0, r4
 8005584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005588:	f000 bd94 	b.w	80060b4 <_fflush_r>
 800558c:	bd10      	pop	{r4, pc}
 800558e:	bf00      	nop
 8005590:	20004a7c 	.word	0x20004a7c
 8005594:	20004ae4 	.word	0x20004ae4
 8005598:	20004b4c 	.word	0x20004b4c

0800559c <global_stdio_init.part.0>:
 800559c:	b510      	push	{r4, lr}
 800559e:	4b0b      	ldr	r3, [pc, #44]	@ (80055cc <global_stdio_init.part.0+0x30>)
 80055a0:	4c0b      	ldr	r4, [pc, #44]	@ (80055d0 <global_stdio_init.part.0+0x34>)
 80055a2:	4a0c      	ldr	r2, [pc, #48]	@ (80055d4 <global_stdio_init.part.0+0x38>)
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	4620      	mov	r0, r4
 80055a8:	2200      	movs	r2, #0
 80055aa:	2104      	movs	r1, #4
 80055ac:	f7ff ff94 	bl	80054d8 <std>
 80055b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055b4:	2201      	movs	r2, #1
 80055b6:	2109      	movs	r1, #9
 80055b8:	f7ff ff8e 	bl	80054d8 <std>
 80055bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055c0:	2202      	movs	r2, #2
 80055c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c6:	2112      	movs	r1, #18
 80055c8:	f7ff bf86 	b.w	80054d8 <std>
 80055cc:	20004bb4 	.word	0x20004bb4
 80055d0:	20004a7c 	.word	0x20004a7c
 80055d4:	08005545 	.word	0x08005545

080055d8 <__sfp_lock_acquire>:
 80055d8:	4801      	ldr	r0, [pc, #4]	@ (80055e0 <__sfp_lock_acquire+0x8>)
 80055da:	f000 b90e 	b.w	80057fa <__retarget_lock_acquire_recursive>
 80055de:	bf00      	nop
 80055e0:	20004bbd 	.word	0x20004bbd

080055e4 <__sfp_lock_release>:
 80055e4:	4801      	ldr	r0, [pc, #4]	@ (80055ec <__sfp_lock_release+0x8>)
 80055e6:	f000 b909 	b.w	80057fc <__retarget_lock_release_recursive>
 80055ea:	bf00      	nop
 80055ec:	20004bbd 	.word	0x20004bbd

080055f0 <__sinit>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	4604      	mov	r4, r0
 80055f4:	f7ff fff0 	bl	80055d8 <__sfp_lock_acquire>
 80055f8:	6a23      	ldr	r3, [r4, #32]
 80055fa:	b11b      	cbz	r3, 8005604 <__sinit+0x14>
 80055fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005600:	f7ff bff0 	b.w	80055e4 <__sfp_lock_release>
 8005604:	4b04      	ldr	r3, [pc, #16]	@ (8005618 <__sinit+0x28>)
 8005606:	6223      	str	r3, [r4, #32]
 8005608:	4b04      	ldr	r3, [pc, #16]	@ (800561c <__sinit+0x2c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f5      	bne.n	80055fc <__sinit+0xc>
 8005610:	f7ff ffc4 	bl	800559c <global_stdio_init.part.0>
 8005614:	e7f2      	b.n	80055fc <__sinit+0xc>
 8005616:	bf00      	nop
 8005618:	0800555d 	.word	0x0800555d
 800561c:	20004bb4 	.word	0x20004bb4

08005620 <_fwalk_sglue>:
 8005620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005624:	4607      	mov	r7, r0
 8005626:	4688      	mov	r8, r1
 8005628:	4614      	mov	r4, r2
 800562a:	2600      	movs	r6, #0
 800562c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005630:	f1b9 0901 	subs.w	r9, r9, #1
 8005634:	d505      	bpl.n	8005642 <_fwalk_sglue+0x22>
 8005636:	6824      	ldr	r4, [r4, #0]
 8005638:	2c00      	cmp	r4, #0
 800563a:	d1f7      	bne.n	800562c <_fwalk_sglue+0xc>
 800563c:	4630      	mov	r0, r6
 800563e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005642:	89ab      	ldrh	r3, [r5, #12]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d907      	bls.n	8005658 <_fwalk_sglue+0x38>
 8005648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800564c:	3301      	adds	r3, #1
 800564e:	d003      	beq.n	8005658 <_fwalk_sglue+0x38>
 8005650:	4629      	mov	r1, r5
 8005652:	4638      	mov	r0, r7
 8005654:	47c0      	blx	r8
 8005656:	4306      	orrs	r6, r0
 8005658:	3568      	adds	r5, #104	@ 0x68
 800565a:	e7e9      	b.n	8005630 <_fwalk_sglue+0x10>

0800565c <iprintf>:
 800565c:	b40f      	push	{r0, r1, r2, r3}
 800565e:	b507      	push	{r0, r1, r2, lr}
 8005660:	4906      	ldr	r1, [pc, #24]	@ (800567c <iprintf+0x20>)
 8005662:	ab04      	add	r3, sp, #16
 8005664:	6808      	ldr	r0, [r1, #0]
 8005666:	f853 2b04 	ldr.w	r2, [r3], #4
 800566a:	6881      	ldr	r1, [r0, #8]
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	f000 f9f7 	bl	8005a60 <_vfiprintf_r>
 8005672:	b003      	add	sp, #12
 8005674:	f85d eb04 	ldr.w	lr, [sp], #4
 8005678:	b004      	add	sp, #16
 800567a:	4770      	bx	lr
 800567c:	2000001c 	.word	0x2000001c

08005680 <__sread>:
 8005680:	b510      	push	{r4, lr}
 8005682:	460c      	mov	r4, r1
 8005684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005688:	f000 f868 	bl	800575c <_read_r>
 800568c:	2800      	cmp	r0, #0
 800568e:	bfab      	itete	ge
 8005690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005692:	89a3      	ldrhlt	r3, [r4, #12]
 8005694:	181b      	addge	r3, r3, r0
 8005696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800569a:	bfac      	ite	ge
 800569c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800569e:	81a3      	strhlt	r3, [r4, #12]
 80056a0:	bd10      	pop	{r4, pc}

080056a2 <__swrite>:
 80056a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a6:	461f      	mov	r7, r3
 80056a8:	898b      	ldrh	r3, [r1, #12]
 80056aa:	05db      	lsls	r3, r3, #23
 80056ac:	4605      	mov	r5, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	4616      	mov	r6, r2
 80056b2:	d505      	bpl.n	80056c0 <__swrite+0x1e>
 80056b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b8:	2302      	movs	r3, #2
 80056ba:	2200      	movs	r2, #0
 80056bc:	f000 f83c 	bl	8005738 <_lseek_r>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	4632      	mov	r2, r6
 80056ce:	463b      	mov	r3, r7
 80056d0:	4628      	mov	r0, r5
 80056d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d6:	f000 b853 	b.w	8005780 <_write_r>

080056da <__sseek>:
 80056da:	b510      	push	{r4, lr}
 80056dc:	460c      	mov	r4, r1
 80056de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e2:	f000 f829 	bl	8005738 <_lseek_r>
 80056e6:	1c43      	adds	r3, r0, #1
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	bf15      	itete	ne
 80056ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056f6:	81a3      	strheq	r3, [r4, #12]
 80056f8:	bf18      	it	ne
 80056fa:	81a3      	strhne	r3, [r4, #12]
 80056fc:	bd10      	pop	{r4, pc}

080056fe <__sclose>:
 80056fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005702:	f000 b809 	b.w	8005718 <_close_r>

08005706 <memset>:
 8005706:	4402      	add	r2, r0
 8005708:	4603      	mov	r3, r0
 800570a:	4293      	cmp	r3, r2
 800570c:	d100      	bne.n	8005710 <memset+0xa>
 800570e:	4770      	bx	lr
 8005710:	f803 1b01 	strb.w	r1, [r3], #1
 8005714:	e7f9      	b.n	800570a <memset+0x4>
	...

08005718 <_close_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4d06      	ldr	r5, [pc, #24]	@ (8005734 <_close_r+0x1c>)
 800571c:	2300      	movs	r3, #0
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	602b      	str	r3, [r5, #0]
 8005724:	f7fb fa23 	bl	8000b6e <_close>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d102      	bne.n	8005732 <_close_r+0x1a>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	b103      	cbz	r3, 8005732 <_close_r+0x1a>
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	20004bb8 	.word	0x20004bb8

08005738 <_lseek_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d07      	ldr	r5, [pc, #28]	@ (8005758 <_lseek_r+0x20>)
 800573c:	4604      	mov	r4, r0
 800573e:	4608      	mov	r0, r1
 8005740:	4611      	mov	r1, r2
 8005742:	2200      	movs	r2, #0
 8005744:	602a      	str	r2, [r5, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	f7fb fa38 	bl	8000bbc <_lseek>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_lseek_r+0x1e>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_lseek_r+0x1e>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	20004bb8 	.word	0x20004bb8

0800575c <_read_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d07      	ldr	r5, [pc, #28]	@ (800577c <_read_r+0x20>)
 8005760:	4604      	mov	r4, r0
 8005762:	4608      	mov	r0, r1
 8005764:	4611      	mov	r1, r2
 8005766:	2200      	movs	r2, #0
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f7fb f9c6 	bl	8000afc <_read>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_read_r+0x1e>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_read_r+0x1e>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	20004bb8 	.word	0x20004bb8

08005780 <_write_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d07      	ldr	r5, [pc, #28]	@ (80057a0 <_write_r+0x20>)
 8005784:	4604      	mov	r4, r0
 8005786:	4608      	mov	r0, r1
 8005788:	4611      	mov	r1, r2
 800578a:	2200      	movs	r2, #0
 800578c:	602a      	str	r2, [r5, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f7fb f9d1 	bl	8000b36 <_write>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_write_r+0x1e>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_write_r+0x1e>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	20004bb8 	.word	0x20004bb8

080057a4 <__errno>:
 80057a4:	4b01      	ldr	r3, [pc, #4]	@ (80057ac <__errno+0x8>)
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	2000001c 	.word	0x2000001c

080057b0 <__libc_init_array>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	4d0d      	ldr	r5, [pc, #52]	@ (80057e8 <__libc_init_array+0x38>)
 80057b4:	4c0d      	ldr	r4, [pc, #52]	@ (80057ec <__libc_init_array+0x3c>)
 80057b6:	1b64      	subs	r4, r4, r5
 80057b8:	10a4      	asrs	r4, r4, #2
 80057ba:	2600      	movs	r6, #0
 80057bc:	42a6      	cmp	r6, r4
 80057be:	d109      	bne.n	80057d4 <__libc_init_array+0x24>
 80057c0:	4d0b      	ldr	r5, [pc, #44]	@ (80057f0 <__libc_init_array+0x40>)
 80057c2:	4c0c      	ldr	r4, [pc, #48]	@ (80057f4 <__libc_init_array+0x44>)
 80057c4:	f000 fdc6 	bl	8006354 <_init>
 80057c8:	1b64      	subs	r4, r4, r5
 80057ca:	10a4      	asrs	r4, r4, #2
 80057cc:	2600      	movs	r6, #0
 80057ce:	42a6      	cmp	r6, r4
 80057d0:	d105      	bne.n	80057de <__libc_init_array+0x2e>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d8:	4798      	blx	r3
 80057da:	3601      	adds	r6, #1
 80057dc:	e7ee      	b.n	80057bc <__libc_init_array+0xc>
 80057de:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e2:	4798      	blx	r3
 80057e4:	3601      	adds	r6, #1
 80057e6:	e7f2      	b.n	80057ce <__libc_init_array+0x1e>
 80057e8:	08006444 	.word	0x08006444
 80057ec:	08006444 	.word	0x08006444
 80057f0:	08006444 	.word	0x08006444
 80057f4:	08006448 	.word	0x08006448

080057f8 <__retarget_lock_init_recursive>:
 80057f8:	4770      	bx	lr

080057fa <__retarget_lock_acquire_recursive>:
 80057fa:	4770      	bx	lr

080057fc <__retarget_lock_release_recursive>:
 80057fc:	4770      	bx	lr

080057fe <memcpy>:
 80057fe:	440a      	add	r2, r1
 8005800:	4291      	cmp	r1, r2
 8005802:	f100 33ff 	add.w	r3, r0, #4294967295
 8005806:	d100      	bne.n	800580a <memcpy+0xc>
 8005808:	4770      	bx	lr
 800580a:	b510      	push	{r4, lr}
 800580c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005814:	4291      	cmp	r1, r2
 8005816:	d1f9      	bne.n	800580c <memcpy+0xe>
 8005818:	bd10      	pop	{r4, pc}
	...

0800581c <_free_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4605      	mov	r5, r0
 8005820:	2900      	cmp	r1, #0
 8005822:	d041      	beq.n	80058a8 <_free_r+0x8c>
 8005824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005828:	1f0c      	subs	r4, r1, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	bfb8      	it	lt
 800582e:	18e4      	addlt	r4, r4, r3
 8005830:	f000 f8e0 	bl	80059f4 <__malloc_lock>
 8005834:	4a1d      	ldr	r2, [pc, #116]	@ (80058ac <_free_r+0x90>)
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	b933      	cbnz	r3, 8005848 <_free_r+0x2c>
 800583a:	6063      	str	r3, [r4, #4]
 800583c:	6014      	str	r4, [r2, #0]
 800583e:	4628      	mov	r0, r5
 8005840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005844:	f000 b8dc 	b.w	8005a00 <__malloc_unlock>
 8005848:	42a3      	cmp	r3, r4
 800584a:	d908      	bls.n	800585e <_free_r+0x42>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	1821      	adds	r1, r4, r0
 8005850:	428b      	cmp	r3, r1
 8005852:	bf01      	itttt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	1809      	addeq	r1, r1, r0
 800585a:	6021      	streq	r1, [r4, #0]
 800585c:	e7ed      	b.n	800583a <_free_r+0x1e>
 800585e:	461a      	mov	r2, r3
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	b10b      	cbz	r3, 8005868 <_free_r+0x4c>
 8005864:	42a3      	cmp	r3, r4
 8005866:	d9fa      	bls.n	800585e <_free_r+0x42>
 8005868:	6811      	ldr	r1, [r2, #0]
 800586a:	1850      	adds	r0, r2, r1
 800586c:	42a0      	cmp	r0, r4
 800586e:	d10b      	bne.n	8005888 <_free_r+0x6c>
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	4401      	add	r1, r0
 8005874:	1850      	adds	r0, r2, r1
 8005876:	4283      	cmp	r3, r0
 8005878:	6011      	str	r1, [r2, #0]
 800587a:	d1e0      	bne.n	800583e <_free_r+0x22>
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	6053      	str	r3, [r2, #4]
 8005882:	4408      	add	r0, r1
 8005884:	6010      	str	r0, [r2, #0]
 8005886:	e7da      	b.n	800583e <_free_r+0x22>
 8005888:	d902      	bls.n	8005890 <_free_r+0x74>
 800588a:	230c      	movs	r3, #12
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	e7d6      	b.n	800583e <_free_r+0x22>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	1821      	adds	r1, r4, r0
 8005894:	428b      	cmp	r3, r1
 8005896:	bf04      	itt	eq
 8005898:	6819      	ldreq	r1, [r3, #0]
 800589a:	685b      	ldreq	r3, [r3, #4]
 800589c:	6063      	str	r3, [r4, #4]
 800589e:	bf04      	itt	eq
 80058a0:	1809      	addeq	r1, r1, r0
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	6054      	str	r4, [r2, #4]
 80058a6:	e7ca      	b.n	800583e <_free_r+0x22>
 80058a8:	bd38      	pop	{r3, r4, r5, pc}
 80058aa:	bf00      	nop
 80058ac:	20004bc4 	.word	0x20004bc4

080058b0 <sbrk_aligned>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	4e0f      	ldr	r6, [pc, #60]	@ (80058f0 <sbrk_aligned+0x40>)
 80058b4:	460c      	mov	r4, r1
 80058b6:	6831      	ldr	r1, [r6, #0]
 80058b8:	4605      	mov	r5, r0
 80058ba:	b911      	cbnz	r1, 80058c2 <sbrk_aligned+0x12>
 80058bc:	f000 fcb6 	bl	800622c <_sbrk_r>
 80058c0:	6030      	str	r0, [r6, #0]
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 fcb1 	bl	800622c <_sbrk_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	d103      	bne.n	80058d6 <sbrk_aligned+0x26>
 80058ce:	f04f 34ff 	mov.w	r4, #4294967295
 80058d2:	4620      	mov	r0, r4
 80058d4:	bd70      	pop	{r4, r5, r6, pc}
 80058d6:	1cc4      	adds	r4, r0, #3
 80058d8:	f024 0403 	bic.w	r4, r4, #3
 80058dc:	42a0      	cmp	r0, r4
 80058de:	d0f8      	beq.n	80058d2 <sbrk_aligned+0x22>
 80058e0:	1a21      	subs	r1, r4, r0
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 fca2 	bl	800622c <_sbrk_r>
 80058e8:	3001      	adds	r0, #1
 80058ea:	d1f2      	bne.n	80058d2 <sbrk_aligned+0x22>
 80058ec:	e7ef      	b.n	80058ce <sbrk_aligned+0x1e>
 80058ee:	bf00      	nop
 80058f0:	20004bc0 	.word	0x20004bc0

080058f4 <_malloc_r>:
 80058f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f8:	1ccd      	adds	r5, r1, #3
 80058fa:	f025 0503 	bic.w	r5, r5, #3
 80058fe:	3508      	adds	r5, #8
 8005900:	2d0c      	cmp	r5, #12
 8005902:	bf38      	it	cc
 8005904:	250c      	movcc	r5, #12
 8005906:	2d00      	cmp	r5, #0
 8005908:	4606      	mov	r6, r0
 800590a:	db01      	blt.n	8005910 <_malloc_r+0x1c>
 800590c:	42a9      	cmp	r1, r5
 800590e:	d904      	bls.n	800591a <_malloc_r+0x26>
 8005910:	230c      	movs	r3, #12
 8005912:	6033      	str	r3, [r6, #0]
 8005914:	2000      	movs	r0, #0
 8005916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059f0 <_malloc_r+0xfc>
 800591e:	f000 f869 	bl	80059f4 <__malloc_lock>
 8005922:	f8d8 3000 	ldr.w	r3, [r8]
 8005926:	461c      	mov	r4, r3
 8005928:	bb44      	cbnz	r4, 800597c <_malloc_r+0x88>
 800592a:	4629      	mov	r1, r5
 800592c:	4630      	mov	r0, r6
 800592e:	f7ff ffbf 	bl	80058b0 <sbrk_aligned>
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	4604      	mov	r4, r0
 8005936:	d158      	bne.n	80059ea <_malloc_r+0xf6>
 8005938:	f8d8 4000 	ldr.w	r4, [r8]
 800593c:	4627      	mov	r7, r4
 800593e:	2f00      	cmp	r7, #0
 8005940:	d143      	bne.n	80059ca <_malloc_r+0xd6>
 8005942:	2c00      	cmp	r4, #0
 8005944:	d04b      	beq.n	80059de <_malloc_r+0xea>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	4639      	mov	r1, r7
 800594a:	4630      	mov	r0, r6
 800594c:	eb04 0903 	add.w	r9, r4, r3
 8005950:	f000 fc6c 	bl	800622c <_sbrk_r>
 8005954:	4581      	cmp	r9, r0
 8005956:	d142      	bne.n	80059de <_malloc_r+0xea>
 8005958:	6821      	ldr	r1, [r4, #0]
 800595a:	1a6d      	subs	r5, r5, r1
 800595c:	4629      	mov	r1, r5
 800595e:	4630      	mov	r0, r6
 8005960:	f7ff ffa6 	bl	80058b0 <sbrk_aligned>
 8005964:	3001      	adds	r0, #1
 8005966:	d03a      	beq.n	80059de <_malloc_r+0xea>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	442b      	add	r3, r5
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	f8d8 3000 	ldr.w	r3, [r8]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	bb62      	cbnz	r2, 80059d0 <_malloc_r+0xdc>
 8005976:	f8c8 7000 	str.w	r7, [r8]
 800597a:	e00f      	b.n	800599c <_malloc_r+0xa8>
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	1b52      	subs	r2, r2, r5
 8005980:	d420      	bmi.n	80059c4 <_malloc_r+0xd0>
 8005982:	2a0b      	cmp	r2, #11
 8005984:	d917      	bls.n	80059b6 <_malloc_r+0xc2>
 8005986:	1961      	adds	r1, r4, r5
 8005988:	42a3      	cmp	r3, r4
 800598a:	6025      	str	r5, [r4, #0]
 800598c:	bf18      	it	ne
 800598e:	6059      	strne	r1, [r3, #4]
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	bf08      	it	eq
 8005994:	f8c8 1000 	streq.w	r1, [r8]
 8005998:	5162      	str	r2, [r4, r5]
 800599a:	604b      	str	r3, [r1, #4]
 800599c:	4630      	mov	r0, r6
 800599e:	f000 f82f 	bl	8005a00 <__malloc_unlock>
 80059a2:	f104 000b 	add.w	r0, r4, #11
 80059a6:	1d23      	adds	r3, r4, #4
 80059a8:	f020 0007 	bic.w	r0, r0, #7
 80059ac:	1ac2      	subs	r2, r0, r3
 80059ae:	bf1c      	itt	ne
 80059b0:	1a1b      	subne	r3, r3, r0
 80059b2:	50a3      	strne	r3, [r4, r2]
 80059b4:	e7af      	b.n	8005916 <_malloc_r+0x22>
 80059b6:	6862      	ldr	r2, [r4, #4]
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	bf0c      	ite	eq
 80059bc:	f8c8 2000 	streq.w	r2, [r8]
 80059c0:	605a      	strne	r2, [r3, #4]
 80059c2:	e7eb      	b.n	800599c <_malloc_r+0xa8>
 80059c4:	4623      	mov	r3, r4
 80059c6:	6864      	ldr	r4, [r4, #4]
 80059c8:	e7ae      	b.n	8005928 <_malloc_r+0x34>
 80059ca:	463c      	mov	r4, r7
 80059cc:	687f      	ldr	r7, [r7, #4]
 80059ce:	e7b6      	b.n	800593e <_malloc_r+0x4a>
 80059d0:	461a      	mov	r2, r3
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	d1fb      	bne.n	80059d0 <_malloc_r+0xdc>
 80059d8:	2300      	movs	r3, #0
 80059da:	6053      	str	r3, [r2, #4]
 80059dc:	e7de      	b.n	800599c <_malloc_r+0xa8>
 80059de:	230c      	movs	r3, #12
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	4630      	mov	r0, r6
 80059e4:	f000 f80c 	bl	8005a00 <__malloc_unlock>
 80059e8:	e794      	b.n	8005914 <_malloc_r+0x20>
 80059ea:	6005      	str	r5, [r0, #0]
 80059ec:	e7d6      	b.n	800599c <_malloc_r+0xa8>
 80059ee:	bf00      	nop
 80059f0:	20004bc4 	.word	0x20004bc4

080059f4 <__malloc_lock>:
 80059f4:	4801      	ldr	r0, [pc, #4]	@ (80059fc <__malloc_lock+0x8>)
 80059f6:	f7ff bf00 	b.w	80057fa <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	20004bbc 	.word	0x20004bbc

08005a00 <__malloc_unlock>:
 8005a00:	4801      	ldr	r0, [pc, #4]	@ (8005a08 <__malloc_unlock+0x8>)
 8005a02:	f7ff befb 	b.w	80057fc <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	20004bbc 	.word	0x20004bbc

08005a0c <__sfputc_r>:
 8005a0c:	6893      	ldr	r3, [r2, #8]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	b410      	push	{r4}
 8005a14:	6093      	str	r3, [r2, #8]
 8005a16:	da08      	bge.n	8005a2a <__sfputc_r+0x1e>
 8005a18:	6994      	ldr	r4, [r2, #24]
 8005a1a:	42a3      	cmp	r3, r4
 8005a1c:	db01      	blt.n	8005a22 <__sfputc_r+0x16>
 8005a1e:	290a      	cmp	r1, #10
 8005a20:	d103      	bne.n	8005a2a <__sfputc_r+0x1e>
 8005a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a26:	f000 bb6d 	b.w	8006104 <__swbuf_r>
 8005a2a:	6813      	ldr	r3, [r2, #0]
 8005a2c:	1c58      	adds	r0, r3, #1
 8005a2e:	6010      	str	r0, [r2, #0]
 8005a30:	7019      	strb	r1, [r3, #0]
 8005a32:	4608      	mov	r0, r1
 8005a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <__sfputs_r>:
 8005a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	460f      	mov	r7, r1
 8005a40:	4614      	mov	r4, r2
 8005a42:	18d5      	adds	r5, r2, r3
 8005a44:	42ac      	cmp	r4, r5
 8005a46:	d101      	bne.n	8005a4c <__sfputs_r+0x12>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e007      	b.n	8005a5c <__sfputs_r+0x22>
 8005a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a50:	463a      	mov	r2, r7
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7ff ffda 	bl	8005a0c <__sfputc_r>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d1f3      	bne.n	8005a44 <__sfputs_r+0xa>
 8005a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a60 <_vfiprintf_r>:
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	460d      	mov	r5, r1
 8005a66:	b09d      	sub	sp, #116	@ 0x74
 8005a68:	4614      	mov	r4, r2
 8005a6a:	4698      	mov	r8, r3
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	b118      	cbz	r0, 8005a78 <_vfiprintf_r+0x18>
 8005a70:	6a03      	ldr	r3, [r0, #32]
 8005a72:	b90b      	cbnz	r3, 8005a78 <_vfiprintf_r+0x18>
 8005a74:	f7ff fdbc 	bl	80055f0 <__sinit>
 8005a78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a7a:	07d9      	lsls	r1, r3, #31
 8005a7c:	d405      	bmi.n	8005a8a <_vfiprintf_r+0x2a>
 8005a7e:	89ab      	ldrh	r3, [r5, #12]
 8005a80:	059a      	lsls	r2, r3, #22
 8005a82:	d402      	bmi.n	8005a8a <_vfiprintf_r+0x2a>
 8005a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a86:	f7ff feb8 	bl	80057fa <__retarget_lock_acquire_recursive>
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	071b      	lsls	r3, r3, #28
 8005a8e:	d501      	bpl.n	8005a94 <_vfiprintf_r+0x34>
 8005a90:	692b      	ldr	r3, [r5, #16]
 8005a92:	b99b      	cbnz	r3, 8005abc <_vfiprintf_r+0x5c>
 8005a94:	4629      	mov	r1, r5
 8005a96:	4630      	mov	r0, r6
 8005a98:	f000 fb72 	bl	8006180 <__swsetup_r>
 8005a9c:	b170      	cbz	r0, 8005abc <_vfiprintf_r+0x5c>
 8005a9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aa0:	07dc      	lsls	r4, r3, #31
 8005aa2:	d504      	bpl.n	8005aae <_vfiprintf_r+0x4e>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	b01d      	add	sp, #116	@ 0x74
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	89ab      	ldrh	r3, [r5, #12]
 8005ab0:	0598      	lsls	r0, r3, #22
 8005ab2:	d4f7      	bmi.n	8005aa4 <_vfiprintf_r+0x44>
 8005ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ab6:	f7ff fea1 	bl	80057fc <__retarget_lock_release_recursive>
 8005aba:	e7f3      	b.n	8005aa4 <_vfiprintf_r+0x44>
 8005abc:	2300      	movs	r3, #0
 8005abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ac6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aca:	2330      	movs	r3, #48	@ 0x30
 8005acc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c7c <_vfiprintf_r+0x21c>
 8005ad0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ad4:	f04f 0901 	mov.w	r9, #1
 8005ad8:	4623      	mov	r3, r4
 8005ada:	469a      	mov	sl, r3
 8005adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae0:	b10a      	cbz	r2, 8005ae6 <_vfiprintf_r+0x86>
 8005ae2:	2a25      	cmp	r2, #37	@ 0x25
 8005ae4:	d1f9      	bne.n	8005ada <_vfiprintf_r+0x7a>
 8005ae6:	ebba 0b04 	subs.w	fp, sl, r4
 8005aea:	d00b      	beq.n	8005b04 <_vfiprintf_r+0xa4>
 8005aec:	465b      	mov	r3, fp
 8005aee:	4622      	mov	r2, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	4630      	mov	r0, r6
 8005af4:	f7ff ffa1 	bl	8005a3a <__sfputs_r>
 8005af8:	3001      	adds	r0, #1
 8005afa:	f000 80a7 	beq.w	8005c4c <_vfiprintf_r+0x1ec>
 8005afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b00:	445a      	add	r2, fp
 8005b02:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b04:	f89a 3000 	ldrb.w	r3, [sl]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 809f 	beq.w	8005c4c <_vfiprintf_r+0x1ec>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b18:	f10a 0a01 	add.w	sl, sl, #1
 8005b1c:	9304      	str	r3, [sp, #16]
 8005b1e:	9307      	str	r3, [sp, #28]
 8005b20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b24:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b26:	4654      	mov	r4, sl
 8005b28:	2205      	movs	r2, #5
 8005b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b2e:	4853      	ldr	r0, [pc, #332]	@ (8005c7c <_vfiprintf_r+0x21c>)
 8005b30:	f7fa fb6e 	bl	8000210 <memchr>
 8005b34:	9a04      	ldr	r2, [sp, #16]
 8005b36:	b9d8      	cbnz	r0, 8005b70 <_vfiprintf_r+0x110>
 8005b38:	06d1      	lsls	r1, r2, #27
 8005b3a:	bf44      	itt	mi
 8005b3c:	2320      	movmi	r3, #32
 8005b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b42:	0713      	lsls	r3, r2, #28
 8005b44:	bf44      	itt	mi
 8005b46:	232b      	movmi	r3, #43	@ 0x2b
 8005b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b52:	d015      	beq.n	8005b80 <_vfiprintf_r+0x120>
 8005b54:	9a07      	ldr	r2, [sp, #28]
 8005b56:	4654      	mov	r4, sl
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f04f 0c0a 	mov.w	ip, #10
 8005b5e:	4621      	mov	r1, r4
 8005b60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b64:	3b30      	subs	r3, #48	@ 0x30
 8005b66:	2b09      	cmp	r3, #9
 8005b68:	d94b      	bls.n	8005c02 <_vfiprintf_r+0x1a2>
 8005b6a:	b1b0      	cbz	r0, 8005b9a <_vfiprintf_r+0x13a>
 8005b6c:	9207      	str	r2, [sp, #28]
 8005b6e:	e014      	b.n	8005b9a <_vfiprintf_r+0x13a>
 8005b70:	eba0 0308 	sub.w	r3, r0, r8
 8005b74:	fa09 f303 	lsl.w	r3, r9, r3
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	9304      	str	r3, [sp, #16]
 8005b7c:	46a2      	mov	sl, r4
 8005b7e:	e7d2      	b.n	8005b26 <_vfiprintf_r+0xc6>
 8005b80:	9b03      	ldr	r3, [sp, #12]
 8005b82:	1d19      	adds	r1, r3, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	9103      	str	r1, [sp, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bfbb      	ittet	lt
 8005b8c:	425b      	neglt	r3, r3
 8005b8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b92:	9307      	strge	r3, [sp, #28]
 8005b94:	9307      	strlt	r3, [sp, #28]
 8005b96:	bfb8      	it	lt
 8005b98:	9204      	strlt	r2, [sp, #16]
 8005b9a:	7823      	ldrb	r3, [r4, #0]
 8005b9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b9e:	d10a      	bne.n	8005bb6 <_vfiprintf_r+0x156>
 8005ba0:	7863      	ldrb	r3, [r4, #1]
 8005ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ba4:	d132      	bne.n	8005c0c <_vfiprintf_r+0x1ac>
 8005ba6:	9b03      	ldr	r3, [sp, #12]
 8005ba8:	1d1a      	adds	r2, r3, #4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	9203      	str	r2, [sp, #12]
 8005bae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bb2:	3402      	adds	r4, #2
 8005bb4:	9305      	str	r3, [sp, #20]
 8005bb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c8c <_vfiprintf_r+0x22c>
 8005bba:	7821      	ldrb	r1, [r4, #0]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	4650      	mov	r0, sl
 8005bc0:	f7fa fb26 	bl	8000210 <memchr>
 8005bc4:	b138      	cbz	r0, 8005bd6 <_vfiprintf_r+0x176>
 8005bc6:	9b04      	ldr	r3, [sp, #16]
 8005bc8:	eba0 000a 	sub.w	r0, r0, sl
 8005bcc:	2240      	movs	r2, #64	@ 0x40
 8005bce:	4082      	lsls	r2, r0
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	3401      	adds	r4, #1
 8005bd4:	9304      	str	r3, [sp, #16]
 8005bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bda:	4829      	ldr	r0, [pc, #164]	@ (8005c80 <_vfiprintf_r+0x220>)
 8005bdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005be0:	2206      	movs	r2, #6
 8005be2:	f7fa fb15 	bl	8000210 <memchr>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d03f      	beq.n	8005c6a <_vfiprintf_r+0x20a>
 8005bea:	4b26      	ldr	r3, [pc, #152]	@ (8005c84 <_vfiprintf_r+0x224>)
 8005bec:	bb1b      	cbnz	r3, 8005c36 <_vfiprintf_r+0x1d6>
 8005bee:	9b03      	ldr	r3, [sp, #12]
 8005bf0:	3307      	adds	r3, #7
 8005bf2:	f023 0307 	bic.w	r3, r3, #7
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	9303      	str	r3, [sp, #12]
 8005bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfc:	443b      	add	r3, r7
 8005bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c00:	e76a      	b.n	8005ad8 <_vfiprintf_r+0x78>
 8005c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c06:	460c      	mov	r4, r1
 8005c08:	2001      	movs	r0, #1
 8005c0a:	e7a8      	b.n	8005b5e <_vfiprintf_r+0xfe>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	3401      	adds	r4, #1
 8005c10:	9305      	str	r3, [sp, #20]
 8005c12:	4619      	mov	r1, r3
 8005c14:	f04f 0c0a 	mov.w	ip, #10
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c1e:	3a30      	subs	r2, #48	@ 0x30
 8005c20:	2a09      	cmp	r2, #9
 8005c22:	d903      	bls.n	8005c2c <_vfiprintf_r+0x1cc>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0c6      	beq.n	8005bb6 <_vfiprintf_r+0x156>
 8005c28:	9105      	str	r1, [sp, #20]
 8005c2a:	e7c4      	b.n	8005bb6 <_vfiprintf_r+0x156>
 8005c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c30:	4604      	mov	r4, r0
 8005c32:	2301      	movs	r3, #1
 8005c34:	e7f0      	b.n	8005c18 <_vfiprintf_r+0x1b8>
 8005c36:	ab03      	add	r3, sp, #12
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	4b12      	ldr	r3, [pc, #72]	@ (8005c88 <_vfiprintf_r+0x228>)
 8005c3e:	a904      	add	r1, sp, #16
 8005c40:	4630      	mov	r0, r6
 8005c42:	f3af 8000 	nop.w
 8005c46:	4607      	mov	r7, r0
 8005c48:	1c78      	adds	r0, r7, #1
 8005c4a:	d1d6      	bne.n	8005bfa <_vfiprintf_r+0x19a>
 8005c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c4e:	07d9      	lsls	r1, r3, #31
 8005c50:	d405      	bmi.n	8005c5e <_vfiprintf_r+0x1fe>
 8005c52:	89ab      	ldrh	r3, [r5, #12]
 8005c54:	059a      	lsls	r2, r3, #22
 8005c56:	d402      	bmi.n	8005c5e <_vfiprintf_r+0x1fe>
 8005c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c5a:	f7ff fdcf 	bl	80057fc <__retarget_lock_release_recursive>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	065b      	lsls	r3, r3, #25
 8005c62:	f53f af1f 	bmi.w	8005aa4 <_vfiprintf_r+0x44>
 8005c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c68:	e71e      	b.n	8005aa8 <_vfiprintf_r+0x48>
 8005c6a:	ab03      	add	r3, sp, #12
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <_vfiprintf_r+0x228>)
 8005c72:	a904      	add	r1, sp, #16
 8005c74:	4630      	mov	r0, r6
 8005c76:	f000 f879 	bl	8005d6c <_printf_i>
 8005c7a:	e7e4      	b.n	8005c46 <_vfiprintf_r+0x1e6>
 8005c7c:	08006408 	.word	0x08006408
 8005c80:	08006412 	.word	0x08006412
 8005c84:	00000000 	.word	0x00000000
 8005c88:	08005a3b 	.word	0x08005a3b
 8005c8c:	0800640e 	.word	0x0800640e

08005c90 <_printf_common>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4616      	mov	r6, r2
 8005c96:	4698      	mov	r8, r3
 8005c98:	688a      	ldr	r2, [r1, #8]
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bfb8      	it	lt
 8005ca4:	4613      	movlt	r3, r2
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cac:	4607      	mov	r7, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	b10a      	cbz	r2, 8005cb6 <_printf_common+0x26>
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	6033      	str	r3, [r6, #0]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	0699      	lsls	r1, r3, #26
 8005cba:	bf42      	ittt	mi
 8005cbc:	6833      	ldrmi	r3, [r6, #0]
 8005cbe:	3302      	addmi	r3, #2
 8005cc0:	6033      	strmi	r3, [r6, #0]
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	f015 0506 	ands.w	r5, r5, #6
 8005cc8:	d106      	bne.n	8005cd8 <_printf_common+0x48>
 8005cca:	f104 0a19 	add.w	sl, r4, #25
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	6832      	ldr	r2, [r6, #0]
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dc26      	bgt.n	8005d26 <_printf_common+0x96>
 8005cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	3b00      	subs	r3, #0
 8005ce0:	bf18      	it	ne
 8005ce2:	2301      	movne	r3, #1
 8005ce4:	0692      	lsls	r2, r2, #26
 8005ce6:	d42b      	bmi.n	8005d40 <_printf_common+0xb0>
 8005ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cec:	4641      	mov	r1, r8
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c8      	blx	r9
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d01e      	beq.n	8005d34 <_printf_common+0xa4>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	bf02      	ittt	eq
 8005d02:	68e5      	ldreq	r5, [r4, #12]
 8005d04:	6833      	ldreq	r3, [r6, #0]
 8005d06:	1aed      	subeq	r5, r5, r3
 8005d08:	68a3      	ldr	r3, [r4, #8]
 8005d0a:	bf0c      	ite	eq
 8005d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d10:	2500      	movne	r5, #0
 8005d12:	4293      	cmp	r3, r2
 8005d14:	bfc4      	itt	gt
 8005d16:	1a9b      	subgt	r3, r3, r2
 8005d18:	18ed      	addgt	r5, r5, r3
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	341a      	adds	r4, #26
 8005d1e:	42b5      	cmp	r5, r6
 8005d20:	d11a      	bne.n	8005d58 <_printf_common+0xc8>
 8005d22:	2000      	movs	r0, #0
 8005d24:	e008      	b.n	8005d38 <_printf_common+0xa8>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4652      	mov	r2, sl
 8005d2a:	4641      	mov	r1, r8
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	47c8      	blx	r9
 8005d30:	3001      	adds	r0, #1
 8005d32:	d103      	bne.n	8005d3c <_printf_common+0xac>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	e7c6      	b.n	8005cce <_printf_common+0x3e>
 8005d40:	18e1      	adds	r1, r4, r3
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	2030      	movs	r0, #48	@ 0x30
 8005d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d4a:	4422      	add	r2, r4
 8005d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d54:	3302      	adds	r3, #2
 8005d56:	e7c7      	b.n	8005ce8 <_printf_common+0x58>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c8      	blx	r9
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0e6      	beq.n	8005d34 <_printf_common+0xa4>
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7d9      	b.n	8005d1e <_printf_common+0x8e>
	...

08005d6c <_printf_i>:
 8005d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	7e0f      	ldrb	r7, [r1, #24]
 8005d72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d74:	2f78      	cmp	r7, #120	@ 0x78
 8005d76:	4691      	mov	r9, r2
 8005d78:	4680      	mov	r8, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	469a      	mov	sl, r3
 8005d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d82:	d807      	bhi.n	8005d94 <_printf_i+0x28>
 8005d84:	2f62      	cmp	r7, #98	@ 0x62
 8005d86:	d80a      	bhi.n	8005d9e <_printf_i+0x32>
 8005d88:	2f00      	cmp	r7, #0
 8005d8a:	f000 80d2 	beq.w	8005f32 <_printf_i+0x1c6>
 8005d8e:	2f58      	cmp	r7, #88	@ 0x58
 8005d90:	f000 80b9 	beq.w	8005f06 <_printf_i+0x19a>
 8005d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d9c:	e03a      	b.n	8005e14 <_printf_i+0xa8>
 8005d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005da2:	2b15      	cmp	r3, #21
 8005da4:	d8f6      	bhi.n	8005d94 <_printf_i+0x28>
 8005da6:	a101      	add	r1, pc, #4	@ (adr r1, 8005dac <_printf_i+0x40>)
 8005da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005d95 	.word	0x08005d95
 8005db8:	08005d95 	.word	0x08005d95
 8005dbc:	08005d95 	.word	0x08005d95
 8005dc0:	08005d95 	.word	0x08005d95
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005d95 	.word	0x08005d95
 8005dcc:	08005d95 	.word	0x08005d95
 8005dd0:	08005d95 	.word	0x08005d95
 8005dd4:	08005d95 	.word	0x08005d95
 8005dd8:	08005f19 	.word	0x08005f19
 8005ddc:	08005e43 	.word	0x08005e43
 8005de0:	08005ed3 	.word	0x08005ed3
 8005de4:	08005d95 	.word	0x08005d95
 8005de8:	08005d95 	.word	0x08005d95
 8005dec:	08005f3b 	.word	0x08005f3b
 8005df0:	08005d95 	.word	0x08005d95
 8005df4:	08005e43 	.word	0x08005e43
 8005df8:	08005d95 	.word	0x08005d95
 8005dfc:	08005d95 	.word	0x08005d95
 8005e00:	08005edb 	.word	0x08005edb
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6032      	str	r2, [r6, #0]
 8005e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e14:	2301      	movs	r3, #1
 8005e16:	e09d      	b.n	8005f54 <_printf_i+0x1e8>
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	6820      	ldr	r0, [r4, #0]
 8005e1c:	1d19      	adds	r1, r3, #4
 8005e1e:	6031      	str	r1, [r6, #0]
 8005e20:	0606      	lsls	r6, r0, #24
 8005e22:	d501      	bpl.n	8005e28 <_printf_i+0xbc>
 8005e24:	681d      	ldr	r5, [r3, #0]
 8005e26:	e003      	b.n	8005e30 <_printf_i+0xc4>
 8005e28:	0645      	lsls	r5, r0, #25
 8005e2a:	d5fb      	bpl.n	8005e24 <_printf_i+0xb8>
 8005e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	da03      	bge.n	8005e3c <_printf_i+0xd0>
 8005e34:	232d      	movs	r3, #45	@ 0x2d
 8005e36:	426d      	negs	r5, r5
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e3c:	4859      	ldr	r0, [pc, #356]	@ (8005fa4 <_printf_i+0x238>)
 8005e3e:	230a      	movs	r3, #10
 8005e40:	e011      	b.n	8005e66 <_printf_i+0xfa>
 8005e42:	6821      	ldr	r1, [r4, #0]
 8005e44:	6833      	ldr	r3, [r6, #0]
 8005e46:	0608      	lsls	r0, r1, #24
 8005e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e4c:	d402      	bmi.n	8005e54 <_printf_i+0xe8>
 8005e4e:	0649      	lsls	r1, r1, #25
 8005e50:	bf48      	it	mi
 8005e52:	b2ad      	uxthmi	r5, r5
 8005e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e56:	4853      	ldr	r0, [pc, #332]	@ (8005fa4 <_printf_i+0x238>)
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	bf14      	ite	ne
 8005e5c:	230a      	movne	r3, #10
 8005e5e:	2308      	moveq	r3, #8
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e66:	6866      	ldr	r6, [r4, #4]
 8005e68:	60a6      	str	r6, [r4, #8]
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	bfa2      	ittt	ge
 8005e6e:	6821      	ldrge	r1, [r4, #0]
 8005e70:	f021 0104 	bicge.w	r1, r1, #4
 8005e74:	6021      	strge	r1, [r4, #0]
 8005e76:	b90d      	cbnz	r5, 8005e7c <_printf_i+0x110>
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	d04b      	beq.n	8005f14 <_printf_i+0x1a8>
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e82:	fb03 5711 	mls	r7, r3, r1, r5
 8005e86:	5dc7      	ldrb	r7, [r0, r7]
 8005e88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e8c:	462f      	mov	r7, r5
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	460d      	mov	r5, r1
 8005e92:	d9f4      	bls.n	8005e7e <_printf_i+0x112>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10b      	bne.n	8005eb0 <_printf_i+0x144>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07df      	lsls	r7, r3, #31
 8005e9c:	d508      	bpl.n	8005eb0 <_printf_i+0x144>
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	bfde      	ittt	le
 8005ea6:	2330      	movle	r3, #48	@ 0x30
 8005ea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eb0:	1b92      	subs	r2, r2, r6
 8005eb2:	6122      	str	r2, [r4, #16]
 8005eb4:	f8cd a000 	str.w	sl, [sp]
 8005eb8:	464b      	mov	r3, r9
 8005eba:	aa03      	add	r2, sp, #12
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7ff fee6 	bl	8005c90 <_printf_common>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d14a      	bne.n	8005f5e <_printf_i+0x1f2>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b004      	add	sp, #16
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f043 0320 	orr.w	r3, r3, #32
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	4833      	ldr	r0, [pc, #204]	@ (8005fa8 <_printf_i+0x23c>)
 8005edc:	2778      	movs	r7, #120	@ 0x78
 8005ede:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6831      	ldr	r1, [r6, #0]
 8005ee6:	061f      	lsls	r7, r3, #24
 8005ee8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eec:	d402      	bmi.n	8005ef4 <_printf_i+0x188>
 8005eee:	065f      	lsls	r7, r3, #25
 8005ef0:	bf48      	it	mi
 8005ef2:	b2ad      	uxthmi	r5, r5
 8005ef4:	6031      	str	r1, [r6, #0]
 8005ef6:	07d9      	lsls	r1, r3, #31
 8005ef8:	bf44      	itt	mi
 8005efa:	f043 0320 	orrmi.w	r3, r3, #32
 8005efe:	6023      	strmi	r3, [r4, #0]
 8005f00:	b11d      	cbz	r5, 8005f0a <_printf_i+0x19e>
 8005f02:	2310      	movs	r3, #16
 8005f04:	e7ac      	b.n	8005e60 <_printf_i+0xf4>
 8005f06:	4827      	ldr	r0, [pc, #156]	@ (8005fa4 <_printf_i+0x238>)
 8005f08:	e7e9      	b.n	8005ede <_printf_i+0x172>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	f023 0320 	bic.w	r3, r3, #32
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	e7f6      	b.n	8005f02 <_printf_i+0x196>
 8005f14:	4616      	mov	r6, r2
 8005f16:	e7bd      	b.n	8005e94 <_printf_i+0x128>
 8005f18:	6833      	ldr	r3, [r6, #0]
 8005f1a:	6825      	ldr	r5, [r4, #0]
 8005f1c:	6961      	ldr	r1, [r4, #20]
 8005f1e:	1d18      	adds	r0, r3, #4
 8005f20:	6030      	str	r0, [r6, #0]
 8005f22:	062e      	lsls	r6, r5, #24
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0x1c0>
 8005f28:	6019      	str	r1, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <_printf_i+0x1c6>
 8005f2c:	0668      	lsls	r0, r5, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0x1bc>
 8005f30:	8019      	strh	r1, [r3, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	4616      	mov	r6, r2
 8005f38:	e7bc      	b.n	8005eb4 <_printf_i+0x148>
 8005f3a:	6833      	ldr	r3, [r6, #0]
 8005f3c:	1d1a      	adds	r2, r3, #4
 8005f3e:	6032      	str	r2, [r6, #0]
 8005f40:	681e      	ldr	r6, [r3, #0]
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	2100      	movs	r1, #0
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7fa f962 	bl	8000210 <memchr>
 8005f4c:	b108      	cbz	r0, 8005f52 <_printf_i+0x1e6>
 8005f4e:	1b80      	subs	r0, r0, r6
 8005f50:	6060      	str	r0, [r4, #4]
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	6123      	str	r3, [r4, #16]
 8005f56:	2300      	movs	r3, #0
 8005f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f5c:	e7aa      	b.n	8005eb4 <_printf_i+0x148>
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	4632      	mov	r2, r6
 8005f62:	4649      	mov	r1, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	47d0      	blx	sl
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d0ad      	beq.n	8005ec8 <_printf_i+0x15c>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	079b      	lsls	r3, r3, #30
 8005f70:	d413      	bmi.n	8005f9a <_printf_i+0x22e>
 8005f72:	68e0      	ldr	r0, [r4, #12]
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	4298      	cmp	r0, r3
 8005f78:	bfb8      	it	lt
 8005f7a:	4618      	movlt	r0, r3
 8005f7c:	e7a6      	b.n	8005ecc <_printf_i+0x160>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4632      	mov	r2, r6
 8005f82:	4649      	mov	r1, r9
 8005f84:	4640      	mov	r0, r8
 8005f86:	47d0      	blx	sl
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d09d      	beq.n	8005ec8 <_printf_i+0x15c>
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	9903      	ldr	r1, [sp, #12]
 8005f92:	1a5b      	subs	r3, r3, r1
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dcf2      	bgt.n	8005f7e <_printf_i+0x212>
 8005f98:	e7eb      	b.n	8005f72 <_printf_i+0x206>
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	f104 0619 	add.w	r6, r4, #25
 8005fa0:	e7f5      	b.n	8005f8e <_printf_i+0x222>
 8005fa2:	bf00      	nop
 8005fa4:	08006419 	.word	0x08006419
 8005fa8:	0800642a 	.word	0x0800642a

08005fac <__sflush_r>:
 8005fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	0716      	lsls	r6, r2, #28
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	460c      	mov	r4, r1
 8005fba:	d454      	bmi.n	8006066 <__sflush_r+0xba>
 8005fbc:	684b      	ldr	r3, [r1, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dc02      	bgt.n	8005fc8 <__sflush_r+0x1c>
 8005fc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dd48      	ble.n	800605a <__sflush_r+0xae>
 8005fc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fca:	2e00      	cmp	r6, #0
 8005fcc:	d045      	beq.n	800605a <__sflush_r+0xae>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fd4:	682f      	ldr	r7, [r5, #0]
 8005fd6:	6a21      	ldr	r1, [r4, #32]
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	d030      	beq.n	800603e <__sflush_r+0x92>
 8005fdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	0759      	lsls	r1, r3, #29
 8005fe2:	d505      	bpl.n	8005ff0 <__sflush_r+0x44>
 8005fe4:	6863      	ldr	r3, [r4, #4]
 8005fe6:	1ad2      	subs	r2, r2, r3
 8005fe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fea:	b10b      	cbz	r3, 8005ff0 <__sflush_r+0x44>
 8005fec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ff4:	6a21      	ldr	r1, [r4, #32]
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b0      	blx	r6
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	d106      	bne.n	800600e <__sflush_r+0x62>
 8006000:	6829      	ldr	r1, [r5, #0]
 8006002:	291d      	cmp	r1, #29
 8006004:	d82b      	bhi.n	800605e <__sflush_r+0xb2>
 8006006:	4a2a      	ldr	r2, [pc, #168]	@ (80060b0 <__sflush_r+0x104>)
 8006008:	410a      	asrs	r2, r1
 800600a:	07d6      	lsls	r6, r2, #31
 800600c:	d427      	bmi.n	800605e <__sflush_r+0xb2>
 800600e:	2200      	movs	r2, #0
 8006010:	6062      	str	r2, [r4, #4]
 8006012:	04d9      	lsls	r1, r3, #19
 8006014:	6922      	ldr	r2, [r4, #16]
 8006016:	6022      	str	r2, [r4, #0]
 8006018:	d504      	bpl.n	8006024 <__sflush_r+0x78>
 800601a:	1c42      	adds	r2, r0, #1
 800601c:	d101      	bne.n	8006022 <__sflush_r+0x76>
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	b903      	cbnz	r3, 8006024 <__sflush_r+0x78>
 8006022:	6560      	str	r0, [r4, #84]	@ 0x54
 8006024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006026:	602f      	str	r7, [r5, #0]
 8006028:	b1b9      	cbz	r1, 800605a <__sflush_r+0xae>
 800602a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800602e:	4299      	cmp	r1, r3
 8006030:	d002      	beq.n	8006038 <__sflush_r+0x8c>
 8006032:	4628      	mov	r0, r5
 8006034:	f7ff fbf2 	bl	800581c <_free_r>
 8006038:	2300      	movs	r3, #0
 800603a:	6363      	str	r3, [r4, #52]	@ 0x34
 800603c:	e00d      	b.n	800605a <__sflush_r+0xae>
 800603e:	2301      	movs	r3, #1
 8006040:	4628      	mov	r0, r5
 8006042:	47b0      	blx	r6
 8006044:	4602      	mov	r2, r0
 8006046:	1c50      	adds	r0, r2, #1
 8006048:	d1c9      	bne.n	8005fde <__sflush_r+0x32>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0c6      	beq.n	8005fde <__sflush_r+0x32>
 8006050:	2b1d      	cmp	r3, #29
 8006052:	d001      	beq.n	8006058 <__sflush_r+0xac>
 8006054:	2b16      	cmp	r3, #22
 8006056:	d11e      	bne.n	8006096 <__sflush_r+0xea>
 8006058:	602f      	str	r7, [r5, #0]
 800605a:	2000      	movs	r0, #0
 800605c:	e022      	b.n	80060a4 <__sflush_r+0xf8>
 800605e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006062:	b21b      	sxth	r3, r3
 8006064:	e01b      	b.n	800609e <__sflush_r+0xf2>
 8006066:	690f      	ldr	r7, [r1, #16]
 8006068:	2f00      	cmp	r7, #0
 800606a:	d0f6      	beq.n	800605a <__sflush_r+0xae>
 800606c:	0793      	lsls	r3, r2, #30
 800606e:	680e      	ldr	r6, [r1, #0]
 8006070:	bf08      	it	eq
 8006072:	694b      	ldreq	r3, [r1, #20]
 8006074:	600f      	str	r7, [r1, #0]
 8006076:	bf18      	it	ne
 8006078:	2300      	movne	r3, #0
 800607a:	eba6 0807 	sub.w	r8, r6, r7
 800607e:	608b      	str	r3, [r1, #8]
 8006080:	f1b8 0f00 	cmp.w	r8, #0
 8006084:	dde9      	ble.n	800605a <__sflush_r+0xae>
 8006086:	6a21      	ldr	r1, [r4, #32]
 8006088:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800608a:	4643      	mov	r3, r8
 800608c:	463a      	mov	r2, r7
 800608e:	4628      	mov	r0, r5
 8006090:	47b0      	blx	r6
 8006092:	2800      	cmp	r0, #0
 8006094:	dc08      	bgt.n	80060a8 <__sflush_r+0xfc>
 8006096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a8:	4407      	add	r7, r0
 80060aa:	eba8 0800 	sub.w	r8, r8, r0
 80060ae:	e7e7      	b.n	8006080 <__sflush_r+0xd4>
 80060b0:	dfbffffe 	.word	0xdfbffffe

080060b4 <_fflush_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	4605      	mov	r5, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	b913      	cbnz	r3, 80060c4 <_fflush_r+0x10>
 80060be:	2500      	movs	r5, #0
 80060c0:	4628      	mov	r0, r5
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	b118      	cbz	r0, 80060ce <_fflush_r+0x1a>
 80060c6:	6a03      	ldr	r3, [r0, #32]
 80060c8:	b90b      	cbnz	r3, 80060ce <_fflush_r+0x1a>
 80060ca:	f7ff fa91 	bl	80055f0 <__sinit>
 80060ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f3      	beq.n	80060be <_fflush_r+0xa>
 80060d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060d8:	07d0      	lsls	r0, r2, #31
 80060da:	d404      	bmi.n	80060e6 <_fflush_r+0x32>
 80060dc:	0599      	lsls	r1, r3, #22
 80060de:	d402      	bmi.n	80060e6 <_fflush_r+0x32>
 80060e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060e2:	f7ff fb8a 	bl	80057fa <__retarget_lock_acquire_recursive>
 80060e6:	4628      	mov	r0, r5
 80060e8:	4621      	mov	r1, r4
 80060ea:	f7ff ff5f 	bl	8005fac <__sflush_r>
 80060ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060f0:	07da      	lsls	r2, r3, #31
 80060f2:	4605      	mov	r5, r0
 80060f4:	d4e4      	bmi.n	80060c0 <_fflush_r+0xc>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	059b      	lsls	r3, r3, #22
 80060fa:	d4e1      	bmi.n	80060c0 <_fflush_r+0xc>
 80060fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060fe:	f7ff fb7d 	bl	80057fc <__retarget_lock_release_recursive>
 8006102:	e7dd      	b.n	80060c0 <_fflush_r+0xc>

08006104 <__swbuf_r>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	460e      	mov	r6, r1
 8006108:	4614      	mov	r4, r2
 800610a:	4605      	mov	r5, r0
 800610c:	b118      	cbz	r0, 8006116 <__swbuf_r+0x12>
 800610e:	6a03      	ldr	r3, [r0, #32]
 8006110:	b90b      	cbnz	r3, 8006116 <__swbuf_r+0x12>
 8006112:	f7ff fa6d 	bl	80055f0 <__sinit>
 8006116:	69a3      	ldr	r3, [r4, #24]
 8006118:	60a3      	str	r3, [r4, #8]
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	071a      	lsls	r2, r3, #28
 800611e:	d501      	bpl.n	8006124 <__swbuf_r+0x20>
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	b943      	cbnz	r3, 8006136 <__swbuf_r+0x32>
 8006124:	4621      	mov	r1, r4
 8006126:	4628      	mov	r0, r5
 8006128:	f000 f82a 	bl	8006180 <__swsetup_r>
 800612c:	b118      	cbz	r0, 8006136 <__swbuf_r+0x32>
 800612e:	f04f 37ff 	mov.w	r7, #4294967295
 8006132:	4638      	mov	r0, r7
 8006134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	6922      	ldr	r2, [r4, #16]
 800613a:	1a98      	subs	r0, r3, r2
 800613c:	6963      	ldr	r3, [r4, #20]
 800613e:	b2f6      	uxtb	r6, r6
 8006140:	4283      	cmp	r3, r0
 8006142:	4637      	mov	r7, r6
 8006144:	dc05      	bgt.n	8006152 <__swbuf_r+0x4e>
 8006146:	4621      	mov	r1, r4
 8006148:	4628      	mov	r0, r5
 800614a:	f7ff ffb3 	bl	80060b4 <_fflush_r>
 800614e:	2800      	cmp	r0, #0
 8006150:	d1ed      	bne.n	800612e <__swbuf_r+0x2a>
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	3b01      	subs	r3, #1
 8006156:	60a3      	str	r3, [r4, #8]
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	6022      	str	r2, [r4, #0]
 800615e:	701e      	strb	r6, [r3, #0]
 8006160:	6962      	ldr	r2, [r4, #20]
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	429a      	cmp	r2, r3
 8006166:	d004      	beq.n	8006172 <__swbuf_r+0x6e>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	07db      	lsls	r3, r3, #31
 800616c:	d5e1      	bpl.n	8006132 <__swbuf_r+0x2e>
 800616e:	2e0a      	cmp	r6, #10
 8006170:	d1df      	bne.n	8006132 <__swbuf_r+0x2e>
 8006172:	4621      	mov	r1, r4
 8006174:	4628      	mov	r0, r5
 8006176:	f7ff ff9d 	bl	80060b4 <_fflush_r>
 800617a:	2800      	cmp	r0, #0
 800617c:	d0d9      	beq.n	8006132 <__swbuf_r+0x2e>
 800617e:	e7d6      	b.n	800612e <__swbuf_r+0x2a>

08006180 <__swsetup_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4b29      	ldr	r3, [pc, #164]	@ (8006228 <__swsetup_r+0xa8>)
 8006184:	4605      	mov	r5, r0
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	460c      	mov	r4, r1
 800618a:	b118      	cbz	r0, 8006194 <__swsetup_r+0x14>
 800618c:	6a03      	ldr	r3, [r0, #32]
 800618e:	b90b      	cbnz	r3, 8006194 <__swsetup_r+0x14>
 8006190:	f7ff fa2e 	bl	80055f0 <__sinit>
 8006194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006198:	0719      	lsls	r1, r3, #28
 800619a:	d422      	bmi.n	80061e2 <__swsetup_r+0x62>
 800619c:	06da      	lsls	r2, r3, #27
 800619e:	d407      	bmi.n	80061b0 <__swsetup_r+0x30>
 80061a0:	2209      	movs	r2, #9
 80061a2:	602a      	str	r2, [r5, #0]
 80061a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061a8:	81a3      	strh	r3, [r4, #12]
 80061aa:	f04f 30ff 	mov.w	r0, #4294967295
 80061ae:	e033      	b.n	8006218 <__swsetup_r+0x98>
 80061b0:	0758      	lsls	r0, r3, #29
 80061b2:	d512      	bpl.n	80061da <__swsetup_r+0x5a>
 80061b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061b6:	b141      	cbz	r1, 80061ca <__swsetup_r+0x4a>
 80061b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061bc:	4299      	cmp	r1, r3
 80061be:	d002      	beq.n	80061c6 <__swsetup_r+0x46>
 80061c0:	4628      	mov	r0, r5
 80061c2:	f7ff fb2b 	bl	800581c <_free_r>
 80061c6:	2300      	movs	r3, #0
 80061c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	2300      	movs	r3, #0
 80061d4:	6063      	str	r3, [r4, #4]
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f043 0308 	orr.w	r3, r3, #8
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	b94b      	cbnz	r3, 80061fa <__swsetup_r+0x7a>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f0:	d003      	beq.n	80061fa <__swsetup_r+0x7a>
 80061f2:	4621      	mov	r1, r4
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 f84f 	bl	8006298 <__smakebuf_r>
 80061fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061fe:	f013 0201 	ands.w	r2, r3, #1
 8006202:	d00a      	beq.n	800621a <__swsetup_r+0x9a>
 8006204:	2200      	movs	r2, #0
 8006206:	60a2      	str	r2, [r4, #8]
 8006208:	6962      	ldr	r2, [r4, #20]
 800620a:	4252      	negs	r2, r2
 800620c:	61a2      	str	r2, [r4, #24]
 800620e:	6922      	ldr	r2, [r4, #16]
 8006210:	b942      	cbnz	r2, 8006224 <__swsetup_r+0xa4>
 8006212:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006216:	d1c5      	bne.n	80061a4 <__swsetup_r+0x24>
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	0799      	lsls	r1, r3, #30
 800621c:	bf58      	it	pl
 800621e:	6962      	ldrpl	r2, [r4, #20]
 8006220:	60a2      	str	r2, [r4, #8]
 8006222:	e7f4      	b.n	800620e <__swsetup_r+0x8e>
 8006224:	2000      	movs	r0, #0
 8006226:	e7f7      	b.n	8006218 <__swsetup_r+0x98>
 8006228:	2000001c 	.word	0x2000001c

0800622c <_sbrk_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d06      	ldr	r5, [pc, #24]	@ (8006248 <_sbrk_r+0x1c>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fa fcce 	bl	8000bd8 <_sbrk>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_sbrk_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_sbrk_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	20004bb8 	.word	0x20004bb8

0800624c <__swhatbuf_r>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	460c      	mov	r4, r1
 8006250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006254:	2900      	cmp	r1, #0
 8006256:	b096      	sub	sp, #88	@ 0x58
 8006258:	4615      	mov	r5, r2
 800625a:	461e      	mov	r6, r3
 800625c:	da0d      	bge.n	800627a <__swhatbuf_r+0x2e>
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	bf14      	ite	ne
 800626a:	2340      	movne	r3, #64	@ 0x40
 800626c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006270:	2000      	movs	r0, #0
 8006272:	6031      	str	r1, [r6, #0]
 8006274:	602b      	str	r3, [r5, #0]
 8006276:	b016      	add	sp, #88	@ 0x58
 8006278:	bd70      	pop	{r4, r5, r6, pc}
 800627a:	466a      	mov	r2, sp
 800627c:	f000 f848 	bl	8006310 <_fstat_r>
 8006280:	2800      	cmp	r0, #0
 8006282:	dbec      	blt.n	800625e <__swhatbuf_r+0x12>
 8006284:	9901      	ldr	r1, [sp, #4]
 8006286:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800628a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800628e:	4259      	negs	r1, r3
 8006290:	4159      	adcs	r1, r3
 8006292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006296:	e7eb      	b.n	8006270 <__swhatbuf_r+0x24>

08006298 <__smakebuf_r>:
 8006298:	898b      	ldrh	r3, [r1, #12]
 800629a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800629c:	079d      	lsls	r5, r3, #30
 800629e:	4606      	mov	r6, r0
 80062a0:	460c      	mov	r4, r1
 80062a2:	d507      	bpl.n	80062b4 <__smakebuf_r+0x1c>
 80062a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	2301      	movs	r3, #1
 80062ae:	6163      	str	r3, [r4, #20]
 80062b0:	b003      	add	sp, #12
 80062b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b4:	ab01      	add	r3, sp, #4
 80062b6:	466a      	mov	r2, sp
 80062b8:	f7ff ffc8 	bl	800624c <__swhatbuf_r>
 80062bc:	9f00      	ldr	r7, [sp, #0]
 80062be:	4605      	mov	r5, r0
 80062c0:	4639      	mov	r1, r7
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7ff fb16 	bl	80058f4 <_malloc_r>
 80062c8:	b948      	cbnz	r0, 80062de <__smakebuf_r+0x46>
 80062ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ce:	059a      	lsls	r2, r3, #22
 80062d0:	d4ee      	bmi.n	80062b0 <__smakebuf_r+0x18>
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	f043 0302 	orr.w	r3, r3, #2
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	e7e2      	b.n	80062a4 <__smakebuf_r+0xc>
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	6020      	str	r0, [r4, #0]
 80062e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	9b01      	ldr	r3, [sp, #4]
 80062ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062ee:	b15b      	cbz	r3, 8006308 <__smakebuf_r+0x70>
 80062f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062f4:	4630      	mov	r0, r6
 80062f6:	f000 f81d 	bl	8006334 <_isatty_r>
 80062fa:	b128      	cbz	r0, 8006308 <__smakebuf_r+0x70>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	431d      	orrs	r5, r3
 800630c:	81a5      	strh	r5, [r4, #12]
 800630e:	e7cf      	b.n	80062b0 <__smakebuf_r+0x18>

08006310 <_fstat_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d07      	ldr	r5, [pc, #28]	@ (8006330 <_fstat_r+0x20>)
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	f7fa fc32 	bl	8000b86 <_fstat>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d102      	bne.n	800632c <_fstat_r+0x1c>
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	b103      	cbz	r3, 800632c <_fstat_r+0x1c>
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	bd38      	pop	{r3, r4, r5, pc}
 800632e:	bf00      	nop
 8006330:	20004bb8 	.word	0x20004bb8

08006334 <_isatty_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4d06      	ldr	r5, [pc, #24]	@ (8006350 <_isatty_r+0x1c>)
 8006338:	2300      	movs	r3, #0
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	f7fa fc31 	bl	8000ba6 <_isatty>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_isatty_r+0x1a>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_isatty_r+0x1a>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	20004bb8 	.word	0x20004bb8

08006354 <_init>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	bf00      	nop
 8006358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635a:	bc08      	pop	{r3}
 800635c:	469e      	mov	lr, r3
 800635e:	4770      	bx	lr

08006360 <_fini>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr
