
3_TaskParameters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000613c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800630c  0800630c  0000730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063dc  080063dc  0000807c  2**0
                  CONTENTS
  4 .ARM          00000008  080063dc  080063dc  000073dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e4  080063e4  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e4  080063e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080063ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b50  2000007c  08006468  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bcc  08006468  00008bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001745f  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c3  00000000  00000000  0001f50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  000229d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001040  00000000  00000000  00023ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049c2  00000000  00000000  00024f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017980  00000000  00000000  000298c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd13c  00000000  00000000  00041242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb8  00000000  00000000  0011e3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0012437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080062f4 	.word	0x080062f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	080062f4 	.word	0x080062f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
typedef uint32_t TaskProfiler;
TaskProfiler BlueTaskProfiler,RedTaskProfiler, GreenTaskProfiler,
				OrangeTaskProfiler;

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af02      	add	r7, sp, #8

	HAL_Init();
 80005a6:	f000 fb55 	bl	8000c54 <HAL_Init>

	SystemClock_Config();
 80005aa:	f000 f873 	bl	8000694 <SystemClock_Config>

	MX_GPIO_Init();
 80005ae:	f000 f909 	bl	80007c4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 f8dd 	bl	8000770 <MX_USART2_UART_Init>

	xTaskCreate(vLedControllerTask,
 80005b6:	4b19      	ldr	r3, [pc, #100]	@ (800061c <main+0x7c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	2201      	movs	r2, #1
 80005c0:	9200      	str	r2, [sp, #0]
 80005c2:	2264      	movs	r2, #100	@ 0x64
 80005c4:	4916      	ldr	r1, [pc, #88]	@ (8000620 <main+0x80>)
 80005c6:	4817      	ldr	r0, [pc, #92]	@ (8000624 <main+0x84>)
 80005c8:	f003 f944 	bl	8003854 <xTaskCreate>
			  100,
			  (void*)blue_led,
			  1,
			  NULL);

	xTaskCreate(vLedControllerTask,
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <main+0x88>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2200      	movs	r2, #0
 80005d2:	9201      	str	r2, [sp, #4]
 80005d4:	2201      	movs	r2, #1
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	2264      	movs	r2, #100	@ 0x64
 80005da:	4914      	ldr	r1, [pc, #80]	@ (800062c <main+0x8c>)
 80005dc:	4811      	ldr	r0, [pc, #68]	@ (8000624 <main+0x84>)
 80005de:	f003 f939 	bl	8003854 <xTaskCreate>
			  100,
			  (void*)red_led,
			  1,
			  NULL);

	xTaskCreate(vLedControllerTask,
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <main+0x90>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	9200      	str	r2, [sp, #0]
 80005ee:	2264      	movs	r2, #100	@ 0x64
 80005f0:	4910      	ldr	r1, [pc, #64]	@ (8000634 <main+0x94>)
 80005f2:	480c      	ldr	r0, [pc, #48]	@ (8000624 <main+0x84>)
 80005f4:	f003 f92e 	bl	8003854 <xTaskCreate>
			  100,
			  (void*)green_led,
			  1,
			  NULL);

	xTaskCreate(vLedControllerTask,
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <main+0x98>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	2264      	movs	r2, #100	@ 0x64
 8000606:	490d      	ldr	r1, [pc, #52]	@ (800063c <main+0x9c>)
 8000608:	4806      	ldr	r0, [pc, #24]	@ (8000624 <main+0x84>)
 800060a:	f003 f923 	bl	8003854 <xTaskCreate>
			  100,
			  (void*)orange_led,
			  1,
			  NULL);

	vTaskStartScheduler();
 800060e:	f003 fa67 	bl	8003ae0 <vTaskStartScheduler>

	while (1)
	{
	  printf("Hello from stm32 \n\r");
 8000612:	480b      	ldr	r0, [pc, #44]	@ (8000640 <main+0xa0>)
 8000614:	f004 fff2 	bl	80055fc <iprintf>
 8000618:	e7fb      	b.n	8000612 <main+0x72>
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	0800630c 	.word	0x0800630c
 8000624:	08000645 	.word	0x08000645
 8000628:	20000008 	.word	0x20000008
 800062c:	08006320 	.word	0x08006320
 8000630:	20000004 	.word	0x20000004
 8000634:	08006334 	.word	0x08006334
 8000638:	2000000c 	.word	0x2000000c
 800063c:	0800634c 	.word	0x0800634c
 8000640:	08006364 	.word	0x08006364

08000644 <vLedControllerTask>:
	}
}


void vLedControllerTask(void *pvParameter)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlueTaskProfiler++;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <vLedControllerTask+0x24>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <vLedControllerTask+0x24>)
 8000654:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOD, (uint16_t)pvParameter);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	b29b      	uxth	r3, r3
 800065a:	4619      	mov	r1, r3
 800065c:	4803      	ldr	r0, [pc, #12]	@ (800066c <vLedControllerTask+0x28>)
 800065e:	f000 fdca 	bl	80011f6 <HAL_GPIO_TogglePin>
		BlueTaskProfiler++;
 8000662:	bf00      	nop
 8000664:	e7f2      	b.n	800064c <vLedControllerTask+0x8>
 8000666:	bf00      	nop
 8000668:	200000e0 	.word	0x200000e0
 800066c:	40020c00 	.word	0x40020c00

08000670 <__io_putchar>:
	}
}

//this function for printf to be used in printing sentences
int __io_putchar(int ch)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <__io_putchar+0x20>)
 8000682:	f001 fed9 	bl	8002438 <HAL_UART_Transmit>
	return ch;
 8000686:	687b      	ldr	r3, [r7, #4]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000098 	.word	0x20000098

08000694 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	@ 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 ffff 	bl	80056a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a29      	ldr	r2, [pc, #164]	@ (8000768 <SystemClock_Config+0xd4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e0:	4a22      	ldr	r2, [pc, #136]	@ (800076c <SystemClock_Config+0xd8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <SystemClock_Config+0xd8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000710:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f8fe 	bl	8001924 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 f89f 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fd6c 	bl	800122c <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075a:	f000 f889 	bl	8000870 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f001 fdf6 	bl	8002398 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f85d 	bl	8000870 <Error_Handler>
  }

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000098 	.word	0x20000098
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]


  /*enable clock access to port*/
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a11      	ldr	r2, [pc, #68]	@ (8000844 <MX_GPIO_Init+0x80>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_GPIO_Init+0x80>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  /*reset pins*/
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14|
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <MX_GPIO_Init+0x84>)
 800081a:	f000 fcd3 	bl	80011c4 <HAL_GPIO_WritePin>
		  GPIO_PIN_15, GPIO_PIN_RESET);
  /*configure pins*/
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14|
 800081e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000822:	60fb      	str	r3, [r7, #12]
		  	  	  	  	GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  /*initialize pins*/
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_GPIO_Init+0x84>)
 8000838:	f000 fb30 	bl	8000e9c <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020c00 	.word	0x40020c00

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085e:	f000 fa1b 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010000 	.word	0x40010000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <HAL_MspInit+0x54>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x54>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <HAL_MspInit+0x54>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_MspInit+0x54>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	210f      	movs	r1, #15
 80008be:	f06f 0001 	mvn.w	r0, #1
 80008c2:	f000 fac1 	bl	8000e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a19      	ldr	r2, [pc, #100]	@ (8000958 <HAL_UART_MspInit+0x84>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d12b      	bne.n	800094e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b18      	ldr	r3, [pc, #96]	@ (800095c <HAL_UART_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	4a17      	ldr	r2, [pc, #92]	@ (800095c <HAL_UART_MspInit+0x88>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000904:	6413      	str	r3, [r2, #64]	@ 0x40
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <HAL_UART_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a10      	ldr	r2, [pc, #64]	@ (800095c <HAL_UART_MspInit+0x88>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <HAL_UART_MspInit+0x8c>)
 800094a:	f000 faa7 	bl	8000e9c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	@ 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40004400 	.word	0x40004400
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000

08000964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	@ 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b2e      	ldr	r3, [pc, #184]	@ (8000a34 <HAL_InitTick+0xd0>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097c:	4a2d      	ldr	r2, [pc, #180]	@ (8000a34 <HAL_InitTick+0xd0>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6453      	str	r3, [r2, #68]	@ 0x44
 8000984:	4b2b      	ldr	r3, [pc, #172]	@ (8000a34 <HAL_InitTick+0xd0>)
 8000986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000990:	f107 020c 	add.w	r2, r7, #12
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fd60 	bl	8001460 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009a0:	f000 fd4a 	bl	8001438 <HAL_RCC_GetPCLK2Freq>
 80009a4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a8:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <HAL_InitTick+0xd4>)
 80009aa:	fba2 2303 	umull	r2, r3, r2, r3
 80009ae:	0c9b      	lsrs	r3, r3, #18
 80009b0:	3b01      	subs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009b4:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009b6:	4a22      	ldr	r2, [pc, #136]	@ (8000a40 <HAL_InitTick+0xdc>)
 80009b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ba:	4b20      	ldr	r3, [pc, #128]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009c2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009da:	4818      	ldr	r0, [pc, #96]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009dc:	f001 fa40 	bl	8001e60 <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d11b      	bne.n	8000a26 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009ee:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <HAL_InitTick+0xd8>)
 80009f0:	f001 fa90 	bl	8001f14 <HAL_TIM_Base_Start_IT>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d111      	bne.n	8000a26 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a02:	2019      	movs	r0, #25
 8000a04:	f000 fa3c 	bl	8000e80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d808      	bhi.n	8000a20 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	2019      	movs	r0, #25
 8000a14:	f000 fa18 	bl	8000e48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a18:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <HAL_InitTick+0xe0>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e002      	b.n	8000a26 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3730      	adds	r7, #48	@ 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	200000e4 	.word	0x200000e4
 8000a40:	40010000 	.word	0x40010000
 8000a44:	20000014 	.word	0x20000014

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a86:	f001 fab5 	bl	8001ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000e4 	.word	0x200000e4

08000a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e00a      	b.n	8000abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa6:	f3af 8000 	nop.w
 8000aaa:	4601      	mov	r1, r0
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf0      	blt.n	8000aa6 <_read+0x12>
  }

  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	e009      	b.n	8000af4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fdc1 	bl	8000670 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf1      	blt.n	8000ae0 <_write+0x12>
  }
  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f004 fdd0 	bl	8005744 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	2000012c 	.word	0x2000012c
 8000bd8:	20004bd0 	.word	0x20004bd0

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f004 fd8f 	bl	8005750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fcb5 	bl	80005a0 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c44:	080063ec 	.word	0x080063ec
  ldr r2, =_sbss
 8000c48:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c4c:	20004bcc 	.word	0x20004bcc

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8d8 	bl	8000e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff fe6e 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fdf8 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000018 	.word	0x20000018
 8000cbc:	20000130 	.word	0x20000130

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000130 	.word	0x20000130

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	@ (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	@ (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	@ (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	@ 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff4c 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5a:	f7ff ff61 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff ffb1 	bl	8000dcc <NVIC_EncodePriority>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff80 	bl	8000d78 <__NVIC_SetPriority>
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff54 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	@ 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e165      	b.n	8001184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8154 	bne.w	800117e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d130      	bne.n	8000f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 0201 	and.w	r2, r3, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d017      	beq.n	8000f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80ae 	beq.w	800117e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b5d      	ldr	r3, [pc, #372]	@ (800119c <HAL_GPIO_Init+0x300>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	4a5c      	ldr	r2, [pc, #368]	@ (800119c <HAL_GPIO_Init+0x300>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001030:	6453      	str	r3, [r2, #68]	@ 0x44
 8001032:	4b5a      	ldr	r3, [pc, #360]	@ (800119c <HAL_GPIO_Init+0x300>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a58      	ldr	r2, [pc, #352]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4f      	ldr	r2, [pc, #316]	@ (80011a4 <HAL_GPIO_Init+0x308>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d025      	beq.n	80010b6 <HAL_GPIO_Init+0x21a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4e      	ldr	r2, [pc, #312]	@ (80011a8 <HAL_GPIO_Init+0x30c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d01f      	beq.n	80010b2 <HAL_GPIO_Init+0x216>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4d      	ldr	r2, [pc, #308]	@ (80011ac <HAL_GPIO_Init+0x310>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x212>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4c      	ldr	r2, [pc, #304]	@ (80011b0 <HAL_GPIO_Init+0x314>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x20e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4b      	ldr	r2, [pc, #300]	@ (80011b4 <HAL_GPIO_Init+0x318>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x20a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4a      	ldr	r2, [pc, #296]	@ (80011b8 <HAL_GPIO_Init+0x31c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x206>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a49      	ldr	r2, [pc, #292]	@ (80011bc <HAL_GPIO_Init+0x320>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x202>
 800109a:	2306      	movs	r3, #6
 800109c:	e00c      	b.n	80010b8 <HAL_GPIO_Init+0x21c>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00a      	b.n	80010b8 <HAL_GPIO_Init+0x21c>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x21c>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x21c>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x21c>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x21c>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x21c>
 80010b6:	2300      	movs	r3, #0
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b3a      	ldr	r3, [pc, #232]	@ (80011c0 <HAL_GPIO_Init+0x324>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a31      	ldr	r2, [pc, #196]	@ (80011c0 <HAL_GPIO_Init+0x324>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b2f      	ldr	r3, [pc, #188]	@ (80011c0 <HAL_GPIO_Init+0x324>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a26      	ldr	r2, [pc, #152]	@ (80011c0 <HAL_GPIO_Init+0x324>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112a:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_GPIO_Init+0x324>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114e:	4a1c      	ldr	r2, [pc, #112]	@ (80011c0 <HAL_GPIO_Init+0x324>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <HAL_GPIO_Init+0x324>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001178:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <HAL_GPIO_Init+0x324>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	f67f ae96 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40021400 	.word	0x40021400
 80011bc:	40021800 	.word	0x40021800
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b085      	sub	sp, #20
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001208:	887a      	ldrh	r2, [r7, #2]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	041a      	lsls	r2, r3, #16
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43d9      	mvns	r1, r3
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	400b      	ands	r3, r1
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0cc      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001240:	4b68      	ldr	r3, [pc, #416]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d90c      	bls.n	8001268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124e:	4b65      	ldr	r3, [pc, #404]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b63      	ldr	r3, [pc, #396]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0b8      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d020      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001280:	4b59      	ldr	r3, [pc, #356]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4a58      	ldr	r2, [pc, #352]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800128a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001298:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a52      	ldr	r2, [pc, #328]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a4:	4b50      	ldr	r3, [pc, #320]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	494d      	ldr	r1, [pc, #308]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d044      	beq.n	800134c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d119      	bne.n	800130a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e07f      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d003      	beq.n	80012ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ea:	4b3f      	ldr	r3, [pc, #252]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e06f      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fa:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e067      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130a:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f023 0203 	bic.w	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4934      	ldr	r1, [pc, #208]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	4313      	orrs	r3, r2
 800131a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800131c:	f7ff fcd0 	bl	8000cc0 <HAL_GetTick>
 8001320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001322:	e00a      	b.n	800133a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001324:	f7ff fccc 	bl	8000cc0 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e04f      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133a:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 020c 	and.w	r2, r3, #12
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	429a      	cmp	r2, r3
 800134a:	d1eb      	bne.n	8001324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d20c      	bcs.n	8001374 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e032      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4916      	ldr	r1, [pc, #88]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	4313      	orrs	r3, r2
 8001390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	490e      	ldr	r1, [pc, #56]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013b2:	f000 f887 	bl	80014c4 <HAL_RCC_GetSysClockFreq>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	490a      	ldr	r1, [pc, #40]	@ (80013ec <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	5ccb      	ldrb	r3, [r1, r3]
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fac6 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08006390 	.word	0x08006390
 80013f0:	20000010 	.word	0x20000010
 80013f4:	20000014 	.word	0x20000014

080013f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <HAL_RCC_GetHCLKFreq+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000010 	.word	0x20000010

08001410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001414:	f7ff fff0 	bl	80013f8 <HAL_RCC_GetHCLKFreq>
 8001418:	4602      	mov	r2, r0
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	0a9b      	lsrs	r3, r3, #10
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	4903      	ldr	r1, [pc, #12]	@ (8001434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	080063a0 	.word	0x080063a0

08001438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800143c:	f7ff ffdc 	bl	80013f8 <HAL_RCC_GetHCLKFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	0b5b      	lsrs	r3, r3, #13
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	4903      	ldr	r1, [pc, #12]	@ (800145c <HAL_RCC_GetPCLK2Freq+0x24>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	080063a0 	.word	0x080063a0

08001460 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	220f      	movs	r2, #15
 800146e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <HAL_RCC_GetClockConfig+0x60>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 020f 	and.w	r2, r3, #15
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40023c00 	.word	0x40023c00

080014c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014c8:	b0ae      	sub	sp, #184	@ 0xb8
 80014ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ea:	4bcb      	ldr	r3, [pc, #812]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	f200 8206 	bhi.w	8001904 <HAL_RCC_GetSysClockFreq+0x440>
 80014f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fe:	bf00      	nop
 8001500:	08001535 	.word	0x08001535
 8001504:	08001905 	.word	0x08001905
 8001508:	08001905 	.word	0x08001905
 800150c:	08001905 	.word	0x08001905
 8001510:	0800153d 	.word	0x0800153d
 8001514:	08001905 	.word	0x08001905
 8001518:	08001905 	.word	0x08001905
 800151c:	08001905 	.word	0x08001905
 8001520:	08001545 	.word	0x08001545
 8001524:	08001905 	.word	0x08001905
 8001528:	08001905 	.word	0x08001905
 800152c:	08001905 	.word	0x08001905
 8001530:	08001735 	.word	0x08001735
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001534:	4bb9      	ldr	r3, [pc, #740]	@ (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 8001536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800153a:	e1e7      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800153c:	4bb8      	ldr	r3, [pc, #736]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x35c>)
 800153e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001542:	e1e3      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001544:	4bb4      	ldr	r3, [pc, #720]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800154c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001550:	4bb1      	ldr	r3, [pc, #708]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d071      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800155c:	4bae      	ldr	r3, [pc, #696]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	099b      	lsrs	r3, r3, #6
 8001562:	2200      	movs	r2, #0
 8001564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001568:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800156c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001574:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800157e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001582:	4622      	mov	r2, r4
 8001584:	462b      	mov	r3, r5
 8001586:	f04f 0000 	mov.w	r0, #0
 800158a:	f04f 0100 	mov.w	r1, #0
 800158e:	0159      	lsls	r1, r3, #5
 8001590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001594:	0150      	lsls	r0, r2, #5
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4621      	mov	r1, r4
 800159c:	1a51      	subs	r1, r2, r1
 800159e:	6439      	str	r1, [r7, #64]	@ 0x40
 80015a0:	4629      	mov	r1, r5
 80015a2:	eb63 0301 	sbc.w	r3, r3, r1
 80015a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015b4:	4649      	mov	r1, r9
 80015b6:	018b      	lsls	r3, r1, #6
 80015b8:	4641      	mov	r1, r8
 80015ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015be:	4641      	mov	r1, r8
 80015c0:	018a      	lsls	r2, r1, #6
 80015c2:	4641      	mov	r1, r8
 80015c4:	1a51      	subs	r1, r2, r1
 80015c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015c8:	4649      	mov	r1, r9
 80015ca:	eb63 0301 	sbc.w	r3, r3, r1
 80015ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015dc:	4649      	mov	r1, r9
 80015de:	00cb      	lsls	r3, r1, #3
 80015e0:	4641      	mov	r1, r8
 80015e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015e6:	4641      	mov	r1, r8
 80015e8:	00ca      	lsls	r2, r1, #3
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	4622      	mov	r2, r4
 80015f2:	189b      	adds	r3, r3, r2
 80015f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80015f6:	462b      	mov	r3, r5
 80015f8:	460a      	mov	r2, r1
 80015fa:	eb42 0303 	adc.w	r3, r2, r3
 80015fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800160c:	4629      	mov	r1, r5
 800160e:	024b      	lsls	r3, r1, #9
 8001610:	4621      	mov	r1, r4
 8001612:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001616:	4621      	mov	r1, r4
 8001618:	024a      	lsls	r2, r1, #9
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001622:	2200      	movs	r2, #0
 8001624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001628:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800162c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001630:	f7fe fe3e 	bl	80002b0 <__aeabi_uldivmod>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4613      	mov	r3, r2
 800163a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800163e:	e067      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001640:	4b75      	ldr	r3, [pc, #468]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	2200      	movs	r2, #0
 8001648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800164c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001650:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001658:	67bb      	str	r3, [r7, #120]	@ 0x78
 800165a:	2300      	movs	r3, #0
 800165c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800165e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001662:	4622      	mov	r2, r4
 8001664:	462b      	mov	r3, r5
 8001666:	f04f 0000 	mov.w	r0, #0
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	0159      	lsls	r1, r3, #5
 8001670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001674:	0150      	lsls	r0, r2, #5
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4621      	mov	r1, r4
 800167c:	1a51      	subs	r1, r2, r1
 800167e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001680:	4629      	mov	r1, r5
 8001682:	eb63 0301 	sbc.w	r3, r3, r1
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001694:	4649      	mov	r1, r9
 8001696:	018b      	lsls	r3, r1, #6
 8001698:	4641      	mov	r1, r8
 800169a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800169e:	4641      	mov	r1, r8
 80016a0:	018a      	lsls	r2, r1, #6
 80016a2:	4641      	mov	r1, r8
 80016a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016a8:	4649      	mov	r1, r9
 80016aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016c2:	4692      	mov	sl, r2
 80016c4:	469b      	mov	fp, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	eb1a 0303 	adds.w	r3, sl, r3
 80016cc:	623b      	str	r3, [r7, #32]
 80016ce:	462b      	mov	r3, r5
 80016d0:	eb4b 0303 	adc.w	r3, fp, r3
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016e2:	4629      	mov	r1, r5
 80016e4:	028b      	lsls	r3, r1, #10
 80016e6:	4621      	mov	r1, r4
 80016e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016ec:	4621      	mov	r1, r4
 80016ee:	028a      	lsls	r2, r1, #10
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016f8:	2200      	movs	r2, #0
 80016fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80016fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80016fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001702:	f7fe fdd5 	bl	80002b0 <__aeabi_uldivmod>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4613      	mov	r3, r2
 800170c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001710:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	3301      	adds	r3, #1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001726:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001732:	e0eb      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001734:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800173c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001740:	4b35      	ldr	r3, [pc, #212]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d06b      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174c:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x354>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	2200      	movs	r2, #0
 8001754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001756:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800175a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001760:	2300      	movs	r3, #0
 8001762:	667b      	str	r3, [r7, #100]	@ 0x64
 8001764:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001768:	4622      	mov	r2, r4
 800176a:	462b      	mov	r3, r5
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	0159      	lsls	r1, r3, #5
 8001776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177a:	0150      	lsls	r0, r2, #5
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4621      	mov	r1, r4
 8001782:	1a51      	subs	r1, r2, r1
 8001784:	61b9      	str	r1, [r7, #24]
 8001786:	4629      	mov	r1, r5
 8001788:	eb63 0301 	sbc.w	r3, r3, r1
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800179a:	4659      	mov	r1, fp
 800179c:	018b      	lsls	r3, r1, #6
 800179e:	4651      	mov	r1, sl
 80017a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a4:	4651      	mov	r1, sl
 80017a6:	018a      	lsls	r2, r1, #6
 80017a8:	4651      	mov	r1, sl
 80017aa:	ebb2 0801 	subs.w	r8, r2, r1
 80017ae:	4659      	mov	r1, fp
 80017b0:	eb63 0901 	sbc.w	r9, r3, r1
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017c8:	4690      	mov	r8, r2
 80017ca:	4699      	mov	r9, r3
 80017cc:	4623      	mov	r3, r4
 80017ce:	eb18 0303 	adds.w	r3, r8, r3
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	462b      	mov	r3, r5
 80017d6:	eb49 0303 	adc.w	r3, r9, r3
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017e8:	4629      	mov	r1, r5
 80017ea:	024b      	lsls	r3, r1, #9
 80017ec:	4621      	mov	r1, r4
 80017ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017f2:	4621      	mov	r1, r4
 80017f4:	024a      	lsls	r2, r1, #9
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017fe:	2200      	movs	r2, #0
 8001800:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001802:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001804:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001808:	f7fe fd52 	bl	80002b0 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4613      	mov	r3, r2
 8001812:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001816:	e065      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x420>
 8001818:	40023800 	.word	0x40023800
 800181c:	00f42400 	.word	0x00f42400
 8001820:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001824:	4b3d      	ldr	r3, [pc, #244]	@ (800191c <HAL_RCC_GetSysClockFreq+0x458>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	2200      	movs	r2, #0
 800182c:	4618      	mov	r0, r3
 800182e:	4611      	mov	r1, r2
 8001830:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001834:	653b      	str	r3, [r7, #80]	@ 0x50
 8001836:	2300      	movs	r3, #0
 8001838:	657b      	str	r3, [r7, #84]	@ 0x54
 800183a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800183e:	4642      	mov	r2, r8
 8001840:	464b      	mov	r3, r9
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f04f 0100 	mov.w	r1, #0
 800184a:	0159      	lsls	r1, r3, #5
 800184c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001850:	0150      	lsls	r0, r2, #5
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4641      	mov	r1, r8
 8001858:	1a51      	subs	r1, r2, r1
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	4649      	mov	r1, r9
 800185e:	eb63 0301 	sbc.w	r3, r3, r1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001870:	4659      	mov	r1, fp
 8001872:	018b      	lsls	r3, r1, #6
 8001874:	4651      	mov	r1, sl
 8001876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187a:	4651      	mov	r1, sl
 800187c:	018a      	lsls	r2, r1, #6
 800187e:	4651      	mov	r1, sl
 8001880:	1a54      	subs	r4, r2, r1
 8001882:	4659      	mov	r1, fp
 8001884:	eb63 0501 	sbc.w	r5, r3, r1
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	00eb      	lsls	r3, r5, #3
 8001892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001896:	00e2      	lsls	r2, r4, #3
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	4643      	mov	r3, r8
 800189e:	18e3      	adds	r3, r4, r3
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	464b      	mov	r3, r9
 80018a4:	eb45 0303 	adc.w	r3, r5, r3
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018b6:	4629      	mov	r1, r5
 80018b8:	028b      	lsls	r3, r1, #10
 80018ba:	4621      	mov	r1, r4
 80018bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c0:	4621      	mov	r1, r4
 80018c2:	028a      	lsls	r2, r1, #10
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018cc:	2200      	movs	r2, #0
 80018ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018d6:	f7fe fceb 	bl	80002b0 <__aeabi_uldivmod>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4613      	mov	r3, r2
 80018e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <HAL_RCC_GetSysClockFreq+0x458>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	0f1b      	lsrs	r3, r3, #28
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80018f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001902:	e003      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800190a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001910:	4618      	mov	r0, r3
 8001912:	37b8      	adds	r7, #184	@ 0xb8
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	00f42400 	.word	0x00f42400

08001924 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e28d      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8083 	beq.w	8001a4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001944:	4b94      	ldr	r3, [pc, #592]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b04      	cmp	r3, #4
 800194e:	d019      	beq.n	8001984 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001950:	4b91      	ldr	r3, [pc, #580]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
        || \
 8001958:	2b08      	cmp	r3, #8
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800195c:	4b8e      	ldr	r3, [pc, #568]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001968:	d00c      	beq.n	8001984 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d112      	bne.n	800199c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001976:	4b88      	ldr	r3, [pc, #544]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001982:	d10b      	bne.n	800199c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	4b84      	ldr	r3, [pc, #528]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d05b      	beq.n	8001a48 <HAL_RCC_OscConfig+0x124>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d157      	bne.n	8001a48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e25a      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a4:	d106      	bne.n	80019b4 <HAL_RCC_OscConfig+0x90>
 80019a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7b      	ldr	r2, [pc, #492]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e01d      	b.n	80019f0 <HAL_RCC_OscConfig+0xcc>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0xb4>
 80019be:	4b76      	ldr	r3, [pc, #472]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a75      	ldr	r2, [pc, #468]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b73      	ldr	r3, [pc, #460]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a72      	ldr	r2, [pc, #456]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e00b      	b.n	80019f0 <HAL_RCC_OscConfig+0xcc>
 80019d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a6e      	ldr	r2, [pc, #440]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6b      	ldr	r2, [pc, #428]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f962 	bl	8000cc0 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff f95e 	bl	8000cc0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	@ 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e21f      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b61      	ldr	r3, [pc, #388]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0xdc>
 8001a1e:	e014      	b.n	8001a4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f94e 	bl	8000cc0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff f94a 	bl	8000cc0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e20b      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	4b57      	ldr	r3, [pc, #348]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x104>
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d06f      	beq.n	8001b36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a56:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d017      	beq.n	8001a92 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a62:	4b4d      	ldr	r3, [pc, #308]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d105      	bne.n	8001a7a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7a:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d11c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a86:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d116      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_RCC_OscConfig+0x186>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1d3      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4937      	ldr	r1, [pc, #220]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	e03a      	b.n	8001b36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <HAL_RCC_OscConfig+0x278>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f8f7 	bl	8000cc0 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f8f3 	bl	8000cc0 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1b4      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4925      	ldr	r1, [pc, #148]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <HAL_RCC_OscConfig+0x278>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff f8d6 	bl	8000cc0 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff f8d2 	bl	8000cc0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e193      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d036      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f8b6 	bl	8000cc0 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff f8b2 	bl	8000cc0 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e173      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x234>
 8001b76:	e01b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f89f 	bl	8000cc0 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	e00e      	b.n	8001ba4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f89b 	bl	8000cc0 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d907      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e15c      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	42470000 	.word	0x42470000
 8001ba0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	4b8a      	ldr	r3, [pc, #552]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ea      	bne.n	8001b86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8097 	beq.w	8001cec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc2:	4b83      	ldr	r3, [pc, #524]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bea:	2301      	movs	r3, #1
 8001bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b79      	ldr	r3, [pc, #484]	@ (8001dd4 <HAL_RCC_OscConfig+0x4b0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d118      	bne.n	8001c2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	4b76      	ldr	r3, [pc, #472]	@ (8001dd4 <HAL_RCC_OscConfig+0x4b0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a75      	ldr	r2, [pc, #468]	@ (8001dd4 <HAL_RCC_OscConfig+0x4b0>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c06:	f7ff f85b 	bl	8000cc0 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0e:	f7ff f857 	bl	8000cc0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e118      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd4 <HAL_RCC_OscConfig+0x4b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x31e>
 8001c34:	4b66      	ldr	r3, [pc, #408]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c38:	4a65      	ldr	r2, [pc, #404]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c40:	e01c      	b.n	8001c7c <HAL_RCC_OscConfig+0x358>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x340>
 8001c4a:	4b61      	ldr	r3, [pc, #388]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4e:	4a60      	ldr	r2, [pc, #384]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c56:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5a:	4a5d      	ldr	r2, [pc, #372]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0x358>
 8001c64:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c68:	4a59      	ldr	r2, [pc, #356]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c70:	4b57      	ldr	r3, [pc, #348]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c74:	4a56      	ldr	r2, [pc, #344]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	f023 0304 	bic.w	r3, r3, #4
 8001c7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f81c 	bl	8000cc0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f818 	bl	8000cc0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e0d7      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ee      	beq.n	8001c8c <HAL_RCC_OscConfig+0x368>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff f806 	bl	8000cc0 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f802 	bl	8000cc0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e0c1      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cce:	4b40      	ldr	r3, [pc, #256]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ee      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80ad 	beq.w	8001e50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf6:	4b36      	ldr	r3, [pc, #216]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d060      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d145      	bne.n	8001d96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b33      	ldr	r3, [pc, #204]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7fe ffd6 	bl	8000cc0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7fe ffd2 	bl	8000cc0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e093      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	019b      	lsls	r3, r3, #6
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	071b      	lsls	r3, r3, #28
 8001d62:	491b      	ldr	r1, [pc, #108]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b4>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7fe ffa7 	bl	8000cc0 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7fe ffa3 	bl	8000cc0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e064      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x452>
 8001d94:	e05c      	b.n	8001e50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7fe ff90 	bl	8000cc0 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe ff8c 	bl	8000cc0 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e04d      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x480>
 8001dc2:	e045      	b.n	8001e50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e040      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <HAL_RCC_OscConfig+0x538>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d030      	beq.n	8001e4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d129      	bne.n	8001e4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d122      	bne.n	8001e4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d119      	bne.n	8001e4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d10f      	bne.n	8001e4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e041      	b.n	8001ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f839 	bl	8001efe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	f000 f9c0 	bl	8002224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d001      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e04e      	b.n	8001fca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d022      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x80>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f56:	d01d      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x80>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d018      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x80>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00e      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x80>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	@ (8001fec <HAL_TIM_Base_Start_IT+0xd8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d004      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d111      	bne.n	8001fb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d010      	beq.n	8001fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb6:	e007      	b.n	8001fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40000800 	.word	0x40000800
 8001fe4:	40000c00 	.word	0x40000c00
 8001fe8:	40010400 	.word	0x40010400
 8001fec:	40014000 	.word	0x40014000
 8001ff0:	40001800 	.word	0x40001800

08001ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d020      	beq.n	8002058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0202 	mvn.w	r2, #2
 8002028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8d2 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8c4 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8d5 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d020      	beq.n	80020a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0204 	mvn.w	r2, #4
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2202      	movs	r2, #2
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8ac 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f89e 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8af 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d020      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0208 	mvn.w	r2, #8
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f886 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f878 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f889 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d020      	beq.n	800213c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0210 	mvn.w	r2, #16
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2208      	movs	r2, #8
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f860 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f852 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f863 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0201 	mvn.w	r2, #1
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fb76 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00c      	beq.n	8002184 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f900 	bl	8002384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f834 	bl	8002210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0220 	mvn.w	r2, #32
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8d2 	bl	8002370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a43      	ldr	r2, [pc, #268]	@ (8002344 <TIM_Base_SetConfig+0x120>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d013      	beq.n	8002264 <TIM_Base_SetConfig+0x40>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002242:	d00f      	beq.n	8002264 <TIM_Base_SetConfig+0x40>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a40      	ldr	r2, [pc, #256]	@ (8002348 <TIM_Base_SetConfig+0x124>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00b      	beq.n	8002264 <TIM_Base_SetConfig+0x40>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3f      	ldr	r2, [pc, #252]	@ (800234c <TIM_Base_SetConfig+0x128>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d007      	beq.n	8002264 <TIM_Base_SetConfig+0x40>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3e      	ldr	r2, [pc, #248]	@ (8002350 <TIM_Base_SetConfig+0x12c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <TIM_Base_SetConfig+0x40>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3d      	ldr	r2, [pc, #244]	@ (8002354 <TIM_Base_SetConfig+0x130>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d108      	bne.n	8002276 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800226a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a32      	ldr	r2, [pc, #200]	@ (8002344 <TIM_Base_SetConfig+0x120>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02b      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002284:	d027      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a2f      	ldr	r2, [pc, #188]	@ (8002348 <TIM_Base_SetConfig+0x124>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d023      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a2e      	ldr	r2, [pc, #184]	@ (800234c <TIM_Base_SetConfig+0x128>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01f      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <TIM_Base_SetConfig+0x12c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01b      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002354 <TIM_Base_SetConfig+0x130>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d017      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002358 <TIM_Base_SetConfig+0x134>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a2a      	ldr	r2, [pc, #168]	@ (800235c <TIM_Base_SetConfig+0x138>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00f      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a29      	ldr	r2, [pc, #164]	@ (8002360 <TIM_Base_SetConfig+0x13c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00b      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a28      	ldr	r2, [pc, #160]	@ (8002364 <TIM_Base_SetConfig+0x140>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a27      	ldr	r2, [pc, #156]	@ (8002368 <TIM_Base_SetConfig+0x144>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d003      	beq.n	80022d6 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a26      	ldr	r2, [pc, #152]	@ (800236c <TIM_Base_SetConfig+0x148>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d108      	bne.n	80022e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0e      	ldr	r2, [pc, #56]	@ (8002344 <TIM_Base_SetConfig+0x120>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <TIM_Base_SetConfig+0xf2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <TIM_Base_SetConfig+0x130>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d103      	bne.n	800231e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800
 8002350:	40000c00 	.word	0x40000c00
 8002354:	40010400 	.word	0x40010400
 8002358:	40014000 	.word	0x40014000
 800235c:	40014400 	.word	0x40014400
 8002360:	40014800 	.word	0x40014800
 8002364:	40001800 	.word	0x40001800
 8002368:	40001c00 	.word	0x40001c00
 800236c:	40002000 	.word	0x40002000

08002370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e042      	b.n	8002430 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fa88 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	@ 0x24
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f973 	bl	80026c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	d175      	bne.n	8002544 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_UART_Transmit+0x2c>
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e06e      	b.n	8002546 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2221      	movs	r2, #33	@ 0x21
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002476:	f7fe fc23 	bl	8000cc0 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	88fa      	ldrh	r2, [r7, #6]
 8002486:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002490:	d108      	bne.n	80024a4 <HAL_UART_Transmit+0x6c>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d104      	bne.n	80024a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	e003      	b.n	80024ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024ac:	e02e      	b.n	800250c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f848 	bl	800254e <UART_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e03a      	b.n	8002546 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3302      	adds	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	e007      	b.n	80024fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	3301      	adds	r3, #1
 80024fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1cb      	bne.n	80024ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	2140      	movs	r1, #64	@ 0x40
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f814 	bl	800254e <UART_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e006      	b.n	8002546 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255e:	e03b      	b.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d037      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002568:	f7fe fbaa 	bl	8000cc0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	6a3a      	ldr	r2, [r7, #32]
 8002574:	429a      	cmp	r2, r3
 8002576:	d302      	bcc.n	800257e <UART_WaitOnFlagUntilTimeout+0x30>
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e03a      	b.n	80025f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d023      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b80      	cmp	r3, #128	@ 0x80
 8002594:	d020      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b40      	cmp	r3, #64	@ 0x40
 800259a:	d01d      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d116      	bne.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f81d 	bl	8002600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2208      	movs	r2, #8
 80025ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e00f      	b.n	80025f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	4013      	ands	r3, r2
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d0b4      	beq.n	8002560 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002600:	b480      	push	{r7}
 8002602:	b095      	sub	sp, #84	@ 0x54
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002612:	e853 3f00 	ldrex	r3, [r3]
 8002616:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800261e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002628:	643a      	str	r2, [r7, #64]	@ 0x40
 800262a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800262e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002630:	e841 2300 	strex	r3, r2, [r1]
 8002634:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e5      	bne.n	8002608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3314      	adds	r3, #20
 8002642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	e853 3f00 	ldrex	r3, [r3]
 800264a:	61fb      	str	r3, [r7, #28]
   return(result);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3314      	adds	r3, #20
 800265a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800265c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002664:	e841 2300 	strex	r3, r2, [r1]
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e5      	bne.n	800263c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	2b01      	cmp	r3, #1
 8002676:	d119      	bne.n	80026ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	e853 3f00 	ldrex	r3, [r3]
 8002686:	60bb      	str	r3, [r7, #8]
   return(result);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f023 0310 	bic.w	r3, r3, #16
 800268e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	330c      	adds	r3, #12
 8002696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002698:	61ba      	str	r2, [r7, #24]
 800269a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269c:	6979      	ldr	r1, [r7, #20]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	e841 2300 	strex	r3, r2, [r1]
 80026a4:	613b      	str	r3, [r7, #16]
   return(result);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e5      	bne.n	8002678 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026ba:	bf00      	nop
 80026bc:	3754      	adds	r7, #84	@ 0x54
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026cc:	b0c0      	sub	sp, #256	@ 0x100
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	ea40 0301 	orr.w	r3, r0, r1
 80026f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	431a      	orrs	r2, r3
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002720:	f021 010c 	bic.w	r1, r1, #12
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800272e:	430b      	orrs	r3, r1
 8002730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800273e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002742:	6999      	ldr	r1, [r3, #24]
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	ea40 0301 	orr.w	r3, r0, r1
 800274e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b8f      	ldr	r3, [pc, #572]	@ (8002994 <UART_SetConfig+0x2cc>)
 8002758:	429a      	cmp	r2, r3
 800275a:	d005      	beq.n	8002768 <UART_SetConfig+0xa0>
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b8d      	ldr	r3, [pc, #564]	@ (8002998 <UART_SetConfig+0x2d0>)
 8002764:	429a      	cmp	r2, r3
 8002766:	d104      	bne.n	8002772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002768:	f7fe fe66 	bl	8001438 <HAL_RCC_GetPCLK2Freq>
 800276c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002770:	e003      	b.n	800277a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002772:	f7fe fe4d 	bl	8001410 <HAL_RCC_GetPCLK1Freq>
 8002776:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002784:	f040 810c 	bne.w	80029a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002792:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800279a:	4622      	mov	r2, r4
 800279c:	462b      	mov	r3, r5
 800279e:	1891      	adds	r1, r2, r2
 80027a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027a2:	415b      	adcs	r3, r3
 80027a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027aa:	4621      	mov	r1, r4
 80027ac:	eb12 0801 	adds.w	r8, r2, r1
 80027b0:	4629      	mov	r1, r5
 80027b2:	eb43 0901 	adc.w	r9, r3, r1
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ca:	4690      	mov	r8, r2
 80027cc:	4699      	mov	r9, r3
 80027ce:	4623      	mov	r3, r4
 80027d0:	eb18 0303 	adds.w	r3, r8, r3
 80027d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027d8:	462b      	mov	r3, r5
 80027da:	eb49 0303 	adc.w	r3, r9, r3
 80027de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027f6:	460b      	mov	r3, r1
 80027f8:	18db      	adds	r3, r3, r3
 80027fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80027fc:	4613      	mov	r3, r2
 80027fe:	eb42 0303 	adc.w	r3, r2, r3
 8002802:	657b      	str	r3, [r7, #84]	@ 0x54
 8002804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800280c:	f7fd fd50 	bl	80002b0 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4b61      	ldr	r3, [pc, #388]	@ (800299c <UART_SetConfig+0x2d4>)
 8002816:	fba3 2302 	umull	r2, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	011c      	lsls	r4, r3, #4
 800281e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002822:	2200      	movs	r2, #0
 8002824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002828:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800282c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002830:	4642      	mov	r2, r8
 8002832:	464b      	mov	r3, r9
 8002834:	1891      	adds	r1, r2, r2
 8002836:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002838:	415b      	adcs	r3, r3
 800283a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800283c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002840:	4641      	mov	r1, r8
 8002842:	eb12 0a01 	adds.w	sl, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb43 0b01 	adc.w	fp, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800285c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002860:	4692      	mov	sl, r2
 8002862:	469b      	mov	fp, r3
 8002864:	4643      	mov	r3, r8
 8002866:	eb1a 0303 	adds.w	r3, sl, r3
 800286a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800286e:	464b      	mov	r3, r9
 8002870:	eb4b 0303 	adc.w	r3, fp, r3
 8002874:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002884:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800288c:	460b      	mov	r3, r1
 800288e:	18db      	adds	r3, r3, r3
 8002890:	643b      	str	r3, [r7, #64]	@ 0x40
 8002892:	4613      	mov	r3, r2
 8002894:	eb42 0303 	adc.w	r3, r2, r3
 8002898:	647b      	str	r3, [r7, #68]	@ 0x44
 800289a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800289e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028a2:	f7fd fd05 	bl	80002b0 <__aeabi_uldivmod>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <UART_SetConfig+0x2d4>)
 80028ae:	fba3 2301 	umull	r2, r3, r3, r1
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2264      	movs	r2, #100	@ 0x64
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	1acb      	subs	r3, r1, r3
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028c2:	4b36      	ldr	r3, [pc, #216]	@ (800299c <UART_SetConfig+0x2d4>)
 80028c4:	fba3 2302 	umull	r2, r3, r3, r2
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028d0:	441c      	add	r4, r3
 80028d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028e4:	4642      	mov	r2, r8
 80028e6:	464b      	mov	r3, r9
 80028e8:	1891      	adds	r1, r2, r2
 80028ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028ec:	415b      	adcs	r3, r3
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028f4:	4641      	mov	r1, r8
 80028f6:	1851      	adds	r1, r2, r1
 80028f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028fa:	4649      	mov	r1, r9
 80028fc:	414b      	adcs	r3, r1
 80028fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800290c:	4659      	mov	r1, fp
 800290e:	00cb      	lsls	r3, r1, #3
 8002910:	4651      	mov	r1, sl
 8002912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002916:	4651      	mov	r1, sl
 8002918:	00ca      	lsls	r2, r1, #3
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	4603      	mov	r3, r0
 8002920:	4642      	mov	r2, r8
 8002922:	189b      	adds	r3, r3, r2
 8002924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002928:	464b      	mov	r3, r9
 800292a:	460a      	mov	r2, r1
 800292c:	eb42 0303 	adc.w	r3, r2, r3
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002940:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002948:	460b      	mov	r3, r1
 800294a:	18db      	adds	r3, r3, r3
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800294e:	4613      	mov	r3, r2
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800295a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800295e:	f7fd fca7 	bl	80002b0 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <UART_SetConfig+0x2d4>)
 8002968:	fba3 1302 	umull	r1, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2164      	movs	r1, #100	@ 0x64
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	3332      	adds	r3, #50	@ 0x32
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <UART_SetConfig+0x2d4>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 0207 	and.w	r2, r3, #7
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4422      	add	r2, r4
 800298e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002990:	e106      	b.n	8002ba0 <UART_SetConfig+0x4d8>
 8002992:	bf00      	nop
 8002994:	40011000 	.word	0x40011000
 8002998:	40011400 	.word	0x40011400
 800299c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029b2:	4642      	mov	r2, r8
 80029b4:	464b      	mov	r3, r9
 80029b6:	1891      	adds	r1, r2, r2
 80029b8:	6239      	str	r1, [r7, #32]
 80029ba:	415b      	adcs	r3, r3
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029c2:	4641      	mov	r1, r8
 80029c4:	1854      	adds	r4, r2, r1
 80029c6:	4649      	mov	r1, r9
 80029c8:	eb43 0501 	adc.w	r5, r3, r1
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	00eb      	lsls	r3, r5, #3
 80029d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029da:	00e2      	lsls	r2, r4, #3
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	18e3      	adds	r3, r4, r3
 80029e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029e8:	464b      	mov	r3, r9
 80029ea:	eb45 0303 	adc.w	r3, r5, r3
 80029ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a0e:	4629      	mov	r1, r5
 8002a10:	008b      	lsls	r3, r1, #2
 8002a12:	4621      	mov	r1, r4
 8002a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a18:	4621      	mov	r1, r4
 8002a1a:	008a      	lsls	r2, r1, #2
 8002a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a20:	f7fd fc46 	bl	80002b0 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4b60      	ldr	r3, [pc, #384]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	011c      	lsls	r4, r3, #4
 8002a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a44:	4642      	mov	r2, r8
 8002a46:	464b      	mov	r3, r9
 8002a48:	1891      	adds	r1, r2, r2
 8002a4a:	61b9      	str	r1, [r7, #24]
 8002a4c:	415b      	adcs	r3, r3
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a54:	4641      	mov	r1, r8
 8002a56:	1851      	adds	r1, r2, r1
 8002a58:	6139      	str	r1, [r7, #16]
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	414b      	adcs	r3, r1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	00cb      	lsls	r3, r1, #3
 8002a70:	4651      	mov	r1, sl
 8002a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a76:	4651      	mov	r1, sl
 8002a78:	00ca      	lsls	r2, r1, #3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4642      	mov	r2, r8
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a88:	464b      	mov	r3, r9
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	eb42 0303 	adc.w	r3, r2, r3
 8002a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002aac:	4649      	mov	r1, r9
 8002aae:	008b      	lsls	r3, r1, #2
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	008a      	lsls	r2, r1, #2
 8002aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002abe:	f7fd fbf7 	bl	80002b0 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4b38      	ldr	r3, [pc, #224]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002aca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2264      	movs	r2, #100	@ 0x64
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	1acb      	subs	r3, r1, r3
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	3332      	adds	r3, #50	@ 0x32
 8002adc:	4a33      	ldr	r2, [pc, #204]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae8:	441c      	add	r4, r3
 8002aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aee:	2200      	movs	r2, #0
 8002af0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002af2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002af4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	1891      	adds	r1, r2, r2
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	415b      	adcs	r3, r3
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b08:	4641      	mov	r1, r8
 8002b0a:	1851      	adds	r1, r2, r1
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	4649      	mov	r1, r9
 8002b10:	414b      	adcs	r3, r1
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b20:	4659      	mov	r1, fp
 8002b22:	00cb      	lsls	r3, r1, #3
 8002b24:	4651      	mov	r1, sl
 8002b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	00ca      	lsls	r2, r1, #3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	4642      	mov	r2, r8
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	eb42 0303 	adc.w	r3, r2, r3
 8002b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	008b      	lsls	r3, r1, #2
 8002b60:	4641      	mov	r1, r8
 8002b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b66:	4641      	mov	r1, r8
 8002b68:	008a      	lsls	r2, r1, #2
 8002b6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b6e:	f7fd fb9f 	bl	80002b0 <__aeabi_uldivmod>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002b78:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	2164      	movs	r1, #100	@ 0x64
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	3332      	adds	r3, #50	@ 0x32
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	f003 020f 	and.w	r2, r3, #15
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4422      	add	r2, r4
 8002b9e:	609a      	str	r2, [r3, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bac:	51eb851f 	.word	0x51eb851f

08002bb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <SysTick_Handler+0x1c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bb8:	f001 fbe0 	bl	800437c <xTaskGetSchedulerState>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002bc2:	f002 f9d9 	bl	8004f78 <xPortSysTickHandler>
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a07      	ldr	r2, [pc, #28]	@ (8002bfc <vApplicationGetIdleTaskMemory+0x2c>)
 8002be0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4a06      	ldr	r2, [pc, #24]	@ (8002c00 <vApplicationGetIdleTaskMemory+0x30>)
 8002be6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2280      	movs	r2, #128	@ 0x80
 8002bec:	601a      	str	r2, [r3, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000134 	.word	0x20000134
 8002c00:	20000190 	.word	0x20000190

08002c04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4a06      	ldr	r2, [pc, #24]	@ (8002c34 <vApplicationGetTimerTaskMemory+0x30>)
 8002c1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c22:	601a      	str	r2, [r3, #0]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	20000390 	.word	0x20000390
 8002c34:	200003ec 	.word	0x200003ec

08002c38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f103 0208 	add.w	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f103 0208 	add.w	r2, r3, #8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f103 0208 	add.w	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d103      	bne.n	8002cfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e00c      	b.n	8002d14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e002      	b.n	8002d08 <vListInsert+0x2e>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d2f6      	bcs.n	8002d02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	601a      	str	r2, [r3, #0]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6892      	ldr	r2, [r2, #8]
 8002d62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6852      	ldr	r2, [r2, #4]
 8002d6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d103      	bne.n	8002d80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	1e5a      	subs	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dcc:	f002 f844 	bl	8004e58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	441a      	add	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	441a      	add	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	22ff      	movs	r2, #255	@ 0xff
 8002e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	22ff      	movs	r2, #255	@ 0xff
 8002e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d114      	bne.n	8002e4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01a      	beq.n	8002e60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f8e4 	bl	8003ffc <xTaskRemoveFromEventList>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <xQueueGenericReset+0xd0>)
 8002e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	e009      	b.n	8002e60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3310      	adds	r3, #16
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fef1 	bl	8002c38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3324      	adds	r3, #36	@ 0x24
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff feec 	bl	8002c38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e60:	f002 f82c 	bl	8004ebc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e64:	2301      	movs	r3, #1
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	e000ed04 	.word	0xe000ed04

08002e74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08e      	sub	sp, #56	@ 0x38
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10b      	bne.n	8002ebe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	e7fd      	b.n	8002eba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <xQueueGenericCreateStatic+0x56>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <xQueueGenericCreateStatic+0x5a>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericCreateStatic+0x5c>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	623b      	str	r3, [r7, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	bf00      	nop
 8002eea:	e7fd      	b.n	8002ee8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <xQueueGenericCreateStatic+0x84>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <xQueueGenericCreateStatic+0x88>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <xQueueGenericCreateStatic+0x8a>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	61fb      	str	r3, [r7, #28]
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f1a:	2350      	movs	r3, #80	@ 0x50
 8002f1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b50      	cmp	r3, #80	@ 0x50
 8002f22:	d00b      	beq.n	8002f3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	61bb      	str	r3, [r7, #24]
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f805 	bl	8002f6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3730      	adds	r7, #48	@ 0x30
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e002      	b.n	8002f90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	69b8      	ldr	r0, [r7, #24]
 8002fa0:	f7ff fefe 	bl	8002da0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08e      	sub	sp, #56	@ 0x38
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <xQueueGenericSend+0x34>
	__asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002fe2:	bf00      	nop
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <xQueueGenericSend+0x42>
 8002fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <xQueueGenericSend+0x46>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <xQueueGenericSend+0x48>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <xQueueGenericSend+0x64>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d103      	bne.n	8003026 <xQueueGenericSend+0x72>
 800301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <xQueueGenericSend+0x76>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <xQueueGenericSend+0x78>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <xQueueGenericSend+0x94>
	__asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	623b      	str	r3, [r7, #32]
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003048:	f001 f998 	bl	800437c <xTaskGetSchedulerState>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <xQueueGenericSend+0xa4>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <xQueueGenericSend+0xa8>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <xQueueGenericSend+0xaa>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <xQueueGenericSend+0xc6>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	61fb      	str	r3, [r7, #28]
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	e7fd      	b.n	8003076 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800307a:	f001 feed 	bl	8004e58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <xQueueGenericSend+0xdc>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d129      	bne.n	80030e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003096:	f000 fa0f 	bl	80034b8 <prvCopyDataToQueue>
 800309a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800309c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a6:	3324      	adds	r3, #36	@ 0x24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 ffa7 	bl	8003ffc <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030b4:	4b3f      	ldr	r3, [pc, #252]	@ (80031b4 <xQueueGenericSend+0x200>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	e00a      	b.n	80030dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030cc:	4b39      	ldr	r3, [pc, #228]	@ (80031b4 <xQueueGenericSend+0x200>)
 80030ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030dc:	f001 feee 	bl	8004ebc <vPortExitCritical>
				return pdPASS;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e063      	b.n	80031ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ea:	f001 fee7 	bl	8004ebc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e05c      	b.n	80031ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 ffe1 	bl	80040c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003102:	2301      	movs	r3, #1
 8003104:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003106:	f001 fed9 	bl	8004ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800310a:	f000 fd51 	bl	8003bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800310e:	f001 fea3 	bl	8004e58 <vPortEnterCritical>
 8003112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003114:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003118:	b25b      	sxtb	r3, r3
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d103      	bne.n	8003128 <xQueueGenericSend+0x174>
 8003120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800312e:	b25b      	sxtb	r3, r3
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d103      	bne.n	800313e <xQueueGenericSend+0x18a>
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800313e:	f001 febd 	bl	8004ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003142:	1d3a      	adds	r2, r7, #4
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ffd0 	bl	80040f0 <xTaskCheckForTimeOut>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d124      	bne.n	80031a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003156:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003158:	f000 faa6 	bl	80036a8 <prvIsQueueFull>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	3310      	adds	r3, #16
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fef4 	bl	8003f58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003170:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003172:	f000 fa31 	bl	80035d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003176:	f000 fd29 	bl	8003bcc <xTaskResumeAll>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	f47f af7c 	bne.w	800307a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <xQueueGenericSend+0x200>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	e772      	b.n	800307a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003196:	f000 fa1f 	bl	80035d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800319a:	f000 fd17 	bl	8003bcc <xTaskResumeAll>
 800319e:	e76c      	b.n	800307a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031a2:	f000 fa19 	bl	80035d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031a6:	f000 fd11 	bl	8003bcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3738      	adds	r7, #56	@ 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	e000ed04 	.word	0xe000ed04

080031b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b090      	sub	sp, #64	@ 0x40
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80031ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <xQueueGenericSendFromISR+0x3e>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <xQueueGenericSendFromISR+0x42>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <xQueueGenericSendFromISR+0x44>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10b      	bne.n	8003218 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d103      	bne.n	8003226 <xQueueGenericSendFromISR+0x6e>
 800321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <xQueueGenericSendFromISR+0x72>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <xQueueGenericSendFromISR+0x74>
 800322a:	2300      	movs	r3, #0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	623b      	str	r3, [r7, #32]
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003248:	f001 fee6 	bl	8005018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800324c:	f3ef 8211 	mrs	r2, BASEPRI
 8003250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	61fa      	str	r2, [r7, #28]
 8003262:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003264:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800326c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <xQueueGenericSendFromISR+0xc2>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d12f      	bne.n	80032da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003280:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003290:	f000 f912 	bl	80034b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003294:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d112      	bne.n	80032c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800329e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a8:	3324      	adds	r3, #36	@ 0x24
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fea6 	bl	8003ffc <xTaskRemoveFromEventList>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00e      	beq.n	80032d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032c8:	3301      	adds	r3, #1
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	b25a      	sxtb	r2, r3
 80032ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80032d4:	2301      	movs	r3, #1
 80032d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80032d8:	e001      	b.n	80032de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3740      	adds	r7, #64	@ 0x40
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	@ 0x30
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003300:	2300      	movs	r3, #0
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <xQueueReceive+0x32>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	623b      	str	r3, [r7, #32]
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	e7fd      	b.n	8003322 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <xQueueReceive+0x40>
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <xQueueReceive+0x44>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <xQueueReceive+0x46>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10b      	bne.n	8003356 <xQueueReceive+0x62>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	61fb      	str	r3, [r7, #28]
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	e7fd      	b.n	8003352 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003356:	f001 f811 	bl	800437c <xTaskGetSchedulerState>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <xQueueReceive+0x72>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <xQueueReceive+0x76>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <xQueueReceive+0x78>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <xQueueReceive+0x94>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	61bb      	str	r3, [r7, #24]
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003388:	f001 fd66 	bl	8004e58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01f      	beq.n	80033d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800339c:	f000 f8f6 	bl	800358c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	1e5a      	subs	r2, r3, #1
 80033a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00f      	beq.n	80033d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	3310      	adds	r3, #16
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fe21 	bl	8003ffc <xTaskRemoveFromEventList>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033c0:	4b3c      	ldr	r3, [pc, #240]	@ (80034b4 <xQueueReceive+0x1c0>)
 80033c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033d0:	f001 fd74 	bl	8004ebc <vPortExitCritical>
				return pdPASS;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e069      	b.n	80034ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033de:	f001 fd6d 	bl	8004ebc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e062      	b.n	80034ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033ec:	f107 0310 	add.w	r3, r7, #16
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fe67 	bl	80040c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033f6:	2301      	movs	r3, #1
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033fa:	f001 fd5f 	bl	8004ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033fe:	f000 fbd7 	bl	8003bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003402:	f001 fd29 	bl	8004e58 <vPortEnterCritical>
 8003406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003408:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800340c:	b25b      	sxtb	r3, r3
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d103      	bne.n	800341c <xQueueReceive+0x128>
 8003414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800341c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003422:	b25b      	sxtb	r3, r3
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d103      	bne.n	8003432 <xQueueReceive+0x13e>
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003432:	f001 fd43 	bl	8004ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003436:	1d3a      	adds	r2, r7, #4
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fe56 	bl	80040f0 <xTaskCheckForTimeOut>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d123      	bne.n	8003492 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800344a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800344c:	f000 f916 	bl	800367c <prvIsQueueEmpty>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d017      	beq.n	8003486 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003458:	3324      	adds	r3, #36	@ 0x24
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fd7a 	bl	8003f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003466:	f000 f8b7 	bl	80035d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800346a:	f000 fbaf 	bl	8003bcc <xTaskResumeAll>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d189      	bne.n	8003388 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003474:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <xQueueReceive+0x1c0>)
 8003476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	e780      	b.n	8003388 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003488:	f000 f8a6 	bl	80035d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800348c:	f000 fb9e 	bl	8003bcc <xTaskResumeAll>
 8003490:	e77a      	b.n	8003388 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003494:	f000 f8a0 	bl	80035d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003498:	f000 fb98 	bl	8003bcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800349c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800349e:	f000 f8ed 	bl	800367c <prvIsQueueEmpty>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f43f af6f 	beq.w	8003388 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3730      	adds	r7, #48	@ 0x30
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	e000ed04 	.word	0xe000ed04

080034b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d14d      	bne.n	800357a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 ff68 	bl	80043b8 <xTaskPriorityDisinherit>
 80034e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	e043      	b.n	800357a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d119      	bne.n	800352c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6858      	ldr	r0, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	461a      	mov	r2, r3
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	f002 f94b 	bl	800579e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	441a      	add	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	d32b      	bcc.n	800357a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	e026      	b.n	800357a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68d8      	ldr	r0, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	461a      	mov	r2, r3
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	f002 f931 	bl	800579e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	425b      	negs	r3, r3
 8003546:	441a      	add	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d207      	bcs.n	8003568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	425b      	negs	r3, r3
 8003562:	441a      	add	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d105      	bne.n	800357a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	3b01      	subs	r3, #1
 8003578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003582:	697b      	ldr	r3, [r7, #20]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d303      	bcc.n	80035c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68d9      	ldr	r1, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	461a      	mov	r2, r3
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	f002 f8e7 	bl	800579e <memcpy>
	}
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035e0:	f001 fc3a 	bl	8004e58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ec:	e011      	b.n	8003612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3324      	adds	r3, #36	@ 0x24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fcfe 	bl	8003ffc <xTaskRemoveFromEventList>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003606:	f000 fdd7 	bl	80041b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3b01      	subs	r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	dce9      	bgt.n	80035ee <prvUnlockQueue+0x16>
 800361a:	e000      	b.n	800361e <prvUnlockQueue+0x46>
					break;
 800361c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	22ff      	movs	r2, #255	@ 0xff
 8003622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003626:	f001 fc49 	bl	8004ebc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800362a:	f001 fc15 	bl	8004e58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003636:	e011      	b.n	800365c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3310      	adds	r3, #16
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fcd9 	bl	8003ffc <xTaskRemoveFromEventList>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003650:	f000 fdb2 	bl	80041b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003654:	7bbb      	ldrb	r3, [r7, #14]
 8003656:	3b01      	subs	r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800365c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003660:	2b00      	cmp	r3, #0
 8003662:	dce9      	bgt.n	8003638 <prvUnlockQueue+0x60>
 8003664:	e000      	b.n	8003668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	22ff      	movs	r2, #255	@ 0xff
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003670:	f001 fc24 	bl	8004ebc <vPortExitCritical>
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003684:	f001 fbe8 	bl	8004e58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e001      	b.n	800369a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800369a:	f001 fc0f 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 800369e:	68fb      	ldr	r3, [r7, #12]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036b0:	f001 fbd2 	bl	8004e58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	429a      	cmp	r2, r3
 80036be:	d102      	bne.n	80036c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e001      	b.n	80036ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036ca:	f001 fbf7 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e014      	b.n	8003712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003728 <vQueueAddToRegistry+0x50>)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036f4:	490c      	ldr	r1, [pc, #48]	@ (8003728 <vQueueAddToRegistry+0x50>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <vQueueAddToRegistry+0x50>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800370a:	e006      	b.n	800371a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b07      	cmp	r3, #7
 8003716:	d9e7      	bls.n	80036e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	200007ec 	.word	0x200007ec

0800372c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800373c:	f001 fb8c 	bl	8004e58 <vPortEnterCritical>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003746:	b25b      	sxtb	r3, r3
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d103      	bne.n	8003756 <vQueueWaitForMessageRestricted+0x2a>
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800375c:	b25b      	sxtb	r3, r3
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d103      	bne.n	800376c <vQueueWaitForMessageRestricted+0x40>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800376c:	f001 fba6 	bl	8004ebc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3324      	adds	r3, #36	@ 0x24
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fc0f 	bl	8003fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7ff ff26 	bl	80035d8 <prvUnlockQueue>
	}
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08e      	sub	sp, #56	@ 0x38
 8003798:	af04      	add	r7, sp, #16
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	623b      	str	r3, [r7, #32]
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	e7fd      	b.n	80037bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <xTaskCreateStatic+0x4a>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	61fb      	str	r3, [r7, #28]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037de:	235c      	movs	r3, #92	@ 0x5c
 80037e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80037e6:	d00b      	beq.n	8003800 <xTaskCreateStatic+0x6c>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	61bb      	str	r3, [r7, #24]
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003800:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01e      	beq.n	8003846 <xTaskCreateStatic+0xb2>
 8003808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01b      	beq.n	8003846 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003810:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003816:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003820:	2300      	movs	r3, #0
 8003822:	9303      	str	r3, [sp, #12]
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	9302      	str	r3, [sp, #8]
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f850 	bl	80038de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800383e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003840:	f000 f8de 	bl	8003a00 <prvAddNewTaskToReadyList>
 8003844:	e001      	b.n	800384a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800384a:	697b      	ldr	r3, [r7, #20]
	}
 800384c:	4618      	mov	r0, r3
 800384e:	3728      	adds	r7, #40	@ 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	@ 0x30
 8003858:	af04      	add	r7, sp, #16
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fc17 	bl	800509c <pvPortMalloc>
 800386e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00e      	beq.n	8003894 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003876:	205c      	movs	r0, #92	@ 0x5c
 8003878:	f001 fc10 	bl	800509c <pvPortMalloc>
 800387c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	631a      	str	r2, [r3, #48]	@ 0x30
 800388a:	e005      	b.n	8003898 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800388c:	6978      	ldr	r0, [r7, #20]
 800388e:	f001 fcd3 	bl	8005238 <vPortFree>
 8003892:	e001      	b.n	8003898 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d017      	beq.n	80038ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	2300      	movs	r3, #0
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	9302      	str	r3, [sp, #8]
 80038b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f80e 	bl	80038de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038c2:	69f8      	ldr	r0, [r7, #28]
 80038c4:	f000 f89c 	bl	8003a00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038c8:	2301      	movs	r3, #1
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e002      	b.n	80038d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038d4:	69bb      	ldr	r3, [r7, #24]
	}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b088      	sub	sp, #32
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	21a5      	movs	r1, #165	@ 0xa5
 80038f8:	f001 fed5 	bl	80056a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003906:	3b01      	subs	r3, #1
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f023 0307 	bic.w	r3, r3, #7
 8003914:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	617b      	str	r3, [r7, #20]
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01f      	beq.n	800397e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e012      	b.n	800396a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	7819      	ldrb	r1, [r3, #0]
 800394c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	3334      	adds	r3, #52	@ 0x34
 8003954:	460a      	mov	r2, r1
 8003956:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d9e9      	bls.n	8003944 <prvInitialiseNewTask+0x66>
 8003970:	e000      	b.n	8003974 <prvInitialiseNewTask+0x96>
			{
				break;
 8003972:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800397c:	e003      	b.n	8003986 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003988:	2b37      	cmp	r3, #55	@ 0x37
 800398a:	d901      	bls.n	8003990 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800398c:	2337      	movs	r3, #55	@ 0x37
 800398e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800399a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	2200      	movs	r2, #0
 80039a0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a4:	3304      	adds	r3, #4
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f966 	bl	8002c78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ae:	3318      	adds	r3, #24
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff f961 	bl	8002c78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	2200      	movs	r2, #0
 80039d0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	69b8      	ldr	r0, [r7, #24]
 80039e0:	f001 f908 	bl	8004bf4 <pxPortInitialiseStack>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039f6:	bf00      	nop
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a08:	f001 fa26 	bl	8004e58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac4 <prvAddNewTaskToReadyList+0xc4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac4 <prvAddNewTaskToReadyList+0xc4>)
 8003a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a16:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a24:	4b27      	ldr	r3, [pc, #156]	@ (8003ac4 <prvAddNewTaskToReadyList+0xc4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d110      	bne.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a2c:	f000 fbe8 	bl	8004200 <prvInitialiseTaskLists>
 8003a30:	e00d      	b.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a32:	4b26      	ldr	r3, [pc, #152]	@ (8003acc <prvAddNewTaskToReadyList+0xcc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a3a:	4b23      	ldr	r3, [pc, #140]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d802      	bhi.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a48:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ad0 <prvAddNewTaskToReadyList+0xd0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad0 <prvAddNewTaskToReadyList+0xd0>)
 8003a56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <prvAddNewTaskToReadyList+0xd0>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <prvAddNewTaskToReadyList+0xd4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d903      	bls.n	8003a74 <prvAddNewTaskToReadyList+0x74>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <prvAddNewTaskToReadyList+0xd4>)
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <prvAddNewTaskToReadyList+0xd8>)
 8003a82:	441a      	add	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f7ff f901 	bl	8002c92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a90:	f001 fa14 	bl	8004ebc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a94:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <prvAddNewTaskToReadyList+0xcc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d207      	bcs.n	8003aba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <prvAddNewTaskToReadyList+0xdc>)
 8003aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000d00 	.word	0x20000d00
 8003ac8:	2000082c 	.word	0x2000082c
 8003acc:	20000d0c 	.word	0x20000d0c
 8003ad0:	20000d1c 	.word	0x20000d1c
 8003ad4:	20000d08 	.word	0x20000d08
 8003ad8:	20000830 	.word	0x20000830
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	@ 0x28
 8003ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003aee:	463a      	mov	r2, r7
 8003af0:	1d39      	adds	r1, r7, #4
 8003af2:	f107 0308 	add.w	r3, r7, #8
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff f86a 	bl	8002bd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	9202      	str	r2, [sp, #8]
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	2300      	movs	r3, #0
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	4922      	ldr	r1, [pc, #136]	@ (8003b98 <vTaskStartScheduler+0xb8>)
 8003b10:	4822      	ldr	r0, [pc, #136]	@ (8003b9c <vTaskStartScheduler+0xbc>)
 8003b12:	f7ff fe3f 	bl	8003794 <xTaskCreateStatic>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a21      	ldr	r2, [pc, #132]	@ (8003ba0 <vTaskStartScheduler+0xc0>)
 8003b1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <vTaskStartScheduler+0xc0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b24:	2301      	movs	r3, #1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e001      	b.n	8003b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d102      	bne.n	8003b3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b34:	f000 fd04 	bl	8004540 <xTimerCreateTimerTask>
 8003b38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d116      	bne.n	8003b6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	613b      	str	r3, [r7, #16]
}
 8003b52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <vTaskStartScheduler+0xc4>)
 8003b56:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b5c:	4b12      	ldr	r3, [pc, #72]	@ (8003ba8 <vTaskStartScheduler+0xc8>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b62:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <vTaskStartScheduler+0xcc>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b68:	f001 f8d2 	bl	8004d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b6c:	e00f      	b.n	8003b8e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d10b      	bne.n	8003b8e <vTaskStartScheduler+0xae>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60fb      	str	r3, [r7, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	e7fd      	b.n	8003b8a <vTaskStartScheduler+0xaa>
}
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	08006378 	.word	0x08006378
 8003b9c:	080041d1 	.word	0x080041d1
 8003ba0:	20000d24 	.word	0x20000d24
 8003ba4:	20000d20 	.word	0x20000d20
 8003ba8:	20000d0c 	.word	0x20000d0c
 8003bac:	20000d04 	.word	0x20000d04

08003bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <vTaskSuspendAll+0x18>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	4a03      	ldr	r2, [pc, #12]	@ (8003bc8 <vTaskSuspendAll+0x18>)
 8003bbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	20000d28 	.word	0x20000d28

08003bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bda:	4b42      	ldr	r3, [pc, #264]	@ (8003ce4 <xTaskResumeAll+0x118>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <xTaskResumeAll+0x2e>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	603b      	str	r3, [r7, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	e7fd      	b.n	8003bf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bfa:	f001 f92d 	bl	8004e58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bfe:	4b39      	ldr	r3, [pc, #228]	@ (8003ce4 <xTaskResumeAll+0x118>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	4a37      	ldr	r2, [pc, #220]	@ (8003ce4 <xTaskResumeAll+0x118>)
 8003c06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c08:	4b36      	ldr	r3, [pc, #216]	@ (8003ce4 <xTaskResumeAll+0x118>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d162      	bne.n	8003cd6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c10:	4b35      	ldr	r3, [pc, #212]	@ (8003ce8 <xTaskResumeAll+0x11c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05e      	beq.n	8003cd6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c18:	e02f      	b.n	8003c7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1a:	4b34      	ldr	r3, [pc, #208]	@ (8003cec <xTaskResumeAll+0x120>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3318      	adds	r3, #24
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff f890 	bl	8002d4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff f88b 	bl	8002d4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <xTaskResumeAll+0x124>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d903      	bls.n	8003c4a <xTaskResumeAll+0x7e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf0 <xTaskResumeAll+0x124>)
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a27      	ldr	r2, [pc, #156]	@ (8003cf4 <xTaskResumeAll+0x128>)
 8003c58:	441a      	add	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7ff f816 	bl	8002c92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6a:	4b23      	ldr	r3, [pc, #140]	@ (8003cf8 <xTaskResumeAll+0x12c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d302      	bcc.n	8003c7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003c74:	4b21      	ldr	r3, [pc, #132]	@ (8003cfc <xTaskResumeAll+0x130>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <xTaskResumeAll+0x120>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1cb      	bne.n	8003c1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c88:	f000 fb58 	bl	800433c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <xTaskResumeAll+0x134>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d010      	beq.n	8003cba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c98:	f000 f846 	bl	8003d28 <xTaskIncrementTick>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ca2:	4b16      	ldr	r3, [pc, #88]	@ (8003cfc <xTaskResumeAll+0x130>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f1      	bne.n	8003c98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003cb4:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <xTaskResumeAll+0x134>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <xTaskResumeAll+0x130>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <xTaskResumeAll+0x138>)
 8003cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cd6:	f001 f8f1 	bl	8004ebc <vPortExitCritical>

	return xAlreadyYielded;
 8003cda:	68bb      	ldr	r3, [r7, #8]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000d28 	.word	0x20000d28
 8003ce8:	20000d00 	.word	0x20000d00
 8003cec:	20000cc0 	.word	0x20000cc0
 8003cf0:	20000d08 	.word	0x20000d08
 8003cf4:	20000830 	.word	0x20000830
 8003cf8:	2000082c 	.word	0x2000082c
 8003cfc:	20000d14 	.word	0x20000d14
 8003d00:	20000d10 	.word	0x20000d10
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d0e:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <xTaskGetTickCount+0x1c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d14:	687b      	ldr	r3, [r7, #4]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000d04 	.word	0x20000d04

08003d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d32:	4b4f      	ldr	r3, [pc, #316]	@ (8003e70 <xTaskIncrementTick+0x148>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 8090 	bne.w	8003e5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e74 <xTaskIncrementTick+0x14c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d44:	4a4b      	ldr	r2, [pc, #300]	@ (8003e74 <xTaskIncrementTick+0x14c>)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d121      	bne.n	8003d94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d50:	4b49      	ldr	r3, [pc, #292]	@ (8003e78 <xTaskIncrementTick+0x150>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	603b      	str	r3, [r7, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <xTaskIncrementTick+0x46>
 8003d72:	4b41      	ldr	r3, [pc, #260]	@ (8003e78 <xTaskIncrementTick+0x150>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <xTaskIncrementTick+0x154>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8003e78 <xTaskIncrementTick+0x150>)
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4a3e      	ldr	r2, [pc, #248]	@ (8003e7c <xTaskIncrementTick+0x154>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b3e      	ldr	r3, [pc, #248]	@ (8003e80 <xTaskIncrementTick+0x158>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e80 <xTaskIncrementTick+0x158>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	f000 fad4 	bl	800433c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d94:	4b3b      	ldr	r3, [pc, #236]	@ (8003e84 <xTaskIncrementTick+0x15c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d349      	bcc.n	8003e32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9e:	4b36      	ldr	r3, [pc, #216]	@ (8003e78 <xTaskIncrementTick+0x150>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da8:	4b36      	ldr	r3, [pc, #216]	@ (8003e84 <xTaskIncrementTick+0x15c>)
 8003daa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dae:	601a      	str	r2, [r3, #0]
					break;
 8003db0:	e03f      	b.n	8003e32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db2:	4b31      	ldr	r3, [pc, #196]	@ (8003e78 <xTaskIncrementTick+0x150>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d203      	bcs.n	8003dd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dca:	4a2e      	ldr	r2, [pc, #184]	@ (8003e84 <xTaskIncrementTick+0x15c>)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dd0:	e02f      	b.n	8003e32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe ffb8 	bl	8002d4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3318      	adds	r3, #24
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe ffaf 	bl	8002d4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df2:	4b25      	ldr	r3, [pc, #148]	@ (8003e88 <xTaskIncrementTick+0x160>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d903      	bls.n	8003e02 <xTaskIncrementTick+0xda>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <xTaskIncrementTick+0x160>)
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003e8c <xTaskIncrementTick+0x164>)
 8003e10:	441a      	add	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7fe ff3a 	bl	8002c92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e22:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <xTaskIncrementTick+0x168>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d3b8      	bcc.n	8003d9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e30:	e7b5      	b.n	8003d9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e32:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <xTaskIncrementTick+0x168>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e38:	4914      	ldr	r1, [pc, #80]	@ (8003e8c <xTaskIncrementTick+0x164>)
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d901      	bls.n	8003e4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e4e:	4b11      	ldr	r3, [pc, #68]	@ (8003e94 <xTaskIncrementTick+0x16c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003e56:	2301      	movs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e004      	b.n	8003e66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e98 <xTaskIncrementTick+0x170>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	4a0d      	ldr	r2, [pc, #52]	@ (8003e98 <xTaskIncrementTick+0x170>)
 8003e64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e66:	697b      	ldr	r3, [r7, #20]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000d28 	.word	0x20000d28
 8003e74:	20000d04 	.word	0x20000d04
 8003e78:	20000cb8 	.word	0x20000cb8
 8003e7c:	20000cbc 	.word	0x20000cbc
 8003e80:	20000d18 	.word	0x20000d18
 8003e84:	20000d20 	.word	0x20000d20
 8003e88:	20000d08 	.word	0x20000d08
 8003e8c:	20000830 	.word	0x20000830
 8003e90:	2000082c 	.word	0x2000082c
 8003e94:	20000d14 	.word	0x20000d14
 8003e98:	20000d10 	.word	0x20000d10

08003e9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ea2:	4b28      	ldr	r3, [pc, #160]	@ (8003f44 <vTaskSwitchContext+0xa8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eaa:	4b27      	ldr	r3, [pc, #156]	@ (8003f48 <vTaskSwitchContext+0xac>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003eb0:	e042      	b.n	8003f38 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003eb2:	4b25      	ldr	r3, [pc, #148]	@ (8003f48 <vTaskSwitchContext+0xac>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb8:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <vTaskSwitchContext+0xb0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e011      	b.n	8003ee4 <vTaskSwitchContext+0x48>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <vTaskSwitchContext+0x42>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	607b      	str	r3, [r7, #4]
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <vTaskSwitchContext+0x3e>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	491a      	ldr	r1, [pc, #104]	@ (8003f50 <vTaskSwitchContext+0xb4>)
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0e3      	beq.n	8003ec0 <vTaskSwitchContext+0x24>
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4a13      	ldr	r2, [pc, #76]	@ (8003f50 <vTaskSwitchContext+0xb4>)
 8003f04:	4413      	add	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3308      	adds	r3, #8
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d104      	bne.n	8003f28 <vTaskSwitchContext+0x8c>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <vTaskSwitchContext+0xb8>)
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4a06      	ldr	r2, [pc, #24]	@ (8003f4c <vTaskSwitchContext+0xb0>)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6013      	str	r3, [r2, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	20000d28 	.word	0x20000d28
 8003f48:	20000d14 	.word	0x20000d14
 8003f4c:	20000d08 	.word	0x20000d08
 8003f50:	20000830 	.word	0x20000830
 8003f54:	2000082c 	.word	0x2000082c

08003f58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	60fb      	str	r3, [r7, #12]
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f80:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <vTaskPlaceOnEventList+0x48>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3318      	adds	r3, #24
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fe fea6 	bl	8002cda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f8e:	2101      	movs	r1, #1
 8003f90:	6838      	ldr	r0, [r7, #0]
 8003f92:	f000 fa81 	bl	8004498 <prvAddCurrentTaskToDelayedList>
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2000082c 	.word	0x2000082c

08003fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10b      	bne.n	8003fce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	617b      	str	r3, [r7, #20]
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	e7fd      	b.n	8003fca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fce:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7fe fe5b 	bl	8002c92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	68b8      	ldr	r0, [r7, #8]
 8003fec:	f000 fa54 	bl	8004498 <prvAddCurrentTaskToDelayedList>
	}
 8003ff0:	bf00      	nop
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	2000082c 	.word	0x2000082c

08003ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60fb      	str	r3, [r7, #12]
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	e7fd      	b.n	8004026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	3318      	adds	r3, #24
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fe8c 	bl	8002d4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004034:	4b1d      	ldr	r3, [pc, #116]	@ (80040ac <xTaskRemoveFromEventList+0xb0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11d      	bne.n	8004078 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3304      	adds	r3, #4
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe fe83 	bl	8002d4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404a:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <xTaskRemoveFromEventList+0xb4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d903      	bls.n	800405a <xTaskRemoveFromEventList+0x5e>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <xTaskRemoveFromEventList+0xb4>)
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <xTaskRemoveFromEventList+0xb8>)
 8004068:	441a      	add	r2, r3
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f7fe fe0e 	bl	8002c92 <vListInsertEnd>
 8004076:	e005      	b.n	8004084 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	3318      	adds	r3, #24
 800407c:	4619      	mov	r1, r3
 800407e:	480e      	ldr	r0, [pc, #56]	@ (80040b8 <xTaskRemoveFromEventList+0xbc>)
 8004080:	f7fe fe07 	bl	8002c92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <xTaskRemoveFromEventList+0xc0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408e:	429a      	cmp	r2, r3
 8004090:	d905      	bls.n	800409e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004092:	2301      	movs	r3, #1
 8004094:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004096:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <xTaskRemoveFromEventList+0xc4>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e001      	b.n	80040a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040a2:	697b      	ldr	r3, [r7, #20]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000d28 	.word	0x20000d28
 80040b0:	20000d08 	.word	0x20000d08
 80040b4:	20000830 	.word	0x20000830
 80040b8:	20000cc0 	.word	0x20000cc0
 80040bc:	2000082c 	.word	0x2000082c
 80040c0:	20000d14 	.word	0x20000d14

080040c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <vTaskInternalSetTimeOutState+0x24>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040d4:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <vTaskInternalSetTimeOutState+0x28>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	605a      	str	r2, [r3, #4]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	20000d18 	.word	0x20000d18
 80040ec:	20000d04 	.word	0x20000d04

080040f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	613b      	str	r3, [r7, #16]
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	60fb      	str	r3, [r7, #12]
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	e7fd      	b.n	8004132 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004136:	f000 fe8f 	bl	8004e58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800413a:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <xTaskCheckForTimeOut+0xc0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d102      	bne.n	800415a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	e023      	b.n	80041a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <xTaskCheckForTimeOut+0xc4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d007      	beq.n	8004176 <xTaskCheckForTimeOut+0x86>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	e015      	b.n	80041a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	429a      	cmp	r2, r3
 800417e:	d20b      	bcs.n	8004198 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad2      	subs	r2, r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff99 	bl	80040c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e004      	b.n	80041a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800419e:	2301      	movs	r3, #1
 80041a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041a2:	f000 fe8b 	bl	8004ebc <vPortExitCritical>

	return xReturn;
 80041a6:	69fb      	ldr	r3, [r7, #28]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000d04 	.word	0x20000d04
 80041b4:	20000d18 	.word	0x20000d18

080041b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <vTaskMissedYield+0x14>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	20000d14 	.word	0x20000d14

080041d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041d8:	f000 f852 	bl	8004280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041dc:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <prvIdleTask+0x28>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d9f9      	bls.n	80041d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <prvIdleTask+0x2c>)
 80041e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041f4:	e7f0      	b.n	80041d8 <prvIdleTask+0x8>
 80041f6:	bf00      	nop
 80041f8:	20000830 	.word	0x20000830
 80041fc:	e000ed04 	.word	0xe000ed04

08004200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	e00c      	b.n	8004226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4a12      	ldr	r2, [pc, #72]	@ (8004260 <prvInitialiseTaskLists+0x60>)
 8004218:	4413      	add	r3, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe fd0c 	bl	8002c38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3301      	adds	r3, #1
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b37      	cmp	r3, #55	@ 0x37
 800422a:	d9ef      	bls.n	800420c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800422c:	480d      	ldr	r0, [pc, #52]	@ (8004264 <prvInitialiseTaskLists+0x64>)
 800422e:	f7fe fd03 	bl	8002c38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004232:	480d      	ldr	r0, [pc, #52]	@ (8004268 <prvInitialiseTaskLists+0x68>)
 8004234:	f7fe fd00 	bl	8002c38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004238:	480c      	ldr	r0, [pc, #48]	@ (800426c <prvInitialiseTaskLists+0x6c>)
 800423a:	f7fe fcfd 	bl	8002c38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800423e:	480c      	ldr	r0, [pc, #48]	@ (8004270 <prvInitialiseTaskLists+0x70>)
 8004240:	f7fe fcfa 	bl	8002c38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004244:	480b      	ldr	r0, [pc, #44]	@ (8004274 <prvInitialiseTaskLists+0x74>)
 8004246:	f7fe fcf7 	bl	8002c38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <prvInitialiseTaskLists+0x78>)
 800424c:	4a05      	ldr	r2, [pc, #20]	@ (8004264 <prvInitialiseTaskLists+0x64>)
 800424e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004250:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <prvInitialiseTaskLists+0x7c>)
 8004252:	4a05      	ldr	r2, [pc, #20]	@ (8004268 <prvInitialiseTaskLists+0x68>)
 8004254:	601a      	str	r2, [r3, #0]
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000830 	.word	0x20000830
 8004264:	20000c90 	.word	0x20000c90
 8004268:	20000ca4 	.word	0x20000ca4
 800426c:	20000cc0 	.word	0x20000cc0
 8004270:	20000cd4 	.word	0x20000cd4
 8004274:	20000cec 	.word	0x20000cec
 8004278:	20000cb8 	.word	0x20000cb8
 800427c:	20000cbc 	.word	0x20000cbc

08004280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004286:	e019      	b.n	80042bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004288:	f000 fde6 	bl	8004e58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800428c:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <prvCheckTasksWaitingTermination+0x50>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe fd57 	bl	8002d4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <prvCheckTasksWaitingTermination+0x54>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4a0b      	ldr	r2, [pc, #44]	@ (80042d4 <prvCheckTasksWaitingTermination+0x54>)
 80042a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <prvCheckTasksWaitingTermination+0x58>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	4a0a      	ldr	r2, [pc, #40]	@ (80042d8 <prvCheckTasksWaitingTermination+0x58>)
 80042b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042b2:	f000 fe03 	bl	8004ebc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f810 	bl	80042dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042bc:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <prvCheckTasksWaitingTermination+0x58>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e1      	bne.n	8004288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000cd4 	.word	0x20000cd4
 80042d4:	20000d00 	.word	0x20000d00
 80042d8:	20000ce8 	.word	0x20000ce8

080042dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d108      	bne.n	8004300 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 ffa0 	bl	8005238 <vPortFree>
				vPortFree( pxTCB );
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 ff9d 	bl	8005238 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042fe:	e019      	b.n	8004334 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004306:	2b01      	cmp	r3, #1
 8004308:	d103      	bne.n	8004312 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 ff94 	bl	8005238 <vPortFree>
	}
 8004310:	e010      	b.n	8004334 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004318:	2b02      	cmp	r3, #2
 800431a:	d00b      	beq.n	8004334 <prvDeleteTCB+0x58>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	60fb      	str	r3, [r7, #12]
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <prvDeleteTCB+0x54>
	}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <prvResetNextTaskUnblockTime+0x38>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800434c:	4b0a      	ldr	r3, [pc, #40]	@ (8004378 <prvResetNextTaskUnblockTime+0x3c>)
 800434e:	f04f 32ff 	mov.w	r2, #4294967295
 8004352:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004354:	e008      	b.n	8004368 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004356:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <prvResetNextTaskUnblockTime+0x38>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a04      	ldr	r2, [pc, #16]	@ (8004378 <prvResetNextTaskUnblockTime+0x3c>)
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	20000cb8 	.word	0x20000cb8
 8004378:	20000d20 	.word	0x20000d20

0800437c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004382:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <xTaskGetSchedulerState+0x34>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800438a:	2301      	movs	r3, #1
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	e008      	b.n	80043a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004390:	4b08      	ldr	r3, [pc, #32]	@ (80043b4 <xTaskGetSchedulerState+0x38>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004398:	2302      	movs	r3, #2
 800439a:	607b      	str	r3, [r7, #4]
 800439c:	e001      	b.n	80043a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043a2:	687b      	ldr	r3, [r7, #4]
	}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000d0c 	.word	0x20000d0c
 80043b4:	20000d28 	.word	0x20000d28

080043b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d058      	beq.n	8004480 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043ce:	4b2f      	ldr	r3, [pc, #188]	@ (800448c <xTaskPriorityDisinherit+0xd4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d00b      	beq.n	80043f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	60fb      	str	r3, [r7, #12]
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	e7fd      	b.n	80043ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	60bb      	str	r3, [r7, #8]
}
 800440a:	bf00      	nop
 800440c:	bf00      	nop
 800440e:	e7fd      	b.n	800440c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004422:	429a      	cmp	r2, r3
 8004424:	d02c      	beq.n	8004480 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442a:	2b00      	cmp	r3, #0
 800442c:	d128      	bne.n	8004480 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3304      	adds	r3, #4
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fc8a 	bl	8002d4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004450:	4b0f      	ldr	r3, [pc, #60]	@ (8004490 <xTaskPriorityDisinherit+0xd8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d903      	bls.n	8004460 <xTaskPriorityDisinherit+0xa8>
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	4a0c      	ldr	r2, [pc, #48]	@ (8004490 <xTaskPriorityDisinherit+0xd8>)
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4a09      	ldr	r2, [pc, #36]	@ (8004494 <xTaskPriorityDisinherit+0xdc>)
 800446e:	441a      	add	r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7fe fc0b 	bl	8002c92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004480:	697b      	ldr	r3, [r7, #20]
	}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	2000082c 	.word	0x2000082c
 8004490:	20000d08 	.word	0x20000d08
 8004494:	20000830 	.word	0x20000830

08004498 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044a2:	4b21      	ldr	r3, [pc, #132]	@ (8004528 <prvAddCurrentTaskToDelayedList+0x90>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a8:	4b20      	ldr	r3, [pc, #128]	@ (800452c <prvAddCurrentTaskToDelayedList+0x94>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fc4c 	bl	8002d4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d10a      	bne.n	80044d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044c2:	4b1a      	ldr	r3, [pc, #104]	@ (800452c <prvAddCurrentTaskToDelayedList+0x94>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4819      	ldr	r0, [pc, #100]	@ (8004530 <prvAddCurrentTaskToDelayedList+0x98>)
 80044cc:	f7fe fbe1 	bl	8002c92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044d0:	e026      	b.n	8004520 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044da:	4b14      	ldr	r3, [pc, #80]	@ (800452c <prvAddCurrentTaskToDelayedList+0x94>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d209      	bcs.n	80044fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ea:	4b12      	ldr	r3, [pc, #72]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x9c>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b0f      	ldr	r3, [pc, #60]	@ (800452c <prvAddCurrentTaskToDelayedList+0x94>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7fe fbef 	bl	8002cda <vListInsert>
}
 80044fc:	e010      	b.n	8004520 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004538 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <prvAddCurrentTaskToDelayedList+0x94>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3304      	adds	r3, #4
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f7fe fbe5 	bl	8002cda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d202      	bcs.n	8004520 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800451a:	4a08      	ldr	r2, [pc, #32]	@ (800453c <prvAddCurrentTaskToDelayedList+0xa4>)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000d04 	.word	0x20000d04
 800452c:	2000082c 	.word	0x2000082c
 8004530:	20000cec 	.word	0x20000cec
 8004534:	20000cbc 	.word	0x20000cbc
 8004538:	20000cb8 	.word	0x20000cb8
 800453c:	20000d20 	.word	0x20000d20

08004540 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	@ 0x28
 8004544:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800454a:	f000 fb13 	bl	8004b74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800454e:	4b1d      	ldr	r3, [pc, #116]	@ (80045c4 <xTimerCreateTimerTask+0x84>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d021      	beq.n	800459a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800455e:	1d3a      	adds	r2, r7, #4
 8004560:	f107 0108 	add.w	r1, r7, #8
 8004564:	f107 030c 	add.w	r3, r7, #12
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fb4b 	bl	8002c04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	9202      	str	r2, [sp, #8]
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	2302      	movs	r3, #2
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	460a      	mov	r2, r1
 8004580:	4911      	ldr	r1, [pc, #68]	@ (80045c8 <xTimerCreateTimerTask+0x88>)
 8004582:	4812      	ldr	r0, [pc, #72]	@ (80045cc <xTimerCreateTimerTask+0x8c>)
 8004584:	f7ff f906 	bl	8003794 <xTaskCreateStatic>
 8004588:	4603      	mov	r3, r0
 800458a:	4a11      	ldr	r2, [pc, #68]	@ (80045d0 <xTimerCreateTimerTask+0x90>)
 800458c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800458e:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <xTimerCreateTimerTask+0x90>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004596:	2301      	movs	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	613b      	str	r3, [r7, #16]
}
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045b8:	697b      	ldr	r3, [r7, #20]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000d5c 	.word	0x20000d5c
 80045c8:	08006380 	.word	0x08006380
 80045cc:	0800470d 	.word	0x0800470d
 80045d0:	20000d60 	.word	0x20000d60

080045d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <xTimerGenericCommand+0x30>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	623b      	str	r3, [r7, #32]
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004604:	4b19      	ldr	r3, [pc, #100]	@ (800466c <xTimerGenericCommand+0x98>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02a      	beq.n	8004662 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b05      	cmp	r3, #5
 800461c:	dc18      	bgt.n	8004650 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800461e:	f7ff fead 	bl	800437c <xTaskGetSchedulerState>
 8004622:	4603      	mov	r3, r0
 8004624:	2b02      	cmp	r3, #2
 8004626:	d109      	bne.n	800463c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004628:	4b10      	ldr	r3, [pc, #64]	@ (800466c <xTimerGenericCommand+0x98>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	f107 0110 	add.w	r1, r7, #16
 8004630:	2300      	movs	r3, #0
 8004632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004634:	f7fe fcbe 	bl	8002fb4 <xQueueGenericSend>
 8004638:	6278      	str	r0, [r7, #36]	@ 0x24
 800463a:	e012      	b.n	8004662 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800463c:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <xTimerGenericCommand+0x98>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f107 0110 	add.w	r1, r7, #16
 8004644:	2300      	movs	r3, #0
 8004646:	2200      	movs	r2, #0
 8004648:	f7fe fcb4 	bl	8002fb4 <xQueueGenericSend>
 800464c:	6278      	str	r0, [r7, #36]	@ 0x24
 800464e:	e008      	b.n	8004662 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <xTimerGenericCommand+0x98>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	f107 0110 	add.w	r1, r7, #16
 8004658:	2300      	movs	r3, #0
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	f7fe fdac 	bl	80031b8 <xQueueGenericSendFromISR>
 8004660:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004664:	4618      	mov	r0, r3
 8004666:	3728      	adds	r7, #40	@ 0x28
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000d5c 	.word	0x20000d5c

08004670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af02      	add	r7, sp, #8
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800467a:	4b23      	ldr	r3, [pc, #140]	@ (8004708 <prvProcessExpiredTimer+0x98>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3304      	adds	r3, #4
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe fb5f 	bl	8002d4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d023      	beq.n	80046e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	18d1      	adds	r1, r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	6978      	ldr	r0, [r7, #20]
 80046aa:	f000 f8d5 	bl	8004858 <prvInsertTimerInActiveList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046b4:	2300      	movs	r3, #0
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2300      	movs	r3, #0
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	2100      	movs	r1, #0
 80046be:	6978      	ldr	r0, [r7, #20]
 80046c0:	f7ff ff88 	bl	80045d4 <xTimerGenericCommand>
 80046c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d114      	bne.n	80046f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60fb      	str	r3, [r7, #12]
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	4798      	blx	r3
}
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000d54 	.word	0x20000d54

0800470c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	4618      	mov	r0, r3
 800471a:	f000 f859 	bl	80047d0 <prvGetNextExpireTime>
 800471e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4619      	mov	r1, r3
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f805 	bl	8004734 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800472a:	f000 f8d7 	bl	80048dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800472e:	bf00      	nop
 8004730:	e7f0      	b.n	8004714 <prvTimerTask+0x8>
	...

08004734 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800473e:	f7ff fa37 	bl	8003bb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004742:	f107 0308 	add.w	r3, r7, #8
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f866 	bl	8004818 <prvSampleTimeNow>
 800474c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d130      	bne.n	80047b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <prvProcessTimerOrBlockTask+0x3c>
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	429a      	cmp	r2, r3
 8004760:	d806      	bhi.n	8004770 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004762:	f7ff fa33 	bl	8003bcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff81 	bl	8004670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800476e:	e024      	b.n	80047ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004776:	4b13      	ldr	r3, [pc, #76]	@ (80047c4 <prvProcessTimerOrBlockTask+0x90>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <prvProcessTimerOrBlockTask+0x50>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <prvProcessTimerOrBlockTask+0x52>
 8004784:	2300      	movs	r3, #0
 8004786:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004788:	4b0f      	ldr	r3, [pc, #60]	@ (80047c8 <prvProcessTimerOrBlockTask+0x94>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4619      	mov	r1, r3
 8004796:	f7fe ffc9 	bl	800372c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800479a:	f7ff fa17 	bl	8003bcc <xTaskResumeAll>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047a4:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <prvProcessTimerOrBlockTask+0x98>)
 80047a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	f3bf 8f6f 	isb	sy
}
 80047b4:	e001      	b.n	80047ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047b6:	f7ff fa09 	bl	8003bcc <xTaskResumeAll>
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000d58 	.word	0x20000d58
 80047c8:	20000d5c 	.word	0x20000d5c
 80047cc:	e000ed04 	.word	0xe000ed04

080047d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <prvGetNextExpireTime+0x44>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <prvGetNextExpireTime+0x16>
 80047e2:	2201      	movs	r2, #1
 80047e4:	e000      	b.n	80047e8 <prvGetNextExpireTime+0x18>
 80047e6:	2200      	movs	r2, #0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047f4:	4b07      	ldr	r3, [pc, #28]	@ (8004814 <prvGetNextExpireTime+0x44>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	e001      	b.n	8004804 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004804:	68fb      	ldr	r3, [r7, #12]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000d54 	.word	0x20000d54

08004818 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004820:	f7ff fa72 	bl	8003d08 <xTaskGetTickCount>
 8004824:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <prvSampleTimeNow+0x3c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d205      	bcs.n	800483c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004830:	f000 f93a 	bl	8004aa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e002      	b.n	8004842 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004842:	4a04      	ldr	r2, [pc, #16]	@ (8004854 <prvSampleTimeNow+0x3c>)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004848:	68fb      	ldr	r3, [r7, #12]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000d64 	.word	0x20000d64

08004858 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d812      	bhi.n	80048a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	1ad2      	subs	r2, r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e01b      	b.n	80048ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004892:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <prvInsertTimerInActiveList+0x7c>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3304      	adds	r3, #4
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f7fe fa1c 	bl	8002cda <vListInsert>
 80048a2:	e012      	b.n	80048ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d206      	bcs.n	80048ba <prvInsertTimerInActiveList+0x62>
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d302      	bcc.n	80048ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e007      	b.n	80048ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ba:	4b07      	ldr	r3, [pc, #28]	@ (80048d8 <prvInsertTimerInActiveList+0x80>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe fa08 	bl	8002cda <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048ca:	697b      	ldr	r3, [r7, #20]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000d58 	.word	0x20000d58
 80048d8:	20000d54 	.word	0x20000d54

080048dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08e      	sub	sp, #56	@ 0x38
 80048e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048e2:	e0ce      	b.n	8004a82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da19      	bge.n	800491e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	3304      	adds	r3, #4
 80048ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80048f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	61fb      	str	r3, [r7, #28]
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	e7fd      	b.n	800490a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004914:	6850      	ldr	r0, [r2, #4]
 8004916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004918:	6892      	ldr	r2, [r2, #8]
 800491a:	4611      	mov	r1, r2
 800491c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f2c0 80ae 	blt.w	8004a82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800492a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fa08 	bl	8002d4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800493c:	463b      	mov	r3, r7
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ff6a 	bl	8004818 <prvSampleTimeNow>
 8004944:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b09      	cmp	r3, #9
 800494a:	f200 8097 	bhi.w	8004a7c <prvProcessReceivedCommands+0x1a0>
 800494e:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <prvProcessReceivedCommands+0x78>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	0800497d 	.word	0x0800497d
 8004958:	0800497d 	.word	0x0800497d
 800495c:	0800497d 	.word	0x0800497d
 8004960:	080049f3 	.word	0x080049f3
 8004964:	08004a07 	.word	0x08004a07
 8004968:	08004a53 	.word	0x08004a53
 800496c:	0800497d 	.word	0x0800497d
 8004970:	0800497d 	.word	0x0800497d
 8004974:	080049f3 	.word	0x080049f3
 8004978:	08004a07 	.word	0x08004a07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	b2da      	uxtb	r2, r3
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	18d1      	adds	r1, r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800499c:	f7ff ff5c 	bl	8004858 <prvInsertTimerInActiveList>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d06c      	beq.n	8004a80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d061      	beq.n	8004a80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	441a      	add	r2, r3
 80049c4:	2300      	movs	r3, #0
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	2300      	movs	r3, #0
 80049ca:	2100      	movs	r1, #0
 80049cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ce:	f7ff fe01 	bl	80045d4 <xTimerGenericCommand>
 80049d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d152      	bne.n	8004a80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	61bb      	str	r3, [r7, #24]
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a04:	e03d      	b.n	8004a82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	617b      	str	r3, [r7, #20]
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	e7fd      	b.n	8004a3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	18d1      	adds	r1, r2, r3
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a4c:	f7ff ff04 	bl	8004858 <prvInsertTimerInActiveList>
					break;
 8004a50:	e017      	b.n	8004a82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a62:	f000 fbe9 	bl	8005238 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a66:	e00c      	b.n	8004a82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a7a:	e002      	b.n	8004a82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004a7c:	bf00      	nop
 8004a7e:	e000      	b.n	8004a82 <prvProcessReceivedCommands+0x1a6>
					break;
 8004a80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a82:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <prvProcessReceivedCommands+0x1c8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1d39      	adds	r1, r7, #4
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fc32 	bl	80032f4 <xQueueReceive>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f47f af26 	bne.w	80048e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	3730      	adds	r7, #48	@ 0x30
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000d5c 	.word	0x20000d5c

08004aa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aae:	e049      	b.n	8004b44 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b6c <prvSwitchTimerLists+0xc4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aba:	4b2c      	ldr	r3, [pc, #176]	@ (8004b6c <prvSwitchTimerLists+0xc4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe f93f 	bl	8002d4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02f      	beq.n	8004b44 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d90e      	bls.n	8004b14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b02:	4b1a      	ldr	r3, [pc, #104]	@ (8004b6c <prvSwitchTimerLists+0xc4>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f7fe f8e4 	bl	8002cda <vListInsert>
 8004b12:	e017      	b.n	8004b44 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b14:	2300      	movs	r3, #0
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7ff fd58 	bl	80045d4 <xTimerGenericCommand>
 8004b24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	603b      	str	r3, [r7, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b44:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <prvSwitchTimerLists+0xc4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1b0      	bne.n	8004ab0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b4e:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <prvSwitchTimerLists+0xc4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <prvSwitchTimerLists+0xc8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <prvSwitchTimerLists+0xc4>)
 8004b5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b5c:	4a04      	ldr	r2, [pc, #16]	@ (8004b70 <prvSwitchTimerLists+0xc8>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6013      	str	r3, [r2, #0]
}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000d54 	.word	0x20000d54
 8004b70:	20000d58 	.word	0x20000d58

08004b74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b7a:	f000 f96d 	bl	8004e58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b7e:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d120      	bne.n	8004bc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b86:	4814      	ldr	r0, [pc, #80]	@ (8004bd8 <prvCheckForValidListAndQueue+0x64>)
 8004b88:	f7fe f856 	bl	8002c38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b8c:	4813      	ldr	r0, [pc, #76]	@ (8004bdc <prvCheckForValidListAndQueue+0x68>)
 8004b8e:	f7fe f853 	bl	8002c38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b92:	4b13      	ldr	r3, [pc, #76]	@ (8004be0 <prvCheckForValidListAndQueue+0x6c>)
 8004b94:	4a10      	ldr	r2, [pc, #64]	@ (8004bd8 <prvCheckForValidListAndQueue+0x64>)
 8004b96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <prvCheckForValidListAndQueue+0x70>)
 8004b9a:	4a10      	ldr	r2, [pc, #64]	@ (8004bdc <prvCheckForValidListAndQueue+0x68>)
 8004b9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <prvCheckForValidListAndQueue+0x74>)
 8004ba4:	4a11      	ldr	r2, [pc, #68]	@ (8004bec <prvCheckForValidListAndQueue+0x78>)
 8004ba6:	2110      	movs	r1, #16
 8004ba8:	200a      	movs	r0, #10
 8004baa:	f7fe f963 	bl	8002e74 <xQueueGenericCreateStatic>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4a08      	ldr	r2, [pc, #32]	@ (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bb4:	4b07      	ldr	r3, [pc, #28]	@ (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	490b      	ldr	r1, [pc, #44]	@ (8004bf0 <prvCheckForValidListAndQueue+0x7c>)
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe fd88 	bl	80036d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bc8:	f000 f978 	bl	8004ebc <vPortExitCritical>
}
 8004bcc:	bf00      	nop
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000d5c 	.word	0x20000d5c
 8004bd8:	20000d2c 	.word	0x20000d2c
 8004bdc:	20000d40 	.word	0x20000d40
 8004be0:	20000d54 	.word	0x20000d54
 8004be4:	20000d58 	.word	0x20000d58
 8004be8:	20000e08 	.word	0x20000e08
 8004bec:	20000d68 	.word	0x20000d68
 8004bf0:	08006388 	.word	0x08006388

08004bf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b04      	subs	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b04      	subs	r3, #4
 8004c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0201 	bic.w	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3b04      	subs	r3, #4
 8004c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c24:	4a0c      	ldr	r2, [pc, #48]	@ (8004c58 <pxPortInitialiseStack+0x64>)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3b14      	subs	r3, #20
 8004c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b04      	subs	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f06f 0202 	mvn.w	r2, #2
 8004c42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3b20      	subs	r3, #32
 8004c48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	08004c5d 	.word	0x08004c5d

08004c5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c66:	4b13      	ldr	r3, [pc, #76]	@ (8004cb4 <prvTaskExitError+0x58>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d00b      	beq.n	8004c88 <prvTaskExitError+0x2c>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <prvTaskExitError+0x28>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60bb      	str	r3, [r7, #8]
}
 8004c9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c9c:	bf00      	nop
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0fc      	beq.n	8004c9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	2000001c 	.word	0x2000001c
	...

08004cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cc0:	4b07      	ldr	r3, [pc, #28]	@ (8004ce0 <pxCurrentTCBConst2>)
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	6808      	ldr	r0, [r1, #0]
 8004cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cca:	f380 8809 	msr	PSP, r0
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f380 8811 	msr	BASEPRI, r0
 8004cda:	4770      	bx	lr
 8004cdc:	f3af 8000 	nop.w

08004ce0 <pxCurrentTCBConst2>:
 8004ce0:	2000082c 	.word	0x2000082c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ce8:	4808      	ldr	r0, [pc, #32]	@ (8004d0c <prvPortStartFirstTask+0x24>)
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	6800      	ldr	r0, [r0, #0]
 8004cee:	f380 8808 	msr	MSP, r0
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f380 8814 	msr	CONTROL, r0
 8004cfa:	b662      	cpsie	i
 8004cfc:	b661      	cpsie	f
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	df00      	svc	0
 8004d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed08 	.word	0xe000ed08

08004d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d16:	4b47      	ldr	r3, [pc, #284]	@ (8004e34 <xPortStartScheduler+0x124>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a47      	ldr	r2, [pc, #284]	@ (8004e38 <xPortStartScheduler+0x128>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10b      	bne.n	8004d38 <xPortStartScheduler+0x28>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	613b      	str	r3, [r7, #16]
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d38:	4b3e      	ldr	r3, [pc, #248]	@ (8004e34 <xPortStartScheduler+0x124>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e3c <xPortStartScheduler+0x12c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10b      	bne.n	8004d5a <xPortStartScheduler+0x4a>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60fb      	str	r3, [r7, #12]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d5a:	4b39      	ldr	r3, [pc, #228]	@ (8004e40 <xPortStartScheduler+0x130>)
 8004d5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	22ff      	movs	r2, #255	@ 0xff
 8004d6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b31      	ldr	r3, [pc, #196]	@ (8004e44 <xPortStartScheduler+0x134>)
 8004d80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d82:	4b31      	ldr	r3, [pc, #196]	@ (8004e48 <xPortStartScheduler+0x138>)
 8004d84:	2207      	movs	r2, #7
 8004d86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d88:	e009      	b.n	8004d9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e48 <xPortStartScheduler+0x138>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	4a2d      	ldr	r2, [pc, #180]	@ (8004e48 <xPortStartScheduler+0x138>)
 8004d92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da6:	2b80      	cmp	r3, #128	@ 0x80
 8004da8:	d0ef      	beq.n	8004d8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004daa:	4b27      	ldr	r3, [pc, #156]	@ (8004e48 <xPortStartScheduler+0x138>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1c3 0307 	rsb	r3, r3, #7
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d00b      	beq.n	8004dce <xPortStartScheduler+0xbe>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60bb      	str	r3, [r7, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dce:	4b1e      	ldr	r3, [pc, #120]	@ (8004e48 <xPortStartScheduler+0x138>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <xPortStartScheduler+0x138>)
 8004dd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <xPortStartScheduler+0x138>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004de0:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <xPortStartScheduler+0x138>)
 8004de2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004dec:	4b17      	ldr	r3, [pc, #92]	@ (8004e4c <xPortStartScheduler+0x13c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <xPortStartScheduler+0x13c>)
 8004df2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004df8:	4b14      	ldr	r3, [pc, #80]	@ (8004e4c <xPortStartScheduler+0x13c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a13      	ldr	r2, [pc, #76]	@ (8004e4c <xPortStartScheduler+0x13c>)
 8004dfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e04:	f000 f8da 	bl	8004fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e08:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <xPortStartScheduler+0x140>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e0e:	f000 f8f9 	bl	8005004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <xPortStartScheduler+0x144>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a0f      	ldr	r2, [pc, #60]	@ (8004e54 <xPortStartScheduler+0x144>)
 8004e18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e1e:	f7ff ff63 	bl	8004ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e22:	f7ff f83b 	bl	8003e9c <vTaskSwitchContext>
	prvTaskExitError();
 8004e26:	f7ff ff19 	bl	8004c5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	e000ed00 	.word	0xe000ed00
 8004e38:	410fc271 	.word	0x410fc271
 8004e3c:	410fc270 	.word	0x410fc270
 8004e40:	e000e400 	.word	0xe000e400
 8004e44:	20000e58 	.word	0x20000e58
 8004e48:	20000e5c 	.word	0x20000e5c
 8004e4c:	e000ed20 	.word	0xe000ed20
 8004e50:	2000001c 	.word	0x2000001c
 8004e54:	e000ef34 	.word	0xe000ef34

08004e58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e72:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <vPortEnterCritical+0x5c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3301      	adds	r3, #1
 8004e78:	4a0e      	ldr	r2, [pc, #56]	@ (8004eb4 <vPortEnterCritical+0x5c>)
 8004e7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb4 <vPortEnterCritical+0x5c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d110      	bne.n	8004ea6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e84:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb8 <vPortEnterCritical+0x60>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	603b      	str	r3, [r7, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <vPortEnterCritical+0x4a>
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	2000001c 	.word	0x2000001c
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ec2:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <vPortExitCritical+0x50>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <vPortExitCritical+0x26>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	e7fd      	b.n	8004ede <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <vPortExitCritical+0x50>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	4a08      	ldr	r2, [pc, #32]	@ (8004f0c <vPortExitCritical+0x50>)
 8004eea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004eec:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <vPortExitCritical+0x50>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <vPortExitCritical+0x44>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f383 8811 	msr	BASEPRI, r3
}
 8004efe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	2000001c 	.word	0x2000001c

08004f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f10:	f3ef 8009 	mrs	r0, PSP
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <pxCurrentTCBConst>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	f01e 0f10 	tst.w	lr, #16
 8004f20:	bf08      	it	eq
 8004f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2a:	6010      	str	r0, [r2, #0]
 8004f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f34:	f380 8811 	msr	BASEPRI, r0
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f7fe ffac 	bl	8003e9c <vTaskSwitchContext>
 8004f44:	f04f 0000 	mov.w	r0, #0
 8004f48:	f380 8811 	msr	BASEPRI, r0
 8004f4c:	bc09      	pop	{r0, r3}
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	6808      	ldr	r0, [r1, #0]
 8004f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f56:	f01e 0f10 	tst.w	lr, #16
 8004f5a:	bf08      	it	eq
 8004f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f60:	f380 8809 	msr	PSP, r0
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	f3af 8000 	nop.w

08004f70 <pxCurrentTCBConst>:
 8004f70:	2000082c 	.word	0x2000082c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop

08004f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
}
 8004f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f92:	f7fe fec9 	bl	8003d28 <xTaskIncrementTick>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <xPortSysTickHandler+0x40>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f383 8811 	msr	BASEPRI, r3
}
 8004fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <vPortSetupTimerInterrupt+0x34>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <vPortSetupTimerInterrupt+0x38>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <vPortSetupTimerInterrupt+0x3c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ffc <vPortSetupTimerInterrupt+0x40>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	099b      	lsrs	r3, r3, #6
 8004fd8:	4a09      	ldr	r2, [pc, #36]	@ (8005000 <vPortSetupTimerInterrupt+0x44>)
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fde:	4b04      	ldr	r3, [pc, #16]	@ (8004ff0 <vPortSetupTimerInterrupt+0x34>)
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	601a      	str	r2, [r3, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	e000e010 	.word	0xe000e010
 8004ff4:	e000e018 	.word	0xe000e018
 8004ff8:	20000010 	.word	0x20000010
 8004ffc:	10624dd3 	.word	0x10624dd3
 8005000:	e000e014 	.word	0xe000e014

08005004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005004:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005014 <vPortEnableVFP+0x10>
 8005008:	6801      	ldr	r1, [r0, #0]
 800500a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800500e:	6001      	str	r1, [r0, #0]
 8005010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005012:	bf00      	nop
 8005014:	e000ed88 	.word	0xe000ed88

08005018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800501e:	f3ef 8305 	mrs	r3, IPSR
 8005022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b0f      	cmp	r3, #15
 8005028:	d915      	bls.n	8005056 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800502a:	4a18      	ldr	r2, [pc, #96]	@ (800508c <vPortValidateInterruptPriority+0x74>)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005034:	4b16      	ldr	r3, [pc, #88]	@ (8005090 <vPortValidateInterruptPriority+0x78>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	7afa      	ldrb	r2, [r7, #11]
 800503a:	429a      	cmp	r2, r3
 800503c:	d20b      	bcs.n	8005056 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	e7fd      	b.n	8005052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005056:	4b0f      	ldr	r3, [pc, #60]	@ (8005094 <vPortValidateInterruptPriority+0x7c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800505e:	4b0e      	ldr	r3, [pc, #56]	@ (8005098 <vPortValidateInterruptPriority+0x80>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d90b      	bls.n	800507e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	603b      	str	r3, [r7, #0]
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	e7fd      	b.n	800507a <vPortValidateInterruptPriority+0x62>
	}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	e000e3f0 	.word	0xe000e3f0
 8005090:	20000e58 	.word	0x20000e58
 8005094:	e000ed0c 	.word	0xe000ed0c
 8005098:	20000e5c 	.word	0x20000e5c

0800509c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050a8:	f7fe fd82 	bl	8003bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005220 <pvPortMalloc+0x184>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050b4:	f000 f924 	bl	8005300 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005224 <pvPortMalloc+0x188>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f040 8095 	bne.w	80051f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01e      	beq.n	800510a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80050cc:	2208      	movs	r2, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d015      	beq.n	800510a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f023 0307 	bic.w	r3, r3, #7
 80050e4:	3308      	adds	r3, #8
 80050e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <pvPortMalloc+0x6e>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	617b      	str	r3, [r7, #20]
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d06f      	beq.n	80051f0 <pvPortMalloc+0x154>
 8005110:	4b45      	ldr	r3, [pc, #276]	@ (8005228 <pvPortMalloc+0x18c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d86a      	bhi.n	80051f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800511a:	4b44      	ldr	r3, [pc, #272]	@ (800522c <pvPortMalloc+0x190>)
 800511c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800511e:	4b43      	ldr	r3, [pc, #268]	@ (800522c <pvPortMalloc+0x190>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005124:	e004      	b.n	8005130 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d903      	bls.n	8005142 <pvPortMalloc+0xa6>
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f1      	bne.n	8005126 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005142:	4b37      	ldr	r3, [pc, #220]	@ (8005220 <pvPortMalloc+0x184>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005148:	429a      	cmp	r2, r3
 800514a:	d051      	beq.n	80051f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2208      	movs	r2, #8
 8005152:	4413      	add	r3, r2
 8005154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	1ad2      	subs	r2, r2, r3
 8005166:	2308      	movs	r3, #8
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	429a      	cmp	r2, r3
 800516c:	d920      	bls.n	80051b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800516e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <pvPortMalloc+0xfc>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	613b      	str	r3, [r7, #16]
}
 8005192:	bf00      	nop
 8005194:	bf00      	nop
 8005196:	e7fd      	b.n	8005194 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051aa:	69b8      	ldr	r0, [r7, #24]
 80051ac:	f000 f90a 	bl	80053c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <pvPortMalloc+0x18c>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <pvPortMalloc+0x18c>)
 80051bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051be:	4b1a      	ldr	r3, [pc, #104]	@ (8005228 <pvPortMalloc+0x18c>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005230 <pvPortMalloc+0x194>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d203      	bcs.n	80051d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051ca:	4b17      	ldr	r3, [pc, #92]	@ (8005228 <pvPortMalloc+0x18c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a18      	ldr	r2, [pc, #96]	@ (8005230 <pvPortMalloc+0x194>)
 80051d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <pvPortMalloc+0x188>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	431a      	orrs	r2, r3
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051e6:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <pvPortMalloc+0x198>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3301      	adds	r3, #1
 80051ec:	4a11      	ldr	r2, [pc, #68]	@ (8005234 <pvPortMalloc+0x198>)
 80051ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051f0:	f7fe fcec 	bl	8003bcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <pvPortMalloc+0x17a>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60fb      	str	r3, [r7, #12]
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	e7fd      	b.n	8005212 <pvPortMalloc+0x176>
	return pvReturn;
 8005216:	69fb      	ldr	r3, [r7, #28]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3728      	adds	r7, #40	@ 0x28
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20004a68 	.word	0x20004a68
 8005224:	20004a7c 	.word	0x20004a7c
 8005228:	20004a6c 	.word	0x20004a6c
 800522c:	20004a60 	.word	0x20004a60
 8005230:	20004a70 	.word	0x20004a70
 8005234:	20004a74 	.word	0x20004a74

08005238 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d04f      	beq.n	80052ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800524a:	2308      	movs	r3, #8
 800524c:	425b      	negs	r3, r3
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4413      	add	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4b25      	ldr	r3, [pc, #148]	@ (80052f4 <vPortFree+0xbc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <vPortFree+0x46>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60fb      	str	r3, [r7, #12]
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	e7fd      	b.n	800527a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <vPortFree+0x66>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	60bb      	str	r3, [r7, #8]
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	e7fd      	b.n	800529a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <vPortFree+0xbc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01e      	beq.n	80052ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d11a      	bne.n	80052ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	4b0e      	ldr	r3, [pc, #56]	@ (80052f4 <vPortFree+0xbc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	43db      	mvns	r3, r3
 80052be:	401a      	ands	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052c4:	f7fe fc74 	bl	8003bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <vPortFree+0xc0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4413      	add	r3, r2
 80052d2:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <vPortFree+0xc0>)
 80052d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052d6:	6938      	ldr	r0, [r7, #16]
 80052d8:	f000 f874 	bl	80053c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052dc:	4b07      	ldr	r3, [pc, #28]	@ (80052fc <vPortFree+0xc4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	4a06      	ldr	r2, [pc, #24]	@ (80052fc <vPortFree+0xc4>)
 80052e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052e6:	f7fe fc71 	bl	8003bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052ea:	bf00      	nop
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20004a7c 	.word	0x20004a7c
 80052f8:	20004a6c 	.word	0x20004a6c
 80052fc:	20004a78 	.word	0x20004a78

08005300 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005306:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800530a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800530c:	4b27      	ldr	r3, [pc, #156]	@ (80053ac <prvHeapInit+0xac>)
 800530e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3307      	adds	r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0307 	bic.w	r3, r3, #7
 8005326:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	4a1f      	ldr	r2, [pc, #124]	@ (80053ac <prvHeapInit+0xac>)
 8005330:	4413      	add	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005338:	4a1d      	ldr	r2, [pc, #116]	@ (80053b0 <prvHeapInit+0xb0>)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800533e:	4b1c      	ldr	r3, [pc, #112]	@ (80053b0 <prvHeapInit+0xb0>)
 8005340:	2200      	movs	r2, #0
 8005342:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4413      	add	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800534c:	2208      	movs	r2, #8
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0307 	bic.w	r3, r3, #7
 800535a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a15      	ldr	r2, [pc, #84]	@ (80053b4 <prvHeapInit+0xb4>)
 8005360:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005362:	4b14      	ldr	r3, [pc, #80]	@ (80053b4 <prvHeapInit+0xb4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2200      	movs	r2, #0
 8005368:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800536a:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <prvHeapInit+0xb4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	1ad2      	subs	r2, r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005380:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <prvHeapInit+0xb4>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4a0a      	ldr	r2, [pc, #40]	@ (80053b8 <prvHeapInit+0xb8>)
 800538e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4a09      	ldr	r2, [pc, #36]	@ (80053bc <prvHeapInit+0xbc>)
 8005396:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005398:	4b09      	ldr	r3, [pc, #36]	@ (80053c0 <prvHeapInit+0xc0>)
 800539a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800539e:	601a      	str	r2, [r3, #0]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	20000e60 	.word	0x20000e60
 80053b0:	20004a60 	.word	0x20004a60
 80053b4:	20004a68 	.word	0x20004a68
 80053b8:	20004a70 	.word	0x20004a70
 80053bc:	20004a6c 	.word	0x20004a6c
 80053c0:	20004a7c 	.word	0x20004a7c

080053c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053cc:	4b28      	ldr	r3, [pc, #160]	@ (8005470 <prvInsertBlockIntoFreeList+0xac>)
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e002      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x14>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d8f7      	bhi.n	80053d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4413      	add	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d108      	bne.n	8005406 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	441a      	add	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	441a      	add	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d118      	bne.n	800544c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <prvInsertBlockIntoFreeList+0xb0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d00d      	beq.n	8005442 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e008      	b.n	8005454 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005442:	4b0c      	ldr	r3, [pc, #48]	@ (8005474 <prvInsertBlockIntoFreeList+0xb0>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e003      	b.n	8005454 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d002      	beq.n	8005462 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20004a60 	.word	0x20004a60
 8005474:	20004a68 	.word	0x20004a68

08005478 <std>:
 8005478:	2300      	movs	r3, #0
 800547a:	b510      	push	{r4, lr}
 800547c:	4604      	mov	r4, r0
 800547e:	e9c0 3300 	strd	r3, r3, [r0]
 8005482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005486:	6083      	str	r3, [r0, #8]
 8005488:	8181      	strh	r1, [r0, #12]
 800548a:	6643      	str	r3, [r0, #100]	@ 0x64
 800548c:	81c2      	strh	r2, [r0, #14]
 800548e:	6183      	str	r3, [r0, #24]
 8005490:	4619      	mov	r1, r3
 8005492:	2208      	movs	r2, #8
 8005494:	305c      	adds	r0, #92	@ 0x5c
 8005496:	f000 f906 	bl	80056a6 <memset>
 800549a:	4b0d      	ldr	r3, [pc, #52]	@ (80054d0 <std+0x58>)
 800549c:	6263      	str	r3, [r4, #36]	@ 0x24
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <std+0x5c>)
 80054a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <std+0x60>)
 80054a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054a6:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <std+0x64>)
 80054a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80054aa:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <std+0x68>)
 80054ac:	6224      	str	r4, [r4, #32]
 80054ae:	429c      	cmp	r4, r3
 80054b0:	d006      	beq.n	80054c0 <std+0x48>
 80054b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054b6:	4294      	cmp	r4, r2
 80054b8:	d002      	beq.n	80054c0 <std+0x48>
 80054ba:	33d0      	adds	r3, #208	@ 0xd0
 80054bc:	429c      	cmp	r4, r3
 80054be:	d105      	bne.n	80054cc <std+0x54>
 80054c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c8:	f000 b966 	b.w	8005798 <__retarget_lock_init_recursive>
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	bf00      	nop
 80054d0:	08005621 	.word	0x08005621
 80054d4:	08005643 	.word	0x08005643
 80054d8:	0800567b 	.word	0x0800567b
 80054dc:	0800569f 	.word	0x0800569f
 80054e0:	20004a80 	.word	0x20004a80

080054e4 <stdio_exit_handler>:
 80054e4:	4a02      	ldr	r2, [pc, #8]	@ (80054f0 <stdio_exit_handler+0xc>)
 80054e6:	4903      	ldr	r1, [pc, #12]	@ (80054f4 <stdio_exit_handler+0x10>)
 80054e8:	4803      	ldr	r0, [pc, #12]	@ (80054f8 <stdio_exit_handler+0x14>)
 80054ea:	f000 b869 	b.w	80055c0 <_fwalk_sglue>
 80054ee:	bf00      	nop
 80054f0:	20000020 	.word	0x20000020
 80054f4:	08006055 	.word	0x08006055
 80054f8:	20000030 	.word	0x20000030

080054fc <cleanup_stdio>:
 80054fc:	6841      	ldr	r1, [r0, #4]
 80054fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005530 <cleanup_stdio+0x34>)
 8005500:	4299      	cmp	r1, r3
 8005502:	b510      	push	{r4, lr}
 8005504:	4604      	mov	r4, r0
 8005506:	d001      	beq.n	800550c <cleanup_stdio+0x10>
 8005508:	f000 fda4 	bl	8006054 <_fflush_r>
 800550c:	68a1      	ldr	r1, [r4, #8]
 800550e:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <cleanup_stdio+0x38>)
 8005510:	4299      	cmp	r1, r3
 8005512:	d002      	beq.n	800551a <cleanup_stdio+0x1e>
 8005514:	4620      	mov	r0, r4
 8005516:	f000 fd9d 	bl	8006054 <_fflush_r>
 800551a:	68e1      	ldr	r1, [r4, #12]
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <cleanup_stdio+0x3c>)
 800551e:	4299      	cmp	r1, r3
 8005520:	d004      	beq.n	800552c <cleanup_stdio+0x30>
 8005522:	4620      	mov	r0, r4
 8005524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005528:	f000 bd94 	b.w	8006054 <_fflush_r>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	bf00      	nop
 8005530:	20004a80 	.word	0x20004a80
 8005534:	20004ae8 	.word	0x20004ae8
 8005538:	20004b50 	.word	0x20004b50

0800553c <global_stdio_init.part.0>:
 800553c:	b510      	push	{r4, lr}
 800553e:	4b0b      	ldr	r3, [pc, #44]	@ (800556c <global_stdio_init.part.0+0x30>)
 8005540:	4c0b      	ldr	r4, [pc, #44]	@ (8005570 <global_stdio_init.part.0+0x34>)
 8005542:	4a0c      	ldr	r2, [pc, #48]	@ (8005574 <global_stdio_init.part.0+0x38>)
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	4620      	mov	r0, r4
 8005548:	2200      	movs	r2, #0
 800554a:	2104      	movs	r1, #4
 800554c:	f7ff ff94 	bl	8005478 <std>
 8005550:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005554:	2201      	movs	r2, #1
 8005556:	2109      	movs	r1, #9
 8005558:	f7ff ff8e 	bl	8005478 <std>
 800555c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005560:	2202      	movs	r2, #2
 8005562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005566:	2112      	movs	r1, #18
 8005568:	f7ff bf86 	b.w	8005478 <std>
 800556c:	20004bb8 	.word	0x20004bb8
 8005570:	20004a80 	.word	0x20004a80
 8005574:	080054e5 	.word	0x080054e5

08005578 <__sfp_lock_acquire>:
 8005578:	4801      	ldr	r0, [pc, #4]	@ (8005580 <__sfp_lock_acquire+0x8>)
 800557a:	f000 b90e 	b.w	800579a <__retarget_lock_acquire_recursive>
 800557e:	bf00      	nop
 8005580:	20004bc1 	.word	0x20004bc1

08005584 <__sfp_lock_release>:
 8005584:	4801      	ldr	r0, [pc, #4]	@ (800558c <__sfp_lock_release+0x8>)
 8005586:	f000 b909 	b.w	800579c <__retarget_lock_release_recursive>
 800558a:	bf00      	nop
 800558c:	20004bc1 	.word	0x20004bc1

08005590 <__sinit>:
 8005590:	b510      	push	{r4, lr}
 8005592:	4604      	mov	r4, r0
 8005594:	f7ff fff0 	bl	8005578 <__sfp_lock_acquire>
 8005598:	6a23      	ldr	r3, [r4, #32]
 800559a:	b11b      	cbz	r3, 80055a4 <__sinit+0x14>
 800559c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a0:	f7ff bff0 	b.w	8005584 <__sfp_lock_release>
 80055a4:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <__sinit+0x28>)
 80055a6:	6223      	str	r3, [r4, #32]
 80055a8:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <__sinit+0x2c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f5      	bne.n	800559c <__sinit+0xc>
 80055b0:	f7ff ffc4 	bl	800553c <global_stdio_init.part.0>
 80055b4:	e7f2      	b.n	800559c <__sinit+0xc>
 80055b6:	bf00      	nop
 80055b8:	080054fd 	.word	0x080054fd
 80055bc:	20004bb8 	.word	0x20004bb8

080055c0 <_fwalk_sglue>:
 80055c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c4:	4607      	mov	r7, r0
 80055c6:	4688      	mov	r8, r1
 80055c8:	4614      	mov	r4, r2
 80055ca:	2600      	movs	r6, #0
 80055cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055d0:	f1b9 0901 	subs.w	r9, r9, #1
 80055d4:	d505      	bpl.n	80055e2 <_fwalk_sglue+0x22>
 80055d6:	6824      	ldr	r4, [r4, #0]
 80055d8:	2c00      	cmp	r4, #0
 80055da:	d1f7      	bne.n	80055cc <_fwalk_sglue+0xc>
 80055dc:	4630      	mov	r0, r6
 80055de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d907      	bls.n	80055f8 <_fwalk_sglue+0x38>
 80055e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055ec:	3301      	adds	r3, #1
 80055ee:	d003      	beq.n	80055f8 <_fwalk_sglue+0x38>
 80055f0:	4629      	mov	r1, r5
 80055f2:	4638      	mov	r0, r7
 80055f4:	47c0      	blx	r8
 80055f6:	4306      	orrs	r6, r0
 80055f8:	3568      	adds	r5, #104	@ 0x68
 80055fa:	e7e9      	b.n	80055d0 <_fwalk_sglue+0x10>

080055fc <iprintf>:
 80055fc:	b40f      	push	{r0, r1, r2, r3}
 80055fe:	b507      	push	{r0, r1, r2, lr}
 8005600:	4906      	ldr	r1, [pc, #24]	@ (800561c <iprintf+0x20>)
 8005602:	ab04      	add	r3, sp, #16
 8005604:	6808      	ldr	r0, [r1, #0]
 8005606:	f853 2b04 	ldr.w	r2, [r3], #4
 800560a:	6881      	ldr	r1, [r0, #8]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	f000 f9f7 	bl	8005a00 <_vfiprintf_r>
 8005612:	b003      	add	sp, #12
 8005614:	f85d eb04 	ldr.w	lr, [sp], #4
 8005618:	b004      	add	sp, #16
 800561a:	4770      	bx	lr
 800561c:	2000002c 	.word	0x2000002c

08005620 <__sread>:
 8005620:	b510      	push	{r4, lr}
 8005622:	460c      	mov	r4, r1
 8005624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005628:	f000 f868 	bl	80056fc <_read_r>
 800562c:	2800      	cmp	r0, #0
 800562e:	bfab      	itete	ge
 8005630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005632:	89a3      	ldrhlt	r3, [r4, #12]
 8005634:	181b      	addge	r3, r3, r0
 8005636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800563a:	bfac      	ite	ge
 800563c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800563e:	81a3      	strhlt	r3, [r4, #12]
 8005640:	bd10      	pop	{r4, pc}

08005642 <__swrite>:
 8005642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005646:	461f      	mov	r7, r3
 8005648:	898b      	ldrh	r3, [r1, #12]
 800564a:	05db      	lsls	r3, r3, #23
 800564c:	4605      	mov	r5, r0
 800564e:	460c      	mov	r4, r1
 8005650:	4616      	mov	r6, r2
 8005652:	d505      	bpl.n	8005660 <__swrite+0x1e>
 8005654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005658:	2302      	movs	r3, #2
 800565a:	2200      	movs	r2, #0
 800565c:	f000 f83c 	bl	80056d8 <_lseek_r>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	4632      	mov	r2, r6
 800566e:	463b      	mov	r3, r7
 8005670:	4628      	mov	r0, r5
 8005672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005676:	f000 b853 	b.w	8005720 <_write_r>

0800567a <__sseek>:
 800567a:	b510      	push	{r4, lr}
 800567c:	460c      	mov	r4, r1
 800567e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005682:	f000 f829 	bl	80056d8 <_lseek_r>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	bf15      	itete	ne
 800568c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800568e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005696:	81a3      	strheq	r3, [r4, #12]
 8005698:	bf18      	it	ne
 800569a:	81a3      	strhne	r3, [r4, #12]
 800569c:	bd10      	pop	{r4, pc}

0800569e <__sclose>:
 800569e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a2:	f000 b809 	b.w	80056b8 <_close_r>

080056a6 <memset>:
 80056a6:	4402      	add	r2, r0
 80056a8:	4603      	mov	r3, r0
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d100      	bne.n	80056b0 <memset+0xa>
 80056ae:	4770      	bx	lr
 80056b0:	f803 1b01 	strb.w	r1, [r3], #1
 80056b4:	e7f9      	b.n	80056aa <memset+0x4>
	...

080056b8 <_close_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d06      	ldr	r5, [pc, #24]	@ (80056d4 <_close_r+0x1c>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fb fa1f 	bl	8000b06 <_close>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_close_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_close_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	20004bbc 	.word	0x20004bbc

080056d8 <_lseek_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4d07      	ldr	r5, [pc, #28]	@ (80056f8 <_lseek_r+0x20>)
 80056dc:	4604      	mov	r4, r0
 80056de:	4608      	mov	r0, r1
 80056e0:	4611      	mov	r1, r2
 80056e2:	2200      	movs	r2, #0
 80056e4:	602a      	str	r2, [r5, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f7fb fa34 	bl	8000b54 <_lseek>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_lseek_r+0x1e>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_lseek_r+0x1e>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	20004bbc 	.word	0x20004bbc

080056fc <_read_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4d07      	ldr	r5, [pc, #28]	@ (800571c <_read_r+0x20>)
 8005700:	4604      	mov	r4, r0
 8005702:	4608      	mov	r0, r1
 8005704:	4611      	mov	r1, r2
 8005706:	2200      	movs	r2, #0
 8005708:	602a      	str	r2, [r5, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	f7fb f9c2 	bl	8000a94 <_read>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_read_r+0x1e>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_read_r+0x1e>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	20004bbc 	.word	0x20004bbc

08005720 <_write_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4d07      	ldr	r5, [pc, #28]	@ (8005740 <_write_r+0x20>)
 8005724:	4604      	mov	r4, r0
 8005726:	4608      	mov	r0, r1
 8005728:	4611      	mov	r1, r2
 800572a:	2200      	movs	r2, #0
 800572c:	602a      	str	r2, [r5, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	f7fb f9cd 	bl	8000ace <_write>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_write_r+0x1e>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_write_r+0x1e>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20004bbc 	.word	0x20004bbc

08005744 <__errno>:
 8005744:	4b01      	ldr	r3, [pc, #4]	@ (800574c <__errno+0x8>)
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	2000002c 	.word	0x2000002c

08005750 <__libc_init_array>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	4d0d      	ldr	r5, [pc, #52]	@ (8005788 <__libc_init_array+0x38>)
 8005754:	4c0d      	ldr	r4, [pc, #52]	@ (800578c <__libc_init_array+0x3c>)
 8005756:	1b64      	subs	r4, r4, r5
 8005758:	10a4      	asrs	r4, r4, #2
 800575a:	2600      	movs	r6, #0
 800575c:	42a6      	cmp	r6, r4
 800575e:	d109      	bne.n	8005774 <__libc_init_array+0x24>
 8005760:	4d0b      	ldr	r5, [pc, #44]	@ (8005790 <__libc_init_array+0x40>)
 8005762:	4c0c      	ldr	r4, [pc, #48]	@ (8005794 <__libc_init_array+0x44>)
 8005764:	f000 fdc6 	bl	80062f4 <_init>
 8005768:	1b64      	subs	r4, r4, r5
 800576a:	10a4      	asrs	r4, r4, #2
 800576c:	2600      	movs	r6, #0
 800576e:	42a6      	cmp	r6, r4
 8005770:	d105      	bne.n	800577e <__libc_init_array+0x2e>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	f855 3b04 	ldr.w	r3, [r5], #4
 8005778:	4798      	blx	r3
 800577a:	3601      	adds	r6, #1
 800577c:	e7ee      	b.n	800575c <__libc_init_array+0xc>
 800577e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005782:	4798      	blx	r3
 8005784:	3601      	adds	r6, #1
 8005786:	e7f2      	b.n	800576e <__libc_init_array+0x1e>
 8005788:	080063e4 	.word	0x080063e4
 800578c:	080063e4 	.word	0x080063e4
 8005790:	080063e4 	.word	0x080063e4
 8005794:	080063e8 	.word	0x080063e8

08005798 <__retarget_lock_init_recursive>:
 8005798:	4770      	bx	lr

0800579a <__retarget_lock_acquire_recursive>:
 800579a:	4770      	bx	lr

0800579c <__retarget_lock_release_recursive>:
 800579c:	4770      	bx	lr

0800579e <memcpy>:
 800579e:	440a      	add	r2, r1
 80057a0:	4291      	cmp	r1, r2
 80057a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80057a6:	d100      	bne.n	80057aa <memcpy+0xc>
 80057a8:	4770      	bx	lr
 80057aa:	b510      	push	{r4, lr}
 80057ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057b4:	4291      	cmp	r1, r2
 80057b6:	d1f9      	bne.n	80057ac <memcpy+0xe>
 80057b8:	bd10      	pop	{r4, pc}
	...

080057bc <_free_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4605      	mov	r5, r0
 80057c0:	2900      	cmp	r1, #0
 80057c2:	d041      	beq.n	8005848 <_free_r+0x8c>
 80057c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c8:	1f0c      	subs	r4, r1, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfb8      	it	lt
 80057ce:	18e4      	addlt	r4, r4, r3
 80057d0:	f000 f8e0 	bl	8005994 <__malloc_lock>
 80057d4:	4a1d      	ldr	r2, [pc, #116]	@ (800584c <_free_r+0x90>)
 80057d6:	6813      	ldr	r3, [r2, #0]
 80057d8:	b933      	cbnz	r3, 80057e8 <_free_r+0x2c>
 80057da:	6063      	str	r3, [r4, #4]
 80057dc:	6014      	str	r4, [r2, #0]
 80057de:	4628      	mov	r0, r5
 80057e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057e4:	f000 b8dc 	b.w	80059a0 <__malloc_unlock>
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d908      	bls.n	80057fe <_free_r+0x42>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	1821      	adds	r1, r4, r0
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf01      	itttt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	1809      	addeq	r1, r1, r0
 80057fa:	6021      	streq	r1, [r4, #0]
 80057fc:	e7ed      	b.n	80057da <_free_r+0x1e>
 80057fe:	461a      	mov	r2, r3
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b10b      	cbz	r3, 8005808 <_free_r+0x4c>
 8005804:	42a3      	cmp	r3, r4
 8005806:	d9fa      	bls.n	80057fe <_free_r+0x42>
 8005808:	6811      	ldr	r1, [r2, #0]
 800580a:	1850      	adds	r0, r2, r1
 800580c:	42a0      	cmp	r0, r4
 800580e:	d10b      	bne.n	8005828 <_free_r+0x6c>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	4401      	add	r1, r0
 8005814:	1850      	adds	r0, r2, r1
 8005816:	4283      	cmp	r3, r0
 8005818:	6011      	str	r1, [r2, #0]
 800581a:	d1e0      	bne.n	80057de <_free_r+0x22>
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	6053      	str	r3, [r2, #4]
 8005822:	4408      	add	r0, r1
 8005824:	6010      	str	r0, [r2, #0]
 8005826:	e7da      	b.n	80057de <_free_r+0x22>
 8005828:	d902      	bls.n	8005830 <_free_r+0x74>
 800582a:	230c      	movs	r3, #12
 800582c:	602b      	str	r3, [r5, #0]
 800582e:	e7d6      	b.n	80057de <_free_r+0x22>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	1821      	adds	r1, r4, r0
 8005834:	428b      	cmp	r3, r1
 8005836:	bf04      	itt	eq
 8005838:	6819      	ldreq	r1, [r3, #0]
 800583a:	685b      	ldreq	r3, [r3, #4]
 800583c:	6063      	str	r3, [r4, #4]
 800583e:	bf04      	itt	eq
 8005840:	1809      	addeq	r1, r1, r0
 8005842:	6021      	streq	r1, [r4, #0]
 8005844:	6054      	str	r4, [r2, #4]
 8005846:	e7ca      	b.n	80057de <_free_r+0x22>
 8005848:	bd38      	pop	{r3, r4, r5, pc}
 800584a:	bf00      	nop
 800584c:	20004bc8 	.word	0x20004bc8

08005850 <sbrk_aligned>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4e0f      	ldr	r6, [pc, #60]	@ (8005890 <sbrk_aligned+0x40>)
 8005854:	460c      	mov	r4, r1
 8005856:	6831      	ldr	r1, [r6, #0]
 8005858:	4605      	mov	r5, r0
 800585a:	b911      	cbnz	r1, 8005862 <sbrk_aligned+0x12>
 800585c:	f000 fcb6 	bl	80061cc <_sbrk_r>
 8005860:	6030      	str	r0, [r6, #0]
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	f000 fcb1 	bl	80061cc <_sbrk_r>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	d103      	bne.n	8005876 <sbrk_aligned+0x26>
 800586e:	f04f 34ff 	mov.w	r4, #4294967295
 8005872:	4620      	mov	r0, r4
 8005874:	bd70      	pop	{r4, r5, r6, pc}
 8005876:	1cc4      	adds	r4, r0, #3
 8005878:	f024 0403 	bic.w	r4, r4, #3
 800587c:	42a0      	cmp	r0, r4
 800587e:	d0f8      	beq.n	8005872 <sbrk_aligned+0x22>
 8005880:	1a21      	subs	r1, r4, r0
 8005882:	4628      	mov	r0, r5
 8005884:	f000 fca2 	bl	80061cc <_sbrk_r>
 8005888:	3001      	adds	r0, #1
 800588a:	d1f2      	bne.n	8005872 <sbrk_aligned+0x22>
 800588c:	e7ef      	b.n	800586e <sbrk_aligned+0x1e>
 800588e:	bf00      	nop
 8005890:	20004bc4 	.word	0x20004bc4

08005894 <_malloc_r>:
 8005894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005898:	1ccd      	adds	r5, r1, #3
 800589a:	f025 0503 	bic.w	r5, r5, #3
 800589e:	3508      	adds	r5, #8
 80058a0:	2d0c      	cmp	r5, #12
 80058a2:	bf38      	it	cc
 80058a4:	250c      	movcc	r5, #12
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	4606      	mov	r6, r0
 80058aa:	db01      	blt.n	80058b0 <_malloc_r+0x1c>
 80058ac:	42a9      	cmp	r1, r5
 80058ae:	d904      	bls.n	80058ba <_malloc_r+0x26>
 80058b0:	230c      	movs	r3, #12
 80058b2:	6033      	str	r3, [r6, #0]
 80058b4:	2000      	movs	r0, #0
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005990 <_malloc_r+0xfc>
 80058be:	f000 f869 	bl	8005994 <__malloc_lock>
 80058c2:	f8d8 3000 	ldr.w	r3, [r8]
 80058c6:	461c      	mov	r4, r3
 80058c8:	bb44      	cbnz	r4, 800591c <_malloc_r+0x88>
 80058ca:	4629      	mov	r1, r5
 80058cc:	4630      	mov	r0, r6
 80058ce:	f7ff ffbf 	bl	8005850 <sbrk_aligned>
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	4604      	mov	r4, r0
 80058d6:	d158      	bne.n	800598a <_malloc_r+0xf6>
 80058d8:	f8d8 4000 	ldr.w	r4, [r8]
 80058dc:	4627      	mov	r7, r4
 80058de:	2f00      	cmp	r7, #0
 80058e0:	d143      	bne.n	800596a <_malloc_r+0xd6>
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	d04b      	beq.n	800597e <_malloc_r+0xea>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	4639      	mov	r1, r7
 80058ea:	4630      	mov	r0, r6
 80058ec:	eb04 0903 	add.w	r9, r4, r3
 80058f0:	f000 fc6c 	bl	80061cc <_sbrk_r>
 80058f4:	4581      	cmp	r9, r0
 80058f6:	d142      	bne.n	800597e <_malloc_r+0xea>
 80058f8:	6821      	ldr	r1, [r4, #0]
 80058fa:	1a6d      	subs	r5, r5, r1
 80058fc:	4629      	mov	r1, r5
 80058fe:	4630      	mov	r0, r6
 8005900:	f7ff ffa6 	bl	8005850 <sbrk_aligned>
 8005904:	3001      	adds	r0, #1
 8005906:	d03a      	beq.n	800597e <_malloc_r+0xea>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	442b      	add	r3, r5
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	f8d8 3000 	ldr.w	r3, [r8]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	bb62      	cbnz	r2, 8005970 <_malloc_r+0xdc>
 8005916:	f8c8 7000 	str.w	r7, [r8]
 800591a:	e00f      	b.n	800593c <_malloc_r+0xa8>
 800591c:	6822      	ldr	r2, [r4, #0]
 800591e:	1b52      	subs	r2, r2, r5
 8005920:	d420      	bmi.n	8005964 <_malloc_r+0xd0>
 8005922:	2a0b      	cmp	r2, #11
 8005924:	d917      	bls.n	8005956 <_malloc_r+0xc2>
 8005926:	1961      	adds	r1, r4, r5
 8005928:	42a3      	cmp	r3, r4
 800592a:	6025      	str	r5, [r4, #0]
 800592c:	bf18      	it	ne
 800592e:	6059      	strne	r1, [r3, #4]
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	bf08      	it	eq
 8005934:	f8c8 1000 	streq.w	r1, [r8]
 8005938:	5162      	str	r2, [r4, r5]
 800593a:	604b      	str	r3, [r1, #4]
 800593c:	4630      	mov	r0, r6
 800593e:	f000 f82f 	bl	80059a0 <__malloc_unlock>
 8005942:	f104 000b 	add.w	r0, r4, #11
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	f020 0007 	bic.w	r0, r0, #7
 800594c:	1ac2      	subs	r2, r0, r3
 800594e:	bf1c      	itt	ne
 8005950:	1a1b      	subne	r3, r3, r0
 8005952:	50a3      	strne	r3, [r4, r2]
 8005954:	e7af      	b.n	80058b6 <_malloc_r+0x22>
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	42a3      	cmp	r3, r4
 800595a:	bf0c      	ite	eq
 800595c:	f8c8 2000 	streq.w	r2, [r8]
 8005960:	605a      	strne	r2, [r3, #4]
 8005962:	e7eb      	b.n	800593c <_malloc_r+0xa8>
 8005964:	4623      	mov	r3, r4
 8005966:	6864      	ldr	r4, [r4, #4]
 8005968:	e7ae      	b.n	80058c8 <_malloc_r+0x34>
 800596a:	463c      	mov	r4, r7
 800596c:	687f      	ldr	r7, [r7, #4]
 800596e:	e7b6      	b.n	80058de <_malloc_r+0x4a>
 8005970:	461a      	mov	r2, r3
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	42a3      	cmp	r3, r4
 8005976:	d1fb      	bne.n	8005970 <_malloc_r+0xdc>
 8005978:	2300      	movs	r3, #0
 800597a:	6053      	str	r3, [r2, #4]
 800597c:	e7de      	b.n	800593c <_malloc_r+0xa8>
 800597e:	230c      	movs	r3, #12
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	4630      	mov	r0, r6
 8005984:	f000 f80c 	bl	80059a0 <__malloc_unlock>
 8005988:	e794      	b.n	80058b4 <_malloc_r+0x20>
 800598a:	6005      	str	r5, [r0, #0]
 800598c:	e7d6      	b.n	800593c <_malloc_r+0xa8>
 800598e:	bf00      	nop
 8005990:	20004bc8 	.word	0x20004bc8

08005994 <__malloc_lock>:
 8005994:	4801      	ldr	r0, [pc, #4]	@ (800599c <__malloc_lock+0x8>)
 8005996:	f7ff bf00 	b.w	800579a <__retarget_lock_acquire_recursive>
 800599a:	bf00      	nop
 800599c:	20004bc0 	.word	0x20004bc0

080059a0 <__malloc_unlock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	@ (80059a8 <__malloc_unlock+0x8>)
 80059a2:	f7ff befb 	b.w	800579c <__retarget_lock_release_recursive>
 80059a6:	bf00      	nop
 80059a8:	20004bc0 	.word	0x20004bc0

080059ac <__sfputc_r>:
 80059ac:	6893      	ldr	r3, [r2, #8]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	b410      	push	{r4}
 80059b4:	6093      	str	r3, [r2, #8]
 80059b6:	da08      	bge.n	80059ca <__sfputc_r+0x1e>
 80059b8:	6994      	ldr	r4, [r2, #24]
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	db01      	blt.n	80059c2 <__sfputc_r+0x16>
 80059be:	290a      	cmp	r1, #10
 80059c0:	d103      	bne.n	80059ca <__sfputc_r+0x1e>
 80059c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059c6:	f000 bb6d 	b.w	80060a4 <__swbuf_r>
 80059ca:	6813      	ldr	r3, [r2, #0]
 80059cc:	1c58      	adds	r0, r3, #1
 80059ce:	6010      	str	r0, [r2, #0]
 80059d0:	7019      	strb	r1, [r3, #0]
 80059d2:	4608      	mov	r0, r1
 80059d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059d8:	4770      	bx	lr

080059da <__sfputs_r>:
 80059da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059dc:	4606      	mov	r6, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	4614      	mov	r4, r2
 80059e2:	18d5      	adds	r5, r2, r3
 80059e4:	42ac      	cmp	r4, r5
 80059e6:	d101      	bne.n	80059ec <__sfputs_r+0x12>
 80059e8:	2000      	movs	r0, #0
 80059ea:	e007      	b.n	80059fc <__sfputs_r+0x22>
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	463a      	mov	r2, r7
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7ff ffda 	bl	80059ac <__sfputc_r>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d1f3      	bne.n	80059e4 <__sfputs_r+0xa>
 80059fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a00 <_vfiprintf_r>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	460d      	mov	r5, r1
 8005a06:	b09d      	sub	sp, #116	@ 0x74
 8005a08:	4614      	mov	r4, r2
 8005a0a:	4698      	mov	r8, r3
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	b118      	cbz	r0, 8005a18 <_vfiprintf_r+0x18>
 8005a10:	6a03      	ldr	r3, [r0, #32]
 8005a12:	b90b      	cbnz	r3, 8005a18 <_vfiprintf_r+0x18>
 8005a14:	f7ff fdbc 	bl	8005590 <__sinit>
 8005a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a1a:	07d9      	lsls	r1, r3, #31
 8005a1c:	d405      	bmi.n	8005a2a <_vfiprintf_r+0x2a>
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	059a      	lsls	r2, r3, #22
 8005a22:	d402      	bmi.n	8005a2a <_vfiprintf_r+0x2a>
 8005a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a26:	f7ff feb8 	bl	800579a <__retarget_lock_acquire_recursive>
 8005a2a:	89ab      	ldrh	r3, [r5, #12]
 8005a2c:	071b      	lsls	r3, r3, #28
 8005a2e:	d501      	bpl.n	8005a34 <_vfiprintf_r+0x34>
 8005a30:	692b      	ldr	r3, [r5, #16]
 8005a32:	b99b      	cbnz	r3, 8005a5c <_vfiprintf_r+0x5c>
 8005a34:	4629      	mov	r1, r5
 8005a36:	4630      	mov	r0, r6
 8005a38:	f000 fb72 	bl	8006120 <__swsetup_r>
 8005a3c:	b170      	cbz	r0, 8005a5c <_vfiprintf_r+0x5c>
 8005a3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a40:	07dc      	lsls	r4, r3, #31
 8005a42:	d504      	bpl.n	8005a4e <_vfiprintf_r+0x4e>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	b01d      	add	sp, #116	@ 0x74
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	0598      	lsls	r0, r3, #22
 8005a52:	d4f7      	bmi.n	8005a44 <_vfiprintf_r+0x44>
 8005a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a56:	f7ff fea1 	bl	800579c <__retarget_lock_release_recursive>
 8005a5a:	e7f3      	b.n	8005a44 <_vfiprintf_r+0x44>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a60:	2320      	movs	r3, #32
 8005a62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a6a:	2330      	movs	r3, #48	@ 0x30
 8005a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c1c <_vfiprintf_r+0x21c>
 8005a70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a74:	f04f 0901 	mov.w	r9, #1
 8005a78:	4623      	mov	r3, r4
 8005a7a:	469a      	mov	sl, r3
 8005a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a80:	b10a      	cbz	r2, 8005a86 <_vfiprintf_r+0x86>
 8005a82:	2a25      	cmp	r2, #37	@ 0x25
 8005a84:	d1f9      	bne.n	8005a7a <_vfiprintf_r+0x7a>
 8005a86:	ebba 0b04 	subs.w	fp, sl, r4
 8005a8a:	d00b      	beq.n	8005aa4 <_vfiprintf_r+0xa4>
 8005a8c:	465b      	mov	r3, fp
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ffa1 	bl	80059da <__sfputs_r>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	f000 80a7 	beq.w	8005bec <_vfiprintf_r+0x1ec>
 8005a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aa0:	445a      	add	r2, fp
 8005aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 809f 	beq.w	8005bec <_vfiprintf_r+0x1ec>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ab8:	f10a 0a01 	add.w	sl, sl, #1
 8005abc:	9304      	str	r3, [sp, #16]
 8005abe:	9307      	str	r3, [sp, #28]
 8005ac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ac4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ac6:	4654      	mov	r4, sl
 8005ac8:	2205      	movs	r2, #5
 8005aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ace:	4853      	ldr	r0, [pc, #332]	@ (8005c1c <_vfiprintf_r+0x21c>)
 8005ad0:	f7fa fb9e 	bl	8000210 <memchr>
 8005ad4:	9a04      	ldr	r2, [sp, #16]
 8005ad6:	b9d8      	cbnz	r0, 8005b10 <_vfiprintf_r+0x110>
 8005ad8:	06d1      	lsls	r1, r2, #27
 8005ada:	bf44      	itt	mi
 8005adc:	2320      	movmi	r3, #32
 8005ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ae2:	0713      	lsls	r3, r2, #28
 8005ae4:	bf44      	itt	mi
 8005ae6:	232b      	movmi	r3, #43	@ 0x2b
 8005ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aec:	f89a 3000 	ldrb.w	r3, [sl]
 8005af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af2:	d015      	beq.n	8005b20 <_vfiprintf_r+0x120>
 8005af4:	9a07      	ldr	r2, [sp, #28]
 8005af6:	4654      	mov	r4, sl
 8005af8:	2000      	movs	r0, #0
 8005afa:	f04f 0c0a 	mov.w	ip, #10
 8005afe:	4621      	mov	r1, r4
 8005b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b04:	3b30      	subs	r3, #48	@ 0x30
 8005b06:	2b09      	cmp	r3, #9
 8005b08:	d94b      	bls.n	8005ba2 <_vfiprintf_r+0x1a2>
 8005b0a:	b1b0      	cbz	r0, 8005b3a <_vfiprintf_r+0x13a>
 8005b0c:	9207      	str	r2, [sp, #28]
 8005b0e:	e014      	b.n	8005b3a <_vfiprintf_r+0x13a>
 8005b10:	eba0 0308 	sub.w	r3, r0, r8
 8005b14:	fa09 f303 	lsl.w	r3, r9, r3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	46a2      	mov	sl, r4
 8005b1e:	e7d2      	b.n	8005ac6 <_vfiprintf_r+0xc6>
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	1d19      	adds	r1, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	9103      	str	r1, [sp, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bfbb      	ittet	lt
 8005b2c:	425b      	neglt	r3, r3
 8005b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b32:	9307      	strge	r3, [sp, #28]
 8005b34:	9307      	strlt	r3, [sp, #28]
 8005b36:	bfb8      	it	lt
 8005b38:	9204      	strlt	r2, [sp, #16]
 8005b3a:	7823      	ldrb	r3, [r4, #0]
 8005b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b3e:	d10a      	bne.n	8005b56 <_vfiprintf_r+0x156>
 8005b40:	7863      	ldrb	r3, [r4, #1]
 8005b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b44:	d132      	bne.n	8005bac <_vfiprintf_r+0x1ac>
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	9203      	str	r2, [sp, #12]
 8005b4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b52:	3402      	adds	r4, #2
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c2c <_vfiprintf_r+0x22c>
 8005b5a:	7821      	ldrb	r1, [r4, #0]
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	4650      	mov	r0, sl
 8005b60:	f7fa fb56 	bl	8000210 <memchr>
 8005b64:	b138      	cbz	r0, 8005b76 <_vfiprintf_r+0x176>
 8005b66:	9b04      	ldr	r3, [sp, #16]
 8005b68:	eba0 000a 	sub.w	r0, r0, sl
 8005b6c:	2240      	movs	r2, #64	@ 0x40
 8005b6e:	4082      	lsls	r2, r0
 8005b70:	4313      	orrs	r3, r2
 8005b72:	3401      	adds	r4, #1
 8005b74:	9304      	str	r3, [sp, #16]
 8005b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7a:	4829      	ldr	r0, [pc, #164]	@ (8005c20 <_vfiprintf_r+0x220>)
 8005b7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b80:	2206      	movs	r2, #6
 8005b82:	f7fa fb45 	bl	8000210 <memchr>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d03f      	beq.n	8005c0a <_vfiprintf_r+0x20a>
 8005b8a:	4b26      	ldr	r3, [pc, #152]	@ (8005c24 <_vfiprintf_r+0x224>)
 8005b8c:	bb1b      	cbnz	r3, 8005bd6 <_vfiprintf_r+0x1d6>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	3307      	adds	r3, #7
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	3308      	adds	r3, #8
 8005b98:	9303      	str	r3, [sp, #12]
 8005b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9c:	443b      	add	r3, r7
 8005b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba0:	e76a      	b.n	8005a78 <_vfiprintf_r+0x78>
 8005ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	2001      	movs	r0, #1
 8005baa:	e7a8      	b.n	8005afe <_vfiprintf_r+0xfe>
 8005bac:	2300      	movs	r3, #0
 8005bae:	3401      	adds	r4, #1
 8005bb0:	9305      	str	r3, [sp, #20]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f04f 0c0a 	mov.w	ip, #10
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bbe:	3a30      	subs	r2, #48	@ 0x30
 8005bc0:	2a09      	cmp	r2, #9
 8005bc2:	d903      	bls.n	8005bcc <_vfiprintf_r+0x1cc>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0c6      	beq.n	8005b56 <_vfiprintf_r+0x156>
 8005bc8:	9105      	str	r1, [sp, #20]
 8005bca:	e7c4      	b.n	8005b56 <_vfiprintf_r+0x156>
 8005bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e7f0      	b.n	8005bb8 <_vfiprintf_r+0x1b8>
 8005bd6:	ab03      	add	r3, sp, #12
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	462a      	mov	r2, r5
 8005bdc:	4b12      	ldr	r3, [pc, #72]	@ (8005c28 <_vfiprintf_r+0x228>)
 8005bde:	a904      	add	r1, sp, #16
 8005be0:	4630      	mov	r0, r6
 8005be2:	f3af 8000 	nop.w
 8005be6:	4607      	mov	r7, r0
 8005be8:	1c78      	adds	r0, r7, #1
 8005bea:	d1d6      	bne.n	8005b9a <_vfiprintf_r+0x19a>
 8005bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bee:	07d9      	lsls	r1, r3, #31
 8005bf0:	d405      	bmi.n	8005bfe <_vfiprintf_r+0x1fe>
 8005bf2:	89ab      	ldrh	r3, [r5, #12]
 8005bf4:	059a      	lsls	r2, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_vfiprintf_r+0x1fe>
 8005bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bfa:	f7ff fdcf 	bl	800579c <__retarget_lock_release_recursive>
 8005bfe:	89ab      	ldrh	r3, [r5, #12]
 8005c00:	065b      	lsls	r3, r3, #25
 8005c02:	f53f af1f 	bmi.w	8005a44 <_vfiprintf_r+0x44>
 8005c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c08:	e71e      	b.n	8005a48 <_vfiprintf_r+0x48>
 8005c0a:	ab03      	add	r3, sp, #12
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	462a      	mov	r2, r5
 8005c10:	4b05      	ldr	r3, [pc, #20]	@ (8005c28 <_vfiprintf_r+0x228>)
 8005c12:	a904      	add	r1, sp, #16
 8005c14:	4630      	mov	r0, r6
 8005c16:	f000 f879 	bl	8005d0c <_printf_i>
 8005c1a:	e7e4      	b.n	8005be6 <_vfiprintf_r+0x1e6>
 8005c1c:	080063a8 	.word	0x080063a8
 8005c20:	080063b2 	.word	0x080063b2
 8005c24:	00000000 	.word	0x00000000
 8005c28:	080059db 	.word	0x080059db
 8005c2c:	080063ae 	.word	0x080063ae

08005c30 <_printf_common>:
 8005c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	4616      	mov	r6, r2
 8005c36:	4698      	mov	r8, r3
 8005c38:	688a      	ldr	r2, [r1, #8]
 8005c3a:	690b      	ldr	r3, [r1, #16]
 8005c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c40:	4293      	cmp	r3, r2
 8005c42:	bfb8      	it	lt
 8005c44:	4613      	movlt	r3, r2
 8005c46:	6033      	str	r3, [r6, #0]
 8005c48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	b10a      	cbz	r2, 8005c56 <_printf_common+0x26>
 8005c52:	3301      	adds	r3, #1
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	0699      	lsls	r1, r3, #26
 8005c5a:	bf42      	ittt	mi
 8005c5c:	6833      	ldrmi	r3, [r6, #0]
 8005c5e:	3302      	addmi	r3, #2
 8005c60:	6033      	strmi	r3, [r6, #0]
 8005c62:	6825      	ldr	r5, [r4, #0]
 8005c64:	f015 0506 	ands.w	r5, r5, #6
 8005c68:	d106      	bne.n	8005c78 <_printf_common+0x48>
 8005c6a:	f104 0a19 	add.w	sl, r4, #25
 8005c6e:	68e3      	ldr	r3, [r4, #12]
 8005c70:	6832      	ldr	r2, [r6, #0]
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	42ab      	cmp	r3, r5
 8005c76:	dc26      	bgt.n	8005cc6 <_printf_common+0x96>
 8005c78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c7c:	6822      	ldr	r2, [r4, #0]
 8005c7e:	3b00      	subs	r3, #0
 8005c80:	bf18      	it	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	0692      	lsls	r2, r2, #26
 8005c86:	d42b      	bmi.n	8005ce0 <_printf_common+0xb0>
 8005c88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	4638      	mov	r0, r7
 8005c90:	47c8      	blx	r9
 8005c92:	3001      	adds	r0, #1
 8005c94:	d01e      	beq.n	8005cd4 <_printf_common+0xa4>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	6922      	ldr	r2, [r4, #16]
 8005c9a:	f003 0306 	and.w	r3, r3, #6
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	bf02      	ittt	eq
 8005ca2:	68e5      	ldreq	r5, [r4, #12]
 8005ca4:	6833      	ldreq	r3, [r6, #0]
 8005ca6:	1aed      	subeq	r5, r5, r3
 8005ca8:	68a3      	ldr	r3, [r4, #8]
 8005caa:	bf0c      	ite	eq
 8005cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb0:	2500      	movne	r5, #0
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	bfc4      	itt	gt
 8005cb6:	1a9b      	subgt	r3, r3, r2
 8005cb8:	18ed      	addgt	r5, r5, r3
 8005cba:	2600      	movs	r6, #0
 8005cbc:	341a      	adds	r4, #26
 8005cbe:	42b5      	cmp	r5, r6
 8005cc0:	d11a      	bne.n	8005cf8 <_printf_common+0xc8>
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e008      	b.n	8005cd8 <_printf_common+0xa8>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4652      	mov	r2, sl
 8005cca:	4641      	mov	r1, r8
 8005ccc:	4638      	mov	r0, r7
 8005cce:	47c8      	blx	r9
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d103      	bne.n	8005cdc <_printf_common+0xac>
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cdc:	3501      	adds	r5, #1
 8005cde:	e7c6      	b.n	8005c6e <_printf_common+0x3e>
 8005ce0:	18e1      	adds	r1, r4, r3
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	2030      	movs	r0, #48	@ 0x30
 8005ce6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cea:	4422      	add	r2, r4
 8005cec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	e7c7      	b.n	8005c88 <_printf_common+0x58>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	4638      	mov	r0, r7
 8005d00:	47c8      	blx	r9
 8005d02:	3001      	adds	r0, #1
 8005d04:	d0e6      	beq.n	8005cd4 <_printf_common+0xa4>
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7d9      	b.n	8005cbe <_printf_common+0x8e>
	...

08005d0c <_printf_i>:
 8005d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	7e0f      	ldrb	r7, [r1, #24]
 8005d12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d14:	2f78      	cmp	r7, #120	@ 0x78
 8005d16:	4691      	mov	r9, r2
 8005d18:	4680      	mov	r8, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	469a      	mov	sl, r3
 8005d1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d22:	d807      	bhi.n	8005d34 <_printf_i+0x28>
 8005d24:	2f62      	cmp	r7, #98	@ 0x62
 8005d26:	d80a      	bhi.n	8005d3e <_printf_i+0x32>
 8005d28:	2f00      	cmp	r7, #0
 8005d2a:	f000 80d2 	beq.w	8005ed2 <_printf_i+0x1c6>
 8005d2e:	2f58      	cmp	r7, #88	@ 0x58
 8005d30:	f000 80b9 	beq.w	8005ea6 <_printf_i+0x19a>
 8005d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d3c:	e03a      	b.n	8005db4 <_printf_i+0xa8>
 8005d3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d42:	2b15      	cmp	r3, #21
 8005d44:	d8f6      	bhi.n	8005d34 <_printf_i+0x28>
 8005d46:	a101      	add	r1, pc, #4	@ (adr r1, 8005d4c <_printf_i+0x40>)
 8005d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d4c:	08005da5 	.word	0x08005da5
 8005d50:	08005db9 	.word	0x08005db9
 8005d54:	08005d35 	.word	0x08005d35
 8005d58:	08005d35 	.word	0x08005d35
 8005d5c:	08005d35 	.word	0x08005d35
 8005d60:	08005d35 	.word	0x08005d35
 8005d64:	08005db9 	.word	0x08005db9
 8005d68:	08005d35 	.word	0x08005d35
 8005d6c:	08005d35 	.word	0x08005d35
 8005d70:	08005d35 	.word	0x08005d35
 8005d74:	08005d35 	.word	0x08005d35
 8005d78:	08005eb9 	.word	0x08005eb9
 8005d7c:	08005de3 	.word	0x08005de3
 8005d80:	08005e73 	.word	0x08005e73
 8005d84:	08005d35 	.word	0x08005d35
 8005d88:	08005d35 	.word	0x08005d35
 8005d8c:	08005edb 	.word	0x08005edb
 8005d90:	08005d35 	.word	0x08005d35
 8005d94:	08005de3 	.word	0x08005de3
 8005d98:	08005d35 	.word	0x08005d35
 8005d9c:	08005d35 	.word	0x08005d35
 8005da0:	08005e7b 	.word	0x08005e7b
 8005da4:	6833      	ldr	r3, [r6, #0]
 8005da6:	1d1a      	adds	r2, r3, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6032      	str	r2, [r6, #0]
 8005dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005db0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005db4:	2301      	movs	r3, #1
 8005db6:	e09d      	b.n	8005ef4 <_printf_i+0x1e8>
 8005db8:	6833      	ldr	r3, [r6, #0]
 8005dba:	6820      	ldr	r0, [r4, #0]
 8005dbc:	1d19      	adds	r1, r3, #4
 8005dbe:	6031      	str	r1, [r6, #0]
 8005dc0:	0606      	lsls	r6, r0, #24
 8005dc2:	d501      	bpl.n	8005dc8 <_printf_i+0xbc>
 8005dc4:	681d      	ldr	r5, [r3, #0]
 8005dc6:	e003      	b.n	8005dd0 <_printf_i+0xc4>
 8005dc8:	0645      	lsls	r5, r0, #25
 8005dca:	d5fb      	bpl.n	8005dc4 <_printf_i+0xb8>
 8005dcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	da03      	bge.n	8005ddc <_printf_i+0xd0>
 8005dd4:	232d      	movs	r3, #45	@ 0x2d
 8005dd6:	426d      	negs	r5, r5
 8005dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ddc:	4859      	ldr	r0, [pc, #356]	@ (8005f44 <_printf_i+0x238>)
 8005dde:	230a      	movs	r3, #10
 8005de0:	e011      	b.n	8005e06 <_printf_i+0xfa>
 8005de2:	6821      	ldr	r1, [r4, #0]
 8005de4:	6833      	ldr	r3, [r6, #0]
 8005de6:	0608      	lsls	r0, r1, #24
 8005de8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005dec:	d402      	bmi.n	8005df4 <_printf_i+0xe8>
 8005dee:	0649      	lsls	r1, r1, #25
 8005df0:	bf48      	it	mi
 8005df2:	b2ad      	uxthmi	r5, r5
 8005df4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005df6:	4853      	ldr	r0, [pc, #332]	@ (8005f44 <_printf_i+0x238>)
 8005df8:	6033      	str	r3, [r6, #0]
 8005dfa:	bf14      	ite	ne
 8005dfc:	230a      	movne	r3, #10
 8005dfe:	2308      	moveq	r3, #8
 8005e00:	2100      	movs	r1, #0
 8005e02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e06:	6866      	ldr	r6, [r4, #4]
 8005e08:	60a6      	str	r6, [r4, #8]
 8005e0a:	2e00      	cmp	r6, #0
 8005e0c:	bfa2      	ittt	ge
 8005e0e:	6821      	ldrge	r1, [r4, #0]
 8005e10:	f021 0104 	bicge.w	r1, r1, #4
 8005e14:	6021      	strge	r1, [r4, #0]
 8005e16:	b90d      	cbnz	r5, 8005e1c <_printf_i+0x110>
 8005e18:	2e00      	cmp	r6, #0
 8005e1a:	d04b      	beq.n	8005eb4 <_printf_i+0x1a8>
 8005e1c:	4616      	mov	r6, r2
 8005e1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e22:	fb03 5711 	mls	r7, r3, r1, r5
 8005e26:	5dc7      	ldrb	r7, [r0, r7]
 8005e28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e2c:	462f      	mov	r7, r5
 8005e2e:	42bb      	cmp	r3, r7
 8005e30:	460d      	mov	r5, r1
 8005e32:	d9f4      	bls.n	8005e1e <_printf_i+0x112>
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d10b      	bne.n	8005e50 <_printf_i+0x144>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	07df      	lsls	r7, r3, #31
 8005e3c:	d508      	bpl.n	8005e50 <_printf_i+0x144>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	6861      	ldr	r1, [r4, #4]
 8005e42:	4299      	cmp	r1, r3
 8005e44:	bfde      	ittt	le
 8005e46:	2330      	movle	r3, #48	@ 0x30
 8005e48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e50:	1b92      	subs	r2, r2, r6
 8005e52:	6122      	str	r2, [r4, #16]
 8005e54:	f8cd a000 	str.w	sl, [sp]
 8005e58:	464b      	mov	r3, r9
 8005e5a:	aa03      	add	r2, sp, #12
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4640      	mov	r0, r8
 8005e60:	f7ff fee6 	bl	8005c30 <_printf_common>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d14a      	bne.n	8005efe <_printf_i+0x1f2>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	b004      	add	sp, #16
 8005e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f043 0320 	orr.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	4833      	ldr	r0, [pc, #204]	@ (8005f48 <_printf_i+0x23c>)
 8005e7c:	2778      	movs	r7, #120	@ 0x78
 8005e7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	6831      	ldr	r1, [r6, #0]
 8005e86:	061f      	lsls	r7, r3, #24
 8005e88:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e8c:	d402      	bmi.n	8005e94 <_printf_i+0x188>
 8005e8e:	065f      	lsls	r7, r3, #25
 8005e90:	bf48      	it	mi
 8005e92:	b2ad      	uxthmi	r5, r5
 8005e94:	6031      	str	r1, [r6, #0]
 8005e96:	07d9      	lsls	r1, r3, #31
 8005e98:	bf44      	itt	mi
 8005e9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e9e:	6023      	strmi	r3, [r4, #0]
 8005ea0:	b11d      	cbz	r5, 8005eaa <_printf_i+0x19e>
 8005ea2:	2310      	movs	r3, #16
 8005ea4:	e7ac      	b.n	8005e00 <_printf_i+0xf4>
 8005ea6:	4827      	ldr	r0, [pc, #156]	@ (8005f44 <_printf_i+0x238>)
 8005ea8:	e7e9      	b.n	8005e7e <_printf_i+0x172>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	f023 0320 	bic.w	r3, r3, #32
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	e7f6      	b.n	8005ea2 <_printf_i+0x196>
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	e7bd      	b.n	8005e34 <_printf_i+0x128>
 8005eb8:	6833      	ldr	r3, [r6, #0]
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	6961      	ldr	r1, [r4, #20]
 8005ebe:	1d18      	adds	r0, r3, #4
 8005ec0:	6030      	str	r0, [r6, #0]
 8005ec2:	062e      	lsls	r6, r5, #24
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	d501      	bpl.n	8005ecc <_printf_i+0x1c0>
 8005ec8:	6019      	str	r1, [r3, #0]
 8005eca:	e002      	b.n	8005ed2 <_printf_i+0x1c6>
 8005ecc:	0668      	lsls	r0, r5, #25
 8005ece:	d5fb      	bpl.n	8005ec8 <_printf_i+0x1bc>
 8005ed0:	8019      	strh	r1, [r3, #0]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6123      	str	r3, [r4, #16]
 8005ed6:	4616      	mov	r6, r2
 8005ed8:	e7bc      	b.n	8005e54 <_printf_i+0x148>
 8005eda:	6833      	ldr	r3, [r6, #0]
 8005edc:	1d1a      	adds	r2, r3, #4
 8005ede:	6032      	str	r2, [r6, #0]
 8005ee0:	681e      	ldr	r6, [r3, #0]
 8005ee2:	6862      	ldr	r2, [r4, #4]
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7fa f992 	bl	8000210 <memchr>
 8005eec:	b108      	cbz	r0, 8005ef2 <_printf_i+0x1e6>
 8005eee:	1b80      	subs	r0, r0, r6
 8005ef0:	6060      	str	r0, [r4, #4]
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	6123      	str	r3, [r4, #16]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005efc:	e7aa      	b.n	8005e54 <_printf_i+0x148>
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	4632      	mov	r2, r6
 8005f02:	4649      	mov	r1, r9
 8005f04:	4640      	mov	r0, r8
 8005f06:	47d0      	blx	sl
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d0ad      	beq.n	8005e68 <_printf_i+0x15c>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	079b      	lsls	r3, r3, #30
 8005f10:	d413      	bmi.n	8005f3a <_printf_i+0x22e>
 8005f12:	68e0      	ldr	r0, [r4, #12]
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	4298      	cmp	r0, r3
 8005f18:	bfb8      	it	lt
 8005f1a:	4618      	movlt	r0, r3
 8005f1c:	e7a6      	b.n	8005e6c <_printf_i+0x160>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4632      	mov	r2, r6
 8005f22:	4649      	mov	r1, r9
 8005f24:	4640      	mov	r0, r8
 8005f26:	47d0      	blx	sl
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d09d      	beq.n	8005e68 <_printf_i+0x15c>
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	68e3      	ldr	r3, [r4, #12]
 8005f30:	9903      	ldr	r1, [sp, #12]
 8005f32:	1a5b      	subs	r3, r3, r1
 8005f34:	42ab      	cmp	r3, r5
 8005f36:	dcf2      	bgt.n	8005f1e <_printf_i+0x212>
 8005f38:	e7eb      	b.n	8005f12 <_printf_i+0x206>
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	f104 0619 	add.w	r6, r4, #25
 8005f40:	e7f5      	b.n	8005f2e <_printf_i+0x222>
 8005f42:	bf00      	nop
 8005f44:	080063b9 	.word	0x080063b9
 8005f48:	080063ca 	.word	0x080063ca

08005f4c <__sflush_r>:
 8005f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f54:	0716      	lsls	r6, r2, #28
 8005f56:	4605      	mov	r5, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	d454      	bmi.n	8006006 <__sflush_r+0xba>
 8005f5c:	684b      	ldr	r3, [r1, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dc02      	bgt.n	8005f68 <__sflush_r+0x1c>
 8005f62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	dd48      	ble.n	8005ffa <__sflush_r+0xae>
 8005f68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f6a:	2e00      	cmp	r6, #0
 8005f6c:	d045      	beq.n	8005ffa <__sflush_r+0xae>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f74:	682f      	ldr	r7, [r5, #0]
 8005f76:	6a21      	ldr	r1, [r4, #32]
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	d030      	beq.n	8005fde <__sflush_r+0x92>
 8005f7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	0759      	lsls	r1, r3, #29
 8005f82:	d505      	bpl.n	8005f90 <__sflush_r+0x44>
 8005f84:	6863      	ldr	r3, [r4, #4]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f8a:	b10b      	cbz	r3, 8005f90 <__sflush_r+0x44>
 8005f8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	2300      	movs	r3, #0
 8005f92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f94:	6a21      	ldr	r1, [r4, #32]
 8005f96:	4628      	mov	r0, r5
 8005f98:	47b0      	blx	r6
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	d106      	bne.n	8005fae <__sflush_r+0x62>
 8005fa0:	6829      	ldr	r1, [r5, #0]
 8005fa2:	291d      	cmp	r1, #29
 8005fa4:	d82b      	bhi.n	8005ffe <__sflush_r+0xb2>
 8005fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8006050 <__sflush_r+0x104>)
 8005fa8:	410a      	asrs	r2, r1
 8005faa:	07d6      	lsls	r6, r2, #31
 8005fac:	d427      	bmi.n	8005ffe <__sflush_r+0xb2>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	6062      	str	r2, [r4, #4]
 8005fb2:	04d9      	lsls	r1, r3, #19
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	6022      	str	r2, [r4, #0]
 8005fb8:	d504      	bpl.n	8005fc4 <__sflush_r+0x78>
 8005fba:	1c42      	adds	r2, r0, #1
 8005fbc:	d101      	bne.n	8005fc2 <__sflush_r+0x76>
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	b903      	cbnz	r3, 8005fc4 <__sflush_r+0x78>
 8005fc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fc6:	602f      	str	r7, [r5, #0]
 8005fc8:	b1b9      	cbz	r1, 8005ffa <__sflush_r+0xae>
 8005fca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d002      	beq.n	8005fd8 <__sflush_r+0x8c>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7ff fbf2 	bl	80057bc <_free_r>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fdc:	e00d      	b.n	8005ffa <__sflush_r+0xae>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b0      	blx	r6
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	1c50      	adds	r0, r2, #1
 8005fe8:	d1c9      	bne.n	8005f7e <__sflush_r+0x32>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0c6      	beq.n	8005f7e <__sflush_r+0x32>
 8005ff0:	2b1d      	cmp	r3, #29
 8005ff2:	d001      	beq.n	8005ff8 <__sflush_r+0xac>
 8005ff4:	2b16      	cmp	r3, #22
 8005ff6:	d11e      	bne.n	8006036 <__sflush_r+0xea>
 8005ff8:	602f      	str	r7, [r5, #0]
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	e022      	b.n	8006044 <__sflush_r+0xf8>
 8005ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006002:	b21b      	sxth	r3, r3
 8006004:	e01b      	b.n	800603e <__sflush_r+0xf2>
 8006006:	690f      	ldr	r7, [r1, #16]
 8006008:	2f00      	cmp	r7, #0
 800600a:	d0f6      	beq.n	8005ffa <__sflush_r+0xae>
 800600c:	0793      	lsls	r3, r2, #30
 800600e:	680e      	ldr	r6, [r1, #0]
 8006010:	bf08      	it	eq
 8006012:	694b      	ldreq	r3, [r1, #20]
 8006014:	600f      	str	r7, [r1, #0]
 8006016:	bf18      	it	ne
 8006018:	2300      	movne	r3, #0
 800601a:	eba6 0807 	sub.w	r8, r6, r7
 800601e:	608b      	str	r3, [r1, #8]
 8006020:	f1b8 0f00 	cmp.w	r8, #0
 8006024:	dde9      	ble.n	8005ffa <__sflush_r+0xae>
 8006026:	6a21      	ldr	r1, [r4, #32]
 8006028:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800602a:	4643      	mov	r3, r8
 800602c:	463a      	mov	r2, r7
 800602e:	4628      	mov	r0, r5
 8006030:	47b0      	blx	r6
 8006032:	2800      	cmp	r0, #0
 8006034:	dc08      	bgt.n	8006048 <__sflush_r+0xfc>
 8006036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800603a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800603e:	81a3      	strh	r3, [r4, #12]
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	4407      	add	r7, r0
 800604a:	eba8 0800 	sub.w	r8, r8, r0
 800604e:	e7e7      	b.n	8006020 <__sflush_r+0xd4>
 8006050:	dfbffffe 	.word	0xdfbffffe

08006054 <_fflush_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	690b      	ldr	r3, [r1, #16]
 8006058:	4605      	mov	r5, r0
 800605a:	460c      	mov	r4, r1
 800605c:	b913      	cbnz	r3, 8006064 <_fflush_r+0x10>
 800605e:	2500      	movs	r5, #0
 8006060:	4628      	mov	r0, r5
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	b118      	cbz	r0, 800606e <_fflush_r+0x1a>
 8006066:	6a03      	ldr	r3, [r0, #32]
 8006068:	b90b      	cbnz	r3, 800606e <_fflush_r+0x1a>
 800606a:	f7ff fa91 	bl	8005590 <__sinit>
 800606e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f3      	beq.n	800605e <_fflush_r+0xa>
 8006076:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006078:	07d0      	lsls	r0, r2, #31
 800607a:	d404      	bmi.n	8006086 <_fflush_r+0x32>
 800607c:	0599      	lsls	r1, r3, #22
 800607e:	d402      	bmi.n	8006086 <_fflush_r+0x32>
 8006080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006082:	f7ff fb8a 	bl	800579a <__retarget_lock_acquire_recursive>
 8006086:	4628      	mov	r0, r5
 8006088:	4621      	mov	r1, r4
 800608a:	f7ff ff5f 	bl	8005f4c <__sflush_r>
 800608e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006090:	07da      	lsls	r2, r3, #31
 8006092:	4605      	mov	r5, r0
 8006094:	d4e4      	bmi.n	8006060 <_fflush_r+0xc>
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	059b      	lsls	r3, r3, #22
 800609a:	d4e1      	bmi.n	8006060 <_fflush_r+0xc>
 800609c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800609e:	f7ff fb7d 	bl	800579c <__retarget_lock_release_recursive>
 80060a2:	e7dd      	b.n	8006060 <_fflush_r+0xc>

080060a4 <__swbuf_r>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	460e      	mov	r6, r1
 80060a8:	4614      	mov	r4, r2
 80060aa:	4605      	mov	r5, r0
 80060ac:	b118      	cbz	r0, 80060b6 <__swbuf_r+0x12>
 80060ae:	6a03      	ldr	r3, [r0, #32]
 80060b0:	b90b      	cbnz	r3, 80060b6 <__swbuf_r+0x12>
 80060b2:	f7ff fa6d 	bl	8005590 <__sinit>
 80060b6:	69a3      	ldr	r3, [r4, #24]
 80060b8:	60a3      	str	r3, [r4, #8]
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	071a      	lsls	r2, r3, #28
 80060be:	d501      	bpl.n	80060c4 <__swbuf_r+0x20>
 80060c0:	6923      	ldr	r3, [r4, #16]
 80060c2:	b943      	cbnz	r3, 80060d6 <__swbuf_r+0x32>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 f82a 	bl	8006120 <__swsetup_r>
 80060cc:	b118      	cbz	r0, 80060d6 <__swbuf_r+0x32>
 80060ce:	f04f 37ff 	mov.w	r7, #4294967295
 80060d2:	4638      	mov	r0, r7
 80060d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	6922      	ldr	r2, [r4, #16]
 80060da:	1a98      	subs	r0, r3, r2
 80060dc:	6963      	ldr	r3, [r4, #20]
 80060de:	b2f6      	uxtb	r6, r6
 80060e0:	4283      	cmp	r3, r0
 80060e2:	4637      	mov	r7, r6
 80060e4:	dc05      	bgt.n	80060f2 <__swbuf_r+0x4e>
 80060e6:	4621      	mov	r1, r4
 80060e8:	4628      	mov	r0, r5
 80060ea:	f7ff ffb3 	bl	8006054 <_fflush_r>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d1ed      	bne.n	80060ce <__swbuf_r+0x2a>
 80060f2:	68a3      	ldr	r3, [r4, #8]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	60a3      	str	r3, [r4, #8]
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	6022      	str	r2, [r4, #0]
 80060fe:	701e      	strb	r6, [r3, #0]
 8006100:	6962      	ldr	r2, [r4, #20]
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	429a      	cmp	r2, r3
 8006106:	d004      	beq.n	8006112 <__swbuf_r+0x6e>
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	07db      	lsls	r3, r3, #31
 800610c:	d5e1      	bpl.n	80060d2 <__swbuf_r+0x2e>
 800610e:	2e0a      	cmp	r6, #10
 8006110:	d1df      	bne.n	80060d2 <__swbuf_r+0x2e>
 8006112:	4621      	mov	r1, r4
 8006114:	4628      	mov	r0, r5
 8006116:	f7ff ff9d 	bl	8006054 <_fflush_r>
 800611a:	2800      	cmp	r0, #0
 800611c:	d0d9      	beq.n	80060d2 <__swbuf_r+0x2e>
 800611e:	e7d6      	b.n	80060ce <__swbuf_r+0x2a>

08006120 <__swsetup_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4b29      	ldr	r3, [pc, #164]	@ (80061c8 <__swsetup_r+0xa8>)
 8006124:	4605      	mov	r5, r0
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	460c      	mov	r4, r1
 800612a:	b118      	cbz	r0, 8006134 <__swsetup_r+0x14>
 800612c:	6a03      	ldr	r3, [r0, #32]
 800612e:	b90b      	cbnz	r3, 8006134 <__swsetup_r+0x14>
 8006130:	f7ff fa2e 	bl	8005590 <__sinit>
 8006134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006138:	0719      	lsls	r1, r3, #28
 800613a:	d422      	bmi.n	8006182 <__swsetup_r+0x62>
 800613c:	06da      	lsls	r2, r3, #27
 800613e:	d407      	bmi.n	8006150 <__swsetup_r+0x30>
 8006140:	2209      	movs	r2, #9
 8006142:	602a      	str	r2, [r5, #0]
 8006144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	f04f 30ff 	mov.w	r0, #4294967295
 800614e:	e033      	b.n	80061b8 <__swsetup_r+0x98>
 8006150:	0758      	lsls	r0, r3, #29
 8006152:	d512      	bpl.n	800617a <__swsetup_r+0x5a>
 8006154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006156:	b141      	cbz	r1, 800616a <__swsetup_r+0x4a>
 8006158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800615c:	4299      	cmp	r1, r3
 800615e:	d002      	beq.n	8006166 <__swsetup_r+0x46>
 8006160:	4628      	mov	r0, r5
 8006162:	f7ff fb2b 	bl	80057bc <_free_r>
 8006166:	2300      	movs	r3, #0
 8006168:	6363      	str	r3, [r4, #52]	@ 0x34
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006170:	81a3      	strh	r3, [r4, #12]
 8006172:	2300      	movs	r3, #0
 8006174:	6063      	str	r3, [r4, #4]
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	f043 0308 	orr.w	r3, r3, #8
 8006180:	81a3      	strh	r3, [r4, #12]
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	b94b      	cbnz	r3, 800619a <__swsetup_r+0x7a>
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800618c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006190:	d003      	beq.n	800619a <__swsetup_r+0x7a>
 8006192:	4621      	mov	r1, r4
 8006194:	4628      	mov	r0, r5
 8006196:	f000 f84f 	bl	8006238 <__smakebuf_r>
 800619a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619e:	f013 0201 	ands.w	r2, r3, #1
 80061a2:	d00a      	beq.n	80061ba <__swsetup_r+0x9a>
 80061a4:	2200      	movs	r2, #0
 80061a6:	60a2      	str	r2, [r4, #8]
 80061a8:	6962      	ldr	r2, [r4, #20]
 80061aa:	4252      	negs	r2, r2
 80061ac:	61a2      	str	r2, [r4, #24]
 80061ae:	6922      	ldr	r2, [r4, #16]
 80061b0:	b942      	cbnz	r2, 80061c4 <__swsetup_r+0xa4>
 80061b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061b6:	d1c5      	bne.n	8006144 <__swsetup_r+0x24>
 80061b8:	bd38      	pop	{r3, r4, r5, pc}
 80061ba:	0799      	lsls	r1, r3, #30
 80061bc:	bf58      	it	pl
 80061be:	6962      	ldrpl	r2, [r4, #20]
 80061c0:	60a2      	str	r2, [r4, #8]
 80061c2:	e7f4      	b.n	80061ae <__swsetup_r+0x8e>
 80061c4:	2000      	movs	r0, #0
 80061c6:	e7f7      	b.n	80061b8 <__swsetup_r+0x98>
 80061c8:	2000002c 	.word	0x2000002c

080061cc <_sbrk_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d06      	ldr	r5, [pc, #24]	@ (80061e8 <_sbrk_r+0x1c>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f7fa fcca 	bl	8000b70 <_sbrk>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_sbrk_r+0x1a>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_sbrk_r+0x1a>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20004bbc 	.word	0x20004bbc

080061ec <__swhatbuf_r>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	460c      	mov	r4, r1
 80061f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f4:	2900      	cmp	r1, #0
 80061f6:	b096      	sub	sp, #88	@ 0x58
 80061f8:	4615      	mov	r5, r2
 80061fa:	461e      	mov	r6, r3
 80061fc:	da0d      	bge.n	800621a <__swhatbuf_r+0x2e>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006204:	f04f 0100 	mov.w	r1, #0
 8006208:	bf14      	ite	ne
 800620a:	2340      	movne	r3, #64	@ 0x40
 800620c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006210:	2000      	movs	r0, #0
 8006212:	6031      	str	r1, [r6, #0]
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	b016      	add	sp, #88	@ 0x58
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	466a      	mov	r2, sp
 800621c:	f000 f848 	bl	80062b0 <_fstat_r>
 8006220:	2800      	cmp	r0, #0
 8006222:	dbec      	blt.n	80061fe <__swhatbuf_r+0x12>
 8006224:	9901      	ldr	r1, [sp, #4]
 8006226:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800622a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800622e:	4259      	negs	r1, r3
 8006230:	4159      	adcs	r1, r3
 8006232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006236:	e7eb      	b.n	8006210 <__swhatbuf_r+0x24>

08006238 <__smakebuf_r>:
 8006238:	898b      	ldrh	r3, [r1, #12]
 800623a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800623c:	079d      	lsls	r5, r3, #30
 800623e:	4606      	mov	r6, r0
 8006240:	460c      	mov	r4, r1
 8006242:	d507      	bpl.n	8006254 <__smakebuf_r+0x1c>
 8006244:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	2301      	movs	r3, #1
 800624e:	6163      	str	r3, [r4, #20]
 8006250:	b003      	add	sp, #12
 8006252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006254:	ab01      	add	r3, sp, #4
 8006256:	466a      	mov	r2, sp
 8006258:	f7ff ffc8 	bl	80061ec <__swhatbuf_r>
 800625c:	9f00      	ldr	r7, [sp, #0]
 800625e:	4605      	mov	r5, r0
 8006260:	4639      	mov	r1, r7
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff fb16 	bl	8005894 <_malloc_r>
 8006268:	b948      	cbnz	r0, 800627e <__smakebuf_r+0x46>
 800626a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626e:	059a      	lsls	r2, r3, #22
 8006270:	d4ee      	bmi.n	8006250 <__smakebuf_r+0x18>
 8006272:	f023 0303 	bic.w	r3, r3, #3
 8006276:	f043 0302 	orr.w	r3, r3, #2
 800627a:	81a3      	strh	r3, [r4, #12]
 800627c:	e7e2      	b.n	8006244 <__smakebuf_r+0xc>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	6020      	str	r0, [r4, #0]
 8006282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	9b01      	ldr	r3, [sp, #4]
 800628a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800628e:	b15b      	cbz	r3, 80062a8 <__smakebuf_r+0x70>
 8006290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006294:	4630      	mov	r0, r6
 8006296:	f000 f81d 	bl	80062d4 <_isatty_r>
 800629a:	b128      	cbz	r0, 80062a8 <__smakebuf_r+0x70>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	431d      	orrs	r5, r3
 80062ac:	81a5      	strh	r5, [r4, #12]
 80062ae:	e7cf      	b.n	8006250 <__smakebuf_r+0x18>

080062b0 <_fstat_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4d07      	ldr	r5, [pc, #28]	@ (80062d0 <_fstat_r+0x20>)
 80062b4:	2300      	movs	r3, #0
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	f7fa fc2e 	bl	8000b1e <_fstat>
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	d102      	bne.n	80062cc <_fstat_r+0x1c>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	b103      	cbz	r3, 80062cc <_fstat_r+0x1c>
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	bf00      	nop
 80062d0:	20004bbc 	.word	0x20004bbc

080062d4 <_isatty_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d06      	ldr	r5, [pc, #24]	@ (80062f0 <_isatty_r+0x1c>)
 80062d8:	2300      	movs	r3, #0
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	602b      	str	r3, [r5, #0]
 80062e0:	f7fa fc2d 	bl	8000b3e <_isatty>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_isatty_r+0x1a>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_isatty_r+0x1a>
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	20004bbc 	.word	0x20004bbc

080062f4 <_init>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	bf00      	nop
 80062f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fa:	bc08      	pop	{r3}
 80062fc:	469e      	mov	lr, r3
 80062fe:	4770      	bx	lr

08006300 <_fini>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	bf00      	nop
 8006304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006306:	bc08      	pop	{r3}
 8006308:	469e      	mov	lr, r3
 800630a:	4770      	bx	lr
