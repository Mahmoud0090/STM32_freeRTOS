
10_idle_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080063bc  080063bc  000073bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006474  08006474  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006474  08006474  00007474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800647c  0800647c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800647c  0800647c  0000747c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006480  08006480  00007480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006484  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b5c  2000006c  080064f0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc8  080064f0  00008bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174d9  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003523  00000000  00000000  0001f575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00022a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001057  00000000  00000000  00023fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049aa  00000000  00000000  00024fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179fc  00000000  00000000  000299a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd105  00000000  00000000  000413a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e4aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006034  00000000  00000000  0011e4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00124524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080063a4 	.word	0x080063a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080063a4 	.word	0x080063a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:

typedef uint32_t TaskProfiler;
TaskProfiler BlueTaskProfiler,RedTaskProfiler, GreenTaskProfiler,IdleTaskProfiler;

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af02      	add	r7, sp, #8

  HAL_Init();
 80005a6:	f000 fb8f 	bl	8000cc8 <HAL_Init>

  SystemClock_Config();
 80005aa:	f000 f883 	bl	80006b4 <SystemClock_Config>

  MX_GPIO_Init();
 80005ae:	f000 f919 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f8ed 	bl	8000790 <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedController,
 80005b6:	2300      	movs	r3, #0
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2264      	movs	r2, #100	@ 0x64
 80005c2:	490f      	ldr	r1, [pc, #60]	@ (8000600 <main+0x60>)
 80005c4:	480f      	ldr	r0, [pc, #60]	@ (8000604 <main+0x64>)
 80005c6:	f003 f965 	bl	8003894 <xTaskCreate>
		  100,
		  NULL,
		  1,
		  NULL);

  xTaskCreate(vRedLedController,
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2264      	movs	r2, #100	@ 0x64
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <main+0x68>)
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <main+0x6c>)
 80005da:	f003 f95b 	bl	8003894 <xTaskCreate>
  		  100,
  		  NULL,
  		  1,
  		  NULL);

  xTaskCreate(vGreenLedController,
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2264      	movs	r2, #100	@ 0x64
 80005ea:	4909      	ldr	r1, [pc, #36]	@ (8000610 <main+0x70>)
 80005ec:	4809      	ldr	r0, [pc, #36]	@ (8000614 <main+0x74>)
 80005ee:	f003 f951 	bl	8003894 <xTaskCreate>
  		  100,
  		  NULL,
  		  1,
  		  NULL);

  vTaskStartScheduler();
 80005f2:	f003 facb 	bl	8003b8c <vTaskStartScheduler>

  while (1)
  {
	  printf("Hello from stm32 \n\r");
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <main+0x78>)
 80005f8:	f005 f858 	bl	80056ac <iprintf>
 80005fc:	e7fb      	b.n	80005f6 <main+0x56>
 80005fe:	bf00      	nop
 8000600:	080063bc 	.word	0x080063bc
 8000604:	0800061d 	.word	0x0800061d
 8000608:	080063d0 	.word	0x080063d0
 800060c:	08000635 	.word	0x08000635
 8000610:	080063e4 	.word	0x080063e4
 8000614:	08000655 	.word	0x08000655
 8000618:	080063fc 	.word	0x080063fc

0800061c <vBlueLedController>:
  }
}


void vBlueLedController(void *pvParameter)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlueTaskProfiler++;
 8000624:	4b02      	ldr	r3, [pc, #8]	@ (8000630 <vBlueLedController+0x14>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a01      	ldr	r2, [pc, #4]	@ (8000630 <vBlueLedController+0x14>)
 800062c:	6013      	str	r3, [r2, #0]
 800062e:	e7f9      	b.n	8000624 <vBlueLedController+0x8>
 8000630:	200000d0 	.word	0x200000d0

08000634 <vRedLedController>:
		//vTaskDelay(200);
	}
}

void vRedLedController(void *pvParameter)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <vRedLedController+0x1c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	4a03      	ldr	r2, [pc, #12]	@ (8000650 <vRedLedController+0x1c>)
 8000644:	6013      	str	r3, [r2, #0]
		vTaskDelay(200);
 8000646:	20c8      	movs	r0, #200	@ 0xc8
 8000648:	f003 fa6a 	bl	8003b20 <vTaskDelay>
		RedTaskProfiler++;
 800064c:	bf00      	nop
 800064e:	e7f5      	b.n	800063c <vRedLedController+0x8>
 8000650:	200000d4 	.word	0x200000d4

08000654 <vGreenLedController>:
	}
}

void vGreenLedController(void *pvParameter)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <vGreenLedController+0x1c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a03      	ldr	r2, [pc, #12]	@ (8000670 <vGreenLedController+0x1c>)
 8000664:	6013      	str	r3, [r2, #0]
		vTaskDelay(200);
 8000666:	20c8      	movs	r0, #200	@ 0xc8
 8000668:	f003 fa5a 	bl	8003b20 <vTaskDelay>
		GreenTaskProfiler++;
 800066c:	bf00      	nop
 800066e:	e7f5      	b.n	800065c <vGreenLedController+0x8>
 8000670:	200000d8 	.word	0x200000d8

08000674 <vApplicationIdleHook>:
	}
}

void vApplicationIdleHook(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	IdleTaskProfiler++;
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <vApplicationIdleHook+0x18>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a03      	ldr	r2, [pc, #12]	@ (800068c <vApplicationIdleHook+0x18>)
 8000680:	6013      	str	r3, [r2, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	200000dc 	.word	0x200000dc

08000690 <__io_putchar>:

//this function for printf to be used in printing sentences
int __io_putchar(int ch)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000698:	1d39      	adds	r1, r7, #4
 800069a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800069e:	2201      	movs	r2, #1
 80006a0:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <__io_putchar+0x20>)
 80006a2:	f001 fee9 	bl	8002478 <HAL_UART_Transmit>
	return ch;
 80006a6:	687b      	ldr	r3, [r7, #4]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000088 	.word	0x20000088

080006b4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	@ 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 f847 	bl	8005756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <SystemClock_Config+0xd4>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a29      	ldr	r2, [pc, #164]	@ (8000788 <SystemClock_Config+0xd4>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <SystemClock_Config+0xd4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <SystemClock_Config+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000700:	4a22      	ldr	r2, [pc, #136]	@ (800078c <SystemClock_Config+0xd8>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b20      	ldr	r3, [pc, #128]	@ (800078c <SystemClock_Config+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000728:	2310      	movs	r3, #16
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800072c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000730:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000732:	2304      	movs	r3, #4
 8000734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f90e 	bl	8001964 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074e:	f000 f8c9 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2102      	movs	r1, #2
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fd7c 	bl	800126c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800077a:	f000 f8b3 	bl	80008e4 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	@ 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f001 fe06 	bl	80023d8 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f887 	bl	80008e4 <Error_Handler>
  }

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000088 	.word	0x20000088
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a2c      	ldr	r2, [pc, #176]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a25      	ldr	r2, [pc, #148]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a1e      	ldr	r2, [pc, #120]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	4812      	ldr	r0, [pc, #72]	@ (80008b8 <MX_GPIO_Init+0xd4>)
 8000870:	f000 fce2 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480c      	ldr	r0, [pc, #48]	@ (80008bc <MX_GPIO_Init+0xd8>)
 800088c:	f000 fb40 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000890:	2320      	movs	r3, #32
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_GPIO_Init+0xd4>)
 80008a8:	f000 fb32 	bl	8000f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020800 	.word	0x40020800

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 fa1b 	bl	8000d0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40010000 	.word	0x40010000

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <HAL_MspInit+0x54>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000904:	6453      	str	r3, [r2, #68]	@ 0x44
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x54>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_MspInit+0x54>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_MspInit+0x54>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f000 fac1 	bl	8000ebc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <HAL_UART_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12b      	bne.n	80009c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a2:	230c      	movs	r3, #12
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b2:	2307      	movs	r3, #7
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <HAL_UART_MspInit+0x8c>)
 80009be:	f000 faa7 	bl	8000f10 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	@ 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	@ 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa8 <HAL_InitTick+0xd0>)
 80009ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f0:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa8 <HAL_InitTick+0xd0>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f8:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa8 <HAL_InitTick+0xd0>)
 80009fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a04:	f107 020c 	add.w	r2, r7, #12
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fd46 	bl	80014a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a14:	f000 fd30 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 8000a18:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1c:	4a23      	ldr	r2, [pc, #140]	@ (8000aac <HAL_InitTick+0xd4>)
 8000a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a22:	0c9b      	lsrs	r3, r3, #18
 8000a24:	3b01      	subs	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a28:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <HAL_InitTick+0xd8>)
 8000a2a:	4a22      	ldr	r2, [pc, #136]	@ (8000ab4 <HAL_InitTick+0xdc>)
 8000a2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <HAL_InitTick+0xd8>)
 8000a30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a34:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a36:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab0 <HAL_InitTick+0xd8>)
 8000a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <HAL_InitTick+0xd8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <HAL_InitTick+0xd8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <HAL_InitTick+0xd8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a4e:	4818      	ldr	r0, [pc, #96]	@ (8000ab0 <HAL_InitTick+0xd8>)
 8000a50:	f001 fa26 	bl	8001ea0 <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d11b      	bne.n	8000a9a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a62:	4813      	ldr	r0, [pc, #76]	@ (8000ab0 <HAL_InitTick+0xd8>)
 8000a64:	f001 fa76 	bl	8001f54 <HAL_TIM_Base_Start_IT>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d111      	bne.n	8000a9a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a76:	2019      	movs	r0, #25
 8000a78:	f000 fa3c 	bl	8000ef4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d808      	bhi.n	8000a94 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a82:	2200      	movs	r2, #0
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	2019      	movs	r0, #25
 8000a88:	f000 fa18 	bl	8000ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_InitTick+0xe0>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e002      	b.n	8000a9a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3730      	adds	r7, #48	@ 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	431bde83 	.word	0x431bde83
 8000ab0:	200000e0 	.word	0x200000e0
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	20000004 	.word	0x20000004

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000afa:	f001 fa9b 	bl	8002034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000e0 	.word	0x200000e0

08000b08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e00a      	b.n	8000b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b1a:	f3af 8000 	nop.w
 8000b1e:	4601      	mov	r1, r0
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	b2ca      	uxtb	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf0      	blt.n	8000b1a <_read+0x12>
  }

  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e009      	b.n	8000b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fd97 	bl	8000690 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbf1      	blt.n	8000b54 <_write+0x12>
  }
  return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_close>:

int _close(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_isatty>:

int _isatty(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f004 fdee 	bl	80057f4 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20020000 	.word	0x20020000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	20000128 	.word	0x20000128
 8000c4c:	20004bc8 	.word	0x20004bc8

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 fdad 	bl	8005800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc7b 	bl	80005a0 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cb8:	08006484 	.word	0x08006484
  ldr r2, =_sbss
 8000cbc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cc0:	20004bc8 	.word	0x20004bc8

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f8d8 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f7ff fe6e 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fdf8 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	2000012c 	.word	0x2000012c

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000012c 	.word	0x2000012c

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	@ (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4c 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ece:	f7ff ff61 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	6978      	ldr	r0, [r7, #20]
 8000eda:	f7ff ffb1 	bl	8000e40 <NVIC_EncodePriority>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff80 	bl	8000dec <__NVIC_SetPriority>
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff54 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e165      	b.n	80011f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8154 	bne.w	80011f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ae 	beq.w	80011f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b5d      	ldr	r3, [pc, #372]	@ (8001210 <HAL_GPIO_Init+0x300>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	4a5c      	ldr	r2, [pc, #368]	@ (8001210 <HAL_GPIO_Init+0x300>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001210 <HAL_GPIO_Init+0x300>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a58      	ldr	r2, [pc, #352]	@ (8001214 <HAL_GPIO_Init+0x304>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001218 <HAL_GPIO_Init+0x308>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	@ (800121c <HAL_GPIO_Init+0x30c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001220 <HAL_GPIO_Init+0x310>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001224 <HAL_GPIO_Init+0x314>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001228 <HAL_GPIO_Init+0x318>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x20a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	@ (800122c <HAL_GPIO_Init+0x31c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x206>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a49      	ldr	r2, [pc, #292]	@ (8001230 <HAL_GPIO_Init+0x320>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x202>
 800110e:	2306      	movs	r3, #6
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001112:	2307      	movs	r3, #7
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	@ (8001214 <HAL_GPIO_Init+0x304>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3a      	ldr	r3, [pc, #232]	@ (8001234 <HAL_GPIO_Init+0x324>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a31      	ldr	r2, [pc, #196]	@ (8001234 <HAL_GPIO_Init+0x324>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <HAL_GPIO_Init+0x324>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a26      	ldr	r2, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x324>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a11      	ldr	r2, [pc, #68]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae96 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0cc      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b68      	ldr	r3, [pc, #416]	@ (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d90c      	bls.n	80012a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b65      	ldr	r3, [pc, #404]	@ (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b63      	ldr	r3, [pc, #396]	@ (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0b8      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c0:	4b59      	ldr	r3, [pc, #356]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4a58      	ldr	r2, [pc, #352]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d8:	4b53      	ldr	r3, [pc, #332]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a52      	ldr	r2, [pc, #328]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e4:	4b50      	ldr	r3, [pc, #320]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	494d      	ldr	r1, [pc, #308]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d044      	beq.n	800138c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d119      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e07f      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d003      	beq.n	800132a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001326:	2b03      	cmp	r3, #3
 8001328:	d107      	bne.n	800133a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	4b3f      	ldr	r3, [pc, #252]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e06f      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	4b3b      	ldr	r3, [pc, #236]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e067      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134a:	4b37      	ldr	r3, [pc, #220]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f023 0203 	bic.w	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4934      	ldr	r1, [pc, #208]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	4313      	orrs	r3, r2
 800135a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800135c:	f7ff fcea 	bl	8000d34 <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	e00a      	b.n	800137a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001364:	f7ff fce6 	bl	8000d34 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e04f      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 020c 	and.w	r2, r3, #12
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	429a      	cmp	r2, r3
 800138a:	d1eb      	bne.n	8001364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d20c      	bcs.n	80013b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e032      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4916      	ldr	r1, [pc, #88]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d009      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013de:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	490e      	ldr	r1, [pc, #56]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013f2:	f000 f887 	bl	8001504 <HAL_RCC_GetSysClockFreq>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	490a      	ldr	r1, [pc, #40]	@ (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	5ccb      	ldrb	r3, [r1, r3]
 8001406:	fa22 f303 	lsr.w	r3, r2, r3
 800140a:	4a09      	ldr	r2, [pc, #36]	@ (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_RCC_ClockConfig+0x1c8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fae0 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023c00 	.word	0x40023c00
 8001428:	40023800 	.word	0x40023800
 800142c:	08006428 	.word	0x08006428
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <HAL_RCC_GetHCLKFreq+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000000 	.word	0x20000000

08001450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001454:	f7ff fff0 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001458:	4602      	mov	r2, r0
 800145a:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	0a9b      	lsrs	r3, r3, #10
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	4903      	ldr	r1, [pc, #12]	@ (8001474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001466:	5ccb      	ldrb	r3, [r1, r3]
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	08006438 	.word	0x08006438

08001478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800147c:	f7ff ffdc 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001480:	4602      	mov	r2, r0
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0b5b      	lsrs	r3, r3, #13
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	4903      	ldr	r1, [pc, #12]	@ (800149c <HAL_RCC_GetPCLK2Freq+0x24>)
 800148e:	5ccb      	ldrb	r3, [r1, r3]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	08006438 	.word	0x08006438

080014a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	220f      	movs	r2, #15
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <HAL_RCC_GetClockConfig+0x60>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 020f 	and.w	r2, r3, #15
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001508:	b0ae      	sub	sp, #184	@ 0xb8
 800150a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800152a:	4bcb      	ldr	r3, [pc, #812]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b0c      	cmp	r3, #12
 8001534:	f200 8206 	bhi.w	8001944 <HAL_RCC_GetSysClockFreq+0x440>
 8001538:	a201      	add	r2, pc, #4	@ (adr r2, 8001540 <HAL_RCC_GetSysClockFreq+0x3c>)
 800153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153e:	bf00      	nop
 8001540:	08001575 	.word	0x08001575
 8001544:	08001945 	.word	0x08001945
 8001548:	08001945 	.word	0x08001945
 800154c:	08001945 	.word	0x08001945
 8001550:	0800157d 	.word	0x0800157d
 8001554:	08001945 	.word	0x08001945
 8001558:	08001945 	.word	0x08001945
 800155c:	08001945 	.word	0x08001945
 8001560:	08001585 	.word	0x08001585
 8001564:	08001945 	.word	0x08001945
 8001568:	08001945 	.word	0x08001945
 800156c:	08001945 	.word	0x08001945
 8001570:	08001775 	.word	0x08001775
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001574:	4bb9      	ldr	r3, [pc, #740]	@ (800185c <HAL_RCC_GetSysClockFreq+0x358>)
 8001576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800157a:	e1e7      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800157c:	4bb8      	ldr	r3, [pc, #736]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x35c>)
 800157e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001582:	e1e3      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001584:	4bb4      	ldr	r3, [pc, #720]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800158c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001590:	4bb1      	ldr	r3, [pc, #708]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d071      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159c:	4bae      	ldr	r3, [pc, #696]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015c2:	4622      	mov	r2, r4
 80015c4:	462b      	mov	r3, r5
 80015c6:	f04f 0000 	mov.w	r0, #0
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	0159      	lsls	r1, r3, #5
 80015d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d4:	0150      	lsls	r0, r2, #5
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4621      	mov	r1, r4
 80015dc:	1a51      	subs	r1, r2, r1
 80015de:	6439      	str	r1, [r7, #64]	@ 0x40
 80015e0:	4629      	mov	r1, r5
 80015e2:	eb63 0301 	sbc.w	r3, r3, r1
 80015e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015f4:	4649      	mov	r1, r9
 80015f6:	018b      	lsls	r3, r1, #6
 80015f8:	4641      	mov	r1, r8
 80015fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fe:	4641      	mov	r1, r8
 8001600:	018a      	lsls	r2, r1, #6
 8001602:	4641      	mov	r1, r8
 8001604:	1a51      	subs	r1, r2, r1
 8001606:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001608:	4649      	mov	r1, r9
 800160a:	eb63 0301 	sbc.w	r3, r3, r1
 800160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800161c:	4649      	mov	r1, r9
 800161e:	00cb      	lsls	r3, r1, #3
 8001620:	4641      	mov	r1, r8
 8001622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001626:	4641      	mov	r1, r8
 8001628:	00ca      	lsls	r2, r1, #3
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	4603      	mov	r3, r0
 8001630:	4622      	mov	r2, r4
 8001632:	189b      	adds	r3, r3, r2
 8001634:	633b      	str	r3, [r7, #48]	@ 0x30
 8001636:	462b      	mov	r3, r5
 8001638:	460a      	mov	r2, r1
 800163a:	eb42 0303 	adc.w	r3, r2, r3
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800164c:	4629      	mov	r1, r5
 800164e:	024b      	lsls	r3, r1, #9
 8001650:	4621      	mov	r1, r4
 8001652:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001656:	4621      	mov	r1, r4
 8001658:	024a      	lsls	r2, r1, #9
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001662:	2200      	movs	r2, #0
 8001664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001668:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800166c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001670:	f7fe fe1e 	bl	80002b0 <__aeabi_uldivmod>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4613      	mov	r3, r2
 800167a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800167e:	e067      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001680:	4b75      	ldr	r3, [pc, #468]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	099b      	lsrs	r3, r3, #6
 8001686:	2200      	movs	r2, #0
 8001688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800168c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001690:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800169a:	2300      	movs	r3, #0
 800169c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800169e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016a2:	4622      	mov	r2, r4
 80016a4:	462b      	mov	r3, r5
 80016a6:	f04f 0000 	mov.w	r0, #0
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	0159      	lsls	r1, r3, #5
 80016b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b4:	0150      	lsls	r0, r2, #5
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4621      	mov	r1, r4
 80016bc:	1a51      	subs	r1, r2, r1
 80016be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016c0:	4629      	mov	r1, r5
 80016c2:	eb63 0301 	sbc.w	r3, r3, r1
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016d4:	4649      	mov	r1, r9
 80016d6:	018b      	lsls	r3, r1, #6
 80016d8:	4641      	mov	r1, r8
 80016da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016de:	4641      	mov	r1, r8
 80016e0:	018a      	lsls	r2, r1, #6
 80016e2:	4641      	mov	r1, r8
 80016e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016e8:	4649      	mov	r1, r9
 80016ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001702:	4692      	mov	sl, r2
 8001704:	469b      	mov	fp, r3
 8001706:	4623      	mov	r3, r4
 8001708:	eb1a 0303 	adds.w	r3, sl, r3
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	462b      	mov	r3, r5
 8001710:	eb4b 0303 	adc.w	r3, fp, r3
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001722:	4629      	mov	r1, r5
 8001724:	028b      	lsls	r3, r1, #10
 8001726:	4621      	mov	r1, r4
 8001728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800172c:	4621      	mov	r1, r4
 800172e:	028a      	lsls	r2, r1, #10
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001738:	2200      	movs	r2, #0
 800173a:	673b      	str	r3, [r7, #112]	@ 0x70
 800173c:	677a      	str	r2, [r7, #116]	@ 0x74
 800173e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001742:	f7fe fdb5 	bl	80002b0 <__aeabi_uldivmod>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4613      	mov	r3, r2
 800174c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001750:	4b41      	ldr	r3, [pc, #260]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	3301      	adds	r3, #1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001772:	e0eb      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800177c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001780:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d06b      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178c:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x354>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	2200      	movs	r2, #0
 8001794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800179a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179e:	663b      	str	r3, [r7, #96]	@ 0x60
 80017a0:	2300      	movs	r3, #0
 80017a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80017a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017a8:	4622      	mov	r2, r4
 80017aa:	462b      	mov	r3, r5
 80017ac:	f04f 0000 	mov.w	r0, #0
 80017b0:	f04f 0100 	mov.w	r1, #0
 80017b4:	0159      	lsls	r1, r3, #5
 80017b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ba:	0150      	lsls	r0, r2, #5
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4621      	mov	r1, r4
 80017c2:	1a51      	subs	r1, r2, r1
 80017c4:	61b9      	str	r1, [r7, #24]
 80017c6:	4629      	mov	r1, r5
 80017c8:	eb63 0301 	sbc.w	r3, r3, r1
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017da:	4659      	mov	r1, fp
 80017dc:	018b      	lsls	r3, r1, #6
 80017de:	4651      	mov	r1, sl
 80017e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e4:	4651      	mov	r1, sl
 80017e6:	018a      	lsls	r2, r1, #6
 80017e8:	4651      	mov	r1, sl
 80017ea:	ebb2 0801 	subs.w	r8, r2, r1
 80017ee:	4659      	mov	r1, fp
 80017f0:	eb63 0901 	sbc.w	r9, r3, r1
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001800:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001804:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001808:	4690      	mov	r8, r2
 800180a:	4699      	mov	r9, r3
 800180c:	4623      	mov	r3, r4
 800180e:	eb18 0303 	adds.w	r3, r8, r3
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	462b      	mov	r3, r5
 8001816:	eb49 0303 	adc.w	r3, r9, r3
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001828:	4629      	mov	r1, r5
 800182a:	024b      	lsls	r3, r1, #9
 800182c:	4621      	mov	r1, r4
 800182e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001832:	4621      	mov	r1, r4
 8001834:	024a      	lsls	r2, r1, #9
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800183e:	2200      	movs	r2, #0
 8001840:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001842:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001844:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001848:	f7fe fd32 	bl	80002b0 <__aeabi_uldivmod>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4613      	mov	r3, r2
 8001852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001856:	e065      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x420>
 8001858:	40023800 	.word	0x40023800
 800185c:	00f42400 	.word	0x00f42400
 8001860:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001864:	4b3d      	ldr	r3, [pc, #244]	@ (800195c <HAL_RCC_GetSysClockFreq+0x458>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	2200      	movs	r2, #0
 800186c:	4618      	mov	r0, r3
 800186e:	4611      	mov	r1, r2
 8001870:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001874:	653b      	str	r3, [r7, #80]	@ 0x50
 8001876:	2300      	movs	r3, #0
 8001878:	657b      	str	r3, [r7, #84]	@ 0x54
 800187a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800187e:	4642      	mov	r2, r8
 8001880:	464b      	mov	r3, r9
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	0159      	lsls	r1, r3, #5
 800188c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001890:	0150      	lsls	r0, r2, #5
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4641      	mov	r1, r8
 8001898:	1a51      	subs	r1, r2, r1
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	4649      	mov	r1, r9
 800189e:	eb63 0301 	sbc.w	r3, r3, r1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018b0:	4659      	mov	r1, fp
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	4651      	mov	r1, sl
 80018b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ba:	4651      	mov	r1, sl
 80018bc:	018a      	lsls	r2, r1, #6
 80018be:	4651      	mov	r1, sl
 80018c0:	1a54      	subs	r4, r2, r1
 80018c2:	4659      	mov	r1, fp
 80018c4:	eb63 0501 	sbc.w	r5, r3, r1
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	00eb      	lsls	r3, r5, #3
 80018d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d6:	00e2      	lsls	r2, r4, #3
 80018d8:	4614      	mov	r4, r2
 80018da:	461d      	mov	r5, r3
 80018dc:	4643      	mov	r3, r8
 80018de:	18e3      	adds	r3, r4, r3
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	464b      	mov	r3, r9
 80018e4:	eb45 0303 	adc.w	r3, r5, r3
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018f6:	4629      	mov	r1, r5
 80018f8:	028b      	lsls	r3, r1, #10
 80018fa:	4621      	mov	r1, r4
 80018fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001900:	4621      	mov	r1, r4
 8001902:	028a      	lsls	r2, r1, #10
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800190c:	2200      	movs	r2, #0
 800190e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001910:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001912:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001916:	f7fe fccb 	bl	80002b0 <__aeabi_uldivmod>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4613      	mov	r3, r2
 8001920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <HAL_RCC_GetSysClockFreq+0x458>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	0f1b      	lsrs	r3, r3, #28
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001942:	e003      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800194a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001950:	4618      	mov	r0, r3
 8001952:	37b8      	adds	r7, #184	@ 0xb8
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400

08001964 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e28d      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8083 	beq.w	8001a8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001984:	4b94      	ldr	r3, [pc, #592]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b04      	cmp	r3, #4
 800198e:	d019      	beq.n	80019c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001990:	4b91      	ldr	r3, [pc, #580]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
        || \
 8001998:	2b08      	cmp	r3, #8
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800199c:	4b8e      	ldr	r3, [pc, #568]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019a8:	d00c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019aa:	4b8b      	ldr	r3, [pc, #556]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d112      	bne.n	80019dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4b88      	ldr	r3, [pc, #544]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019c2:	d10b      	bne.n	80019dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	4b84      	ldr	r3, [pc, #528]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05b      	beq.n	8001a88 <HAL_RCC_OscConfig+0x124>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d157      	bne.n	8001a88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e25a      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x90>
 80019e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7b      	ldr	r2, [pc, #492]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xcc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0xb4>
 80019fe:	4b76      	ldr	r3, [pc, #472]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a75      	ldr	r2, [pc, #468]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b73      	ldr	r3, [pc, #460]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a72      	ldr	r2, [pc, #456]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xcc>
 8001a18:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f97c 	bl	8000d34 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f978 	bl	8000d34 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e21f      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b61      	ldr	r3, [pc, #388]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xdc>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f968 	bl	8000d34 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f964 	bl	8000d34 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e20b      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x104>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06f      	beq.n	8001b76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a96:	4b50      	ldr	r3, [pc, #320]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d017      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aae:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b47      	ldr	r3, [pc, #284]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d11c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac6:	4b44      	ldr	r3, [pc, #272]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x186>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e1d3      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4937      	ldr	r1, [pc, #220]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	e03a      	b.n	8001b76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d020      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b08:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <HAL_RCC_OscConfig+0x278>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f911 	bl	8000d34 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff f90d 	bl	8000d34 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1b4      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4925      	ldr	r1, [pc, #148]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
 8001b48:	e015      	b.n	8001b76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <HAL_RCC_OscConfig+0x278>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f8f0 	bl	8000d34 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff f8ec 	bl	8000d34 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e193      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d036      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d016      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff f8d0 	bl	8000d34 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff f8cc 	bl	8000d34 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e173      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x234>
 8001bb6:	e01b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f8b9 	bl	8000d34 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	e00e      	b.n	8001be4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f8b5 	bl	8000d34 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d907      	bls.n	8001be4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e15c      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	42470000 	.word	0x42470000
 8001be0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be4:	4b8a      	ldr	r3, [pc, #552]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ea      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8097 	beq.w	8001d2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b83      	ldr	r3, [pc, #524]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b7f      	ldr	r3, [pc, #508]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a7e      	ldr	r2, [pc, #504]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	4b79      	ldr	r3, [pc, #484]	@ (8001e14 <HAL_RCC_OscConfig+0x4b0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d118      	bne.n	8001c6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3a:	4b76      	ldr	r3, [pc, #472]	@ (8001e14 <HAL_RCC_OscConfig+0x4b0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a75      	ldr	r2, [pc, #468]	@ (8001e14 <HAL_RCC_OscConfig+0x4b0>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c46:	f7ff f875 	bl	8000d34 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4e:	f7ff f871 	bl	8000d34 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e118      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b6c      	ldr	r3, [pc, #432]	@ (8001e14 <HAL_RCC_OscConfig+0x4b0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x31e>
 8001c74:	4b66      	ldr	r3, [pc, #408]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c78:	4a65      	ldr	r2, [pc, #404]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c80:	e01c      	b.n	8001cbc <HAL_RCC_OscConfig+0x358>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x340>
 8001c8a:	4b61      	ldr	r3, [pc, #388]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	4a60      	ldr	r2, [pc, #384]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c96:	4b5e      	ldr	r3, [pc, #376]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0x358>
 8001ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca8:	4a59      	ldr	r2, [pc, #356]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb0:	4b57      	ldr	r3, [pc, #348]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb4:	4a56      	ldr	r2, [pc, #344]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	f023 0304 	bic.w	r3, r3, #4
 8001cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d015      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff f836 	bl	8000d34 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff f832 	bl	8000d34 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0d7      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0ee      	beq.n	8001ccc <HAL_RCC_OscConfig+0x368>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f820 	bl	8000d34 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f81c 	bl	8000d34 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0c1      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0e:	4b40      	ldr	r3, [pc, #256]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ee      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d20:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	4a3a      	ldr	r2, [pc, #232]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80ad 	beq.w	8001e90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d36:	4b36      	ldr	r3, [pc, #216]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d060      	beq.n	8001e04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d145      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b33      	ldr	r3, [pc, #204]	@ (8001e18 <HAL_RCC_OscConfig+0x4b4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe fff0 	bl	8000d34 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d58:	f7fe ffec 	bl	8000d34 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e093      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	019b      	lsls	r3, r3, #6
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	071b      	lsls	r3, r3, #28
 8001da2:	491b      	ldr	r1, [pc, #108]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <HAL_RCC_OscConfig+0x4b4>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7fe ffc1 	bl	8000d34 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7fe ffbd 	bl	8000d34 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e064      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x452>
 8001dd4:	e05c      	b.n	8001e90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_RCC_OscConfig+0x4b4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ffaa 	bl	8000d34 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7fe ffa6 	bl	8000d34 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e04d      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_RCC_OscConfig+0x4ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x480>
 8001e02:	e045      	b.n	8001e90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e040      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000
 8001e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <HAL_RCC_OscConfig+0x538>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d030      	beq.n	8001e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d129      	bne.n	8001e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d122      	bne.n	8001e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d119      	bne.n	8001e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	3b01      	subs	r3, #1
 8001e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10f      	bne.n	8001e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e041      	b.n	8001f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f839 	bl	8001f3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 f9c0 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d001      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e04e      	b.n	800200a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d022      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f96:	d01d      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800201c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d018      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8002020 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002024 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00e      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	@ (800202c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a18      	ldr	r2, [pc, #96]	@ (8002030 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d111      	bne.n	8001ff8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d010      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff6:	e007      	b.n	8002008 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40010000 	.word	0x40010000
 800201c:	40000400 	.word	0x40000400
 8002020:	40000800 	.word	0x40000800
 8002024:	40000c00 	.word	0x40000c00
 8002028:	40010400 	.word	0x40010400
 800202c:	40014000 	.word	0x40014000
 8002030:	40001800 	.word	0x40001800

08002034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d020      	beq.n	8002098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01b      	beq.n	8002098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0202 	mvn.w	r2, #2
 8002068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8d2 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8c4 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8d5 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d020      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0204 	mvn.w	r2, #4
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8ac 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f89e 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8af 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d020      	beq.n	8002130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01b      	beq.n	8002130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0208 	mvn.w	r2, #8
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f886 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f878 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f889 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d020      	beq.n	800217c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0210 	mvn.w	r2, #16
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2208      	movs	r2, #8
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f860 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f852 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f863 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0201 	mvn.w	r2, #1
 8002198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fb90 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00c      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f900 	bl	80023c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f834 	bl	8002250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00c      	beq.n	800220c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0220 	mvn.w	r2, #32
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8d2 	bl	80023b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a43      	ldr	r2, [pc, #268]	@ (8002384 <TIM_Base_SetConfig+0x120>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002282:	d00f      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a40      	ldr	r2, [pc, #256]	@ (8002388 <TIM_Base_SetConfig+0x124>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00b      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3f      	ldr	r2, [pc, #252]	@ (800238c <TIM_Base_SetConfig+0x128>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d007      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3e      	ldr	r2, [pc, #248]	@ (8002390 <TIM_Base_SetConfig+0x12c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3d      	ldr	r2, [pc, #244]	@ (8002394 <TIM_Base_SetConfig+0x130>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d108      	bne.n	80022b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a32      	ldr	r2, [pc, #200]	@ (8002384 <TIM_Base_SetConfig+0x120>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c4:	d027      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002388 <TIM_Base_SetConfig+0x124>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d023      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2e      	ldr	r2, [pc, #184]	@ (800238c <TIM_Base_SetConfig+0x128>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01f      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002390 <TIM_Base_SetConfig+0x12c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002394 <TIM_Base_SetConfig+0x130>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d017      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002398 <TIM_Base_SetConfig+0x134>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2a      	ldr	r2, [pc, #168]	@ (800239c <TIM_Base_SetConfig+0x138>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00f      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a29      	ldr	r2, [pc, #164]	@ (80023a0 <TIM_Base_SetConfig+0x13c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a28      	ldr	r2, [pc, #160]	@ (80023a4 <TIM_Base_SetConfig+0x140>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a27      	ldr	r2, [pc, #156]	@ (80023a8 <TIM_Base_SetConfig+0x144>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <TIM_Base_SetConfig+0x148>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800231c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0e      	ldr	r2, [pc, #56]	@ (8002384 <TIM_Base_SetConfig+0x120>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d003      	beq.n	8002356 <TIM_Base_SetConfig+0xf2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a10      	ldr	r2, [pc, #64]	@ (8002394 <TIM_Base_SetConfig+0x130>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d103      	bne.n	800235e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f043 0204 	orr.w	r2, r3, #4
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40010000 	.word	0x40010000
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800
 8002390:	40000c00 	.word	0x40000c00
 8002394:	40010400 	.word	0x40010400
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800
 80023a4:	40001800 	.word	0x40001800
 80023a8:	40001c00 	.word	0x40001c00
 80023ac:	40002000 	.word	0x40002000

080023b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e042      	b.n	8002470 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe faa2 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	@ 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800241a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f973 	bl	8002708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b20      	cmp	r3, #32
 8002496:	d175      	bne.n	8002584 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_UART_Transmit+0x2c>
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e06e      	b.n	8002586 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2221      	movs	r2, #33	@ 0x21
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b6:	f7fe fc3d 	bl	8000d34 <HAL_GetTick>
 80024ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d0:	d108      	bne.n	80024e4 <HAL_UART_Transmit+0x6c>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e003      	b.n	80024ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024ec:	e02e      	b.n	800254c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2180      	movs	r1, #128	@ 0x80
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f848 	bl	800258e <UART_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e03a      	b.n	8002586 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002524:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3302      	adds	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e007      	b.n	800253e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1cb      	bne.n	80024ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	@ 0x40
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f814 	bl	800258e <UART_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e006      	b.n	8002586 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	4613      	mov	r3, r2
 800259c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800259e:	e03b      	b.n	8002618 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a6:	d037      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a8:	f7fe fbc4 	bl	8000d34 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	6a3a      	ldr	r2, [r7, #32]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d302      	bcc.n	80025be <UART_WaitOnFlagUntilTimeout+0x30>
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e03a      	b.n	8002638 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d023      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b80      	cmp	r3, #128	@ 0x80
 80025d4:	d020      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b40      	cmp	r3, #64	@ 0x40
 80025da:	d01d      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d116      	bne.n	8002618 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f81d 	bl	8002640 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2208      	movs	r2, #8
 800260a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e00f      	b.n	8002638 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4013      	ands	r3, r2
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	429a      	cmp	r2, r3
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	429a      	cmp	r2, r3
 8002634:	d0b4      	beq.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002640:	b480      	push	{r7}
 8002642:	b095      	sub	sp, #84	@ 0x54
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002652:	e853 3f00 	ldrex	r3, [r3]
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800265e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	330c      	adds	r3, #12
 8002666:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002668:	643a      	str	r2, [r7, #64]	@ 0x40
 800266a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800266e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002670:	e841 2300 	strex	r3, r2, [r1]
 8002674:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e5      	bne.n	8002648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3314      	adds	r3, #20
 8002682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	e853 3f00 	ldrex	r3, [r3]
 800268a:	61fb      	str	r3, [r7, #28]
   return(result);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3314      	adds	r3, #20
 800269a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800269c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026a4:	e841 2300 	strex	r3, r2, [r1]
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e5      	bne.n	800267c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d119      	bne.n	80026ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	e853 3f00 	ldrex	r3, [r3]
 80026c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f023 0310 	bic.w	r3, r3, #16
 80026ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026d8:	61ba      	str	r2, [r7, #24]
 80026da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026dc:	6979      	ldr	r1, [r7, #20]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	e841 2300 	strex	r3, r2, [r1]
 80026e4:	613b      	str	r3, [r7, #16]
   return(result);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e5      	bne.n	80026b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026fa:	bf00      	nop
 80026fc:	3754      	adds	r7, #84	@ 0x54
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800270c:	b0c0      	sub	sp, #256	@ 0x100
 800270e:	af00      	add	r7, sp, #0
 8002710:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	68d9      	ldr	r1, [r3, #12]
 8002726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	ea40 0301 	orr.w	r3, r0, r1
 8002730:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	431a      	orrs	r2, r3
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	431a      	orrs	r2, r3
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002760:	f021 010c 	bic.w	r1, r1, #12
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800276e:	430b      	orrs	r3, r1
 8002770:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800277e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002782:	6999      	ldr	r1, [r3, #24]
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	ea40 0301 	orr.w	r3, r0, r1
 800278e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b8f      	ldr	r3, [pc, #572]	@ (80029d4 <UART_SetConfig+0x2cc>)
 8002798:	429a      	cmp	r2, r3
 800279a:	d005      	beq.n	80027a8 <UART_SetConfig+0xa0>
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b8d      	ldr	r3, [pc, #564]	@ (80029d8 <UART_SetConfig+0x2d0>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d104      	bne.n	80027b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027a8:	f7fe fe66 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 80027ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027b0:	e003      	b.n	80027ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027b2:	f7fe fe4d 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 80027b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027c4:	f040 810c 	bne.w	80029e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027da:	4622      	mov	r2, r4
 80027dc:	462b      	mov	r3, r5
 80027de:	1891      	adds	r1, r2, r2
 80027e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027e2:	415b      	adcs	r3, r3
 80027e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027ea:	4621      	mov	r1, r4
 80027ec:	eb12 0801 	adds.w	r8, r2, r1
 80027f0:	4629      	mov	r1, r5
 80027f2:	eb43 0901 	adc.w	r9, r3, r1
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800280a:	4690      	mov	r8, r2
 800280c:	4699      	mov	r9, r3
 800280e:	4623      	mov	r3, r4
 8002810:	eb18 0303 	adds.w	r3, r8, r3
 8002814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002818:	462b      	mov	r3, r5
 800281a:	eb49 0303 	adc.w	r3, r9, r3
 800281e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800282e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002832:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002836:	460b      	mov	r3, r1
 8002838:	18db      	adds	r3, r3, r3
 800283a:	653b      	str	r3, [r7, #80]	@ 0x50
 800283c:	4613      	mov	r3, r2
 800283e:	eb42 0303 	adc.w	r3, r2, r3
 8002842:	657b      	str	r3, [r7, #84]	@ 0x54
 8002844:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002848:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800284c:	f7fd fd30 	bl	80002b0 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4b61      	ldr	r3, [pc, #388]	@ (80029dc <UART_SetConfig+0x2d4>)
 8002856:	fba3 2302 	umull	r2, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	011c      	lsls	r4, r3, #4
 800285e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002868:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800286c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002870:	4642      	mov	r2, r8
 8002872:	464b      	mov	r3, r9
 8002874:	1891      	adds	r1, r2, r2
 8002876:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002878:	415b      	adcs	r3, r3
 800287a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800287c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002880:	4641      	mov	r1, r8
 8002882:	eb12 0a01 	adds.w	sl, r2, r1
 8002886:	4649      	mov	r1, r9
 8002888:	eb43 0b01 	adc.w	fp, r3, r1
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002898:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800289c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028a0:	4692      	mov	sl, r2
 80028a2:	469b      	mov	fp, r3
 80028a4:	4643      	mov	r3, r8
 80028a6:	eb1a 0303 	adds.w	r3, sl, r3
 80028aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028ae:	464b      	mov	r3, r9
 80028b0:	eb4b 0303 	adc.w	r3, fp, r3
 80028b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028cc:	460b      	mov	r3, r1
 80028ce:	18db      	adds	r3, r3, r3
 80028d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80028d2:	4613      	mov	r3, r2
 80028d4:	eb42 0303 	adc.w	r3, r2, r3
 80028d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028e2:	f7fd fce5 	bl	80002b0 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	4b3b      	ldr	r3, [pc, #236]	@ (80029dc <UART_SetConfig+0x2d4>)
 80028ee:	fba3 2301 	umull	r2, r3, r3, r1
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2264      	movs	r2, #100	@ 0x64
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	1acb      	subs	r3, r1, r3
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002902:	4b36      	ldr	r3, [pc, #216]	@ (80029dc <UART_SetConfig+0x2d4>)
 8002904:	fba3 2302 	umull	r2, r3, r3, r2
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002910:	441c      	add	r4, r3
 8002912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002916:	2200      	movs	r2, #0
 8002918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800291c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002920:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	1891      	adds	r1, r2, r2
 800292a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800292c:	415b      	adcs	r3, r3
 800292e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002930:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002934:	4641      	mov	r1, r8
 8002936:	1851      	adds	r1, r2, r1
 8002938:	6339      	str	r1, [r7, #48]	@ 0x30
 800293a:	4649      	mov	r1, r9
 800293c:	414b      	adcs	r3, r1
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800294c:	4659      	mov	r1, fp
 800294e:	00cb      	lsls	r3, r1, #3
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002956:	4651      	mov	r1, sl
 8002958:	00ca      	lsls	r2, r1, #3
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	4603      	mov	r3, r0
 8002960:	4642      	mov	r2, r8
 8002962:	189b      	adds	r3, r3, r2
 8002964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002968:	464b      	mov	r3, r9
 800296a:	460a      	mov	r2, r1
 800296c:	eb42 0303 	adc.w	r3, r2, r3
 8002970:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002980:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002984:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002988:	460b      	mov	r3, r1
 800298a:	18db      	adds	r3, r3, r3
 800298c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800298e:	4613      	mov	r3, r2
 8002990:	eb42 0303 	adc.w	r3, r2, r3
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002996:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800299a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800299e:	f7fd fc87 	bl	80002b0 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <UART_SetConfig+0x2d4>)
 80029a8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	2164      	movs	r1, #100	@ 0x64
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	3332      	adds	r3, #50	@ 0x32
 80029ba:	4a08      	ldr	r2, [pc, #32]	@ (80029dc <UART_SetConfig+0x2d4>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	f003 0207 	and.w	r2, r3, #7
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4422      	add	r2, r4
 80029ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029d0:	e106      	b.n	8002be0 <UART_SetConfig+0x4d8>
 80029d2:	bf00      	nop
 80029d4:	40011000 	.word	0x40011000
 80029d8:	40011400 	.word	0x40011400
 80029dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029f2:	4642      	mov	r2, r8
 80029f4:	464b      	mov	r3, r9
 80029f6:	1891      	adds	r1, r2, r2
 80029f8:	6239      	str	r1, [r7, #32]
 80029fa:	415b      	adcs	r3, r3
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a02:	4641      	mov	r1, r8
 8002a04:	1854      	adds	r4, r2, r1
 8002a06:	4649      	mov	r1, r9
 8002a08:	eb43 0501 	adc.w	r5, r3, r1
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	00eb      	lsls	r3, r5, #3
 8002a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1a:	00e2      	lsls	r2, r4, #3
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	461d      	mov	r5, r3
 8002a20:	4643      	mov	r3, r8
 8002a22:	18e3      	adds	r3, r4, r3
 8002a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a28:	464b      	mov	r3, r9
 8002a2a:	eb45 0303 	adc.w	r3, r5, r3
 8002a2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a4e:	4629      	mov	r1, r5
 8002a50:	008b      	lsls	r3, r1, #2
 8002a52:	4621      	mov	r1, r4
 8002a54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a58:	4621      	mov	r1, r4
 8002a5a:	008a      	lsls	r2, r1, #2
 8002a5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a60:	f7fd fc26 	bl	80002b0 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4b60      	ldr	r3, [pc, #384]	@ (8002bec <UART_SetConfig+0x4e4>)
 8002a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	011c      	lsls	r4, r3, #4
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	61b9      	str	r1, [r7, #24]
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a94:	4641      	mov	r1, r8
 8002a96:	1851      	adds	r1, r2, r1
 8002a98:	6139      	str	r1, [r7, #16]
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	414b      	adcs	r3, r1
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aac:	4659      	mov	r1, fp
 8002aae:	00cb      	lsls	r3, r1, #3
 8002ab0:	4651      	mov	r1, sl
 8002ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	00ca      	lsls	r2, r1, #3
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	189b      	adds	r3, r3, r2
 8002ac4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ac8:	464b      	mov	r3, r9
 8002aca:	460a      	mov	r2, r1
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ade:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002aec:	4649      	mov	r1, r9
 8002aee:	008b      	lsls	r3, r1, #2
 8002af0:	4641      	mov	r1, r8
 8002af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002af6:	4641      	mov	r1, r8
 8002af8:	008a      	lsls	r2, r1, #2
 8002afa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002afe:	f7fd fbd7 	bl	80002b0 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	4b38      	ldr	r3, [pc, #224]	@ (8002bec <UART_SetConfig+0x4e4>)
 8002b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2264      	movs	r2, #100	@ 0x64
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	1acb      	subs	r3, r1, r3
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	3332      	adds	r3, #50	@ 0x32
 8002b1c:	4a33      	ldr	r2, [pc, #204]	@ (8002bec <UART_SetConfig+0x4e4>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b28:	441c      	add	r4, r3
 8002b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2e:	2200      	movs	r2, #0
 8002b30:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b32:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	415b      	adcs	r3, r3
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b48:	4641      	mov	r1, r8
 8002b4a:	1851      	adds	r1, r2, r1
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	4649      	mov	r1, r9
 8002b50:	414b      	adcs	r3, r1
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b60:	4659      	mov	r1, fp
 8002b62:	00cb      	lsls	r3, r1, #3
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	00ca      	lsls	r2, r1, #3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4642      	mov	r2, r8
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	eb42 0303 	adc.w	r3, r2, r3
 8002b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	008b      	lsls	r3, r1, #2
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ba6:	4641      	mov	r1, r8
 8002ba8:	008a      	lsls	r2, r1, #2
 8002baa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bae:	f7fd fb7f 	bl	80002b0 <__aeabi_uldivmod>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <UART_SetConfig+0x4e4>)
 8002bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	2164      	movs	r1, #100	@ 0x64
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	3332      	adds	r3, #50	@ 0x32
 8002bca:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <UART_SetConfig+0x4e4>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	f003 020f 	and.w	r2, r3, #15
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4422      	add	r2, r4
 8002bde:	609a      	str	r2, [r3, #8]
}
 8002be0:	bf00      	nop
 8002be2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002be6:	46bd      	mov	sp, r7
 8002be8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bec:	51eb851f 	.word	0x51eb851f

08002bf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <SysTick_Handler+0x1c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bf8:	f001 fc18 	bl	800442c <xTaskGetSchedulerState>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d001      	beq.n	8002c06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c02:	f002 fa11 	bl	8005028 <xPortSysTickHandler>
  }
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a06      	ldr	r2, [pc, #24]	@ (8002c40 <vApplicationGetIdleTaskMemory+0x30>)
 8002c26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2280      	movs	r2, #128	@ 0x80
 8002c2c:	601a      	str	r2, [r3, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000130 	.word	0x20000130
 8002c40:	2000018c 	.word	0x2000018c

08002c44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4a06      	ldr	r2, [pc, #24]	@ (8002c74 <vApplicationGetTimerTaskMemory+0x30>)
 8002c5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c62:	601a      	str	r2, [r3, #0]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	2000038c 	.word	0x2000038c
 8002c74:	200003e8 	.word	0x200003e8

08002c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f103 0208 	add.w	r2, r3, #8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f103 0208 	add.w	r2, r3, #8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f103 0208 	add.w	r2, r3, #8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d103      	bne.n	8002d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e00c      	b.n	8002d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e002      	b.n	8002d48 <vListInsert+0x2e>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d2f6      	bcs.n	8002d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	601a      	str	r2, [r3, #0]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6892      	ldr	r2, [r2, #8]
 8002da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6852      	ldr	r2, [r2, #4]
 8002dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d103      	bne.n	8002dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e0c:	f002 f87c 	bl	8004f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	441a      	add	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	68f9      	ldr	r1, [r7, #12]
 8002e40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	441a      	add	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	22ff      	movs	r2, #255	@ 0xff
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	22ff      	movs	r2, #255	@ 0xff
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d114      	bne.n	8002e8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01a      	beq.n	8002ea0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f91a 	bl	80040a8 <xTaskRemoveFromEventList>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d012      	beq.n	8002ea0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <xQueueGenericReset+0xd0>)
 8002e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	e009      	b.n	8002ea0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3310      	adds	r3, #16
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fef1 	bl	8002c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3324      	adds	r3, #36	@ 0x24
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff feec 	bl	8002c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ea0:	f002 f864 	bl	8004f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	@ 0x38
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	e7fd      	b.n	8002efa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <xQueueGenericCreateStatic+0x56>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <xQueueGenericCreateStatic+0x5a>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <xQueueGenericCreateStatic+0x5c>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	623b      	str	r3, [r7, #32]
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <xQueueGenericCreateStatic+0x84>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <xQueueGenericCreateStatic+0x88>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <xQueueGenericCreateStatic+0x8a>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	61fb      	str	r3, [r7, #28]
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f5a:	2350      	movs	r3, #80	@ 0x50
 8002f5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b50      	cmp	r3, #80	@ 0x50
 8002f62:	d00b      	beq.n	8002f7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61bb      	str	r3, [r7, #24]
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00d      	beq.n	8002fa4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f805 	bl	8002fae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3730      	adds	r7, #48	@ 0x30
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e002      	b.n	8002fd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fdc:	2101      	movs	r1, #1
 8002fde:	69b8      	ldr	r0, [r7, #24]
 8002fe0:	f7ff fefe 	bl	8002de0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	@ 0x38
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003002:	2300      	movs	r3, #0
 8003004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <xQueueGenericSend+0x34>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <xQueueGenericSend+0x42>
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <xQueueGenericSend+0x46>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <xQueueGenericSend+0x48>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <xQueueGenericSend+0x64>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d103      	bne.n	8003066 <xQueueGenericSend+0x72>
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <xQueueGenericSend+0x76>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <xQueueGenericSend+0x78>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <xQueueGenericSend+0x94>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	623b      	str	r3, [r7, #32]
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003088:	f001 f9d0 	bl	800442c <xTaskGetSchedulerState>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <xQueueGenericSend+0xa4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <xQueueGenericSend+0xa8>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <xQueueGenericSend+0xaa>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <xQueueGenericSend+0xc6>
	__asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	61fb      	str	r3, [r7, #28]
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	e7fd      	b.n	80030b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ba:	f001 ff25 	bl	8004f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <xQueueGenericSend+0xdc>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d129      	bne.n	8003124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030d6:	f000 fa0f 	bl	80034f8 <prvCopyDataToQueue>
 80030da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	3324      	adds	r3, #36	@ 0x24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 ffdd 	bl	80040a8 <xTaskRemoveFromEventList>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d013      	beq.n	800311c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030f4:	4b3f      	ldr	r3, [pc, #252]	@ (80031f4 <xQueueGenericSend+0x200>)
 80030f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	e00a      	b.n	800311c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800310c:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <xQueueGenericSend+0x200>)
 800310e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800311c:	f001 ff26 	bl	8004f6c <vPortExitCritical>
				return pdPASS;
 8003120:	2301      	movs	r3, #1
 8003122:	e063      	b.n	80031ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800312a:	f001 ff1f 	bl	8004f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800312e:	2300      	movs	r3, #0
 8003130:	e05c      	b.n	80031ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4618      	mov	r0, r3
 800313e:	f001 f817 	bl	8004170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003142:	2301      	movs	r3, #1
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003146:	f001 ff11 	bl	8004f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800314a:	f000 fd87 	bl	8003c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800314e:	f001 fedb 	bl	8004f08 <vPortEnterCritical>
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003158:	b25b      	sxtb	r3, r3
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d103      	bne.n	8003168 <xQueueGenericSend+0x174>
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800316e:	b25b      	sxtb	r3, r3
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d103      	bne.n	800317e <xQueueGenericSend+0x18a>
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800317e:	f001 fef5 	bl	8004f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003182:	1d3a      	adds	r2, r7, #4
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f001 f806 	bl	800419c <xTaskCheckForTimeOut>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d124      	bne.n	80031e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003198:	f000 faa6 	bl	80036e8 <prvIsQueueFull>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	3310      	adds	r3, #16
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 ff2a 	bl	8004004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031b2:	f000 fa31 	bl	8003618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031b6:	f000 fd5f 	bl	8003c78 <xTaskResumeAll>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f af7c 	bne.w	80030ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031c2:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <xQueueGenericSend+0x200>)
 80031c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	e772      	b.n	80030ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031d6:	f000 fa1f 	bl	8003618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031da:	f000 fd4d 	bl	8003c78 <xTaskResumeAll>
 80031de:	e76c      	b.n	80030ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031e2:	f000 fa19 	bl	8003618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e6:	f000 fd47 	bl	8003c78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3738      	adds	r7, #56	@ 0x38
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b090      	sub	sp, #64	@ 0x40
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800320a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <xQueueGenericSendFromISR+0x3e>
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <xQueueGenericSendFromISR+0x42>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <xQueueGenericSendFromISR+0x44>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	e7fd      	b.n	8003254 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d103      	bne.n	8003266 <xQueueGenericSendFromISR+0x6e>
 800325e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <xQueueGenericSendFromISR+0x72>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <xQueueGenericSendFromISR+0x74>
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	623b      	str	r3, [r7, #32]
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003288:	f001 ff1e 	bl	80050c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800328c:	f3ef 8211 	mrs	r2, BASEPRI
 8003290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	61fa      	str	r2, [r7, #28]
 80032a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <xQueueGenericSendFromISR+0xc2>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d12f      	bne.n	800331a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032d0:	f000 f912 	bl	80034f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d112      	bne.n	8003304 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	3324      	adds	r3, #36	@ 0x24
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fedc 	bl	80040a8 <xTaskRemoveFromEventList>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00e      	beq.n	8003314 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e007      	b.n	8003314 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003308:	3301      	adds	r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	b25a      	sxtb	r2, r3
 800330e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003314:	2301      	movs	r3, #1
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003318:	e001      	b.n	800331e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800331a:	2300      	movs	r3, #0
 800331c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800331e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003320:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003328:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800332a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800332c:	4618      	mov	r0, r3
 800332e:	3740      	adds	r7, #64	@ 0x40
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	@ 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <xQueueReceive+0x32>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	623b      	str	r3, [r7, #32]
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	e7fd      	b.n	8003362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <xQueueReceive+0x40>
 800336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <xQueueReceive+0x44>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <xQueueReceive+0x46>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <xQueueReceive+0x62>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	61fb      	str	r3, [r7, #28]
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	e7fd      	b.n	8003392 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003396:	f001 f849 	bl	800442c <xTaskGetSchedulerState>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <xQueueReceive+0x72>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <xQueueReceive+0x76>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <xQueueReceive+0x78>
 80033aa:	2300      	movs	r3, #0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <xQueueReceive+0x94>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	61bb      	str	r3, [r7, #24]
}
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033c8:	f001 fd9e 	bl	8004f08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01f      	beq.n	8003418 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033dc:	f000 f8f6 	bl	80035cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	1e5a      	subs	r2, r3, #1
 80033e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00f      	beq.n	8003410 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f2:	3310      	adds	r3, #16
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fe57 	bl	80040a8 <xTaskRemoveFromEventList>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003400:	4b3c      	ldr	r3, [pc, #240]	@ (80034f4 <xQueueReceive+0x1c0>)
 8003402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003410:	f001 fdac 	bl	8004f6c <vPortExitCritical>
				return pdPASS;
 8003414:	2301      	movs	r3, #1
 8003416:	e069      	b.n	80034ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800341e:	f001 fda5 	bl	8004f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003422:	2300      	movs	r3, #0
 8003424:	e062      	b.n	80034ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800342c:	f107 0310 	add.w	r3, r7, #16
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fe9d 	bl	8004170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003436:	2301      	movs	r3, #1
 8003438:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800343a:	f001 fd97 	bl	8004f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800343e:	f000 fc0d 	bl	8003c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003442:	f001 fd61 	bl	8004f08 <vPortEnterCritical>
 8003446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d103      	bne.n	800345c <xQueueReceive+0x128>
 8003454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003462:	b25b      	sxtb	r3, r3
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d103      	bne.n	8003472 <xQueueReceive+0x13e>
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003472:	f001 fd7b 	bl	8004f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003476:	1d3a      	adds	r2, r7, #4
 8003478:	f107 0310 	add.w	r3, r7, #16
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fe8c 	bl	800419c <xTaskCheckForTimeOut>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d123      	bne.n	80034d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800348a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800348c:	f000 f916 	bl	80036bc <prvIsQueueEmpty>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d017      	beq.n	80034c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	3324      	adds	r3, #36	@ 0x24
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fdb0 	bl	8004004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034a6:	f000 f8b7 	bl	8003618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034aa:	f000 fbe5 	bl	8003c78 <xTaskResumeAll>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d189      	bne.n	80033c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80034b4:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <xQueueReceive+0x1c0>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	e780      	b.n	80033c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034c8:	f000 f8a6 	bl	8003618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034cc:	f000 fbd4 	bl	8003c78 <xTaskResumeAll>
 80034d0:	e77a      	b.n	80033c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034d4:	f000 f8a0 	bl	8003618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034d8:	f000 fbce 	bl	8003c78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034de:	f000 f8ed 	bl	80036bc <prvIsQueueEmpty>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f43f af6f 	beq.w	80033c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3730      	adds	r7, #48	@ 0x30
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	e000ed04 	.word	0xe000ed04

080034f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d14d      	bne.n	80035ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 ffa0 	bl	8004468 <xTaskPriorityDisinherit>
 8003528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	e043      	b.n	80035ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d119      	bne.n	800356c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6858      	ldr	r0, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	461a      	mov	r2, r3
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	f002 f983 	bl	800584e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	441a      	add	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	d32b      	bcc.n	80035ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	e026      	b.n	80035ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68d8      	ldr	r0, [r3, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	461a      	mov	r2, r3
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	f002 f969 	bl	800584e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	425b      	negs	r3, r3
 8003586:	441a      	add	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d207      	bcs.n	80035a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	425b      	negs	r3, r3
 80035a2:	441a      	add	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d105      	bne.n	80035ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80035c2:	697b      	ldr	r3, [r7, #20]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d018      	beq.n	8003610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	441a      	add	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d303      	bcc.n	8003600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68d9      	ldr	r1, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	461a      	mov	r2, r3
 800360a:	6838      	ldr	r0, [r7, #0]
 800360c:	f002 f91f 	bl	800584e <memcpy>
	}
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003620:	f001 fc72 	bl	8004f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800362a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800362c:	e011      	b.n	8003652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d012      	beq.n	800365c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3324      	adds	r3, #36	@ 0x24
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fd34 	bl	80040a8 <xTaskRemoveFromEventList>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003646:	f000 fe0d 	bl	8004264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	3b01      	subs	r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	dce9      	bgt.n	800362e <prvUnlockQueue+0x16>
 800365a:	e000      	b.n	800365e <prvUnlockQueue+0x46>
					break;
 800365c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	22ff      	movs	r2, #255	@ 0xff
 8003662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003666:	f001 fc81 	bl	8004f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800366a:	f001 fc4d 	bl	8004f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003676:	e011      	b.n	800369c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3310      	adds	r3, #16
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fd0f 	bl	80040a8 <xTaskRemoveFromEventList>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003690:	f000 fde8 	bl	8004264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	3b01      	subs	r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800369c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	dce9      	bgt.n	8003678 <prvUnlockQueue+0x60>
 80036a4:	e000      	b.n	80036a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	22ff      	movs	r2, #255	@ 0xff
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80036b0:	f001 fc5c 	bl	8004f6c <vPortExitCritical>
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036c4:	f001 fc20 	bl	8004f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e001      	b.n	80036da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036da:	f001 fc47 	bl	8004f6c <vPortExitCritical>

	return xReturn;
 80036de:	68fb      	ldr	r3, [r7, #12]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036f0:	f001 fc0a 	bl	8004f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d102      	bne.n	8003706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003700:	2301      	movs	r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e001      	b.n	800370a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800370a:	f001 fc2f 	bl	8004f6c <vPortExitCritical>

	return xReturn;
 800370e:	68fb      	ldr	r3, [r7, #12]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e014      	b.n	8003752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003728:	4a0f      	ldr	r2, [pc, #60]	@ (8003768 <vQueueAddToRegistry+0x50>)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003734:	490c      	ldr	r1, [pc, #48]	@ (8003768 <vQueueAddToRegistry+0x50>)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <vQueueAddToRegistry+0x50>)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800374a:	e006      	b.n	800375a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b07      	cmp	r3, #7
 8003756:	d9e7      	bls.n	8003728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	200007e8 	.word	0x200007e8

0800376c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800377c:	f001 fbc4 	bl	8004f08 <vPortEnterCritical>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003786:	b25b      	sxtb	r3, r3
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d103      	bne.n	8003796 <vQueueWaitForMessageRestricted+0x2a>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800379c:	b25b      	sxtb	r3, r3
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d103      	bne.n	80037ac <vQueueWaitForMessageRestricted+0x40>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ac:	f001 fbde 	bl	8004f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3324      	adds	r3, #36	@ 0x24
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fc45 	bl	8004050 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037c6:	6978      	ldr	r0, [r7, #20]
 80037c8:	f7ff ff26 	bl	8003618 <prvUnlockQueue>
	}
 80037cc:	bf00      	nop
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08e      	sub	sp, #56	@ 0x38
 80037d8:	af04      	add	r7, sp, #16
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10b      	bne.n	8003800 <xTaskCreateStatic+0x2c>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	623b      	str	r3, [r7, #32]
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	61fb      	str	r3, [r7, #28]
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	e7fd      	b.n	800381a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800381e:	235c      	movs	r3, #92	@ 0x5c
 8003820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b5c      	cmp	r3, #92	@ 0x5c
 8003826:	d00b      	beq.n	8003840 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	61bb      	str	r3, [r7, #24]
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003840:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01e      	beq.n	8003886 <xTaskCreateStatic+0xb2>
 8003848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01b      	beq.n	8003886 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003856:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003860:	2300      	movs	r3, #0
 8003862:	9303      	str	r3, [sp, #12]
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	9302      	str	r3, [sp, #8]
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f850 	bl	800391e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800387e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003880:	f000 f8de 	bl	8003a40 <prvAddNewTaskToReadyList>
 8003884:	e001      	b.n	800388a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800388a:	697b      	ldr	r3, [r7, #20]
	}
 800388c:	4618      	mov	r0, r3
 800388e:	3728      	adds	r7, #40	@ 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08c      	sub	sp, #48	@ 0x30
 8003898:	af04      	add	r7, sp, #16
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 fc4f 	bl	800514c <pvPortMalloc>
 80038ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00e      	beq.n	80038d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038b6:	205c      	movs	r0, #92	@ 0x5c
 80038b8:	f001 fc48 	bl	800514c <pvPortMalloc>
 80038bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80038ca:	e005      	b.n	80038d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038cc:	6978      	ldr	r0, [r7, #20]
 80038ce:	f001 fd0b 	bl	80052e8 <vPortFree>
 80038d2:	e001      	b.n	80038d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d017      	beq.n	800390e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9303      	str	r3, [sp, #12]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f80e 	bl	800391e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003902:	69f8      	ldr	r0, [r7, #28]
 8003904:	f000 f89c 	bl	8003a40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003908:	2301      	movs	r3, #1
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e002      	b.n	8003914 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003914:	69bb      	ldr	r3, [r7, #24]
	}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b088      	sub	sp, #32
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	461a      	mov	r2, r3
 8003936:	21a5      	movs	r1, #165	@ 0xa5
 8003938:	f001 ff0d 	bl	8005756 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003946:	3b01      	subs	r3, #1
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f023 0307 	bic.w	r3, r3, #7
 8003954:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	617b      	str	r3, [r7, #20]
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01f      	beq.n	80039be <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e012      	b.n	80039aa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	7819      	ldrb	r1, [r3, #0]
 800398c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	3334      	adds	r3, #52	@ 0x34
 8003994:	460a      	mov	r2, r1
 8003996:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	3301      	adds	r3, #1
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b0f      	cmp	r3, #15
 80039ae:	d9e9      	bls.n	8003984 <prvInitialiseNewTask+0x66>
 80039b0:	e000      	b.n	80039b4 <prvInitialiseNewTask+0x96>
			{
				break;
 80039b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039bc:	e003      	b.n	80039c6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	2b37      	cmp	r3, #55	@ 0x37
 80039ca:	d901      	bls.n	80039d0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039cc:	2337      	movs	r3, #55	@ 0x37
 80039ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039da:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	2200      	movs	r2, #0
 80039e0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	3304      	adds	r3, #4
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff f966 	bl	8002cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	3318      	adds	r3, #24
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff f961 	bl	8002cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	2200      	movs	r2, #0
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	68f9      	ldr	r1, [r7, #12]
 8003a1e:	69b8      	ldr	r0, [r7, #24]
 8003a20:	f001 f940 	bl	8004ca4 <pxPortInitialiseStack>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a36:	bf00      	nop
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a48:	f001 fa5e 	bl	8004f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b04 <prvAddNewTaskToReadyList+0xc4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	4a2c      	ldr	r2, [pc, #176]	@ (8003b04 <prvAddNewTaskToReadyList+0xc4>)
 8003a54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a56:	4b2c      	ldr	r3, [pc, #176]	@ (8003b08 <prvAddNewTaskToReadyList+0xc8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003b08 <prvAddNewTaskToReadyList+0xc8>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a64:	4b27      	ldr	r3, [pc, #156]	@ (8003b04 <prvAddNewTaskToReadyList+0xc4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d110      	bne.n	8003a8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a6c:	f000 fc20 	bl	80042b0 <prvInitialiseTaskLists>
 8003a70:	e00d      	b.n	8003a8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a72:	4b26      	ldr	r3, [pc, #152]	@ (8003b0c <prvAddNewTaskToReadyList+0xcc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a7a:	4b23      	ldr	r3, [pc, #140]	@ (8003b08 <prvAddNewTaskToReadyList+0xc8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d802      	bhi.n	8003a8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a88:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <prvAddNewTaskToReadyList+0xc8>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a8e:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <prvAddNewTaskToReadyList+0xd0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3301      	adds	r3, #1
 8003a94:	4a1e      	ldr	r2, [pc, #120]	@ (8003b10 <prvAddNewTaskToReadyList+0xd0>)
 8003a96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a98:	4b1d      	ldr	r3, [pc, #116]	@ (8003b10 <prvAddNewTaskToReadyList+0xd0>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <prvAddNewTaskToReadyList+0xd4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d903      	bls.n	8003ab4 <prvAddNewTaskToReadyList+0x74>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <prvAddNewTaskToReadyList+0xd4>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <prvAddNewTaskToReadyList+0xd8>)
 8003ac2:	441a      	add	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f7ff f901 	bl	8002cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ad0:	f001 fa4c 	bl	8004f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <prvAddNewTaskToReadyList+0xcc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003adc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <prvAddNewTaskToReadyList+0xc8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d207      	bcs.n	8003afa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aea:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <prvAddNewTaskToReadyList+0xdc>)
 8003aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000cfc 	.word	0x20000cfc
 8003b08:	20000828 	.word	0x20000828
 8003b0c:	20000d08 	.word	0x20000d08
 8003b10:	20000d18 	.word	0x20000d18
 8003b14:	20000d04 	.word	0x20000d04
 8003b18:	2000082c 	.word	0x2000082c
 8003b1c:	e000ed04 	.word	0xe000ed04

08003b20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d018      	beq.n	8003b64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b32:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <vTaskDelay+0x64>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <vTaskDelay+0x32>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	60bb      	str	r3, [r7, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	e7fd      	b.n	8003b4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b52:	f000 f883 	bl	8003c5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b56:	2100      	movs	r1, #0
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fcf5 	bl	8004548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b5e:	f000 f88b 	bl	8003c78 <xTaskResumeAll>
 8003b62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b6a:	4b07      	ldr	r3, [pc, #28]	@ (8003b88 <vTaskDelay+0x68>)
 8003b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000d24 	.word	0x20000d24
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	@ 0x28
 8003b90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b9a:	463a      	mov	r2, r7
 8003b9c:	1d39      	adds	r1, r7, #4
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff f834 	bl	8002c10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	9202      	str	r2, [sp, #8]
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	460a      	mov	r2, r1
 8003bba:	4922      	ldr	r1, [pc, #136]	@ (8003c44 <vTaskStartScheduler+0xb8>)
 8003bbc:	4822      	ldr	r0, [pc, #136]	@ (8003c48 <vTaskStartScheduler+0xbc>)
 8003bbe:	f7ff fe09 	bl	80037d4 <xTaskCreateStatic>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4a21      	ldr	r2, [pc, #132]	@ (8003c4c <vTaskStartScheduler+0xc0>)
 8003bc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bc8:	4b20      	ldr	r3, [pc, #128]	@ (8003c4c <vTaskStartScheduler+0xc0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e001      	b.n	8003bda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d102      	bne.n	8003be6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003be0:	f000 fd06 	bl	80045f0 <xTimerCreateTimerTask>
 8003be4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d116      	bne.n	8003c1a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	613b      	str	r3, [r7, #16]
}
 8003bfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c00:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <vTaskStartScheduler+0xc4>)
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c08:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <vTaskStartScheduler+0xc8>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c0e:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <vTaskStartScheduler+0xcc>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c14:	f001 f8d4 	bl	8004dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c18:	e00f      	b.n	8003c3a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d10b      	bne.n	8003c3a <vTaskStartScheduler+0xae>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	60fb      	str	r3, [r7, #12]
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	e7fd      	b.n	8003c36 <vTaskStartScheduler+0xaa>
}
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	08006410 	.word	0x08006410
 8003c48:	0800427d 	.word	0x0800427d
 8003c4c:	20000d20 	.word	0x20000d20
 8003c50:	20000d1c 	.word	0x20000d1c
 8003c54:	20000d08 	.word	0x20000d08
 8003c58:	20000d00 	.word	0x20000d00

08003c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c60:	4b04      	ldr	r3, [pc, #16]	@ (8003c74 <vTaskSuspendAll+0x18>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	4a03      	ldr	r2, [pc, #12]	@ (8003c74 <vTaskSuspendAll+0x18>)
 8003c68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	20000d24 	.word	0x20000d24

08003c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c86:	4b42      	ldr	r3, [pc, #264]	@ (8003d90 <xTaskResumeAll+0x118>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	603b      	str	r3, [r7, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	e7fd      	b.n	8003ca2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ca6:	f001 f92f 	bl	8004f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003caa:	4b39      	ldr	r3, [pc, #228]	@ (8003d90 <xTaskResumeAll+0x118>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	4a37      	ldr	r2, [pc, #220]	@ (8003d90 <xTaskResumeAll+0x118>)
 8003cb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb4:	4b36      	ldr	r3, [pc, #216]	@ (8003d90 <xTaskResumeAll+0x118>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d162      	bne.n	8003d82 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cbc:	4b35      	ldr	r3, [pc, #212]	@ (8003d94 <xTaskResumeAll+0x11c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05e      	beq.n	8003d82 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc4:	e02f      	b.n	8003d26 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc6:	4b34      	ldr	r3, [pc, #208]	@ (8003d98 <xTaskResumeAll+0x120>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff f85a 	bl	8002d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff f855 	bl	8002d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d9c <xTaskResumeAll+0x124>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d903      	bls.n	8003cf6 <xTaskResumeAll+0x7e>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d9c <xTaskResumeAll+0x124>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4a27      	ldr	r2, [pc, #156]	@ (8003da0 <xTaskResumeAll+0x128>)
 8003d04:	441a      	add	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe ffe0 	bl	8002cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d16:	4b23      	ldr	r3, [pc, #140]	@ (8003da4 <xTaskResumeAll+0x12c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d302      	bcc.n	8003d26 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003d20:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <xTaskResumeAll+0x130>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d26:	4b1c      	ldr	r3, [pc, #112]	@ (8003d98 <xTaskResumeAll+0x120>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1cb      	bne.n	8003cc6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d34:	f000 fb5a 	bl	80043ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d38:	4b1c      	ldr	r3, [pc, #112]	@ (8003dac <xTaskResumeAll+0x134>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d44:	f000 f846 	bl	8003dd4 <xTaskIncrementTick>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	@ (8003da8 <xTaskResumeAll+0x130>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f1      	bne.n	8003d44 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d60:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <xTaskResumeAll+0x134>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d66:	4b10      	ldr	r3, [pc, #64]	@ (8003da8 <xTaskResumeAll+0x130>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d72:	4b0f      	ldr	r3, [pc, #60]	@ (8003db0 <xTaskResumeAll+0x138>)
 8003d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d82:	f001 f8f3 	bl	8004f6c <vPortExitCritical>

	return xAlreadyYielded;
 8003d86:	68bb      	ldr	r3, [r7, #8]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000d24 	.word	0x20000d24
 8003d94:	20000cfc 	.word	0x20000cfc
 8003d98:	20000cbc 	.word	0x20000cbc
 8003d9c:	20000d04 	.word	0x20000d04
 8003da0:	2000082c 	.word	0x2000082c
 8003da4:	20000828 	.word	0x20000828
 8003da8:	20000d10 	.word	0x20000d10
 8003dac:	20000d0c 	.word	0x20000d0c
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dba:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <xTaskGetTickCount+0x1c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dc0:	687b      	ldr	r3, [r7, #4]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000d00 	.word	0x20000d00

08003dd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dde:	4b4f      	ldr	r3, [pc, #316]	@ (8003f1c <xTaskIncrementTick+0x148>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 8090 	bne.w	8003f08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003de8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f20 <xTaskIncrementTick+0x14c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003df0:	4a4b      	ldr	r2, [pc, #300]	@ (8003f20 <xTaskIncrementTick+0x14c>)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d121      	bne.n	8003e40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dfc:	4b49      	ldr	r3, [pc, #292]	@ (8003f24 <xTaskIncrementTick+0x150>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	603b      	str	r3, [r7, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	e7fd      	b.n	8003e1a <xTaskIncrementTick+0x46>
 8003e1e:	4b41      	ldr	r3, [pc, #260]	@ (8003f24 <xTaskIncrementTick+0x150>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	4b40      	ldr	r3, [pc, #256]	@ (8003f28 <xTaskIncrementTick+0x154>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a3e      	ldr	r2, [pc, #248]	@ (8003f24 <xTaskIncrementTick+0x150>)
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f28 <xTaskIncrementTick+0x154>)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	4b3e      	ldr	r3, [pc, #248]	@ (8003f2c <xTaskIncrementTick+0x158>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	4a3c      	ldr	r2, [pc, #240]	@ (8003f2c <xTaskIncrementTick+0x158>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	f000 fad6 	bl	80043ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e40:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <xTaskIncrementTick+0x15c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d349      	bcc.n	8003ede <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e4a:	4b36      	ldr	r3, [pc, #216]	@ (8003f24 <xTaskIncrementTick+0x150>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e54:	4b36      	ldr	r3, [pc, #216]	@ (8003f30 <xTaskIncrementTick+0x15c>)
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	601a      	str	r2, [r3, #0]
					break;
 8003e5c:	e03f      	b.n	8003ede <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5e:	4b31      	ldr	r3, [pc, #196]	@ (8003f24 <xTaskIncrementTick+0x150>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d203      	bcs.n	8003e7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e76:	4a2e      	ldr	r2, [pc, #184]	@ (8003f30 <xTaskIncrementTick+0x15c>)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e7c:	e02f      	b.n	8003ede <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe ff82 	bl	8002d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3318      	adds	r3, #24
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe ff79 	bl	8002d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9e:	4b25      	ldr	r3, [pc, #148]	@ (8003f34 <xTaskIncrementTick+0x160>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d903      	bls.n	8003eae <xTaskIncrementTick+0xda>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	4a22      	ldr	r2, [pc, #136]	@ (8003f34 <xTaskIncrementTick+0x160>)
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4a1f      	ldr	r2, [pc, #124]	@ (8003f38 <xTaskIncrementTick+0x164>)
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7fe ff04 	bl	8002cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ece:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <xTaskIncrementTick+0x168>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3b8      	bcc.n	8003e4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003edc:	e7b5      	b.n	8003e4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ede:	4b17      	ldr	r3, [pc, #92]	@ (8003f3c <xTaskIncrementTick+0x168>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee4:	4914      	ldr	r1, [pc, #80]	@ (8003f38 <xTaskIncrementTick+0x164>)
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d901      	bls.n	8003efa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003efa:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <xTaskIncrementTick+0x16c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003f02:	2301      	movs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e004      	b.n	8003f12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f08:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <xTaskIncrementTick+0x170>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f44 <xTaskIncrementTick+0x170>)
 8003f10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f12:	697b      	ldr	r3, [r7, #20]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000d24 	.word	0x20000d24
 8003f20:	20000d00 	.word	0x20000d00
 8003f24:	20000cb4 	.word	0x20000cb4
 8003f28:	20000cb8 	.word	0x20000cb8
 8003f2c:	20000d14 	.word	0x20000d14
 8003f30:	20000d1c 	.word	0x20000d1c
 8003f34:	20000d04 	.word	0x20000d04
 8003f38:	2000082c 	.word	0x2000082c
 8003f3c:	20000828 	.word	0x20000828
 8003f40:	20000d10 	.word	0x20000d10
 8003f44:	20000d0c 	.word	0x20000d0c

08003f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f4e:	4b28      	ldr	r3, [pc, #160]	@ (8003ff0 <vTaskSwitchContext+0xa8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f56:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <vTaskSwitchContext+0xac>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f5c:	e042      	b.n	8003fe4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003f5e:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <vTaskSwitchContext+0xac>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f64:	4b24      	ldr	r3, [pc, #144]	@ (8003ff8 <vTaskSwitchContext+0xb0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e011      	b.n	8003f90 <vTaskSwitchContext+0x48>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <vTaskSwitchContext+0x42>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	607b      	str	r3, [r7, #4]
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	e7fd      	b.n	8003f86 <vTaskSwitchContext+0x3e>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	491a      	ldr	r1, [pc, #104]	@ (8003ffc <vTaskSwitchContext+0xb4>)
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0e3      	beq.n	8003f6c <vTaskSwitchContext+0x24>
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4a13      	ldr	r2, [pc, #76]	@ (8003ffc <vTaskSwitchContext+0xb4>)
 8003fb0:	4413      	add	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d104      	bne.n	8003fd4 <vTaskSwitchContext+0x8c>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4a09      	ldr	r2, [pc, #36]	@ (8004000 <vTaskSwitchContext+0xb8>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4a06      	ldr	r2, [pc, #24]	@ (8003ff8 <vTaskSwitchContext+0xb0>)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6013      	str	r3, [r2, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	20000d24 	.word	0x20000d24
 8003ff4:	20000d10 	.word	0x20000d10
 8003ff8:	20000d04 	.word	0x20000d04
 8003ffc:	2000082c 	.word	0x2000082c
 8004000:	20000828 	.word	0x20000828

08004004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60fb      	str	r3, [r7, #12]
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800402c:	4b07      	ldr	r3, [pc, #28]	@ (800404c <vTaskPlaceOnEventList+0x48>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3318      	adds	r3, #24
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7fe fe70 	bl	8002d1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800403a:	2101      	movs	r1, #1
 800403c:	6838      	ldr	r0, [r7, #0]
 800403e:	f000 fa83 	bl	8004548 <prvAddCurrentTaskToDelayedList>
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000828 	.word	0x20000828

08004050 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	617b      	str	r3, [r7, #20]
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	e7fd      	b.n	8004076 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800407a:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3318      	adds	r3, #24
 8004080:	4619      	mov	r1, r3
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7fe fe25 	bl	8002cd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f000 fa56 	bl	8004548 <prvAddCurrentTaskToDelayedList>
	}
 800409c:	bf00      	nop
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000828 	.word	0x20000828

080040a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	60fb      	str	r3, [r7, #12]
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	3318      	adds	r3, #24
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fe56 	bl	8002d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004158 <xTaskRemoveFromEventList+0xb0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d11d      	bne.n	8004124 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe fe4d 	bl	8002d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f6:	4b19      	ldr	r3, [pc, #100]	@ (800415c <xTaskRemoveFromEventList+0xb4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d903      	bls.n	8004106 <xTaskRemoveFromEventList+0x5e>
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	4a16      	ldr	r2, [pc, #88]	@ (800415c <xTaskRemoveFromEventList+0xb4>)
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4a13      	ldr	r2, [pc, #76]	@ (8004160 <xTaskRemoveFromEventList+0xb8>)
 8004114:	441a      	add	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3304      	adds	r3, #4
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f7fe fdd8 	bl	8002cd2 <vListInsertEnd>
 8004122:	e005      	b.n	8004130 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	3318      	adds	r3, #24
 8004128:	4619      	mov	r1, r3
 800412a:	480e      	ldr	r0, [pc, #56]	@ (8004164 <xTaskRemoveFromEventList+0xbc>)
 800412c:	f7fe fdd1 	bl	8002cd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <xTaskRemoveFromEventList+0xc0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	429a      	cmp	r2, r3
 800413c:	d905      	bls.n	800414a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <xTaskRemoveFromEventList+0xc4>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e001      	b.n	800414e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800414e:	697b      	ldr	r3, [r7, #20]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000d24 	.word	0x20000d24
 800415c:	20000d04 	.word	0x20000d04
 8004160:	2000082c 	.word	0x2000082c
 8004164:	20000cbc 	.word	0x20000cbc
 8004168:	20000828 	.word	0x20000828
 800416c:	20000d10 	.word	0x20000d10

08004170 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <vTaskInternalSetTimeOutState+0x24>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004180:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <vTaskInternalSetTimeOutState+0x28>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	605a      	str	r2, [r3, #4]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	20000d14 	.word	0x20000d14
 8004198:	20000d00 	.word	0x20000d00

0800419c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	613b      	str	r3, [r7, #16]
}
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	e7fd      	b.n	80041c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	60fb      	str	r3, [r7, #12]
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80041e2:	f000 fe91 	bl	8004f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041e6:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <xTaskCheckForTimeOut+0xc0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d102      	bne.n	8004206 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	e023      	b.n	800424e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <xTaskCheckForTimeOut+0xc4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d007      	beq.n	8004222 <xTaskCheckForTimeOut+0x86>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e015      	b.n	800424e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	429a      	cmp	r2, r3
 800422a:	d20b      	bcs.n	8004244 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff99 	bl	8004170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e004      	b.n	800424e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800424e:	f000 fe8d 	bl	8004f6c <vPortExitCritical>

	return xReturn;
 8004252:	69fb      	ldr	r3, [r7, #28]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000d00 	.word	0x20000d00
 8004260:	20000d14 	.word	0x20000d14

08004264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004268:	4b03      	ldr	r3, [pc, #12]	@ (8004278 <vTaskMissedYield+0x14>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000d10 	.word	0x20000d10

0800427c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004284:	f000 f854 	bl	8004330 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004288:	4b07      	ldr	r3, [pc, #28]	@ (80042a8 <prvIdleTask+0x2c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d907      	bls.n	80042a0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004290:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <prvIdleTask+0x30>)
 8004292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80042a0:	f7fc f9e8 	bl	8000674 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80042a4:	e7ee      	b.n	8004284 <prvIdleTask+0x8>
 80042a6:	bf00      	nop
 80042a8:	2000082c 	.word	0x2000082c
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	e00c      	b.n	80042d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <prvInitialiseTaskLists+0x60>)
 80042c8:	4413      	add	r3, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fcd4 	bl	8002c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3301      	adds	r3, #1
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b37      	cmp	r3, #55	@ 0x37
 80042da:	d9ef      	bls.n	80042bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042dc:	480d      	ldr	r0, [pc, #52]	@ (8004314 <prvInitialiseTaskLists+0x64>)
 80042de:	f7fe fccb 	bl	8002c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042e2:	480d      	ldr	r0, [pc, #52]	@ (8004318 <prvInitialiseTaskLists+0x68>)
 80042e4:	f7fe fcc8 	bl	8002c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042e8:	480c      	ldr	r0, [pc, #48]	@ (800431c <prvInitialiseTaskLists+0x6c>)
 80042ea:	f7fe fcc5 	bl	8002c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042ee:	480c      	ldr	r0, [pc, #48]	@ (8004320 <prvInitialiseTaskLists+0x70>)
 80042f0:	f7fe fcc2 	bl	8002c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042f4:	480b      	ldr	r0, [pc, #44]	@ (8004324 <prvInitialiseTaskLists+0x74>)
 80042f6:	f7fe fcbf 	bl	8002c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <prvInitialiseTaskLists+0x78>)
 80042fc:	4a05      	ldr	r2, [pc, #20]	@ (8004314 <prvInitialiseTaskLists+0x64>)
 80042fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <prvInitialiseTaskLists+0x7c>)
 8004302:	4a05      	ldr	r2, [pc, #20]	@ (8004318 <prvInitialiseTaskLists+0x68>)
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000082c 	.word	0x2000082c
 8004314:	20000c8c 	.word	0x20000c8c
 8004318:	20000ca0 	.word	0x20000ca0
 800431c:	20000cbc 	.word	0x20000cbc
 8004320:	20000cd0 	.word	0x20000cd0
 8004324:	20000ce8 	.word	0x20000ce8
 8004328:	20000cb4 	.word	0x20000cb4
 800432c:	20000cb8 	.word	0x20000cb8

08004330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004336:	e019      	b.n	800436c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004338:	f000 fde6 	bl	8004f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433c:	4b10      	ldr	r3, [pc, #64]	@ (8004380 <prvCheckTasksWaitingTermination+0x50>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fd1f 	bl	8002d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <prvCheckTasksWaitingTermination+0x54>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	4a0b      	ldr	r2, [pc, #44]	@ (8004384 <prvCheckTasksWaitingTermination+0x54>)
 8004356:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004358:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <prvCheckTasksWaitingTermination+0x58>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3b01      	subs	r3, #1
 800435e:	4a0a      	ldr	r2, [pc, #40]	@ (8004388 <prvCheckTasksWaitingTermination+0x58>)
 8004360:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004362:	f000 fe03 	bl	8004f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f810 	bl	800438c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <prvCheckTasksWaitingTermination+0x58>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e1      	bne.n	8004338 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000cd0 	.word	0x20000cd0
 8004384:	20000cfc 	.word	0x20000cfc
 8004388:	20000ce4 	.word	0x20000ce4

0800438c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800439a:	2b00      	cmp	r3, #0
 800439c:	d108      	bne.n	80043b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 ffa0 	bl	80052e8 <vPortFree>
				vPortFree( pxTCB );
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 ff9d 	bl	80052e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043ae:	e019      	b.n	80043e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d103      	bne.n	80043c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 ff94 	bl	80052e8 <vPortFree>
	}
 80043c0:	e010      	b.n	80043e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d00b      	beq.n	80043e4 <prvDeleteTCB+0x58>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <prvDeleteTCB+0x54>
	}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <prvResetNextTaskUnblockTime+0x38>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <prvResetNextTaskUnblockTime+0x3c>)
 80043fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004402:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004404:	e008      	b.n	8004418 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004406:	4b07      	ldr	r3, [pc, #28]	@ (8004424 <prvResetNextTaskUnblockTime+0x38>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a04      	ldr	r2, [pc, #16]	@ (8004428 <prvResetNextTaskUnblockTime+0x3c>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	20000cb4 	.word	0x20000cb4
 8004428:	20000d1c 	.word	0x20000d1c

0800442c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004432:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <xTaskGetSchedulerState+0x34>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800443a:	2301      	movs	r3, #1
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	e008      	b.n	8004452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004440:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <xTaskGetSchedulerState+0x38>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004448:	2302      	movs	r3, #2
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	e001      	b.n	8004452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004452:	687b      	ldr	r3, [r7, #4]
	}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	20000d08 	.word	0x20000d08
 8004464:	20000d24 	.word	0x20000d24

08004468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d058      	beq.n	8004530 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800447e:	4b2f      	ldr	r3, [pc, #188]	@ (800453c <xTaskPriorityDisinherit+0xd4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	d00b      	beq.n	80044a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	60fb      	str	r3, [r7, #12]
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	60bb      	str	r3, [r7, #8]
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	e7fd      	b.n	80044bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c4:	1e5a      	subs	r2, r3, #1
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d02c      	beq.n	8004530 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d128      	bne.n	8004530 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe fc52 	bl	8002d8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004500:	4b0f      	ldr	r3, [pc, #60]	@ (8004540 <xTaskPriorityDisinherit+0xd8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d903      	bls.n	8004510 <xTaskPriorityDisinherit+0xa8>
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	4a0c      	ldr	r2, [pc, #48]	@ (8004540 <xTaskPriorityDisinherit+0xd8>)
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4a09      	ldr	r2, [pc, #36]	@ (8004544 <xTaskPriorityDisinherit+0xdc>)
 800451e:	441a      	add	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7fe fbd3 	bl	8002cd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800452c:	2301      	movs	r3, #1
 800452e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004530:	697b      	ldr	r3, [r7, #20]
	}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000828 	.word	0x20000828
 8004540:	20000d04 	.word	0x20000d04
 8004544:	2000082c 	.word	0x2000082c

08004548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004552:	4b21      	ldr	r3, [pc, #132]	@ (80045d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004558:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fc14 	bl	8002d8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d10a      	bne.n	8004582 <prvAddCurrentTaskToDelayedList+0x3a>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004572:	4b1a      	ldr	r3, [pc, #104]	@ (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4819      	ldr	r0, [pc, #100]	@ (80045e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800457c:	f7fe fba9 	bl	8002cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004580:	e026      	b.n	80045d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4413      	add	r3, r2
 8004588:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800458a:	4b14      	ldr	r3, [pc, #80]	@ (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	d209      	bcs.n	80045ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800459a:	4b12      	ldr	r3, [pc, #72]	@ (80045e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b0f      	ldr	r3, [pc, #60]	@ (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7fe fbb7 	bl	8002d1a <vListInsert>
}
 80045ac:	e010      	b.n	80045d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ae:	4b0e      	ldr	r3, [pc, #56]	@ (80045e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b0a      	ldr	r3, [pc, #40]	@ (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7fe fbad 	bl	8002d1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045c0:	4b0a      	ldr	r3, [pc, #40]	@ (80045ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d202      	bcs.n	80045d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045ca:	4a08      	ldr	r2, [pc, #32]	@ (80045ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000d00 	.word	0x20000d00
 80045dc:	20000828 	.word	0x20000828
 80045e0:	20000ce8 	.word	0x20000ce8
 80045e4:	20000cb8 	.word	0x20000cb8
 80045e8:	20000cb4 	.word	0x20000cb4
 80045ec:	20000d1c 	.word	0x20000d1c

080045f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	@ 0x28
 80045f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045fa:	f000 fb13 	bl	8004c24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <xTimerCreateTimerTask+0x84>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d021      	beq.n	800464a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800460e:	1d3a      	adds	r2, r7, #4
 8004610:	f107 0108 	add.w	r1, r7, #8
 8004614:	f107 030c 	add.w	r3, r7, #12
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fb13 	bl	8002c44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	9202      	str	r2, [sp, #8]
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	2302      	movs	r3, #2
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2300      	movs	r3, #0
 800462e:	460a      	mov	r2, r1
 8004630:	4911      	ldr	r1, [pc, #68]	@ (8004678 <xTimerCreateTimerTask+0x88>)
 8004632:	4812      	ldr	r0, [pc, #72]	@ (800467c <xTimerCreateTimerTask+0x8c>)
 8004634:	f7ff f8ce 	bl	80037d4 <xTaskCreateStatic>
 8004638:	4603      	mov	r3, r0
 800463a:	4a11      	ldr	r2, [pc, #68]	@ (8004680 <xTimerCreateTimerTask+0x90>)
 800463c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800463e:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <xTimerCreateTimerTask+0x90>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004646:	2301      	movs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004668:	697b      	ldr	r3, [r7, #20]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000d58 	.word	0x20000d58
 8004678:	08006418 	.word	0x08006418
 800467c:	080047bd 	.word	0x080047bd
 8004680:	20000d5c 	.word	0x20000d5c

08004684 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	@ 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004692:	2300      	movs	r3, #0
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	623b      	str	r3, [r7, #32]
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	e7fd      	b.n	80046b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046b4:	4b19      	ldr	r3, [pc, #100]	@ (800471c <xTimerGenericCommand+0x98>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02a      	beq.n	8004712 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	dc18      	bgt.n	8004700 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046ce:	f7ff fead 	bl	800442c <xTaskGetSchedulerState>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d109      	bne.n	80046ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046d8:	4b10      	ldr	r3, [pc, #64]	@ (800471c <xTimerGenericCommand+0x98>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	f107 0110 	add.w	r1, r7, #16
 80046e0:	2300      	movs	r3, #0
 80046e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e4:	f7fe fc86 	bl	8002ff4 <xQueueGenericSend>
 80046e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80046ea:	e012      	b.n	8004712 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046ec:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <xTimerGenericCommand+0x98>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	f107 0110 	add.w	r1, r7, #16
 80046f4:	2300      	movs	r3, #0
 80046f6:	2200      	movs	r2, #0
 80046f8:	f7fe fc7c 	bl	8002ff4 <xQueueGenericSend>
 80046fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80046fe:	e008      	b.n	8004712 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <xTimerGenericCommand+0x98>)
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	f107 0110 	add.w	r1, r7, #16
 8004708:	2300      	movs	r3, #0
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	f7fe fd74 	bl	80031f8 <xQueueGenericSendFromISR>
 8004710:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004714:	4618      	mov	r0, r3
 8004716:	3728      	adds	r7, #40	@ 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000d58 	.word	0x20000d58

08004720 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af02      	add	r7, sp, #8
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472a:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <prvProcessExpiredTimer+0x98>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3304      	adds	r3, #4
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fb27 	bl	8002d8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d023      	beq.n	8004794 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	18d1      	adds	r1, r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	6978      	ldr	r0, [r7, #20]
 800475a:	f000 f8d5 	bl	8004908 <prvInsertTimerInActiveList>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d020      	beq.n	80047a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2300      	movs	r3, #0
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	2100      	movs	r1, #0
 800476e:	6978      	ldr	r0, [r7, #20]
 8004770:	f7ff ff88 	bl	8004684 <xTimerGenericCommand>
 8004774:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d114      	bne.n	80047a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60fb      	str	r3, [r7, #12]
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	4798      	blx	r3
}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000d50 	.word	0x20000d50

080047bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047c4:	f107 0308 	add.w	r3, r7, #8
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f859 	bl	8004880 <prvGetNextExpireTime>
 80047ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4619      	mov	r1, r3
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f805 	bl	80047e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047da:	f000 f8d7 	bl	800498c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047de:	bf00      	nop
 80047e0:	e7f0      	b.n	80047c4 <prvTimerTask+0x8>
	...

080047e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047ee:	f7ff fa35 	bl	8003c5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f866 	bl	80048c8 <prvSampleTimeNow>
 80047fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d130      	bne.n	8004866 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <prvProcessTimerOrBlockTask+0x3c>
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	429a      	cmp	r2, r3
 8004810:	d806      	bhi.n	8004820 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004812:	f7ff fa31 	bl	8003c78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff81 	bl	8004720 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800481e:	e024      	b.n	800486a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004826:	4b13      	ldr	r3, [pc, #76]	@ (8004874 <prvProcessTimerOrBlockTask+0x90>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <prvProcessTimerOrBlockTask+0x50>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <prvProcessTimerOrBlockTask+0x52>
 8004834:	2300      	movs	r3, #0
 8004836:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004838:	4b0f      	ldr	r3, [pc, #60]	@ (8004878 <prvProcessTimerOrBlockTask+0x94>)
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4619      	mov	r1, r3
 8004846:	f7fe ff91 	bl	800376c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800484a:	f7ff fa15 	bl	8003c78 <xTaskResumeAll>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004854:	4b09      	ldr	r3, [pc, #36]	@ (800487c <prvProcessTimerOrBlockTask+0x98>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	f3bf 8f6f 	isb	sy
}
 8004864:	e001      	b.n	800486a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004866:	f7ff fa07 	bl	8003c78 <xTaskResumeAll>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000d54 	.word	0x20000d54
 8004878:	20000d58 	.word	0x20000d58
 800487c:	e000ed04 	.word	0xe000ed04

08004880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004888:	4b0e      	ldr	r3, [pc, #56]	@ (80048c4 <prvGetNextExpireTime+0x44>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <prvGetNextExpireTime+0x16>
 8004892:	2201      	movs	r2, #1
 8004894:	e000      	b.n	8004898 <prvGetNextExpireTime+0x18>
 8004896:	2200      	movs	r2, #0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048a4:	4b07      	ldr	r3, [pc, #28]	@ (80048c4 <prvGetNextExpireTime+0x44>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e001      	b.n	80048b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048b4:	68fb      	ldr	r3, [r7, #12]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000d50 	.word	0x20000d50

080048c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048d0:	f7ff fa70 	bl	8003db4 <xTaskGetTickCount>
 80048d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <prvSampleTimeNow+0x3c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d205      	bcs.n	80048ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048e0:	f000 f93a 	bl	8004b58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e002      	b.n	80048f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048f2:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <prvSampleTimeNow+0x3c>)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048f8:	68fb      	ldr	r3, [r7, #12]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000d60 	.word	0x20000d60

08004908 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d812      	bhi.n	8004954 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	429a      	cmp	r2, r3
 800493a:	d302      	bcc.n	8004942 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	e01b      	b.n	800497a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004942:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <prvInsertTimerInActiveList+0x7c>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f7fe f9e4 	bl	8002d1a <vListInsert>
 8004952:	e012      	b.n	800497a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d206      	bcs.n	800496a <prvInsertTimerInActiveList+0x62>
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d302      	bcc.n	800496a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e007      	b.n	800497a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800496a:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <prvInsertTimerInActiveList+0x80>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7fe f9d0 	bl	8002d1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800497a:	697b      	ldr	r3, [r7, #20]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000d54 	.word	0x20000d54
 8004988:	20000d50 	.word	0x20000d50

0800498c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08e      	sub	sp, #56	@ 0x38
 8004990:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004992:	e0ce      	b.n	8004b32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da19      	bge.n	80049ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	3304      	adds	r3, #4
 800499e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <prvProcessReceivedCommands+0x32>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	61fb      	str	r3, [r7, #28]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c4:	6850      	ldr	r0, [r2, #4]
 80049c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c8:	6892      	ldr	r2, [r2, #8]
 80049ca:	4611      	mov	r1, r2
 80049cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f2c0 80ae 	blt.w	8004b32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	3304      	adds	r3, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe f9d0 	bl	8002d8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ec:	463b      	mov	r3, r7
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff ff6a 	bl	80048c8 <prvSampleTimeNow>
 80049f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b09      	cmp	r3, #9
 80049fa:	f200 8097 	bhi.w	8004b2c <prvProcessReceivedCommands+0x1a0>
 80049fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004a04 <prvProcessReceivedCommands+0x78>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a2d 	.word	0x08004a2d
 8004a10:	08004aa3 	.word	0x08004aa3
 8004a14:	08004ab7 	.word	0x08004ab7
 8004a18:	08004b03 	.word	0x08004b03
 8004a1c:	08004a2d 	.word	0x08004a2d
 8004a20:	08004a2d 	.word	0x08004a2d
 8004a24:	08004aa3 	.word	0x08004aa3
 8004a28:	08004ab7 	.word	0x08004ab7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	18d1      	adds	r1, r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a4c:	f7ff ff5c 	bl	8004908 <prvInsertTimerInActiveList>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d06c      	beq.n	8004b30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d061      	beq.n	8004b30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	441a      	add	r2, r3
 8004a74:	2300      	movs	r3, #0
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a7e:	f7ff fe01 	bl	8004684 <xTimerGenericCommand>
 8004a82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d152      	bne.n	8004b30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	61bb      	str	r3, [r7, #24]
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	e7fd      	b.n	8004a9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ab4:	e03d      	b.n	8004b32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	617b      	str	r3, [r7, #20]
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	e7fd      	b.n	8004aea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	18d1      	adds	r1, r2, r3
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004afc:	f7ff ff04 	bl	8004908 <prvInsertTimerInActiveList>
					break;
 8004b00:	e017      	b.n	8004b32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b12:	f000 fbe9 	bl	80052e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b16:	e00c      	b.n	8004b32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b2a:	e002      	b.n	8004b32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004b2c:	bf00      	nop
 8004b2e:	e000      	b.n	8004b32 <prvProcessReceivedCommands+0x1a6>
					break;
 8004b30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b32:	4b08      	ldr	r3, [pc, #32]	@ (8004b54 <prvProcessReceivedCommands+0x1c8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	1d39      	adds	r1, r7, #4
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fbfa 	bl	8003334 <xQueueReceive>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f47f af26 	bne.w	8004994 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3730      	adds	r7, #48	@ 0x30
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000d58 	.word	0x20000d58

08004b58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b5e:	e049      	b.n	8004bf4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b60:	4b2e      	ldr	r3, [pc, #184]	@ (8004c1c <prvSwitchTimerLists+0xc4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c1c <prvSwitchTimerLists+0xc4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fe f907 	bl	8002d8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d02f      	beq.n	8004bf4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d90e      	bls.n	8004bc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c1c <prvSwitchTimerLists+0xc4>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f7fe f8ac 	bl	8002d1a <vListInsert>
 8004bc2:	e017      	b.n	8004bf4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff fd58 	bl	8004684 <xTimerGenericCommand>
 8004bd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	603b      	str	r3, [r7, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	e7fd      	b.n	8004bf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <prvSwitchTimerLists+0xc4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1b0      	bne.n	8004b60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bfe:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <prvSwitchTimerLists+0xc4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <prvSwitchTimerLists+0xc8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a04      	ldr	r2, [pc, #16]	@ (8004c1c <prvSwitchTimerLists+0xc4>)
 8004c0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c0c:	4a04      	ldr	r2, [pc, #16]	@ (8004c20 <prvSwitchTimerLists+0xc8>)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6013      	str	r3, [r2, #0]
}
 8004c12:	bf00      	nop
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000d50 	.word	0x20000d50
 8004c20:	20000d54 	.word	0x20000d54

08004c24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c2a:	f000 f96d 	bl	8004f08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c2e:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <prvCheckForValidListAndQueue+0x60>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d120      	bne.n	8004c78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c36:	4814      	ldr	r0, [pc, #80]	@ (8004c88 <prvCheckForValidListAndQueue+0x64>)
 8004c38:	f7fe f81e 	bl	8002c78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c3c:	4813      	ldr	r0, [pc, #76]	@ (8004c8c <prvCheckForValidListAndQueue+0x68>)
 8004c3e:	f7fe f81b 	bl	8002c78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c42:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <prvCheckForValidListAndQueue+0x6c>)
 8004c44:	4a10      	ldr	r2, [pc, #64]	@ (8004c88 <prvCheckForValidListAndQueue+0x64>)
 8004c46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c48:	4b12      	ldr	r3, [pc, #72]	@ (8004c94 <prvCheckForValidListAndQueue+0x70>)
 8004c4a:	4a10      	ldr	r2, [pc, #64]	@ (8004c8c <prvCheckForValidListAndQueue+0x68>)
 8004c4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4b11      	ldr	r3, [pc, #68]	@ (8004c98 <prvCheckForValidListAndQueue+0x74>)
 8004c54:	4a11      	ldr	r2, [pc, #68]	@ (8004c9c <prvCheckForValidListAndQueue+0x78>)
 8004c56:	2110      	movs	r1, #16
 8004c58:	200a      	movs	r0, #10
 8004c5a:	f7fe f92b 	bl	8002eb4 <xQueueGenericCreateStatic>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4a08      	ldr	r2, [pc, #32]	@ (8004c84 <prvCheckForValidListAndQueue+0x60>)
 8004c62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c64:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <prvCheckForValidListAndQueue+0x60>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <prvCheckForValidListAndQueue+0x60>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	490b      	ldr	r1, [pc, #44]	@ (8004ca0 <prvCheckForValidListAndQueue+0x7c>)
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fd50 	bl	8003718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c78:	f000 f978 	bl	8004f6c <vPortExitCritical>
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000d58 	.word	0x20000d58
 8004c88:	20000d28 	.word	0x20000d28
 8004c8c:	20000d3c 	.word	0x20000d3c
 8004c90:	20000d50 	.word	0x20000d50
 8004c94:	20000d54 	.word	0x20000d54
 8004c98:	20000e04 	.word	0x20000e04
 8004c9c:	20000d64 	.word	0x20000d64
 8004ca0:	08006420 	.word	0x08006420

08004ca4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b04      	subs	r3, #4
 8004cb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f023 0201 	bic.w	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3b04      	subs	r3, #4
 8004cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8004d08 <pxPortInitialiseStack+0x64>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3b14      	subs	r3, #20
 8004cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b04      	subs	r3, #4
 8004cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f06f 0202 	mvn.w	r2, #2
 8004cf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b20      	subs	r3, #32
 8004cf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	08004d0d 	.word	0x08004d0d

08004d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d16:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <prvTaskExitError+0x58>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d00b      	beq.n	8004d38 <prvTaskExitError+0x2c>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	60fb      	str	r3, [r7, #12]
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <prvTaskExitError+0x28>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	60bb      	str	r3, [r7, #8]
}
 8004d4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d4c:	bf00      	nop
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0fc      	beq.n	8004d4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	2000000c 	.word	0x2000000c
	...

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	4770      	bx	lr
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst2>:
 8004d90:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d98:	4808      	ldr	r0, [pc, #32]	@ (8004dbc <prvPortStartFirstTask+0x24>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8814 	msr	CONTROL, r0
 8004daa:	b662      	cpsie	i
 8004dac:	b661      	cpsie	f
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	df00      	svc	0
 8004db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dba:	bf00      	nop
 8004dbc:	e000ed08 	.word	0xe000ed08

08004dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dc6:	4b47      	ldr	r3, [pc, #284]	@ (8004ee4 <xPortStartScheduler+0x124>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a47      	ldr	r2, [pc, #284]	@ (8004ee8 <xPortStartScheduler+0x128>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10b      	bne.n	8004de8 <xPortStartScheduler+0x28>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	613b      	str	r3, [r7, #16]
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004de8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee4 <xPortStartScheduler+0x124>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3f      	ldr	r2, [pc, #252]	@ (8004eec <xPortStartScheduler+0x12c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10b      	bne.n	8004e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	60fb      	str	r3, [r7, #12]
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	e7fd      	b.n	8004e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e0a:	4b39      	ldr	r3, [pc, #228]	@ (8004ef0 <xPortStartScheduler+0x130>)
 8004e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	22ff      	movs	r2, #255	@ 0xff
 8004e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4b31      	ldr	r3, [pc, #196]	@ (8004ef4 <xPortStartScheduler+0x134>)
 8004e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e32:	4b31      	ldr	r3, [pc, #196]	@ (8004ef8 <xPortStartScheduler+0x138>)
 8004e34:	2207      	movs	r2, #7
 8004e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e38:	e009      	b.n	8004e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef8 <xPortStartScheduler+0x138>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef8 <xPortStartScheduler+0x138>)
 8004e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d0ef      	beq.n	8004e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e5a:	4b27      	ldr	r3, [pc, #156]	@ (8004ef8 <xPortStartScheduler+0x138>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1c3 0307 	rsb	r3, r3, #7
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d00b      	beq.n	8004e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60bb      	str	r3, [r7, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	e7fd      	b.n	8004e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef8 <xPortStartScheduler+0x138>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef8 <xPortStartScheduler+0x138>)
 8004e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef8 <xPortStartScheduler+0x138>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e90:	4a19      	ldr	r2, [pc, #100]	@ (8004ef8 <xPortStartScheduler+0x138>)
 8004e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e9c:	4b17      	ldr	r3, [pc, #92]	@ (8004efc <xPortStartScheduler+0x13c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	@ (8004efc <xPortStartScheduler+0x13c>)
 8004ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ea8:	4b14      	ldr	r3, [pc, #80]	@ (8004efc <xPortStartScheduler+0x13c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a13      	ldr	r2, [pc, #76]	@ (8004efc <xPortStartScheduler+0x13c>)
 8004eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eb4:	f000 f8da 	bl	800506c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eb8:	4b11      	ldr	r3, [pc, #68]	@ (8004f00 <xPortStartScheduler+0x140>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ebe:	f000 f8f9 	bl	80050b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ec2:	4b10      	ldr	r3, [pc, #64]	@ (8004f04 <xPortStartScheduler+0x144>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8004f04 <xPortStartScheduler+0x144>)
 8004ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ece:	f7ff ff63 	bl	8004d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ed2:	f7ff f839 	bl	8003f48 <vTaskSwitchContext>
	prvTaskExitError();
 8004ed6:	f7ff ff19 	bl	8004d0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	e000ed00 	.word	0xe000ed00
 8004ee8:	410fc271 	.word	0x410fc271
 8004eec:	410fc270 	.word	0x410fc270
 8004ef0:	e000e400 	.word	0xe000e400
 8004ef4:	20000e54 	.word	0x20000e54
 8004ef8:	20000e58 	.word	0x20000e58
 8004efc:	e000ed20 	.word	0xe000ed20
 8004f00:	2000000c 	.word	0x2000000c
 8004f04:	e000ef34 	.word	0xe000ef34

08004f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	607b      	str	r3, [r7, #4]
}
 8004f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f22:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <vPortEnterCritical+0x5c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4a0e      	ldr	r2, [pc, #56]	@ (8004f64 <vPortEnterCritical+0x5c>)
 8004f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f64 <vPortEnterCritical+0x5c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d110      	bne.n	8004f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f34:	4b0c      	ldr	r3, [pc, #48]	@ (8004f68 <vPortEnterCritical+0x60>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	603b      	str	r3, [r7, #0]
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	e7fd      	b.n	8004f52 <vPortEnterCritical+0x4a>
	}
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	2000000c 	.word	0x2000000c
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f72:	4b12      	ldr	r3, [pc, #72]	@ (8004fbc <vPortExitCritical+0x50>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <vPortExitCritical+0x26>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	607b      	str	r3, [r7, #4]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f92:	4b0a      	ldr	r3, [pc, #40]	@ (8004fbc <vPortExitCritical+0x50>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	4a08      	ldr	r2, [pc, #32]	@ (8004fbc <vPortExitCritical+0x50>)
 8004f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f9c:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <vPortExitCritical+0x50>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <vPortExitCritical+0x44>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f383 8811 	msr	BASEPRI, r3
}
 8004fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	2000000c 	.word	0x2000000c

08004fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fc0:	f3ef 8009 	mrs	r0, PSP
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <pxCurrentTCBConst>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	f01e 0f10 	tst.w	lr, #16
 8004fd0:	bf08      	it	eq
 8004fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	6010      	str	r0, [r2, #0]
 8004fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004fe4:	f380 8811 	msr	BASEPRI, r0
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f7fe ffaa 	bl	8003f48 <vTaskSwitchContext>
 8004ff4:	f04f 0000 	mov.w	r0, #0
 8004ff8:	f380 8811 	msr	BASEPRI, r0
 8004ffc:	bc09      	pop	{r0, r3}
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	6808      	ldr	r0, [r1, #0]
 8005002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005006:	f01e 0f10 	tst.w	lr, #16
 800500a:	bf08      	it	eq
 800500c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005010:	f380 8809 	msr	PSP, r0
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst>:
 8005020:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
}
 8005040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005042:	f7fe fec7 	bl	8003dd4 <xTaskIncrementTick>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <xPortSysTickHandler+0x40>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f383 8811 	msr	BASEPRI, r3
}
 800505e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005070:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005076:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <vPortSetupTimerInterrupt+0x38>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800507c:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <vPortSetupTimerInterrupt+0x3c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0a      	ldr	r2, [pc, #40]	@ (80050ac <vPortSetupTimerInterrupt+0x40>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	4a09      	ldr	r2, [pc, #36]	@ (80050b0 <vPortSetupTimerInterrupt+0x44>)
 800508a:	3b01      	subs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508e:	4b04      	ldr	r3, [pc, #16]	@ (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005090:	2207      	movs	r2, #7
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	e000e010 	.word	0xe000e010
 80050a4:	e000e018 	.word	0xe000e018
 80050a8:	20000000 	.word	0x20000000
 80050ac:	10624dd3 	.word	0x10624dd3
 80050b0:	e000e014 	.word	0xe000e014

080050b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80050c4 <vPortEnableVFP+0x10>
 80050b8:	6801      	ldr	r1, [r0, #0]
 80050ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80050be:	6001      	str	r1, [r0, #0]
 80050c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050c2:	bf00      	nop
 80050c4:	e000ed88 	.word	0xe000ed88

080050c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050ce:	f3ef 8305 	mrs	r3, IPSR
 80050d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b0f      	cmp	r3, #15
 80050d8:	d915      	bls.n	8005106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050da:	4a18      	ldr	r2, [pc, #96]	@ (800513c <vPortValidateInterruptPriority+0x74>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050e4:	4b16      	ldr	r3, [pc, #88]	@ (8005140 <vPortValidateInterruptPriority+0x78>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	7afa      	ldrb	r2, [r7, #11]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d20b      	bcs.n	8005106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	607b      	str	r3, [r7, #4]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005106:	4b0f      	ldr	r3, [pc, #60]	@ (8005144 <vPortValidateInterruptPriority+0x7c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800510e:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <vPortValidateInterruptPriority+0x80>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d90b      	bls.n	800512e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	603b      	str	r3, [r7, #0]
}
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	e7fd      	b.n	800512a <vPortValidateInterruptPriority+0x62>
	}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	e000e3f0 	.word	0xe000e3f0
 8005140:	20000e54 	.word	0x20000e54
 8005144:	e000ed0c 	.word	0xe000ed0c
 8005148:	20000e58 	.word	0x20000e58

0800514c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	@ 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005158:	f7fe fd80 	bl	8003c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800515c:	4b5c      	ldr	r3, [pc, #368]	@ (80052d0 <pvPortMalloc+0x184>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005164:	f000 f924 	bl	80053b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005168:	4b5a      	ldr	r3, [pc, #360]	@ (80052d4 <pvPortMalloc+0x188>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 8095 	bne.w	80052a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01e      	beq.n	80051ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800517c:	2208      	movs	r2, #8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	2b00      	cmp	r3, #0
 800518c:	d015      	beq.n	80051ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f023 0307 	bic.w	r3, r3, #7
 8005194:	3308      	adds	r3, #8
 8005196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <pvPortMalloc+0x6e>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	617b      	str	r3, [r7, #20]
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	e7fd      	b.n	80051b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d06f      	beq.n	80052a0 <pvPortMalloc+0x154>
 80051c0:	4b45      	ldr	r3, [pc, #276]	@ (80052d8 <pvPortMalloc+0x18c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d86a      	bhi.n	80052a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051ca:	4b44      	ldr	r3, [pc, #272]	@ (80052dc <pvPortMalloc+0x190>)
 80051cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051ce:	4b43      	ldr	r3, [pc, #268]	@ (80052dc <pvPortMalloc+0x190>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051d4:	e004      	b.n	80051e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d903      	bls.n	80051f2 <pvPortMalloc+0xa6>
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f1      	bne.n	80051d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051f2:	4b37      	ldr	r3, [pc, #220]	@ (80052d0 <pvPortMalloc+0x184>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d051      	beq.n	80052a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2208      	movs	r2, #8
 8005202:	4413      	add	r3, r2
 8005204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	2308      	movs	r3, #8
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	429a      	cmp	r2, r3
 800521c:	d920      	bls.n	8005260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800521e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4413      	add	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <pvPortMalloc+0xfc>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	613b      	str	r3, [r7, #16]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800525a:	69b8      	ldr	r0, [r7, #24]
 800525c:	f000 f90a 	bl	8005474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005260:	4b1d      	ldr	r3, [pc, #116]	@ (80052d8 <pvPortMalloc+0x18c>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	4a1b      	ldr	r2, [pc, #108]	@ (80052d8 <pvPortMalloc+0x18c>)
 800526c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800526e:	4b1a      	ldr	r3, [pc, #104]	@ (80052d8 <pvPortMalloc+0x18c>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b1b      	ldr	r3, [pc, #108]	@ (80052e0 <pvPortMalloc+0x194>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d203      	bcs.n	8005282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800527a:	4b17      	ldr	r3, [pc, #92]	@ (80052d8 <pvPortMalloc+0x18c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <pvPortMalloc+0x194>)
 8005280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4b13      	ldr	r3, [pc, #76]	@ (80052d4 <pvPortMalloc+0x188>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	431a      	orrs	r2, r3
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005296:	4b13      	ldr	r3, [pc, #76]	@ (80052e4 <pvPortMalloc+0x198>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3301      	adds	r3, #1
 800529c:	4a11      	ldr	r2, [pc, #68]	@ (80052e4 <pvPortMalloc+0x198>)
 800529e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052a0:	f7fe fcea 	bl	8003c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <pvPortMalloc+0x17a>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	60fb      	str	r3, [r7, #12]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <pvPortMalloc+0x176>
	return pvReturn;
 80052c6:	69fb      	ldr	r3, [r7, #28]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3728      	adds	r7, #40	@ 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20004a64 	.word	0x20004a64
 80052d4:	20004a78 	.word	0x20004a78
 80052d8:	20004a68 	.word	0x20004a68
 80052dc:	20004a5c 	.word	0x20004a5c
 80052e0:	20004a6c 	.word	0x20004a6c
 80052e4:	20004a70 	.word	0x20004a70

080052e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d04f      	beq.n	800539a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052fa:	2308      	movs	r3, #8
 80052fc:	425b      	negs	r3, r3
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	4b25      	ldr	r3, [pc, #148]	@ (80053a4 <vPortFree+0xbc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <vPortFree+0x46>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	60fb      	str	r3, [r7, #12]
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	e7fd      	b.n	800532a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <vPortFree+0x66>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60bb      	str	r3, [r7, #8]
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	4b14      	ldr	r3, [pc, #80]	@ (80053a4 <vPortFree+0xbc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01e      	beq.n	800539a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11a      	bne.n	800539a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	4b0e      	ldr	r3, [pc, #56]	@ (80053a4 <vPortFree+0xbc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	43db      	mvns	r3, r3
 800536e:	401a      	ands	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005374:	f7fe fc72 	bl	8003c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <vPortFree+0xc0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4413      	add	r3, r2
 8005382:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <vPortFree+0xc0>)
 8005384:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005386:	6938      	ldr	r0, [r7, #16]
 8005388:	f000 f874 	bl	8005474 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800538c:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <vPortFree+0xc4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3301      	adds	r3, #1
 8005392:	4a06      	ldr	r2, [pc, #24]	@ (80053ac <vPortFree+0xc4>)
 8005394:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005396:	f7fe fc6f 	bl	8003c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800539a:	bf00      	nop
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20004a78 	.word	0x20004a78
 80053a8:	20004a68 	.word	0x20004a68
 80053ac:	20004a74 	.word	0x20004a74

080053b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80053ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053bc:	4b27      	ldr	r3, [pc, #156]	@ (800545c <prvHeapInit+0xac>)
 80053be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3307      	adds	r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	4a1f      	ldr	r2, [pc, #124]	@ (800545c <prvHeapInit+0xac>)
 80053e0:	4413      	add	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005460 <prvHeapInit+0xb0>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005460 <prvHeapInit+0xb0>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4413      	add	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053fc:	2208      	movs	r2, #8
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4a15      	ldr	r2, [pc, #84]	@ (8005464 <prvHeapInit+0xb4>)
 8005410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005412:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <prvHeapInit+0xb4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2200      	movs	r2, #0
 8005418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800541a:	4b12      	ldr	r3, [pc, #72]	@ (8005464 <prvHeapInit+0xb4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005430:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <prvHeapInit+0xb4>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4a0a      	ldr	r2, [pc, #40]	@ (8005468 <prvHeapInit+0xb8>)
 800543e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4a09      	ldr	r2, [pc, #36]	@ (800546c <prvHeapInit+0xbc>)
 8005446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005448:	4b09      	ldr	r3, [pc, #36]	@ (8005470 <prvHeapInit+0xc0>)
 800544a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800544e:	601a      	str	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	20000e5c 	.word	0x20000e5c
 8005460:	20004a5c 	.word	0x20004a5c
 8005464:	20004a64 	.word	0x20004a64
 8005468:	20004a6c 	.word	0x20004a6c
 800546c:	20004a68 	.word	0x20004a68
 8005470:	20004a78 	.word	0x20004a78

08005474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800547c:	4b28      	ldr	r3, [pc, #160]	@ (8005520 <prvInsertBlockIntoFreeList+0xac>)
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	e002      	b.n	8005488 <prvInsertBlockIntoFreeList+0x14>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d8f7      	bhi.n	8005482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	4413      	add	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d108      	bne.n	80054b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	441a      	add	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	441a      	add	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d118      	bne.n	80054fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <prvInsertBlockIntoFreeList+0xb0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d00d      	beq.n	80054f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	441a      	add	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e008      	b.n	8005504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005524 <prvInsertBlockIntoFreeList+0xb0>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e003      	b.n	8005504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	d002      	beq.n	8005512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20004a5c 	.word	0x20004a5c
 8005524:	20004a64 	.word	0x20004a64

08005528 <std>:
 8005528:	2300      	movs	r3, #0
 800552a:	b510      	push	{r4, lr}
 800552c:	4604      	mov	r4, r0
 800552e:	e9c0 3300 	strd	r3, r3, [r0]
 8005532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005536:	6083      	str	r3, [r0, #8]
 8005538:	8181      	strh	r1, [r0, #12]
 800553a:	6643      	str	r3, [r0, #100]	@ 0x64
 800553c:	81c2      	strh	r2, [r0, #14]
 800553e:	6183      	str	r3, [r0, #24]
 8005540:	4619      	mov	r1, r3
 8005542:	2208      	movs	r2, #8
 8005544:	305c      	adds	r0, #92	@ 0x5c
 8005546:	f000 f906 	bl	8005756 <memset>
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <std+0x58>)
 800554c:	6263      	str	r3, [r4, #36]	@ 0x24
 800554e:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <std+0x5c>)
 8005550:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <std+0x60>)
 8005554:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005556:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <std+0x64>)
 8005558:	6323      	str	r3, [r4, #48]	@ 0x30
 800555a:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <std+0x68>)
 800555c:	6224      	str	r4, [r4, #32]
 800555e:	429c      	cmp	r4, r3
 8005560:	d006      	beq.n	8005570 <std+0x48>
 8005562:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005566:	4294      	cmp	r4, r2
 8005568:	d002      	beq.n	8005570 <std+0x48>
 800556a:	33d0      	adds	r3, #208	@ 0xd0
 800556c:	429c      	cmp	r4, r3
 800556e:	d105      	bne.n	800557c <std+0x54>
 8005570:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005578:	f000 b966 	b.w	8005848 <__retarget_lock_init_recursive>
 800557c:	bd10      	pop	{r4, pc}
 800557e:	bf00      	nop
 8005580:	080056d1 	.word	0x080056d1
 8005584:	080056f3 	.word	0x080056f3
 8005588:	0800572b 	.word	0x0800572b
 800558c:	0800574f 	.word	0x0800574f
 8005590:	20004a7c 	.word	0x20004a7c

08005594 <stdio_exit_handler>:
 8005594:	4a02      	ldr	r2, [pc, #8]	@ (80055a0 <stdio_exit_handler+0xc>)
 8005596:	4903      	ldr	r1, [pc, #12]	@ (80055a4 <stdio_exit_handler+0x10>)
 8005598:	4803      	ldr	r0, [pc, #12]	@ (80055a8 <stdio_exit_handler+0x14>)
 800559a:	f000 b869 	b.w	8005670 <_fwalk_sglue>
 800559e:	bf00      	nop
 80055a0:	20000010 	.word	0x20000010
 80055a4:	08006105 	.word	0x08006105
 80055a8:	20000020 	.word	0x20000020

080055ac <cleanup_stdio>:
 80055ac:	6841      	ldr	r1, [r0, #4]
 80055ae:	4b0c      	ldr	r3, [pc, #48]	@ (80055e0 <cleanup_stdio+0x34>)
 80055b0:	4299      	cmp	r1, r3
 80055b2:	b510      	push	{r4, lr}
 80055b4:	4604      	mov	r4, r0
 80055b6:	d001      	beq.n	80055bc <cleanup_stdio+0x10>
 80055b8:	f000 fda4 	bl	8006104 <_fflush_r>
 80055bc:	68a1      	ldr	r1, [r4, #8]
 80055be:	4b09      	ldr	r3, [pc, #36]	@ (80055e4 <cleanup_stdio+0x38>)
 80055c0:	4299      	cmp	r1, r3
 80055c2:	d002      	beq.n	80055ca <cleanup_stdio+0x1e>
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 fd9d 	bl	8006104 <_fflush_r>
 80055ca:	68e1      	ldr	r1, [r4, #12]
 80055cc:	4b06      	ldr	r3, [pc, #24]	@ (80055e8 <cleanup_stdio+0x3c>)
 80055ce:	4299      	cmp	r1, r3
 80055d0:	d004      	beq.n	80055dc <cleanup_stdio+0x30>
 80055d2:	4620      	mov	r0, r4
 80055d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d8:	f000 bd94 	b.w	8006104 <_fflush_r>
 80055dc:	bd10      	pop	{r4, pc}
 80055de:	bf00      	nop
 80055e0:	20004a7c 	.word	0x20004a7c
 80055e4:	20004ae4 	.word	0x20004ae4
 80055e8:	20004b4c 	.word	0x20004b4c

080055ec <global_stdio_init.part.0>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	4b0b      	ldr	r3, [pc, #44]	@ (800561c <global_stdio_init.part.0+0x30>)
 80055f0:	4c0b      	ldr	r4, [pc, #44]	@ (8005620 <global_stdio_init.part.0+0x34>)
 80055f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005624 <global_stdio_init.part.0+0x38>)
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	4620      	mov	r0, r4
 80055f8:	2200      	movs	r2, #0
 80055fa:	2104      	movs	r1, #4
 80055fc:	f7ff ff94 	bl	8005528 <std>
 8005600:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005604:	2201      	movs	r2, #1
 8005606:	2109      	movs	r1, #9
 8005608:	f7ff ff8e 	bl	8005528 <std>
 800560c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005610:	2202      	movs	r2, #2
 8005612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005616:	2112      	movs	r1, #18
 8005618:	f7ff bf86 	b.w	8005528 <std>
 800561c:	20004bb4 	.word	0x20004bb4
 8005620:	20004a7c 	.word	0x20004a7c
 8005624:	08005595 	.word	0x08005595

08005628 <__sfp_lock_acquire>:
 8005628:	4801      	ldr	r0, [pc, #4]	@ (8005630 <__sfp_lock_acquire+0x8>)
 800562a:	f000 b90e 	b.w	800584a <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	20004bbd 	.word	0x20004bbd

08005634 <__sfp_lock_release>:
 8005634:	4801      	ldr	r0, [pc, #4]	@ (800563c <__sfp_lock_release+0x8>)
 8005636:	f000 b909 	b.w	800584c <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	20004bbd 	.word	0x20004bbd

08005640 <__sinit>:
 8005640:	b510      	push	{r4, lr}
 8005642:	4604      	mov	r4, r0
 8005644:	f7ff fff0 	bl	8005628 <__sfp_lock_acquire>
 8005648:	6a23      	ldr	r3, [r4, #32]
 800564a:	b11b      	cbz	r3, 8005654 <__sinit+0x14>
 800564c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005650:	f7ff bff0 	b.w	8005634 <__sfp_lock_release>
 8005654:	4b04      	ldr	r3, [pc, #16]	@ (8005668 <__sinit+0x28>)
 8005656:	6223      	str	r3, [r4, #32]
 8005658:	4b04      	ldr	r3, [pc, #16]	@ (800566c <__sinit+0x2c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f5      	bne.n	800564c <__sinit+0xc>
 8005660:	f7ff ffc4 	bl	80055ec <global_stdio_init.part.0>
 8005664:	e7f2      	b.n	800564c <__sinit+0xc>
 8005666:	bf00      	nop
 8005668:	080055ad 	.word	0x080055ad
 800566c:	20004bb4 	.word	0x20004bb4

08005670 <_fwalk_sglue>:
 8005670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005674:	4607      	mov	r7, r0
 8005676:	4688      	mov	r8, r1
 8005678:	4614      	mov	r4, r2
 800567a:	2600      	movs	r6, #0
 800567c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005680:	f1b9 0901 	subs.w	r9, r9, #1
 8005684:	d505      	bpl.n	8005692 <_fwalk_sglue+0x22>
 8005686:	6824      	ldr	r4, [r4, #0]
 8005688:	2c00      	cmp	r4, #0
 800568a:	d1f7      	bne.n	800567c <_fwalk_sglue+0xc>
 800568c:	4630      	mov	r0, r6
 800568e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d907      	bls.n	80056a8 <_fwalk_sglue+0x38>
 8005698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800569c:	3301      	adds	r3, #1
 800569e:	d003      	beq.n	80056a8 <_fwalk_sglue+0x38>
 80056a0:	4629      	mov	r1, r5
 80056a2:	4638      	mov	r0, r7
 80056a4:	47c0      	blx	r8
 80056a6:	4306      	orrs	r6, r0
 80056a8:	3568      	adds	r5, #104	@ 0x68
 80056aa:	e7e9      	b.n	8005680 <_fwalk_sglue+0x10>

080056ac <iprintf>:
 80056ac:	b40f      	push	{r0, r1, r2, r3}
 80056ae:	b507      	push	{r0, r1, r2, lr}
 80056b0:	4906      	ldr	r1, [pc, #24]	@ (80056cc <iprintf+0x20>)
 80056b2:	ab04      	add	r3, sp, #16
 80056b4:	6808      	ldr	r0, [r1, #0]
 80056b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ba:	6881      	ldr	r1, [r0, #8]
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	f000 f9f7 	bl	8005ab0 <_vfiprintf_r>
 80056c2:	b003      	add	sp, #12
 80056c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c8:	b004      	add	sp, #16
 80056ca:	4770      	bx	lr
 80056cc:	2000001c 	.word	0x2000001c

080056d0 <__sread>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	460c      	mov	r4, r1
 80056d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d8:	f000 f868 	bl	80057ac <_read_r>
 80056dc:	2800      	cmp	r0, #0
 80056de:	bfab      	itete	ge
 80056e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056e2:	89a3      	ldrhlt	r3, [r4, #12]
 80056e4:	181b      	addge	r3, r3, r0
 80056e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056ea:	bfac      	ite	ge
 80056ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056ee:	81a3      	strhlt	r3, [r4, #12]
 80056f0:	bd10      	pop	{r4, pc}

080056f2 <__swrite>:
 80056f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f6:	461f      	mov	r7, r3
 80056f8:	898b      	ldrh	r3, [r1, #12]
 80056fa:	05db      	lsls	r3, r3, #23
 80056fc:	4605      	mov	r5, r0
 80056fe:	460c      	mov	r4, r1
 8005700:	4616      	mov	r6, r2
 8005702:	d505      	bpl.n	8005710 <__swrite+0x1e>
 8005704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005708:	2302      	movs	r3, #2
 800570a:	2200      	movs	r2, #0
 800570c:	f000 f83c 	bl	8005788 <_lseek_r>
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005716:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800571a:	81a3      	strh	r3, [r4, #12]
 800571c:	4632      	mov	r2, r6
 800571e:	463b      	mov	r3, r7
 8005720:	4628      	mov	r0, r5
 8005722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005726:	f000 b853 	b.w	80057d0 <_write_r>

0800572a <__sseek>:
 800572a:	b510      	push	{r4, lr}
 800572c:	460c      	mov	r4, r1
 800572e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005732:	f000 f829 	bl	8005788 <_lseek_r>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	bf15      	itete	ne
 800573c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800573e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005742:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005746:	81a3      	strheq	r3, [r4, #12]
 8005748:	bf18      	it	ne
 800574a:	81a3      	strhne	r3, [r4, #12]
 800574c:	bd10      	pop	{r4, pc}

0800574e <__sclose>:
 800574e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005752:	f000 b809 	b.w	8005768 <_close_r>

08005756 <memset>:
 8005756:	4402      	add	r2, r0
 8005758:	4603      	mov	r3, r0
 800575a:	4293      	cmp	r3, r2
 800575c:	d100      	bne.n	8005760 <memset+0xa>
 800575e:	4770      	bx	lr
 8005760:	f803 1b01 	strb.w	r1, [r3], #1
 8005764:	e7f9      	b.n	800575a <memset+0x4>
	...

08005768 <_close_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d06      	ldr	r5, [pc, #24]	@ (8005784 <_close_r+0x1c>)
 800576c:	2300      	movs	r3, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	f7fb fa01 	bl	8000b7a <_close>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_close_r+0x1a>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b103      	cbz	r3, 8005782 <_close_r+0x1a>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	20004bb8 	.word	0x20004bb8

08005788 <_lseek_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4d07      	ldr	r5, [pc, #28]	@ (80057a8 <_lseek_r+0x20>)
 800578c:	4604      	mov	r4, r0
 800578e:	4608      	mov	r0, r1
 8005790:	4611      	mov	r1, r2
 8005792:	2200      	movs	r2, #0
 8005794:	602a      	str	r2, [r5, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	f7fb fa16 	bl	8000bc8 <_lseek>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_lseek_r+0x1e>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_lseek_r+0x1e>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20004bb8 	.word	0x20004bb8

080057ac <_read_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d07      	ldr	r5, [pc, #28]	@ (80057cc <_read_r+0x20>)
 80057b0:	4604      	mov	r4, r0
 80057b2:	4608      	mov	r0, r1
 80057b4:	4611      	mov	r1, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fb f9a4 	bl	8000b08 <_read>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_read_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_read_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20004bb8 	.word	0x20004bb8

080057d0 <_write_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d07      	ldr	r5, [pc, #28]	@ (80057f0 <_write_r+0x20>)
 80057d4:	4604      	mov	r4, r0
 80057d6:	4608      	mov	r0, r1
 80057d8:	4611      	mov	r1, r2
 80057da:	2200      	movs	r2, #0
 80057dc:	602a      	str	r2, [r5, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	f7fb f9af 	bl	8000b42 <_write>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_write_r+0x1e>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_write_r+0x1e>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	20004bb8 	.word	0x20004bb8

080057f4 <__errno>:
 80057f4:	4b01      	ldr	r3, [pc, #4]	@ (80057fc <__errno+0x8>)
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	2000001c 	.word	0x2000001c

08005800 <__libc_init_array>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	4d0d      	ldr	r5, [pc, #52]	@ (8005838 <__libc_init_array+0x38>)
 8005804:	4c0d      	ldr	r4, [pc, #52]	@ (800583c <__libc_init_array+0x3c>)
 8005806:	1b64      	subs	r4, r4, r5
 8005808:	10a4      	asrs	r4, r4, #2
 800580a:	2600      	movs	r6, #0
 800580c:	42a6      	cmp	r6, r4
 800580e:	d109      	bne.n	8005824 <__libc_init_array+0x24>
 8005810:	4d0b      	ldr	r5, [pc, #44]	@ (8005840 <__libc_init_array+0x40>)
 8005812:	4c0c      	ldr	r4, [pc, #48]	@ (8005844 <__libc_init_array+0x44>)
 8005814:	f000 fdc6 	bl	80063a4 <_init>
 8005818:	1b64      	subs	r4, r4, r5
 800581a:	10a4      	asrs	r4, r4, #2
 800581c:	2600      	movs	r6, #0
 800581e:	42a6      	cmp	r6, r4
 8005820:	d105      	bne.n	800582e <__libc_init_array+0x2e>
 8005822:	bd70      	pop	{r4, r5, r6, pc}
 8005824:	f855 3b04 	ldr.w	r3, [r5], #4
 8005828:	4798      	blx	r3
 800582a:	3601      	adds	r6, #1
 800582c:	e7ee      	b.n	800580c <__libc_init_array+0xc>
 800582e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005832:	4798      	blx	r3
 8005834:	3601      	adds	r6, #1
 8005836:	e7f2      	b.n	800581e <__libc_init_array+0x1e>
 8005838:	0800647c 	.word	0x0800647c
 800583c:	0800647c 	.word	0x0800647c
 8005840:	0800647c 	.word	0x0800647c
 8005844:	08006480 	.word	0x08006480

08005848 <__retarget_lock_init_recursive>:
 8005848:	4770      	bx	lr

0800584a <__retarget_lock_acquire_recursive>:
 800584a:	4770      	bx	lr

0800584c <__retarget_lock_release_recursive>:
 800584c:	4770      	bx	lr

0800584e <memcpy>:
 800584e:	440a      	add	r2, r1
 8005850:	4291      	cmp	r1, r2
 8005852:	f100 33ff 	add.w	r3, r0, #4294967295
 8005856:	d100      	bne.n	800585a <memcpy+0xc>
 8005858:	4770      	bx	lr
 800585a:	b510      	push	{r4, lr}
 800585c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005864:	4291      	cmp	r1, r2
 8005866:	d1f9      	bne.n	800585c <memcpy+0xe>
 8005868:	bd10      	pop	{r4, pc}
	...

0800586c <_free_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4605      	mov	r5, r0
 8005870:	2900      	cmp	r1, #0
 8005872:	d041      	beq.n	80058f8 <_free_r+0x8c>
 8005874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005878:	1f0c      	subs	r4, r1, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	bfb8      	it	lt
 800587e:	18e4      	addlt	r4, r4, r3
 8005880:	f000 f8e0 	bl	8005a44 <__malloc_lock>
 8005884:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <_free_r+0x90>)
 8005886:	6813      	ldr	r3, [r2, #0]
 8005888:	b933      	cbnz	r3, 8005898 <_free_r+0x2c>
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	6014      	str	r4, [r2, #0]
 800588e:	4628      	mov	r0, r5
 8005890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005894:	f000 b8dc 	b.w	8005a50 <__malloc_unlock>
 8005898:	42a3      	cmp	r3, r4
 800589a:	d908      	bls.n	80058ae <_free_r+0x42>
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	1821      	adds	r1, r4, r0
 80058a0:	428b      	cmp	r3, r1
 80058a2:	bf01      	itttt	eq
 80058a4:	6819      	ldreq	r1, [r3, #0]
 80058a6:	685b      	ldreq	r3, [r3, #4]
 80058a8:	1809      	addeq	r1, r1, r0
 80058aa:	6021      	streq	r1, [r4, #0]
 80058ac:	e7ed      	b.n	800588a <_free_r+0x1e>
 80058ae:	461a      	mov	r2, r3
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	b10b      	cbz	r3, 80058b8 <_free_r+0x4c>
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d9fa      	bls.n	80058ae <_free_r+0x42>
 80058b8:	6811      	ldr	r1, [r2, #0]
 80058ba:	1850      	adds	r0, r2, r1
 80058bc:	42a0      	cmp	r0, r4
 80058be:	d10b      	bne.n	80058d8 <_free_r+0x6c>
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	4401      	add	r1, r0
 80058c4:	1850      	adds	r0, r2, r1
 80058c6:	4283      	cmp	r3, r0
 80058c8:	6011      	str	r1, [r2, #0]
 80058ca:	d1e0      	bne.n	800588e <_free_r+0x22>
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	6053      	str	r3, [r2, #4]
 80058d2:	4408      	add	r0, r1
 80058d4:	6010      	str	r0, [r2, #0]
 80058d6:	e7da      	b.n	800588e <_free_r+0x22>
 80058d8:	d902      	bls.n	80058e0 <_free_r+0x74>
 80058da:	230c      	movs	r3, #12
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	e7d6      	b.n	800588e <_free_r+0x22>
 80058e0:	6820      	ldr	r0, [r4, #0]
 80058e2:	1821      	adds	r1, r4, r0
 80058e4:	428b      	cmp	r3, r1
 80058e6:	bf04      	itt	eq
 80058e8:	6819      	ldreq	r1, [r3, #0]
 80058ea:	685b      	ldreq	r3, [r3, #4]
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	bf04      	itt	eq
 80058f0:	1809      	addeq	r1, r1, r0
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	6054      	str	r4, [r2, #4]
 80058f6:	e7ca      	b.n	800588e <_free_r+0x22>
 80058f8:	bd38      	pop	{r3, r4, r5, pc}
 80058fa:	bf00      	nop
 80058fc:	20004bc4 	.word	0x20004bc4

08005900 <sbrk_aligned>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4e0f      	ldr	r6, [pc, #60]	@ (8005940 <sbrk_aligned+0x40>)
 8005904:	460c      	mov	r4, r1
 8005906:	6831      	ldr	r1, [r6, #0]
 8005908:	4605      	mov	r5, r0
 800590a:	b911      	cbnz	r1, 8005912 <sbrk_aligned+0x12>
 800590c:	f000 fcb6 	bl	800627c <_sbrk_r>
 8005910:	6030      	str	r0, [r6, #0]
 8005912:	4621      	mov	r1, r4
 8005914:	4628      	mov	r0, r5
 8005916:	f000 fcb1 	bl	800627c <_sbrk_r>
 800591a:	1c43      	adds	r3, r0, #1
 800591c:	d103      	bne.n	8005926 <sbrk_aligned+0x26>
 800591e:	f04f 34ff 	mov.w	r4, #4294967295
 8005922:	4620      	mov	r0, r4
 8005924:	bd70      	pop	{r4, r5, r6, pc}
 8005926:	1cc4      	adds	r4, r0, #3
 8005928:	f024 0403 	bic.w	r4, r4, #3
 800592c:	42a0      	cmp	r0, r4
 800592e:	d0f8      	beq.n	8005922 <sbrk_aligned+0x22>
 8005930:	1a21      	subs	r1, r4, r0
 8005932:	4628      	mov	r0, r5
 8005934:	f000 fca2 	bl	800627c <_sbrk_r>
 8005938:	3001      	adds	r0, #1
 800593a:	d1f2      	bne.n	8005922 <sbrk_aligned+0x22>
 800593c:	e7ef      	b.n	800591e <sbrk_aligned+0x1e>
 800593e:	bf00      	nop
 8005940:	20004bc0 	.word	0x20004bc0

08005944 <_malloc_r>:
 8005944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005948:	1ccd      	adds	r5, r1, #3
 800594a:	f025 0503 	bic.w	r5, r5, #3
 800594e:	3508      	adds	r5, #8
 8005950:	2d0c      	cmp	r5, #12
 8005952:	bf38      	it	cc
 8005954:	250c      	movcc	r5, #12
 8005956:	2d00      	cmp	r5, #0
 8005958:	4606      	mov	r6, r0
 800595a:	db01      	blt.n	8005960 <_malloc_r+0x1c>
 800595c:	42a9      	cmp	r1, r5
 800595e:	d904      	bls.n	800596a <_malloc_r+0x26>
 8005960:	230c      	movs	r3, #12
 8005962:	6033      	str	r3, [r6, #0]
 8005964:	2000      	movs	r0, #0
 8005966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a40 <_malloc_r+0xfc>
 800596e:	f000 f869 	bl	8005a44 <__malloc_lock>
 8005972:	f8d8 3000 	ldr.w	r3, [r8]
 8005976:	461c      	mov	r4, r3
 8005978:	bb44      	cbnz	r4, 80059cc <_malloc_r+0x88>
 800597a:	4629      	mov	r1, r5
 800597c:	4630      	mov	r0, r6
 800597e:	f7ff ffbf 	bl	8005900 <sbrk_aligned>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	4604      	mov	r4, r0
 8005986:	d158      	bne.n	8005a3a <_malloc_r+0xf6>
 8005988:	f8d8 4000 	ldr.w	r4, [r8]
 800598c:	4627      	mov	r7, r4
 800598e:	2f00      	cmp	r7, #0
 8005990:	d143      	bne.n	8005a1a <_malloc_r+0xd6>
 8005992:	2c00      	cmp	r4, #0
 8005994:	d04b      	beq.n	8005a2e <_malloc_r+0xea>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	4639      	mov	r1, r7
 800599a:	4630      	mov	r0, r6
 800599c:	eb04 0903 	add.w	r9, r4, r3
 80059a0:	f000 fc6c 	bl	800627c <_sbrk_r>
 80059a4:	4581      	cmp	r9, r0
 80059a6:	d142      	bne.n	8005a2e <_malloc_r+0xea>
 80059a8:	6821      	ldr	r1, [r4, #0]
 80059aa:	1a6d      	subs	r5, r5, r1
 80059ac:	4629      	mov	r1, r5
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7ff ffa6 	bl	8005900 <sbrk_aligned>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d03a      	beq.n	8005a2e <_malloc_r+0xea>
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	442b      	add	r3, r5
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	f8d8 3000 	ldr.w	r3, [r8]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	bb62      	cbnz	r2, 8005a20 <_malloc_r+0xdc>
 80059c6:	f8c8 7000 	str.w	r7, [r8]
 80059ca:	e00f      	b.n	80059ec <_malloc_r+0xa8>
 80059cc:	6822      	ldr	r2, [r4, #0]
 80059ce:	1b52      	subs	r2, r2, r5
 80059d0:	d420      	bmi.n	8005a14 <_malloc_r+0xd0>
 80059d2:	2a0b      	cmp	r2, #11
 80059d4:	d917      	bls.n	8005a06 <_malloc_r+0xc2>
 80059d6:	1961      	adds	r1, r4, r5
 80059d8:	42a3      	cmp	r3, r4
 80059da:	6025      	str	r5, [r4, #0]
 80059dc:	bf18      	it	ne
 80059de:	6059      	strne	r1, [r3, #4]
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	bf08      	it	eq
 80059e4:	f8c8 1000 	streq.w	r1, [r8]
 80059e8:	5162      	str	r2, [r4, r5]
 80059ea:	604b      	str	r3, [r1, #4]
 80059ec:	4630      	mov	r0, r6
 80059ee:	f000 f82f 	bl	8005a50 <__malloc_unlock>
 80059f2:	f104 000b 	add.w	r0, r4, #11
 80059f6:	1d23      	adds	r3, r4, #4
 80059f8:	f020 0007 	bic.w	r0, r0, #7
 80059fc:	1ac2      	subs	r2, r0, r3
 80059fe:	bf1c      	itt	ne
 8005a00:	1a1b      	subne	r3, r3, r0
 8005a02:	50a3      	strne	r3, [r4, r2]
 8005a04:	e7af      	b.n	8005966 <_malloc_r+0x22>
 8005a06:	6862      	ldr	r2, [r4, #4]
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	bf0c      	ite	eq
 8005a0c:	f8c8 2000 	streq.w	r2, [r8]
 8005a10:	605a      	strne	r2, [r3, #4]
 8005a12:	e7eb      	b.n	80059ec <_malloc_r+0xa8>
 8005a14:	4623      	mov	r3, r4
 8005a16:	6864      	ldr	r4, [r4, #4]
 8005a18:	e7ae      	b.n	8005978 <_malloc_r+0x34>
 8005a1a:	463c      	mov	r4, r7
 8005a1c:	687f      	ldr	r7, [r7, #4]
 8005a1e:	e7b6      	b.n	800598e <_malloc_r+0x4a>
 8005a20:	461a      	mov	r2, r3
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d1fb      	bne.n	8005a20 <_malloc_r+0xdc>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6053      	str	r3, [r2, #4]
 8005a2c:	e7de      	b.n	80059ec <_malloc_r+0xa8>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	6033      	str	r3, [r6, #0]
 8005a32:	4630      	mov	r0, r6
 8005a34:	f000 f80c 	bl	8005a50 <__malloc_unlock>
 8005a38:	e794      	b.n	8005964 <_malloc_r+0x20>
 8005a3a:	6005      	str	r5, [r0, #0]
 8005a3c:	e7d6      	b.n	80059ec <_malloc_r+0xa8>
 8005a3e:	bf00      	nop
 8005a40:	20004bc4 	.word	0x20004bc4

08005a44 <__malloc_lock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	@ (8005a4c <__malloc_lock+0x8>)
 8005a46:	f7ff bf00 	b.w	800584a <__retarget_lock_acquire_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20004bbc 	.word	0x20004bbc

08005a50 <__malloc_unlock>:
 8005a50:	4801      	ldr	r0, [pc, #4]	@ (8005a58 <__malloc_unlock+0x8>)
 8005a52:	f7ff befb 	b.w	800584c <__retarget_lock_release_recursive>
 8005a56:	bf00      	nop
 8005a58:	20004bbc 	.word	0x20004bbc

08005a5c <__sfputc_r>:
 8005a5c:	6893      	ldr	r3, [r2, #8]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	b410      	push	{r4}
 8005a64:	6093      	str	r3, [r2, #8]
 8005a66:	da08      	bge.n	8005a7a <__sfputc_r+0x1e>
 8005a68:	6994      	ldr	r4, [r2, #24]
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	db01      	blt.n	8005a72 <__sfputc_r+0x16>
 8005a6e:	290a      	cmp	r1, #10
 8005a70:	d103      	bne.n	8005a7a <__sfputc_r+0x1e>
 8005a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a76:	f000 bb6d 	b.w	8006154 <__swbuf_r>
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	1c58      	adds	r0, r3, #1
 8005a7e:	6010      	str	r0, [r2, #0]
 8005a80:	7019      	strb	r1, [r3, #0]
 8005a82:	4608      	mov	r0, r1
 8005a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <__sfputs_r>:
 8005a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	460f      	mov	r7, r1
 8005a90:	4614      	mov	r4, r2
 8005a92:	18d5      	adds	r5, r2, r3
 8005a94:	42ac      	cmp	r4, r5
 8005a96:	d101      	bne.n	8005a9c <__sfputs_r+0x12>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e007      	b.n	8005aac <__sfputs_r+0x22>
 8005a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa0:	463a      	mov	r2, r7
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f7ff ffda 	bl	8005a5c <__sfputc_r>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d1f3      	bne.n	8005a94 <__sfputs_r+0xa>
 8005aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ab0 <_vfiprintf_r>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	b09d      	sub	sp, #116	@ 0x74
 8005ab8:	4614      	mov	r4, r2
 8005aba:	4698      	mov	r8, r3
 8005abc:	4606      	mov	r6, r0
 8005abe:	b118      	cbz	r0, 8005ac8 <_vfiprintf_r+0x18>
 8005ac0:	6a03      	ldr	r3, [r0, #32]
 8005ac2:	b90b      	cbnz	r3, 8005ac8 <_vfiprintf_r+0x18>
 8005ac4:	f7ff fdbc 	bl	8005640 <__sinit>
 8005ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aca:	07d9      	lsls	r1, r3, #31
 8005acc:	d405      	bmi.n	8005ada <_vfiprintf_r+0x2a>
 8005ace:	89ab      	ldrh	r3, [r5, #12]
 8005ad0:	059a      	lsls	r2, r3, #22
 8005ad2:	d402      	bmi.n	8005ada <_vfiprintf_r+0x2a>
 8005ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ad6:	f7ff feb8 	bl	800584a <__retarget_lock_acquire_recursive>
 8005ada:	89ab      	ldrh	r3, [r5, #12]
 8005adc:	071b      	lsls	r3, r3, #28
 8005ade:	d501      	bpl.n	8005ae4 <_vfiprintf_r+0x34>
 8005ae0:	692b      	ldr	r3, [r5, #16]
 8005ae2:	b99b      	cbnz	r3, 8005b0c <_vfiprintf_r+0x5c>
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f000 fb72 	bl	80061d0 <__swsetup_r>
 8005aec:	b170      	cbz	r0, 8005b0c <_vfiprintf_r+0x5c>
 8005aee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005af0:	07dc      	lsls	r4, r3, #31
 8005af2:	d504      	bpl.n	8005afe <_vfiprintf_r+0x4e>
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	b01d      	add	sp, #116	@ 0x74
 8005afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	0598      	lsls	r0, r3, #22
 8005b02:	d4f7      	bmi.n	8005af4 <_vfiprintf_r+0x44>
 8005b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b06:	f7ff fea1 	bl	800584c <__retarget_lock_release_recursive>
 8005b0a:	e7f3      	b.n	8005af4 <_vfiprintf_r+0x44>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b10:	2320      	movs	r3, #32
 8005b12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b1a:	2330      	movs	r3, #48	@ 0x30
 8005b1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ccc <_vfiprintf_r+0x21c>
 8005b20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b24:	f04f 0901 	mov.w	r9, #1
 8005b28:	4623      	mov	r3, r4
 8005b2a:	469a      	mov	sl, r3
 8005b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b30:	b10a      	cbz	r2, 8005b36 <_vfiprintf_r+0x86>
 8005b32:	2a25      	cmp	r2, #37	@ 0x25
 8005b34:	d1f9      	bne.n	8005b2a <_vfiprintf_r+0x7a>
 8005b36:	ebba 0b04 	subs.w	fp, sl, r4
 8005b3a:	d00b      	beq.n	8005b54 <_vfiprintf_r+0xa4>
 8005b3c:	465b      	mov	r3, fp
 8005b3e:	4622      	mov	r2, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	4630      	mov	r0, r6
 8005b44:	f7ff ffa1 	bl	8005a8a <__sfputs_r>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f000 80a7 	beq.w	8005c9c <_vfiprintf_r+0x1ec>
 8005b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b50:	445a      	add	r2, fp
 8005b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b54:	f89a 3000 	ldrb.w	r3, [sl]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 809f 	beq.w	8005c9c <_vfiprintf_r+0x1ec>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f04f 32ff 	mov.w	r2, #4294967295
 8005b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b68:	f10a 0a01 	add.w	sl, sl, #1
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	9307      	str	r3, [sp, #28]
 8005b70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b74:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b76:	4654      	mov	r4, sl
 8005b78:	2205      	movs	r2, #5
 8005b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7e:	4853      	ldr	r0, [pc, #332]	@ (8005ccc <_vfiprintf_r+0x21c>)
 8005b80:	f7fa fb46 	bl	8000210 <memchr>
 8005b84:	9a04      	ldr	r2, [sp, #16]
 8005b86:	b9d8      	cbnz	r0, 8005bc0 <_vfiprintf_r+0x110>
 8005b88:	06d1      	lsls	r1, r2, #27
 8005b8a:	bf44      	itt	mi
 8005b8c:	2320      	movmi	r3, #32
 8005b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b92:	0713      	lsls	r3, r2, #28
 8005b94:	bf44      	itt	mi
 8005b96:	232b      	movmi	r3, #43	@ 0x2b
 8005b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ba2:	d015      	beq.n	8005bd0 <_vfiprintf_r+0x120>
 8005ba4:	9a07      	ldr	r2, [sp, #28]
 8005ba6:	4654      	mov	r4, sl
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f04f 0c0a 	mov.w	ip, #10
 8005bae:	4621      	mov	r1, r4
 8005bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bb4:	3b30      	subs	r3, #48	@ 0x30
 8005bb6:	2b09      	cmp	r3, #9
 8005bb8:	d94b      	bls.n	8005c52 <_vfiprintf_r+0x1a2>
 8005bba:	b1b0      	cbz	r0, 8005bea <_vfiprintf_r+0x13a>
 8005bbc:	9207      	str	r2, [sp, #28]
 8005bbe:	e014      	b.n	8005bea <_vfiprintf_r+0x13a>
 8005bc0:	eba0 0308 	sub.w	r3, r0, r8
 8005bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	46a2      	mov	sl, r4
 8005bce:	e7d2      	b.n	8005b76 <_vfiprintf_r+0xc6>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	1d19      	adds	r1, r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	9103      	str	r1, [sp, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bfbb      	ittet	lt
 8005bdc:	425b      	neglt	r3, r3
 8005bde:	f042 0202 	orrlt.w	r2, r2, #2
 8005be2:	9307      	strge	r3, [sp, #28]
 8005be4:	9307      	strlt	r3, [sp, #28]
 8005be6:	bfb8      	it	lt
 8005be8:	9204      	strlt	r2, [sp, #16]
 8005bea:	7823      	ldrb	r3, [r4, #0]
 8005bec:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bee:	d10a      	bne.n	8005c06 <_vfiprintf_r+0x156>
 8005bf0:	7863      	ldrb	r3, [r4, #1]
 8005bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf4:	d132      	bne.n	8005c5c <_vfiprintf_r+0x1ac>
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	1d1a      	adds	r2, r3, #4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	9203      	str	r2, [sp, #12]
 8005bfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c02:	3402      	adds	r4, #2
 8005c04:	9305      	str	r3, [sp, #20]
 8005c06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005cdc <_vfiprintf_r+0x22c>
 8005c0a:	7821      	ldrb	r1, [r4, #0]
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	4650      	mov	r0, sl
 8005c10:	f7fa fafe 	bl	8000210 <memchr>
 8005c14:	b138      	cbz	r0, 8005c26 <_vfiprintf_r+0x176>
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	eba0 000a 	sub.w	r0, r0, sl
 8005c1c:	2240      	movs	r2, #64	@ 0x40
 8005c1e:	4082      	lsls	r2, r0
 8005c20:	4313      	orrs	r3, r2
 8005c22:	3401      	adds	r4, #1
 8005c24:	9304      	str	r3, [sp, #16]
 8005c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2a:	4829      	ldr	r0, [pc, #164]	@ (8005cd0 <_vfiprintf_r+0x220>)
 8005c2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c30:	2206      	movs	r2, #6
 8005c32:	f7fa faed 	bl	8000210 <memchr>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d03f      	beq.n	8005cba <_vfiprintf_r+0x20a>
 8005c3a:	4b26      	ldr	r3, [pc, #152]	@ (8005cd4 <_vfiprintf_r+0x224>)
 8005c3c:	bb1b      	cbnz	r3, 8005c86 <_vfiprintf_r+0x1d6>
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	3307      	adds	r3, #7
 8005c42:	f023 0307 	bic.w	r3, r3, #7
 8005c46:	3308      	adds	r3, #8
 8005c48:	9303      	str	r3, [sp, #12]
 8005c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4c:	443b      	add	r3, r7
 8005c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c50:	e76a      	b.n	8005b28 <_vfiprintf_r+0x78>
 8005c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c56:	460c      	mov	r4, r1
 8005c58:	2001      	movs	r0, #1
 8005c5a:	e7a8      	b.n	8005bae <_vfiprintf_r+0xfe>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	3401      	adds	r4, #1
 8005c60:	9305      	str	r3, [sp, #20]
 8005c62:	4619      	mov	r1, r3
 8005c64:	f04f 0c0a 	mov.w	ip, #10
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c6e:	3a30      	subs	r2, #48	@ 0x30
 8005c70:	2a09      	cmp	r2, #9
 8005c72:	d903      	bls.n	8005c7c <_vfiprintf_r+0x1cc>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0c6      	beq.n	8005c06 <_vfiprintf_r+0x156>
 8005c78:	9105      	str	r1, [sp, #20]
 8005c7a:	e7c4      	b.n	8005c06 <_vfiprintf_r+0x156>
 8005c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c80:	4604      	mov	r4, r0
 8005c82:	2301      	movs	r3, #1
 8005c84:	e7f0      	b.n	8005c68 <_vfiprintf_r+0x1b8>
 8005c86:	ab03      	add	r3, sp, #12
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	462a      	mov	r2, r5
 8005c8c:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <_vfiprintf_r+0x228>)
 8005c8e:	a904      	add	r1, sp, #16
 8005c90:	4630      	mov	r0, r6
 8005c92:	f3af 8000 	nop.w
 8005c96:	4607      	mov	r7, r0
 8005c98:	1c78      	adds	r0, r7, #1
 8005c9a:	d1d6      	bne.n	8005c4a <_vfiprintf_r+0x19a>
 8005c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c9e:	07d9      	lsls	r1, r3, #31
 8005ca0:	d405      	bmi.n	8005cae <_vfiprintf_r+0x1fe>
 8005ca2:	89ab      	ldrh	r3, [r5, #12]
 8005ca4:	059a      	lsls	r2, r3, #22
 8005ca6:	d402      	bmi.n	8005cae <_vfiprintf_r+0x1fe>
 8005ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005caa:	f7ff fdcf 	bl	800584c <__retarget_lock_release_recursive>
 8005cae:	89ab      	ldrh	r3, [r5, #12]
 8005cb0:	065b      	lsls	r3, r3, #25
 8005cb2:	f53f af1f 	bmi.w	8005af4 <_vfiprintf_r+0x44>
 8005cb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cb8:	e71e      	b.n	8005af8 <_vfiprintf_r+0x48>
 8005cba:	ab03      	add	r3, sp, #12
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	462a      	mov	r2, r5
 8005cc0:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <_vfiprintf_r+0x228>)
 8005cc2:	a904      	add	r1, sp, #16
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f000 f879 	bl	8005dbc <_printf_i>
 8005cca:	e7e4      	b.n	8005c96 <_vfiprintf_r+0x1e6>
 8005ccc:	08006440 	.word	0x08006440
 8005cd0:	0800644a 	.word	0x0800644a
 8005cd4:	00000000 	.word	0x00000000
 8005cd8:	08005a8b 	.word	0x08005a8b
 8005cdc:	08006446 	.word	0x08006446

08005ce0 <_printf_common>:
 8005ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	4698      	mov	r8, r3
 8005ce8:	688a      	ldr	r2, [r1, #8]
 8005cea:	690b      	ldr	r3, [r1, #16]
 8005cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	bfb8      	it	lt
 8005cf4:	4613      	movlt	r3, r2
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	b10a      	cbz	r2, 8005d06 <_printf_common+0x26>
 8005d02:	3301      	adds	r3, #1
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	0699      	lsls	r1, r3, #26
 8005d0a:	bf42      	ittt	mi
 8005d0c:	6833      	ldrmi	r3, [r6, #0]
 8005d0e:	3302      	addmi	r3, #2
 8005d10:	6033      	strmi	r3, [r6, #0]
 8005d12:	6825      	ldr	r5, [r4, #0]
 8005d14:	f015 0506 	ands.w	r5, r5, #6
 8005d18:	d106      	bne.n	8005d28 <_printf_common+0x48>
 8005d1a:	f104 0a19 	add.w	sl, r4, #25
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	6832      	ldr	r2, [r6, #0]
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dc26      	bgt.n	8005d76 <_printf_common+0x96>
 8005d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	3b00      	subs	r3, #0
 8005d30:	bf18      	it	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	0692      	lsls	r2, r2, #26
 8005d36:	d42b      	bmi.n	8005d90 <_printf_common+0xb0>
 8005d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c8      	blx	r9
 8005d42:	3001      	adds	r0, #1
 8005d44:	d01e      	beq.n	8005d84 <_printf_common+0xa4>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	6922      	ldr	r2, [r4, #16]
 8005d4a:	f003 0306 	and.w	r3, r3, #6
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf02      	ittt	eq
 8005d52:	68e5      	ldreq	r5, [r4, #12]
 8005d54:	6833      	ldreq	r3, [r6, #0]
 8005d56:	1aed      	subeq	r5, r5, r3
 8005d58:	68a3      	ldr	r3, [r4, #8]
 8005d5a:	bf0c      	ite	eq
 8005d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d60:	2500      	movne	r5, #0
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bfc4      	itt	gt
 8005d66:	1a9b      	subgt	r3, r3, r2
 8005d68:	18ed      	addgt	r5, r5, r3
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	341a      	adds	r4, #26
 8005d6e:	42b5      	cmp	r5, r6
 8005d70:	d11a      	bne.n	8005da8 <_printf_common+0xc8>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e008      	b.n	8005d88 <_printf_common+0xa8>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4652      	mov	r2, sl
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	47c8      	blx	r9
 8005d80:	3001      	adds	r0, #1
 8005d82:	d103      	bne.n	8005d8c <_printf_common+0xac>
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	e7c6      	b.n	8005d1e <_printf_common+0x3e>
 8005d90:	18e1      	adds	r1, r4, r3
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	2030      	movs	r0, #48	@ 0x30
 8005d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d9a:	4422      	add	r2, r4
 8005d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005da4:	3302      	adds	r3, #2
 8005da6:	e7c7      	b.n	8005d38 <_printf_common+0x58>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4622      	mov	r2, r4
 8005dac:	4641      	mov	r1, r8
 8005dae:	4638      	mov	r0, r7
 8005db0:	47c8      	blx	r9
 8005db2:	3001      	adds	r0, #1
 8005db4:	d0e6      	beq.n	8005d84 <_printf_common+0xa4>
 8005db6:	3601      	adds	r6, #1
 8005db8:	e7d9      	b.n	8005d6e <_printf_common+0x8e>
	...

08005dbc <_printf_i>:
 8005dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	7e0f      	ldrb	r7, [r1, #24]
 8005dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dc4:	2f78      	cmp	r7, #120	@ 0x78
 8005dc6:	4691      	mov	r9, r2
 8005dc8:	4680      	mov	r8, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	469a      	mov	sl, r3
 8005dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dd2:	d807      	bhi.n	8005de4 <_printf_i+0x28>
 8005dd4:	2f62      	cmp	r7, #98	@ 0x62
 8005dd6:	d80a      	bhi.n	8005dee <_printf_i+0x32>
 8005dd8:	2f00      	cmp	r7, #0
 8005dda:	f000 80d2 	beq.w	8005f82 <_printf_i+0x1c6>
 8005dde:	2f58      	cmp	r7, #88	@ 0x58
 8005de0:	f000 80b9 	beq.w	8005f56 <_printf_i+0x19a>
 8005de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dec:	e03a      	b.n	8005e64 <_printf_i+0xa8>
 8005dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005df2:	2b15      	cmp	r3, #21
 8005df4:	d8f6      	bhi.n	8005de4 <_printf_i+0x28>
 8005df6:	a101      	add	r1, pc, #4	@ (adr r1, 8005dfc <_printf_i+0x40>)
 8005df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005de5 	.word	0x08005de5
 8005e08:	08005de5 	.word	0x08005de5
 8005e0c:	08005de5 	.word	0x08005de5
 8005e10:	08005de5 	.word	0x08005de5
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005de5 	.word	0x08005de5
 8005e1c:	08005de5 	.word	0x08005de5
 8005e20:	08005de5 	.word	0x08005de5
 8005e24:	08005de5 	.word	0x08005de5
 8005e28:	08005f69 	.word	0x08005f69
 8005e2c:	08005e93 	.word	0x08005e93
 8005e30:	08005f23 	.word	0x08005f23
 8005e34:	08005de5 	.word	0x08005de5
 8005e38:	08005de5 	.word	0x08005de5
 8005e3c:	08005f8b 	.word	0x08005f8b
 8005e40:	08005de5 	.word	0x08005de5
 8005e44:	08005e93 	.word	0x08005e93
 8005e48:	08005de5 	.word	0x08005de5
 8005e4c:	08005de5 	.word	0x08005de5
 8005e50:	08005f2b 	.word	0x08005f2b
 8005e54:	6833      	ldr	r3, [r6, #0]
 8005e56:	1d1a      	adds	r2, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6032      	str	r2, [r6, #0]
 8005e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e64:	2301      	movs	r3, #1
 8005e66:	e09d      	b.n	8005fa4 <_printf_i+0x1e8>
 8005e68:	6833      	ldr	r3, [r6, #0]
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	1d19      	adds	r1, r3, #4
 8005e6e:	6031      	str	r1, [r6, #0]
 8005e70:	0606      	lsls	r6, r0, #24
 8005e72:	d501      	bpl.n	8005e78 <_printf_i+0xbc>
 8005e74:	681d      	ldr	r5, [r3, #0]
 8005e76:	e003      	b.n	8005e80 <_printf_i+0xc4>
 8005e78:	0645      	lsls	r5, r0, #25
 8005e7a:	d5fb      	bpl.n	8005e74 <_printf_i+0xb8>
 8005e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e80:	2d00      	cmp	r5, #0
 8005e82:	da03      	bge.n	8005e8c <_printf_i+0xd0>
 8005e84:	232d      	movs	r3, #45	@ 0x2d
 8005e86:	426d      	negs	r5, r5
 8005e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e8c:	4859      	ldr	r0, [pc, #356]	@ (8005ff4 <_printf_i+0x238>)
 8005e8e:	230a      	movs	r3, #10
 8005e90:	e011      	b.n	8005eb6 <_printf_i+0xfa>
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	0608      	lsls	r0, r1, #24
 8005e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e9c:	d402      	bmi.n	8005ea4 <_printf_i+0xe8>
 8005e9e:	0649      	lsls	r1, r1, #25
 8005ea0:	bf48      	it	mi
 8005ea2:	b2ad      	uxthmi	r5, r5
 8005ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ea6:	4853      	ldr	r0, [pc, #332]	@ (8005ff4 <_printf_i+0x238>)
 8005ea8:	6033      	str	r3, [r6, #0]
 8005eaa:	bf14      	ite	ne
 8005eac:	230a      	movne	r3, #10
 8005eae:	2308      	moveq	r3, #8
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eb6:	6866      	ldr	r6, [r4, #4]
 8005eb8:	60a6      	str	r6, [r4, #8]
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	bfa2      	ittt	ge
 8005ebe:	6821      	ldrge	r1, [r4, #0]
 8005ec0:	f021 0104 	bicge.w	r1, r1, #4
 8005ec4:	6021      	strge	r1, [r4, #0]
 8005ec6:	b90d      	cbnz	r5, 8005ecc <_printf_i+0x110>
 8005ec8:	2e00      	cmp	r6, #0
 8005eca:	d04b      	beq.n	8005f64 <_printf_i+0x1a8>
 8005ecc:	4616      	mov	r6, r2
 8005ece:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ed2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ed6:	5dc7      	ldrb	r7, [r0, r7]
 8005ed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005edc:	462f      	mov	r7, r5
 8005ede:	42bb      	cmp	r3, r7
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	d9f4      	bls.n	8005ece <_printf_i+0x112>
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d10b      	bne.n	8005f00 <_printf_i+0x144>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	07df      	lsls	r7, r3, #31
 8005eec:	d508      	bpl.n	8005f00 <_printf_i+0x144>
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	6861      	ldr	r1, [r4, #4]
 8005ef2:	4299      	cmp	r1, r3
 8005ef4:	bfde      	ittt	le
 8005ef6:	2330      	movle	r3, #48	@ 0x30
 8005ef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005efc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f00:	1b92      	subs	r2, r2, r6
 8005f02:	6122      	str	r2, [r4, #16]
 8005f04:	f8cd a000 	str.w	sl, [sp]
 8005f08:	464b      	mov	r3, r9
 8005f0a:	aa03      	add	r2, sp, #12
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4640      	mov	r0, r8
 8005f10:	f7ff fee6 	bl	8005ce0 <_printf_common>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d14a      	bne.n	8005fae <_printf_i+0x1f2>
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	b004      	add	sp, #16
 8005f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	f043 0320 	orr.w	r3, r3, #32
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	4833      	ldr	r0, [pc, #204]	@ (8005ff8 <_printf_i+0x23c>)
 8005f2c:	2778      	movs	r7, #120	@ 0x78
 8005f2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	6831      	ldr	r1, [r6, #0]
 8005f36:	061f      	lsls	r7, r3, #24
 8005f38:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f3c:	d402      	bmi.n	8005f44 <_printf_i+0x188>
 8005f3e:	065f      	lsls	r7, r3, #25
 8005f40:	bf48      	it	mi
 8005f42:	b2ad      	uxthmi	r5, r5
 8005f44:	6031      	str	r1, [r6, #0]
 8005f46:	07d9      	lsls	r1, r3, #31
 8005f48:	bf44      	itt	mi
 8005f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f4e:	6023      	strmi	r3, [r4, #0]
 8005f50:	b11d      	cbz	r5, 8005f5a <_printf_i+0x19e>
 8005f52:	2310      	movs	r3, #16
 8005f54:	e7ac      	b.n	8005eb0 <_printf_i+0xf4>
 8005f56:	4827      	ldr	r0, [pc, #156]	@ (8005ff4 <_printf_i+0x238>)
 8005f58:	e7e9      	b.n	8005f2e <_printf_i+0x172>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	f023 0320 	bic.w	r3, r3, #32
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	e7f6      	b.n	8005f52 <_printf_i+0x196>
 8005f64:	4616      	mov	r6, r2
 8005f66:	e7bd      	b.n	8005ee4 <_printf_i+0x128>
 8005f68:	6833      	ldr	r3, [r6, #0]
 8005f6a:	6825      	ldr	r5, [r4, #0]
 8005f6c:	6961      	ldr	r1, [r4, #20]
 8005f6e:	1d18      	adds	r0, r3, #4
 8005f70:	6030      	str	r0, [r6, #0]
 8005f72:	062e      	lsls	r6, r5, #24
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	d501      	bpl.n	8005f7c <_printf_i+0x1c0>
 8005f78:	6019      	str	r1, [r3, #0]
 8005f7a:	e002      	b.n	8005f82 <_printf_i+0x1c6>
 8005f7c:	0668      	lsls	r0, r5, #25
 8005f7e:	d5fb      	bpl.n	8005f78 <_printf_i+0x1bc>
 8005f80:	8019      	strh	r1, [r3, #0]
 8005f82:	2300      	movs	r3, #0
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	4616      	mov	r6, r2
 8005f88:	e7bc      	b.n	8005f04 <_printf_i+0x148>
 8005f8a:	6833      	ldr	r3, [r6, #0]
 8005f8c:	1d1a      	adds	r2, r3, #4
 8005f8e:	6032      	str	r2, [r6, #0]
 8005f90:	681e      	ldr	r6, [r3, #0]
 8005f92:	6862      	ldr	r2, [r4, #4]
 8005f94:	2100      	movs	r1, #0
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7fa f93a 	bl	8000210 <memchr>
 8005f9c:	b108      	cbz	r0, 8005fa2 <_printf_i+0x1e6>
 8005f9e:	1b80      	subs	r0, r0, r6
 8005fa0:	6060      	str	r0, [r4, #4]
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fac:	e7aa      	b.n	8005f04 <_printf_i+0x148>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	47d0      	blx	sl
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d0ad      	beq.n	8005f18 <_printf_i+0x15c>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	079b      	lsls	r3, r3, #30
 8005fc0:	d413      	bmi.n	8005fea <_printf_i+0x22e>
 8005fc2:	68e0      	ldr	r0, [r4, #12]
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	4298      	cmp	r0, r3
 8005fc8:	bfb8      	it	lt
 8005fca:	4618      	movlt	r0, r3
 8005fcc:	e7a6      	b.n	8005f1c <_printf_i+0x160>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4632      	mov	r2, r6
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	47d0      	blx	sl
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d09d      	beq.n	8005f18 <_printf_i+0x15c>
 8005fdc:	3501      	adds	r5, #1
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	9903      	ldr	r1, [sp, #12]
 8005fe2:	1a5b      	subs	r3, r3, r1
 8005fe4:	42ab      	cmp	r3, r5
 8005fe6:	dcf2      	bgt.n	8005fce <_printf_i+0x212>
 8005fe8:	e7eb      	b.n	8005fc2 <_printf_i+0x206>
 8005fea:	2500      	movs	r5, #0
 8005fec:	f104 0619 	add.w	r6, r4, #25
 8005ff0:	e7f5      	b.n	8005fde <_printf_i+0x222>
 8005ff2:	bf00      	nop
 8005ff4:	08006451 	.word	0x08006451
 8005ff8:	08006462 	.word	0x08006462

08005ffc <__sflush_r>:
 8005ffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006004:	0716      	lsls	r6, r2, #28
 8006006:	4605      	mov	r5, r0
 8006008:	460c      	mov	r4, r1
 800600a:	d454      	bmi.n	80060b6 <__sflush_r+0xba>
 800600c:	684b      	ldr	r3, [r1, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	dc02      	bgt.n	8006018 <__sflush_r+0x1c>
 8006012:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	dd48      	ble.n	80060aa <__sflush_r+0xae>
 8006018:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800601a:	2e00      	cmp	r6, #0
 800601c:	d045      	beq.n	80060aa <__sflush_r+0xae>
 800601e:	2300      	movs	r3, #0
 8006020:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006024:	682f      	ldr	r7, [r5, #0]
 8006026:	6a21      	ldr	r1, [r4, #32]
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	d030      	beq.n	800608e <__sflush_r+0x92>
 800602c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	0759      	lsls	r1, r3, #29
 8006032:	d505      	bpl.n	8006040 <__sflush_r+0x44>
 8006034:	6863      	ldr	r3, [r4, #4]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800603a:	b10b      	cbz	r3, 8006040 <__sflush_r+0x44>
 800603c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	2300      	movs	r3, #0
 8006042:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006044:	6a21      	ldr	r1, [r4, #32]
 8006046:	4628      	mov	r0, r5
 8006048:	47b0      	blx	r6
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	d106      	bne.n	800605e <__sflush_r+0x62>
 8006050:	6829      	ldr	r1, [r5, #0]
 8006052:	291d      	cmp	r1, #29
 8006054:	d82b      	bhi.n	80060ae <__sflush_r+0xb2>
 8006056:	4a2a      	ldr	r2, [pc, #168]	@ (8006100 <__sflush_r+0x104>)
 8006058:	410a      	asrs	r2, r1
 800605a:	07d6      	lsls	r6, r2, #31
 800605c:	d427      	bmi.n	80060ae <__sflush_r+0xb2>
 800605e:	2200      	movs	r2, #0
 8006060:	6062      	str	r2, [r4, #4]
 8006062:	04d9      	lsls	r1, r3, #19
 8006064:	6922      	ldr	r2, [r4, #16]
 8006066:	6022      	str	r2, [r4, #0]
 8006068:	d504      	bpl.n	8006074 <__sflush_r+0x78>
 800606a:	1c42      	adds	r2, r0, #1
 800606c:	d101      	bne.n	8006072 <__sflush_r+0x76>
 800606e:	682b      	ldr	r3, [r5, #0]
 8006070:	b903      	cbnz	r3, 8006074 <__sflush_r+0x78>
 8006072:	6560      	str	r0, [r4, #84]	@ 0x54
 8006074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006076:	602f      	str	r7, [r5, #0]
 8006078:	b1b9      	cbz	r1, 80060aa <__sflush_r+0xae>
 800607a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800607e:	4299      	cmp	r1, r3
 8006080:	d002      	beq.n	8006088 <__sflush_r+0x8c>
 8006082:	4628      	mov	r0, r5
 8006084:	f7ff fbf2 	bl	800586c <_free_r>
 8006088:	2300      	movs	r3, #0
 800608a:	6363      	str	r3, [r4, #52]	@ 0x34
 800608c:	e00d      	b.n	80060aa <__sflush_r+0xae>
 800608e:	2301      	movs	r3, #1
 8006090:	4628      	mov	r0, r5
 8006092:	47b0      	blx	r6
 8006094:	4602      	mov	r2, r0
 8006096:	1c50      	adds	r0, r2, #1
 8006098:	d1c9      	bne.n	800602e <__sflush_r+0x32>
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0c6      	beq.n	800602e <__sflush_r+0x32>
 80060a0:	2b1d      	cmp	r3, #29
 80060a2:	d001      	beq.n	80060a8 <__sflush_r+0xac>
 80060a4:	2b16      	cmp	r3, #22
 80060a6:	d11e      	bne.n	80060e6 <__sflush_r+0xea>
 80060a8:	602f      	str	r7, [r5, #0]
 80060aa:	2000      	movs	r0, #0
 80060ac:	e022      	b.n	80060f4 <__sflush_r+0xf8>
 80060ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060b2:	b21b      	sxth	r3, r3
 80060b4:	e01b      	b.n	80060ee <__sflush_r+0xf2>
 80060b6:	690f      	ldr	r7, [r1, #16]
 80060b8:	2f00      	cmp	r7, #0
 80060ba:	d0f6      	beq.n	80060aa <__sflush_r+0xae>
 80060bc:	0793      	lsls	r3, r2, #30
 80060be:	680e      	ldr	r6, [r1, #0]
 80060c0:	bf08      	it	eq
 80060c2:	694b      	ldreq	r3, [r1, #20]
 80060c4:	600f      	str	r7, [r1, #0]
 80060c6:	bf18      	it	ne
 80060c8:	2300      	movne	r3, #0
 80060ca:	eba6 0807 	sub.w	r8, r6, r7
 80060ce:	608b      	str	r3, [r1, #8]
 80060d0:	f1b8 0f00 	cmp.w	r8, #0
 80060d4:	dde9      	ble.n	80060aa <__sflush_r+0xae>
 80060d6:	6a21      	ldr	r1, [r4, #32]
 80060d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80060da:	4643      	mov	r3, r8
 80060dc:	463a      	mov	r2, r7
 80060de:	4628      	mov	r0, r5
 80060e0:	47b0      	blx	r6
 80060e2:	2800      	cmp	r0, #0
 80060e4:	dc08      	bgt.n	80060f8 <__sflush_r+0xfc>
 80060e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295
 80060f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f8:	4407      	add	r7, r0
 80060fa:	eba8 0800 	sub.w	r8, r8, r0
 80060fe:	e7e7      	b.n	80060d0 <__sflush_r+0xd4>
 8006100:	dfbffffe 	.word	0xdfbffffe

08006104 <_fflush_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	690b      	ldr	r3, [r1, #16]
 8006108:	4605      	mov	r5, r0
 800610a:	460c      	mov	r4, r1
 800610c:	b913      	cbnz	r3, 8006114 <_fflush_r+0x10>
 800610e:	2500      	movs	r5, #0
 8006110:	4628      	mov	r0, r5
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	b118      	cbz	r0, 800611e <_fflush_r+0x1a>
 8006116:	6a03      	ldr	r3, [r0, #32]
 8006118:	b90b      	cbnz	r3, 800611e <_fflush_r+0x1a>
 800611a:	f7ff fa91 	bl	8005640 <__sinit>
 800611e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f3      	beq.n	800610e <_fflush_r+0xa>
 8006126:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006128:	07d0      	lsls	r0, r2, #31
 800612a:	d404      	bmi.n	8006136 <_fflush_r+0x32>
 800612c:	0599      	lsls	r1, r3, #22
 800612e:	d402      	bmi.n	8006136 <_fflush_r+0x32>
 8006130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006132:	f7ff fb8a 	bl	800584a <__retarget_lock_acquire_recursive>
 8006136:	4628      	mov	r0, r5
 8006138:	4621      	mov	r1, r4
 800613a:	f7ff ff5f 	bl	8005ffc <__sflush_r>
 800613e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006140:	07da      	lsls	r2, r3, #31
 8006142:	4605      	mov	r5, r0
 8006144:	d4e4      	bmi.n	8006110 <_fflush_r+0xc>
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	059b      	lsls	r3, r3, #22
 800614a:	d4e1      	bmi.n	8006110 <_fflush_r+0xc>
 800614c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800614e:	f7ff fb7d 	bl	800584c <__retarget_lock_release_recursive>
 8006152:	e7dd      	b.n	8006110 <_fflush_r+0xc>

08006154 <__swbuf_r>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	460e      	mov	r6, r1
 8006158:	4614      	mov	r4, r2
 800615a:	4605      	mov	r5, r0
 800615c:	b118      	cbz	r0, 8006166 <__swbuf_r+0x12>
 800615e:	6a03      	ldr	r3, [r0, #32]
 8006160:	b90b      	cbnz	r3, 8006166 <__swbuf_r+0x12>
 8006162:	f7ff fa6d 	bl	8005640 <__sinit>
 8006166:	69a3      	ldr	r3, [r4, #24]
 8006168:	60a3      	str	r3, [r4, #8]
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	071a      	lsls	r2, r3, #28
 800616e:	d501      	bpl.n	8006174 <__swbuf_r+0x20>
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	b943      	cbnz	r3, 8006186 <__swbuf_r+0x32>
 8006174:	4621      	mov	r1, r4
 8006176:	4628      	mov	r0, r5
 8006178:	f000 f82a 	bl	80061d0 <__swsetup_r>
 800617c:	b118      	cbz	r0, 8006186 <__swbuf_r+0x32>
 800617e:	f04f 37ff 	mov.w	r7, #4294967295
 8006182:	4638      	mov	r0, r7
 8006184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	6922      	ldr	r2, [r4, #16]
 800618a:	1a98      	subs	r0, r3, r2
 800618c:	6963      	ldr	r3, [r4, #20]
 800618e:	b2f6      	uxtb	r6, r6
 8006190:	4283      	cmp	r3, r0
 8006192:	4637      	mov	r7, r6
 8006194:	dc05      	bgt.n	80061a2 <__swbuf_r+0x4e>
 8006196:	4621      	mov	r1, r4
 8006198:	4628      	mov	r0, r5
 800619a:	f7ff ffb3 	bl	8006104 <_fflush_r>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d1ed      	bne.n	800617e <__swbuf_r+0x2a>
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	60a3      	str	r3, [r4, #8]
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	6022      	str	r2, [r4, #0]
 80061ae:	701e      	strb	r6, [r3, #0]
 80061b0:	6962      	ldr	r2, [r4, #20]
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d004      	beq.n	80061c2 <__swbuf_r+0x6e>
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	07db      	lsls	r3, r3, #31
 80061bc:	d5e1      	bpl.n	8006182 <__swbuf_r+0x2e>
 80061be:	2e0a      	cmp	r6, #10
 80061c0:	d1df      	bne.n	8006182 <__swbuf_r+0x2e>
 80061c2:	4621      	mov	r1, r4
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7ff ff9d 	bl	8006104 <_fflush_r>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d0d9      	beq.n	8006182 <__swbuf_r+0x2e>
 80061ce:	e7d6      	b.n	800617e <__swbuf_r+0x2a>

080061d0 <__swsetup_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4b29      	ldr	r3, [pc, #164]	@ (8006278 <__swsetup_r+0xa8>)
 80061d4:	4605      	mov	r5, r0
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	460c      	mov	r4, r1
 80061da:	b118      	cbz	r0, 80061e4 <__swsetup_r+0x14>
 80061dc:	6a03      	ldr	r3, [r0, #32]
 80061de:	b90b      	cbnz	r3, 80061e4 <__swsetup_r+0x14>
 80061e0:	f7ff fa2e 	bl	8005640 <__sinit>
 80061e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e8:	0719      	lsls	r1, r3, #28
 80061ea:	d422      	bmi.n	8006232 <__swsetup_r+0x62>
 80061ec:	06da      	lsls	r2, r3, #27
 80061ee:	d407      	bmi.n	8006200 <__swsetup_r+0x30>
 80061f0:	2209      	movs	r2, #9
 80061f2:	602a      	str	r2, [r5, #0]
 80061f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295
 80061fe:	e033      	b.n	8006268 <__swsetup_r+0x98>
 8006200:	0758      	lsls	r0, r3, #29
 8006202:	d512      	bpl.n	800622a <__swsetup_r+0x5a>
 8006204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006206:	b141      	cbz	r1, 800621a <__swsetup_r+0x4a>
 8006208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800620c:	4299      	cmp	r1, r3
 800620e:	d002      	beq.n	8006216 <__swsetup_r+0x46>
 8006210:	4628      	mov	r0, r5
 8006212:	f7ff fb2b 	bl	800586c <_free_r>
 8006216:	2300      	movs	r3, #0
 8006218:	6363      	str	r3, [r4, #52]	@ 0x34
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006220:	81a3      	strh	r3, [r4, #12]
 8006222:	2300      	movs	r3, #0
 8006224:	6063      	str	r3, [r4, #4]
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	f043 0308 	orr.w	r3, r3, #8
 8006230:	81a3      	strh	r3, [r4, #12]
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	b94b      	cbnz	r3, 800624a <__swsetup_r+0x7a>
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800623c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006240:	d003      	beq.n	800624a <__swsetup_r+0x7a>
 8006242:	4621      	mov	r1, r4
 8006244:	4628      	mov	r0, r5
 8006246:	f000 f84f 	bl	80062e8 <__smakebuf_r>
 800624a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624e:	f013 0201 	ands.w	r2, r3, #1
 8006252:	d00a      	beq.n	800626a <__swsetup_r+0x9a>
 8006254:	2200      	movs	r2, #0
 8006256:	60a2      	str	r2, [r4, #8]
 8006258:	6962      	ldr	r2, [r4, #20]
 800625a:	4252      	negs	r2, r2
 800625c:	61a2      	str	r2, [r4, #24]
 800625e:	6922      	ldr	r2, [r4, #16]
 8006260:	b942      	cbnz	r2, 8006274 <__swsetup_r+0xa4>
 8006262:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006266:	d1c5      	bne.n	80061f4 <__swsetup_r+0x24>
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	0799      	lsls	r1, r3, #30
 800626c:	bf58      	it	pl
 800626e:	6962      	ldrpl	r2, [r4, #20]
 8006270:	60a2      	str	r2, [r4, #8]
 8006272:	e7f4      	b.n	800625e <__swsetup_r+0x8e>
 8006274:	2000      	movs	r0, #0
 8006276:	e7f7      	b.n	8006268 <__swsetup_r+0x98>
 8006278:	2000001c 	.word	0x2000001c

0800627c <_sbrk_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4d06      	ldr	r5, [pc, #24]	@ (8006298 <_sbrk_r+0x1c>)
 8006280:	2300      	movs	r3, #0
 8006282:	4604      	mov	r4, r0
 8006284:	4608      	mov	r0, r1
 8006286:	602b      	str	r3, [r5, #0]
 8006288:	f7fa fcac 	bl	8000be4 <_sbrk>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d102      	bne.n	8006296 <_sbrk_r+0x1a>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b103      	cbz	r3, 8006296 <_sbrk_r+0x1a>
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	20004bb8 	.word	0x20004bb8

0800629c <__swhatbuf_r>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	460c      	mov	r4, r1
 80062a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a4:	2900      	cmp	r1, #0
 80062a6:	b096      	sub	sp, #88	@ 0x58
 80062a8:	4615      	mov	r5, r2
 80062aa:	461e      	mov	r6, r3
 80062ac:	da0d      	bge.n	80062ca <__swhatbuf_r+0x2e>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062b4:	f04f 0100 	mov.w	r1, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2340      	movne	r3, #64	@ 0x40
 80062bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062c0:	2000      	movs	r0, #0
 80062c2:	6031      	str	r1, [r6, #0]
 80062c4:	602b      	str	r3, [r5, #0]
 80062c6:	b016      	add	sp, #88	@ 0x58
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	466a      	mov	r2, sp
 80062cc:	f000 f848 	bl	8006360 <_fstat_r>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	dbec      	blt.n	80062ae <__swhatbuf_r+0x12>
 80062d4:	9901      	ldr	r1, [sp, #4]
 80062d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062de:	4259      	negs	r1, r3
 80062e0:	4159      	adcs	r1, r3
 80062e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062e6:	e7eb      	b.n	80062c0 <__swhatbuf_r+0x24>

080062e8 <__smakebuf_r>:
 80062e8:	898b      	ldrh	r3, [r1, #12]
 80062ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ec:	079d      	lsls	r5, r3, #30
 80062ee:	4606      	mov	r6, r0
 80062f0:	460c      	mov	r4, r1
 80062f2:	d507      	bpl.n	8006304 <__smakebuf_r+0x1c>
 80062f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	2301      	movs	r3, #1
 80062fe:	6163      	str	r3, [r4, #20]
 8006300:	b003      	add	sp, #12
 8006302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006304:	ab01      	add	r3, sp, #4
 8006306:	466a      	mov	r2, sp
 8006308:	f7ff ffc8 	bl	800629c <__swhatbuf_r>
 800630c:	9f00      	ldr	r7, [sp, #0]
 800630e:	4605      	mov	r5, r0
 8006310:	4639      	mov	r1, r7
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff fb16 	bl	8005944 <_malloc_r>
 8006318:	b948      	cbnz	r0, 800632e <__smakebuf_r+0x46>
 800631a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800631e:	059a      	lsls	r2, r3, #22
 8006320:	d4ee      	bmi.n	8006300 <__smakebuf_r+0x18>
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	f043 0302 	orr.w	r3, r3, #2
 800632a:	81a3      	strh	r3, [r4, #12]
 800632c:	e7e2      	b.n	80062f4 <__smakebuf_r+0xc>
 800632e:	89a3      	ldrh	r3, [r4, #12]
 8006330:	6020      	str	r0, [r4, #0]
 8006332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	9b01      	ldr	r3, [sp, #4]
 800633a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800633e:	b15b      	cbz	r3, 8006358 <__smakebuf_r+0x70>
 8006340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006344:	4630      	mov	r0, r6
 8006346:	f000 f81d 	bl	8006384 <_isatty_r>
 800634a:	b128      	cbz	r0, 8006358 <__smakebuf_r+0x70>
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	431d      	orrs	r5, r3
 800635c:	81a5      	strh	r5, [r4, #12]
 800635e:	e7cf      	b.n	8006300 <__smakebuf_r+0x18>

08006360 <_fstat_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4d07      	ldr	r5, [pc, #28]	@ (8006380 <_fstat_r+0x20>)
 8006364:	2300      	movs	r3, #0
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	4611      	mov	r1, r2
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	f7fa fc10 	bl	8000b92 <_fstat>
 8006372:	1c43      	adds	r3, r0, #1
 8006374:	d102      	bne.n	800637c <_fstat_r+0x1c>
 8006376:	682b      	ldr	r3, [r5, #0]
 8006378:	b103      	cbz	r3, 800637c <_fstat_r+0x1c>
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	bd38      	pop	{r3, r4, r5, pc}
 800637e:	bf00      	nop
 8006380:	20004bb8 	.word	0x20004bb8

08006384 <_isatty_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4d06      	ldr	r5, [pc, #24]	@ (80063a0 <_isatty_r+0x1c>)
 8006388:	2300      	movs	r3, #0
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	f7fa fc0f 	bl	8000bb2 <_isatty>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_isatty_r+0x1a>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_isatty_r+0x1a>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20004bb8 	.word	0x20004bb8

080063a4 <_init>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr

080063b0 <_fini>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr
