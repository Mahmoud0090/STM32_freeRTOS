
12_Binary_Semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080060f4  080060f4  000070f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800619c  0800619c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  0800619c  0800619c  0000719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a4  080061a4  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a4  080061a4  000071a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061a8  080061a8  000071a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080061ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b5c  2000006c  08006218  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc8  08006218  00008bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017522  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034de  00000000  00000000  0001f5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  00022aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001052  00000000  00000000  00023fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049d2  00000000  00000000  00024ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a5d  00000000  00000000  000299cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd0ff  00000000  00000000  00041429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e528  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ee8  00000000  00000000  0011e56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00124454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060dc 	.word	0x080060dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080060dc 	.word	0x080060dc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
TaskProfiler BlueLedProfiler;
TaskProfiler YellowLedProfiler;


int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af02      	add	r7, sp, #8

  HAL_Init();
 8000506:	f000 fbe3 	bl	8000cd0 <HAL_Init>
  SystemClock_Config();
 800050a:	f000 f8d7 	bl	80006bc <SystemClock_Config>
  MX_GPIO_Init();
 800050e:	f000 f96d 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000512:	f000 f941 	bl	8000798 <MX_USART2_UART_Init>

  xBinarySemaphore = xSemaphoreCreateBinary();
 8000516:	2203      	movs	r2, #3
 8000518:	2100      	movs	r1, #0
 800051a:	2001      	movs	r0, #1
 800051c:	f002 fc03 	bl	8002d26 <xQueueGenericCreate>
 8000520:	4603      	mov	r3, r0
 8000522:	4a12      	ldr	r2, [pc, #72]	@ (800056c <main+0x6c>)
 8000524:	6013      	str	r3, [r2, #0]

  xTaskCreate(redLedControllerTask, "Red Led Task", 100, NULL, 1, NULL);
 8000526:	2300      	movs	r3, #0
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	2264      	movs	r2, #100	@ 0x64
 8000532:	490f      	ldr	r1, [pc, #60]	@ (8000570 <main+0x70>)
 8000534:	480f      	ldr	r0, [pc, #60]	@ (8000574 <main+0x74>)
 8000536:	f003 f9cd 	bl	80038d4 <xTaskCreate>
  xTaskCreate(blueLedControllerTask, "Blue Led Task", 100, NULL, 1, NULL);
 800053a:	2300      	movs	r3, #0
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	2264      	movs	r2, #100	@ 0x64
 8000546:	490c      	ldr	r1, [pc, #48]	@ (8000578 <main+0x78>)
 8000548:	480c      	ldr	r0, [pc, #48]	@ (800057c <main+0x7c>)
 800054a:	f003 f9c3 	bl	80038d4 <xTaskCreate>
  xTaskCreate(yellowLedControllerTask, "Yellow Led Task", 100, NULL, 1, NULL);
 800054e:	2300      	movs	r3, #0
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	2264      	movs	r2, #100	@ 0x64
 800055a:	4909      	ldr	r1, [pc, #36]	@ (8000580 <main+0x80>)
 800055c:	4809      	ldr	r0, [pc, #36]	@ (8000584 <main+0x84>)
 800055e:	f003 f9b9 	bl	80038d4 <xTaskCreate>

  vTaskStartScheduler();
 8000562:	f003 fb33 	bl	8003bcc <vTaskStartScheduler>

  while (1)
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <main+0x66>
 800056a:	bf00      	nop
 800056c:	200000d0 	.word	0x200000d0
 8000570:	080060f4 	.word	0x080060f4
 8000574:	08000589 	.word	0x08000589
 8000578:	08006104 	.word	0x08006104
 800057c:	080005e1 	.word	0x080005e1
 8000580:	08006114 	.word	0x08006114
 8000584:	0800062d 	.word	0x0800062d

08000588 <redLedControllerTask>:

  }
}

void redLedControllerTask(void* pvParameters)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(xBinarySemaphore);
 8000590:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <redLedControllerTask+0x4c>)
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	f002 fc23 	bl	8002de4 <xQueueGenericSend>
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <redLedControllerTask+0x4c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f04f 31ff 	mov.w	r1, #4294967295
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fe9e 	bl	80032e8 <xQueueSemaphoreTake>

		RedLedProfiler++;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <redLedControllerTask+0x50>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	4a09      	ldr	r2, [pc, #36]	@ (80005d8 <redLedControllerTask+0x50>)
 80005b4:	6013      	str	r3, [r2, #0]

		printf("this is Red Task .. \r\n");
 80005b6:	4809      	ldr	r0, [pc, #36]	@ (80005dc <redLedControllerTask+0x54>)
 80005b8:	f005 f9ee 	bl	8005998 <puts>

		xSemaphoreGive(xBinarySemaphore);
 80005bc:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <redLedControllerTask+0x4c>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	f002 fc0d 	bl	8002de4 <xQueueGenericSend>

		vTaskDelay(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f003 fac8 	bl	8003b60 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80005d0:	bf00      	nop
 80005d2:	e7e4      	b.n	800059e <redLedControllerTask+0x16>
 80005d4:	200000d0 	.word	0x200000d0
 80005d8:	200000d4 	.word	0x200000d4
 80005dc:	08006124 	.word	0x08006124

080005e0 <blueLedControllerTask>:
	}
}

void blueLedControllerTask(void* pvParameters)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <blueLedControllerTask+0x40>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f04f 31ff 	mov.w	r1, #4294967295
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fe79 	bl	80032e8 <xQueueSemaphoreTake>

		BlueLedProfiler++;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <blueLedControllerTask+0x44>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <blueLedControllerTask+0x44>)
 80005fe:	6013      	str	r3, [r2, #0]

		printf("this is blue Task \r\n");
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <blueLedControllerTask+0x48>)
 8000602:	f005 f9c9 	bl	8005998 <puts>

		xSemaphoreGive(xBinarySemaphore);
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <blueLedControllerTask+0x40>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	f002 fbe8 	bl	8002de4 <xQueueGenericSend>

		vTaskDelay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f003 faa3 	bl	8003b60 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 800061a:	bf00      	nop
 800061c:	e7e4      	b.n	80005e8 <blueLedControllerTask+0x8>
 800061e:	bf00      	nop
 8000620:	200000d0 	.word	0x200000d0
 8000624:	200000d8 	.word	0x200000d8
 8000628:	0800613c 	.word	0x0800613c

0800062c <yellowLedControllerTask>:
	}
}

void yellowLedControllerTask(void* pvParameters)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <yellowLedControllerTask+0x40>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f04f 31ff 	mov.w	r1, #4294967295
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fe53 	bl	80032e8 <xQueueSemaphoreTake>

		YellowLedProfiler++;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <yellowLedControllerTask+0x44>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a09      	ldr	r2, [pc, #36]	@ (8000670 <yellowLedControllerTask+0x44>)
 800064a:	6013      	str	r3, [r2, #0]

		printf("this is yellow Task .. \r\n");
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <yellowLedControllerTask+0x48>)
 800064e:	f005 f9a3 	bl	8005998 <puts>

		xSemaphoreGive(xBinarySemaphore);
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <yellowLedControllerTask+0x40>)
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	f002 fbc2 	bl	8002de4 <xQueueGenericSend>

		vTaskDelay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f003 fa7d 	bl	8003b60 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000666:	bf00      	nop
 8000668:	e7e4      	b.n	8000634 <yellowLedControllerTask+0x8>
 800066a:	bf00      	nop
 800066c:	200000d0 	.word	0x200000d0
 8000670:	200000dc 	.word	0x200000dc
 8000674:	08006150 	.word	0x08006150

08000678 <uart2_write>:
	}
}


void uart2_write(int ch)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & (1U<<7))); //wait for TXE
 8000680:	bf00      	nop
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <uart2_write+0x28>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f9      	beq.n	8000682 <uart2_write+0xa>
	USART2->DR = ch;
 800068e:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <uart2_write+0x28>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6053      	str	r3, [r2, #4]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40004400 	.word	0x40004400

080006a4 <__io_putchar>:


//this function for printf to be used in printing sentences
int __io_putchar(int ch)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
	uart2_write(ch);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffe3 	bl	8000678 <uart2_write>
	return ch;
 80006b2:	687b      	ldr	r3, [r7, #4]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SystemClock_Config>:



void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	@ 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 fa44 	bl	8005b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a29      	ldr	r2, [pc, #164]	@ (8000790 <SystemClock_Config+0xd4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <SystemClock_Config+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000708:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <SystemClock_Config+0xd8>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <SystemClock_Config+0xd8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000730:	2310      	movs	r3, #16
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000734:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000738:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073a:	2304      	movs	r3, #4
 800073c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f90e 	bl	800196c <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000756:	f000 f8c9 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fd7c 	bl	8001274 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000782:	f000 f8b3 	bl	80008ec <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 fe06 	bl	80023e0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f887 	bl	80008ec <Error_Handler>
  }

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000088 	.word	0x20000088
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a2c      	ldr	r2, [pc, #176]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a25      	ldr	r2, [pc, #148]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <MX_GPIO_Init+0xd4>)
 8000878:	f000 fce2 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000882:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_GPIO_Init+0xd8>)
 8000894:	f000 fb40 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000898:	2320      	movs	r3, #32
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_GPIO_Init+0xd4>)
 80008b0:	f000 fb32 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	@ 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40020800 	.word	0x40020800

080008c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d101      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008da:	f000 fa1b 	bl	8000d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40010000 	.word	0x40010000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a11      	ldr	r2, [pc, #68]	@ (800094c <HAL_MspInit+0x54>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_MspInit+0x54>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fac1 	bl	8000ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	@ (80009d4 <HAL_UART_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12b      	bne.n	80009ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009aa:	230c      	movs	r3, #12
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <HAL_UART_MspInit+0x8c>)
 80009c6:	f000 faa7 	bl	8000f18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab0 <HAL_InitTick+0xd0>)
 80009f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f8:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab0 <HAL_InitTick+0xd0>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a00:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <HAL_InitTick+0xd0>)
 8000a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	f107 020c 	add.w	r2, r7, #12
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fd46 	bl	80014a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a1c:	f000 fd30 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8000a20:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a24:	4a23      	ldr	r2, [pc, #140]	@ (8000ab4 <HAL_InitTick+0xd4>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	0c9b      	lsrs	r3, r3, #18
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a30:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a32:	4a22      	ldr	r2, [pc, #136]	@ (8000abc <HAL_InitTick+0xdc>)
 8000a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a36:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a56:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a58:	f001 fa26 	bl	8001ea8 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d11b      	bne.n	8000aa2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a6a:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a6c:	f001 fa76 	bl	8001f5c <HAL_TIM_Base_Start_IT>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d111      	bne.n	8000aa2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a7e:	2019      	movs	r0, #25
 8000a80:	f000 fa3c 	bl	8000efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	d808      	bhi.n	8000a9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 fa18 	bl	8000ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <HAL_InitTick+0xe0>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e002      	b.n	8000aa2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3730      	adds	r7, #48	@ 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	200000e0 	.word	0x200000e0
 8000abc:	40010000 	.word	0x40010000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b02:	f001 fa9b 	bl	800203c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000e0 	.word	0x200000e0

08000b10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e00a      	b.n	8000b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b22:	f3af 8000 	nop.w
 8000b26:	4601      	mov	r1, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf0      	blt.n	8000b22 <_read+0x12>
  }

  return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e009      	b.n	8000b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fd9d 	bl	80006a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf1      	blt.n	8000b5c <_write+0x12>
  }
  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_close>:

int _close(int file)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000baa:	605a      	str	r2, [r3, #4]
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_isatty>:

int _isatty(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f004 ffea 	bl	8005bf4 <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20020000 	.word	0x20020000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	20000128 	.word	0x20000128
 8000c54:	20004bc8 	.word	0x20004bc8

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f004 ffa9 	bl	8005c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc27 	bl	8000500 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cc0:	080061ac 	.word	0x080061ac
  ldr r2, =_sbss
 8000cc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cc8:	20004bc8 	.word	0x20004bc8

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f8d8 	bl	8000eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f7ff fe6e 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fdf8 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	2000012c 	.word	0x2000012c

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000012c 	.word	0x2000012c

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	@ 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4c 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed6:	f7ff ff61 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	f7ff ffb1 	bl	8000e48 <NVIC_EncodePriority>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff80 	bl	8000df4 <__NVIC_SetPriority>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff54 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e165      	b.n	8001200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8154 	bne.w	80011fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80ae 	beq.w	80011fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <HAL_GPIO_Init+0x300>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001218 <HAL_GPIO_Init+0x300>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001218 <HAL_GPIO_Init+0x300>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a58      	ldr	r2, [pc, #352]	@ (800121c <HAL_GPIO_Init+0x304>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001220 <HAL_GPIO_Init+0x308>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001224 <HAL_GPIO_Init+0x30c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001228 <HAL_GPIO_Init+0x310>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	@ (800122c <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	@ (8001230 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x20a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4a      	ldr	r2, [pc, #296]	@ (8001234 <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x206>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a49      	ldr	r2, [pc, #292]	@ (8001238 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x202>
 8001116:	2306      	movs	r3, #6
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800111a:	2307      	movs	r3, #7
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b3a      	ldr	r3, [pc, #232]	@ (800123c <HAL_GPIO_Init+0x324>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a31      	ldr	r2, [pc, #196]	@ (800123c <HAL_GPIO_Init+0x324>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <HAL_GPIO_Init+0x324>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a26      	ldr	r2, [pc, #152]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a11      	ldr	r2, [pc, #68]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f ae96 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40013c00 	.word	0x40013c00

08001240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0cc      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001288:	4b68      	ldr	r3, [pc, #416]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d90c      	bls.n	80012b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b65      	ldr	r3, [pc, #404]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b63      	ldr	r3, [pc, #396]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0b8      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c8:	4b59      	ldr	r3, [pc, #356]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a58      	ldr	r2, [pc, #352]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e0:	4b53      	ldr	r3, [pc, #332]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ec:	4b50      	ldr	r3, [pc, #320]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	494d      	ldr	r1, [pc, #308]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d044      	beq.n	8001394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d119      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e07f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d003      	beq.n	8001332 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132e:	2b03      	cmp	r3, #3
 8001330:	d107      	bne.n	8001342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001332:	4b3f      	ldr	r3, [pc, #252]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e06f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001342:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e067      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001352:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 0203 	bic.w	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4934      	ldr	r1, [pc, #208]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001364:	f7ff fcea 	bl	8000d3c <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	e00a      	b.n	8001382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136c:	f7ff fce6 	bl	8000d3c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e04f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001382:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 020c 	and.w	r2, r3, #12
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	429a      	cmp	r2, r3
 8001392:	d1eb      	bne.n	800136c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001394:	4b25      	ldr	r3, [pc, #148]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d20c      	bcs.n	80013bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e032      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4916      	ldr	r1, [pc, #88]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	490e      	ldr	r1, [pc, #56]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fa:	f000 f887 	bl	800150c <HAL_RCC_GetSysClockFreq>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	490a      	ldr	r1, [pc, #40]	@ (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	5ccb      	ldrb	r3, [r1, r3]
 800140e:	fa22 f303 	lsr.w	r3, r2, r3
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_RCC_ClockConfig+0x1c8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fae0 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023c00 	.word	0x40023c00
 8001430:	40023800 	.word	0x40023800
 8001434:	08006184 	.word	0x08006184
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_RCC_GetHCLKFreq+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000000 	.word	0x20000000

08001458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800145c:	f7ff fff0 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	0a9b      	lsrs	r3, r3, #10
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4903      	ldr	r1, [pc, #12]	@ (800147c <HAL_RCC_GetPCLK1Freq+0x24>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	08006194 	.word	0x08006194

08001480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001484:	f7ff ffdc 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	0b5b      	lsrs	r3, r3, #13
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	@ (80014a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	08006194 	.word	0x08006194

080014a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	220f      	movs	r2, #15
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <HAL_RCC_GetClockConfig+0x60>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 020f 	and.w	r2, r3, #15
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800150c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001510:	b0ae      	sub	sp, #184	@ 0xb8
 8001512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001532:	4bcb      	ldr	r3, [pc, #812]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b0c      	cmp	r3, #12
 800153c:	f200 8206 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x440>
 8001540:	a201      	add	r2, pc, #4	@ (adr r2, 8001548 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	0800157d 	.word	0x0800157d
 800154c:	0800194d 	.word	0x0800194d
 8001550:	0800194d 	.word	0x0800194d
 8001554:	0800194d 	.word	0x0800194d
 8001558:	08001585 	.word	0x08001585
 800155c:	0800194d 	.word	0x0800194d
 8001560:	0800194d 	.word	0x0800194d
 8001564:	0800194d 	.word	0x0800194d
 8001568:	0800158d 	.word	0x0800158d
 800156c:	0800194d 	.word	0x0800194d
 8001570:	0800194d 	.word	0x0800194d
 8001574:	0800194d 	.word	0x0800194d
 8001578:	0800177d 	.word	0x0800177d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800157c:	4bb9      	ldr	r3, [pc, #740]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x358>)
 800157e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001582:	e1e7      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001584:	4bb8      	ldr	r3, [pc, #736]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800158a:	e1e3      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158c:	4bb4      	ldr	r3, [pc, #720]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001598:	4bb1      	ldr	r3, [pc, #708]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d071      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a4:	4bae      	ldr	r3, [pc, #696]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	2200      	movs	r2, #0
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015ca:	4622      	mov	r2, r4
 80015cc:	462b      	mov	r3, r5
 80015ce:	f04f 0000 	mov.w	r0, #0
 80015d2:	f04f 0100 	mov.w	r1, #0
 80015d6:	0159      	lsls	r1, r3, #5
 80015d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015dc:	0150      	lsls	r0, r2, #5
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4621      	mov	r1, r4
 80015e4:	1a51      	subs	r1, r2, r1
 80015e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80015e8:	4629      	mov	r1, r5
 80015ea:	eb63 0301 	sbc.w	r3, r3, r1
 80015ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015fc:	4649      	mov	r1, r9
 80015fe:	018b      	lsls	r3, r1, #6
 8001600:	4641      	mov	r1, r8
 8001602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001606:	4641      	mov	r1, r8
 8001608:	018a      	lsls	r2, r1, #6
 800160a:	4641      	mov	r1, r8
 800160c:	1a51      	subs	r1, r2, r1
 800160e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001610:	4649      	mov	r1, r9
 8001612:	eb63 0301 	sbc.w	r3, r3, r1
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001624:	4649      	mov	r1, r9
 8001626:	00cb      	lsls	r3, r1, #3
 8001628:	4641      	mov	r1, r8
 800162a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800162e:	4641      	mov	r1, r8
 8001630:	00ca      	lsls	r2, r1, #3
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	4603      	mov	r3, r0
 8001638:	4622      	mov	r2, r4
 800163a:	189b      	adds	r3, r3, r2
 800163c:	633b      	str	r3, [r7, #48]	@ 0x30
 800163e:	462b      	mov	r3, r5
 8001640:	460a      	mov	r2, r1
 8001642:	eb42 0303 	adc.w	r3, r2, r3
 8001646:	637b      	str	r3, [r7, #52]	@ 0x34
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001654:	4629      	mov	r1, r5
 8001656:	024b      	lsls	r3, r1, #9
 8001658:	4621      	mov	r1, r4
 800165a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800165e:	4621      	mov	r1, r4
 8001660:	024a      	lsls	r2, r1, #9
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800166a:	2200      	movs	r2, #0
 800166c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001674:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001678:	f7fe fdca 	bl	8000210 <__aeabi_uldivmod>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4613      	mov	r3, r2
 8001682:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001686:	e067      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001688:	4b75      	ldr	r3, [pc, #468]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	099b      	lsrs	r3, r3, #6
 800168e:	2200      	movs	r2, #0
 8001690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001694:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001698:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800169c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016a2:	2300      	movs	r3, #0
 80016a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016aa:	4622      	mov	r2, r4
 80016ac:	462b      	mov	r3, r5
 80016ae:	f04f 0000 	mov.w	r0, #0
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	0159      	lsls	r1, r3, #5
 80016b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016bc:	0150      	lsls	r0, r2, #5
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4621      	mov	r1, r4
 80016c4:	1a51      	subs	r1, r2, r1
 80016c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016c8:	4629      	mov	r1, r5
 80016ca:	eb63 0301 	sbc.w	r3, r3, r1
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016dc:	4649      	mov	r1, r9
 80016de:	018b      	lsls	r3, r1, #6
 80016e0:	4641      	mov	r1, r8
 80016e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e6:	4641      	mov	r1, r8
 80016e8:	018a      	lsls	r2, r1, #6
 80016ea:	4641      	mov	r1, r8
 80016ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80016f0:	4649      	mov	r1, r9
 80016f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001702:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800170a:	4692      	mov	sl, r2
 800170c:	469b      	mov	fp, r3
 800170e:	4623      	mov	r3, r4
 8001710:	eb1a 0303 	adds.w	r3, sl, r3
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	462b      	mov	r3, r5
 8001718:	eb4b 0303 	adc.w	r3, fp, r3
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800172a:	4629      	mov	r1, r5
 800172c:	028b      	lsls	r3, r1, #10
 800172e:	4621      	mov	r1, r4
 8001730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001734:	4621      	mov	r1, r4
 8001736:	028a      	lsls	r2, r1, #10
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001740:	2200      	movs	r2, #0
 8001742:	673b      	str	r3, [r7, #112]	@ 0x70
 8001744:	677a      	str	r2, [r7, #116]	@ 0x74
 8001746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800174a:	f7fe fd61 	bl	8000210 <__aeabi_uldivmod>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4613      	mov	r3, r2
 8001754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001758:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800176a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800176e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800177a:	e0eb      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177c:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001784:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001788:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d06b      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001794:	4b32      	ldr	r3, [pc, #200]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	2200      	movs	r2, #0
 800179c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800179e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80017a8:	2300      	movs	r3, #0
 80017aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80017ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017b0:	4622      	mov	r2, r4
 80017b2:	462b      	mov	r3, r5
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	0159      	lsls	r1, r3, #5
 80017be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c2:	0150      	lsls	r0, r2, #5
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4621      	mov	r1, r4
 80017ca:	1a51      	subs	r1, r2, r1
 80017cc:	61b9      	str	r1, [r7, #24]
 80017ce:	4629      	mov	r1, r5
 80017d0:	eb63 0301 	sbc.w	r3, r3, r1
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017e2:	4659      	mov	r1, fp
 80017e4:	018b      	lsls	r3, r1, #6
 80017e6:	4651      	mov	r1, sl
 80017e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ec:	4651      	mov	r1, sl
 80017ee:	018a      	lsls	r2, r1, #6
 80017f0:	4651      	mov	r1, sl
 80017f2:	ebb2 0801 	subs.w	r8, r2, r1
 80017f6:	4659      	mov	r1, fp
 80017f8:	eb63 0901 	sbc.w	r9, r3, r1
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001808:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800180c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001810:	4690      	mov	r8, r2
 8001812:	4699      	mov	r9, r3
 8001814:	4623      	mov	r3, r4
 8001816:	eb18 0303 	adds.w	r3, r8, r3
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	462b      	mov	r3, r5
 800181e:	eb49 0303 	adc.w	r3, r9, r3
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001830:	4629      	mov	r1, r5
 8001832:	024b      	lsls	r3, r1, #9
 8001834:	4621      	mov	r1, r4
 8001836:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800183a:	4621      	mov	r1, r4
 800183c:	024a      	lsls	r2, r1, #9
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001846:	2200      	movs	r2, #0
 8001848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800184a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800184c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001850:	f7fe fcde 	bl	8000210 <__aeabi_uldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4613      	mov	r3, r2
 800185a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800185e:	e065      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x420>
 8001860:	40023800 	.word	0x40023800
 8001864:	00f42400 	.word	0x00f42400
 8001868:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186c:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x458>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	2200      	movs	r2, #0
 8001874:	4618      	mov	r0, r3
 8001876:	4611      	mov	r1, r2
 8001878:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800187c:	653b      	str	r3, [r7, #80]	@ 0x50
 800187e:	2300      	movs	r3, #0
 8001880:	657b      	str	r3, [r7, #84]	@ 0x54
 8001882:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001886:	4642      	mov	r2, r8
 8001888:	464b      	mov	r3, r9
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	0159      	lsls	r1, r3, #5
 8001894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001898:	0150      	lsls	r0, r2, #5
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4641      	mov	r1, r8
 80018a0:	1a51      	subs	r1, r2, r1
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	4649      	mov	r1, r9
 80018a6:	eb63 0301 	sbc.w	r3, r3, r1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018b8:	4659      	mov	r1, fp
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4651      	mov	r1, sl
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4651      	mov	r1, sl
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4651      	mov	r1, sl
 80018c8:	1a54      	subs	r4, r2, r1
 80018ca:	4659      	mov	r1, fp
 80018cc:	eb63 0501 	sbc.w	r5, r3, r1
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00eb      	lsls	r3, r5, #3
 80018da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	4643      	mov	r3, r8
 80018e6:	18e3      	adds	r3, r4, r3
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	464b      	mov	r3, r9
 80018ec:	eb45 0303 	adc.w	r3, r5, r3
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fe:	4629      	mov	r1, r5
 8001900:	028b      	lsls	r3, r1, #10
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001908:	4621      	mov	r1, r4
 800190a:	028a      	lsls	r2, r1, #10
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001914:	2200      	movs	r2, #0
 8001916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001918:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800191a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800191e:	f7fe fc77 	bl	8000210 <__aeabi_uldivmod>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4613      	mov	r3, r2
 8001928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x458>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	0f1b      	lsrs	r3, r3, #28
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800193a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800193e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800194a:	e003      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x45c>)
 800194e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001952:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001958:	4618      	mov	r0, r3
 800195a:	37b8      	adds	r7, #184	@ 0xb8
 800195c:	46bd      	mov	sp, r7
 800195e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400

0800196c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e28d      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8083 	beq.w	8001a92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800198c:	4b94      	ldr	r3, [pc, #592]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b04      	cmp	r3, #4
 8001996:	d019      	beq.n	80019cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001998:	4b91      	ldr	r3, [pc, #580]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
        || \
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019a4:	4b8e      	ldr	r3, [pc, #568]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019b0:	d00c      	beq.n	80019cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b2:	4b8b      	ldr	r3, [pc, #556]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d112      	bne.n	80019e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	4b88      	ldr	r3, [pc, #544]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	4b84      	ldr	r3, [pc, #528]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d05b      	beq.n	8001a90 <HAL_RCC_OscConfig+0x124>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d157      	bne.n	8001a90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e25a      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x90>
 80019ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7b      	ldr	r2, [pc, #492]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xcc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0xb4>
 8001a06:	4b76      	ldr	r3, [pc, #472]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a75      	ldr	r2, [pc, #468]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b73      	ldr	r3, [pc, #460]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a72      	ldr	r2, [pc, #456]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xcc>
 8001a20:	4b6f      	ldr	r3, [pc, #444]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6e      	ldr	r2, [pc, #440]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6b      	ldr	r2, [pc, #428]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f97c 	bl	8000d3c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff f978 	bl	8000d3c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e21f      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b61      	ldr	r3, [pc, #388]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xdc>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f968 	bl	8000d3c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff f964 	bl	8000d3c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	@ 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e20b      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	4b57      	ldr	r3, [pc, #348]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x104>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d06f      	beq.n	8001b7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a9e:	4b50      	ldr	r3, [pc, #320]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d017      	beq.n	8001ada <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	4b41      	ldr	r3, [pc, #260]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x186>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1d3      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4937      	ldr	r1, [pc, #220]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_RCC_OscConfig+0x278>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff f911 	bl	8000d3c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f90d 	bl	8000d3c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1b4      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b28      	ldr	r3, [pc, #160]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4925      	ldr	r1, [pc, #148]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_RCC_OscConfig+0x278>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f8f0 	bl	8000d3c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff f8ec 	bl	8000d3c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e193      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d036      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff f8d0 	bl	8000d3c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff f8cc 	bl	8000d3c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e173      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x234>
 8001bbe:	e01b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f8b9 	bl	8000d3c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	e00e      	b.n	8001bec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff f8b5 	bl	8000d3c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d907      	bls.n	8001bec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e15c      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
 8001be0:	40023800 	.word	0x40023800
 8001be4:	42470000 	.word	0x42470000
 8001be8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	4b8a      	ldr	r3, [pc, #552]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ea      	bne.n	8001bce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8097 	beq.w	8001d34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b83      	ldr	r3, [pc, #524]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b7c      	ldr	r3, [pc, #496]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b79      	ldr	r3, [pc, #484]	@ (8001e1c <HAL_RCC_OscConfig+0x4b0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b76      	ldr	r3, [pc, #472]	@ (8001e1c <HAL_RCC_OscConfig+0x4b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a75      	ldr	r2, [pc, #468]	@ (8001e1c <HAL_RCC_OscConfig+0x4b0>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f875 	bl	8000d3c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff f871 	bl	8000d3c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e118      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b6c      	ldr	r3, [pc, #432]	@ (8001e1c <HAL_RCC_OscConfig+0x4b0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x31e>
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c80:	4a65      	ldr	r2, [pc, #404]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x358>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x340>
 8001c92:	4b61      	ldr	r3, [pc, #388]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	4a60      	ldr	r2, [pc, #384]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x358>
 8001cac:	4b5a      	ldr	r3, [pc, #360]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb0:	4a59      	ldr	r2, [pc, #356]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb8:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbc:	4a56      	ldr	r2, [pc, #344]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d015      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f836 	bl	8000d3c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f832 	bl	8000d3c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0d7      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	4b4b      	ldr	r3, [pc, #300]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0ee      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x368>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f820 	bl	8000d3c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7ff f81c 	bl	8000d3c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0c1      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d16:	4b40      	ldr	r3, [pc, #256]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ee      	bne.n	8001d00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80ad 	beq.w	8001e98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3e:	4b36      	ldr	r3, [pc, #216]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d060      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d145      	bne.n	8001dde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d52:	4b33      	ldr	r3, [pc, #204]	@ (8001e20 <HAL_RCC_OscConfig+0x4b4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7fe fff0 	bl	8000d3c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe ffec 	bl	8000d3c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e093      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	071b      	lsls	r3, r3, #28
 8001daa:	491b      	ldr	r1, [pc, #108]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_RCC_OscConfig+0x4b4>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7fe ffc1 	bl	8000d3c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7fe ffbd 	bl	8000d3c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e064      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x452>
 8001ddc:	e05c      	b.n	8001e98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_RCC_OscConfig+0x4b4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe ffaa 	bl	8000d3c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe ffa6 	bl	8000d3c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e04d      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x480>
 8001e0a:	e045      	b.n	8001e98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e040      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_RCC_OscConfig+0x538>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d030      	beq.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d129      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d122      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d119      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d10f      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e041      	b.n	8001f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f839 	bl	8001f46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f000 f9c0 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d001      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e04e      	b.n	8002012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a23      	ldr	r2, [pc, #140]	@ (8002020 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d022      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f9e:	d01d      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002024 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d018      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800202c <HAL_TIM_Base_Start_IT+0xd0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00e      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002030 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a18      	ldr	r2, [pc, #96]	@ (8002038 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d111      	bne.n	8002000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d010      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffe:	e007      	b.n	8002010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40010000 	.word	0x40010000
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40010400 	.word	0x40010400
 8002034:	40014000 	.word	0x40014000
 8002038:	40001800 	.word	0x40001800

0800203c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d020      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0202 	mvn.w	r2, #2
 8002070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8d2 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8c4 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8d5 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d020      	beq.n	80020ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01b      	beq.n	80020ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0204 	mvn.w	r2, #4
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8ac 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f89e 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f8af 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d020      	beq.n	8002138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01b      	beq.n	8002138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0208 	mvn.w	r2, #8
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f886 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f878 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f889 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d020      	beq.n	8002184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0210 	mvn.w	r2, #16
 8002154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2208      	movs	r2, #8
 800215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f860 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 8002170:	e005      	b.n	800217e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f852 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f863 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0201 	mvn.w	r2, #1
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fb90 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f900 	bl	80023cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00c      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f834 	bl	8002258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0220 	mvn.w	r2, #32
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8d2 	bl	80023b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a43      	ldr	r2, [pc, #268]	@ (800238c <TIM_Base_SetConfig+0x120>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800228a:	d00f      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a40      	ldr	r2, [pc, #256]	@ (8002390 <TIM_Base_SetConfig+0x124>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00b      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3f      	ldr	r2, [pc, #252]	@ (8002394 <TIM_Base_SetConfig+0x128>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3e      	ldr	r2, [pc, #248]	@ (8002398 <TIM_Base_SetConfig+0x12c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3d      	ldr	r2, [pc, #244]	@ (800239c <TIM_Base_SetConfig+0x130>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a32      	ldr	r2, [pc, #200]	@ (800238c <TIM_Base_SetConfig+0x120>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022cc:	d027      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002390 <TIM_Base_SetConfig+0x124>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d023      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002394 <TIM_Base_SetConfig+0x128>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002398 <TIM_Base_SetConfig+0x12c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <TIM_Base_SetConfig+0x130>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d017      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2b      	ldr	r2, [pc, #172]	@ (80023a0 <TIM_Base_SetConfig+0x134>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	@ (80023a4 <TIM_Base_SetConfig+0x138>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00f      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a29      	ldr	r2, [pc, #164]	@ (80023a8 <TIM_Base_SetConfig+0x13c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a28      	ldr	r2, [pc, #160]	@ (80023ac <TIM_Base_SetConfig+0x140>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a27      	ldr	r2, [pc, #156]	@ (80023b0 <TIM_Base_SetConfig+0x144>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a26      	ldr	r2, [pc, #152]	@ (80023b4 <TIM_Base_SetConfig+0x148>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d108      	bne.n	8002330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a0e      	ldr	r2, [pc, #56]	@ (800238c <TIM_Base_SetConfig+0x120>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0xf2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a10      	ldr	r2, [pc, #64]	@ (800239c <TIM_Base_SetConfig+0x130>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d103      	bne.n	8002366 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	601a      	str	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40010000 	.word	0x40010000
 8002390:	40000400 	.word	0x40000400
 8002394:	40000800 	.word	0x40000800
 8002398:	40000c00 	.word	0x40000c00
 800239c:	40010400 	.word	0x40010400
 80023a0:	40014000 	.word	0x40014000
 80023a4:	40014400 	.word	0x40014400
 80023a8:	40014800 	.word	0x40014800
 80023ac:	40001800 	.word	0x40001800
 80023b0:	40001c00 	.word	0x40001c00
 80023b4:	40002000 	.word	0x40002000

080023b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e042      	b.n	8002478 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe faa2 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	@ 0x24
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f82b 	bl	8002480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002484:	b0c0      	sub	sp, #256	@ 0x100
 8002486:	af00      	add	r7, sp, #0
 8002488:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249c:	68d9      	ldr	r1, [r3, #12]
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	ea40 0301 	orr.w	r3, r0, r1
 80024a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	431a      	orrs	r2, r3
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024d8:	f021 010c 	bic.w	r1, r1, #12
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024e6:	430b      	orrs	r3, r1
 80024e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fa:	6999      	ldr	r1, [r3, #24]
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	ea40 0301 	orr.w	r3, r0, r1
 8002506:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b8f      	ldr	r3, [pc, #572]	@ (800274c <UART_SetConfig+0x2cc>)
 8002510:	429a      	cmp	r2, r3
 8002512:	d005      	beq.n	8002520 <UART_SetConfig+0xa0>
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b8d      	ldr	r3, [pc, #564]	@ (8002750 <UART_SetConfig+0x2d0>)
 800251c:	429a      	cmp	r2, r3
 800251e:	d104      	bne.n	800252a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002520:	f7fe ffae 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8002524:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002528:	e003      	b.n	8002532 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800252a:	f7fe ff95 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 800252e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800253c:	f040 810c 	bne.w	8002758 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002544:	2200      	movs	r2, #0
 8002546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800254a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800254e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002552:	4622      	mov	r2, r4
 8002554:	462b      	mov	r3, r5
 8002556:	1891      	adds	r1, r2, r2
 8002558:	65b9      	str	r1, [r7, #88]	@ 0x58
 800255a:	415b      	adcs	r3, r3
 800255c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800255e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002562:	4621      	mov	r1, r4
 8002564:	eb12 0801 	adds.w	r8, r2, r1
 8002568:	4629      	mov	r1, r5
 800256a:	eb43 0901 	adc.w	r9, r3, r1
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800257e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002582:	4690      	mov	r8, r2
 8002584:	4699      	mov	r9, r3
 8002586:	4623      	mov	r3, r4
 8002588:	eb18 0303 	adds.w	r3, r8, r3
 800258c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002590:	462b      	mov	r3, r5
 8002592:	eb49 0303 	adc.w	r3, r9, r3
 8002596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800259a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025ae:	460b      	mov	r3, r1
 80025b0:	18db      	adds	r3, r3, r3
 80025b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80025b4:	4613      	mov	r3, r2
 80025b6:	eb42 0303 	adc.w	r3, r2, r3
 80025ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80025bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025c4:	f7fd fe24 	bl	8000210 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4b61      	ldr	r3, [pc, #388]	@ (8002754 <UART_SetConfig+0x2d4>)
 80025ce:	fba3 2302 	umull	r2, r3, r3, r2
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	011c      	lsls	r4, r3, #4
 80025d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025da:	2200      	movs	r2, #0
 80025dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025e8:	4642      	mov	r2, r8
 80025ea:	464b      	mov	r3, r9
 80025ec:	1891      	adds	r1, r2, r2
 80025ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025f0:	415b      	adcs	r3, r3
 80025f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025f8:	4641      	mov	r1, r8
 80025fa:	eb12 0a01 	adds.w	sl, r2, r1
 80025fe:	4649      	mov	r1, r9
 8002600:	eb43 0b01 	adc.w	fp, r3, r1
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002610:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002618:	4692      	mov	sl, r2
 800261a:	469b      	mov	fp, r3
 800261c:	4643      	mov	r3, r8
 800261e:	eb1a 0303 	adds.w	r3, sl, r3
 8002622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002626:	464b      	mov	r3, r9
 8002628:	eb4b 0303 	adc.w	r3, fp, r3
 800262c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800263c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002640:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002644:	460b      	mov	r3, r1
 8002646:	18db      	adds	r3, r3, r3
 8002648:	643b      	str	r3, [r7, #64]	@ 0x40
 800264a:	4613      	mov	r3, r2
 800264c:	eb42 0303 	adc.w	r3, r2, r3
 8002650:	647b      	str	r3, [r7, #68]	@ 0x44
 8002652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002656:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800265a:	f7fd fdd9 	bl	8000210 <__aeabi_uldivmod>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4611      	mov	r1, r2
 8002664:	4b3b      	ldr	r3, [pc, #236]	@ (8002754 <UART_SetConfig+0x2d4>)
 8002666:	fba3 2301 	umull	r2, r3, r3, r1
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2264      	movs	r2, #100	@ 0x64
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	1acb      	subs	r3, r1, r3
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800267a:	4b36      	ldr	r3, [pc, #216]	@ (8002754 <UART_SetConfig+0x2d4>)
 800267c:	fba3 2302 	umull	r2, r3, r3, r2
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002688:	441c      	add	r4, r3
 800268a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800268e:	2200      	movs	r2, #0
 8002690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002694:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002698:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800269c:	4642      	mov	r2, r8
 800269e:	464b      	mov	r3, r9
 80026a0:	1891      	adds	r1, r2, r2
 80026a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026a4:	415b      	adcs	r3, r3
 80026a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026ac:	4641      	mov	r1, r8
 80026ae:	1851      	adds	r1, r2, r1
 80026b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80026b2:	4649      	mov	r1, r9
 80026b4:	414b      	adcs	r3, r1
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026c4:	4659      	mov	r1, fp
 80026c6:	00cb      	lsls	r3, r1, #3
 80026c8:	4651      	mov	r1, sl
 80026ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ce:	4651      	mov	r1, sl
 80026d0:	00ca      	lsls	r2, r1, #3
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	4642      	mov	r2, r8
 80026da:	189b      	adds	r3, r3, r2
 80026dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026e0:	464b      	mov	r3, r9
 80026e2:	460a      	mov	r2, r1
 80026e4:	eb42 0303 	adc.w	r3, r2, r3
 80026e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80026fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002700:	460b      	mov	r3, r1
 8002702:	18db      	adds	r3, r3, r3
 8002704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002706:	4613      	mov	r3, r2
 8002708:	eb42 0303 	adc.w	r3, r2, r3
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800270e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002716:	f7fd fd7b 	bl	8000210 <__aeabi_uldivmod>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <UART_SetConfig+0x2d4>)
 8002720:	fba3 1302 	umull	r1, r3, r3, r2
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	2164      	movs	r1, #100	@ 0x64
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	3332      	adds	r3, #50	@ 0x32
 8002732:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <UART_SetConfig+0x2d4>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	f003 0207 	and.w	r2, r3, #7
 800273e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4422      	add	r2, r4
 8002746:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002748:	e106      	b.n	8002958 <UART_SetConfig+0x4d8>
 800274a:	bf00      	nop
 800274c:	40011000 	.word	0x40011000
 8002750:	40011400 	.word	0x40011400
 8002754:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275c:	2200      	movs	r2, #0
 800275e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002762:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002766:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800276a:	4642      	mov	r2, r8
 800276c:	464b      	mov	r3, r9
 800276e:	1891      	adds	r1, r2, r2
 8002770:	6239      	str	r1, [r7, #32]
 8002772:	415b      	adcs	r3, r3
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
 8002776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800277a:	4641      	mov	r1, r8
 800277c:	1854      	adds	r4, r2, r1
 800277e:	4649      	mov	r1, r9
 8002780:	eb43 0501 	adc.w	r5, r3, r1
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	00eb      	lsls	r3, r5, #3
 800278e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002792:	00e2      	lsls	r2, r4, #3
 8002794:	4614      	mov	r4, r2
 8002796:	461d      	mov	r5, r3
 8002798:	4643      	mov	r3, r8
 800279a:	18e3      	adds	r3, r4, r3
 800279c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027a0:	464b      	mov	r3, r9
 80027a2:	eb45 0303 	adc.w	r3, r5, r3
 80027a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027c6:	4629      	mov	r1, r5
 80027c8:	008b      	lsls	r3, r1, #2
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d0:	4621      	mov	r1, r4
 80027d2:	008a      	lsls	r2, r1, #2
 80027d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027d8:	f7fd fd1a 	bl	8000210 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4b60      	ldr	r3, [pc, #384]	@ (8002964 <UART_SetConfig+0x4e4>)
 80027e2:	fba3 2302 	umull	r2, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	011c      	lsls	r4, r3, #4
 80027ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	1891      	adds	r1, r2, r2
 8002802:	61b9      	str	r1, [r7, #24]
 8002804:	415b      	adcs	r3, r3
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800280c:	4641      	mov	r1, r8
 800280e:	1851      	adds	r1, r2, r1
 8002810:	6139      	str	r1, [r7, #16]
 8002812:	4649      	mov	r1, r9
 8002814:	414b      	adcs	r3, r1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002824:	4659      	mov	r1, fp
 8002826:	00cb      	lsls	r3, r1, #3
 8002828:	4651      	mov	r1, sl
 800282a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800282e:	4651      	mov	r1, sl
 8002830:	00ca      	lsls	r2, r1, #3
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	4603      	mov	r3, r0
 8002838:	4642      	mov	r2, r8
 800283a:	189b      	adds	r3, r3, r2
 800283c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002840:	464b      	mov	r3, r9
 8002842:	460a      	mov	r2, r1
 8002844:	eb42 0303 	adc.w	r3, r2, r3
 8002848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002856:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002864:	4649      	mov	r1, r9
 8002866:	008b      	lsls	r3, r1, #2
 8002868:	4641      	mov	r1, r8
 800286a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800286e:	4641      	mov	r1, r8
 8002870:	008a      	lsls	r2, r1, #2
 8002872:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002876:	f7fd fccb 	bl	8000210 <__aeabi_uldivmod>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4611      	mov	r1, r2
 8002880:	4b38      	ldr	r3, [pc, #224]	@ (8002964 <UART_SetConfig+0x4e4>)
 8002882:	fba3 2301 	umull	r2, r3, r3, r1
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2264      	movs	r2, #100	@ 0x64
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	1acb      	subs	r3, r1, r3
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	3332      	adds	r3, #50	@ 0x32
 8002894:	4a33      	ldr	r2, [pc, #204]	@ (8002964 <UART_SetConfig+0x4e4>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a0:	441c      	add	r4, r3
 80028a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a6:	2200      	movs	r2, #0
 80028a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80028aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80028ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	1891      	adds	r1, r2, r2
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	415b      	adcs	r3, r3
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c0:	4641      	mov	r1, r8
 80028c2:	1851      	adds	r1, r2, r1
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	4649      	mov	r1, r9
 80028c8:	414b      	adcs	r3, r1
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028d8:	4659      	mov	r1, fp
 80028da:	00cb      	lsls	r3, r1, #3
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e2:	4651      	mov	r1, sl
 80028e4:	00ca      	lsls	r2, r1, #3
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	4642      	mov	r2, r8
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028f2:	464b      	mov	r3, r9
 80028f4:	460a      	mov	r2, r1
 80028f6:	eb42 0303 	adc.w	r3, r2, r3
 80028fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	663b      	str	r3, [r7, #96]	@ 0x60
 8002906:	667a      	str	r2, [r7, #100]	@ 0x64
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002914:	4649      	mov	r1, r9
 8002916:	008b      	lsls	r3, r1, #2
 8002918:	4641      	mov	r1, r8
 800291a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800291e:	4641      	mov	r1, r8
 8002920:	008a      	lsls	r2, r1, #2
 8002922:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002926:	f7fd fc73 	bl	8000210 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <UART_SetConfig+0x4e4>)
 8002930:	fba3 1302 	umull	r1, r3, r3, r2
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	2164      	movs	r1, #100	@ 0x64
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	3332      	adds	r3, #50	@ 0x32
 8002942:	4a08      	ldr	r2, [pc, #32]	@ (8002964 <UART_SetConfig+0x4e4>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	f003 020f 	and.w	r2, r3, #15
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4422      	add	r2, r4
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800295e:	46bd      	mov	sp, r7
 8002960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002964:	51eb851f 	.word	0x51eb851f

08002968 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <SysTick_Handler+0x1c>)
 800296e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002970:	f001 fd7a 	bl	8004468 <xTaskGetSchedulerState>
 8002974:	4603      	mov	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800297a:	f002 fc75 	bl	8005268 <xPortSysTickHandler>
  }
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002998:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4a06      	ldr	r2, [pc, #24]	@ (80029b8 <vApplicationGetIdleTaskMemory+0x30>)
 800299e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000130 	.word	0x20000130
 80029b8:	2000018c 	.word	0x2000018c

080029bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a07      	ldr	r2, [pc, #28]	@ (80029e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80029cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4a06      	ldr	r2, [pc, #24]	@ (80029ec <vApplicationGetTimerTaskMemory+0x30>)
 80029d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	2000038c 	.word	0x2000038c
 80029ec:	200003e8 	.word	0x200003e8

080029f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f103 0208 	add.w	r2, r3, #8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f103 0208 	add.w	r2, r3, #8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f103 0208 	add.w	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d103      	bne.n	8002ab2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e00c      	b.n	8002acc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e002      	b.n	8002ac0 <vListInsert+0x2e>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d2f6      	bcs.n	8002aba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6892      	ldr	r2, [r2, #8]
 8002b1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6852      	ldr	r2, [r2, #4]
 8002b24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d103      	bne.n	8002b38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1e5a      	subs	r2, r3, #1
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b84:	f002 fae0 	bl	8005148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b90:	68f9      	ldr	r1, [r7, #12]
 8002b92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	441a      	add	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	68f9      	ldr	r1, [r7, #12]
 8002bb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	441a      	add	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	22ff      	movs	r2, #255	@ 0xff
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	22ff      	movs	r2, #255	@ 0xff
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d114      	bne.n	8002c04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01a      	beq.n	8002c18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3310      	adds	r3, #16
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 fa7e 	bl	80040e8 <xTaskRemoveFromEventList>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d012      	beq.n	8002c18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <xQueueGenericReset+0xd0>)
 8002bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	e009      	b.n	8002c18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3310      	adds	r3, #16
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fef1 	bl	80029f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3324      	adds	r3, #36	@ 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff feec 	bl	80029f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c18:	f002 fac8 	bl	80051ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c1c:	2301      	movs	r3, #1
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000ed04 	.word	0xe000ed04

08002c2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	@ 0x38
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10b      	bne.n	8002c76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	e7fd      	b.n	8002c72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <xQueueGenericCreateStatic+0x56>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <xQueueGenericCreateStatic+0x5a>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueGenericCreateStatic+0x5c>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	623b      	str	r3, [r7, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <xQueueGenericCreateStatic+0x84>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <xQueueGenericCreateStatic+0x88>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <xQueueGenericCreateStatic+0x8a>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	61fb      	str	r3, [r7, #28]
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cd2:	2350      	movs	r3, #80	@ 0x50
 8002cd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b50      	cmp	r3, #80	@ 0x50
 8002cda:	d00b      	beq.n	8002cf4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	61bb      	str	r3, [r7, #24]
}
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002cf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00d      	beq.n	8002d1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f840 	bl	8002d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3730      	adds	r7, #48	@ 0x30
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b08a      	sub	sp, #40	@ 0x28
 8002d2a:	af02      	add	r7, sp, #8
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	613b      	str	r3, [r7, #16]
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	e7fd      	b.n	8002d4e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	3350      	adds	r3, #80	@ 0x50
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 fb13 	bl	800538c <pvPortMalloc>
 8002d66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d011      	beq.n	8002d92 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3350      	adds	r3, #80	@ 0x50
 8002d76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d80:	79fa      	ldrb	r2, [r7, #7]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f805 	bl	8002d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d92:	69bb      	ldr	r3, [r7, #24]
	}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d103      	bne.n	8002db8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e002      	b.n	8002dbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dca:	2101      	movs	r1, #1
 8002dcc:	69b8      	ldr	r0, [r7, #24]
 8002dce:	f7ff fec3 	bl	8002b58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08e      	sub	sp, #56	@ 0x38
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002df2:	2300      	movs	r3, #0
 8002df4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <xQueueGenericSend+0x34>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	e7fd      	b.n	8002e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <xQueueGenericSend+0x42>
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <xQueueGenericSend+0x46>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <xQueueGenericSend+0x48>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <xQueueGenericSend+0x64>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x72>
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <xQueueGenericSend+0x76>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xQueueGenericSend+0x78>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <xQueueGenericSend+0x94>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	623b      	str	r3, [r7, #32]
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e78:	f001 faf6 	bl	8004468 <xTaskGetSchedulerState>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <xQueueGenericSend+0xa4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <xQueueGenericSend+0xa8>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <xQueueGenericSend+0xaa>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <xQueueGenericSend+0xc6>
	__asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	61fb      	str	r3, [r7, #28]
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	e7fd      	b.n	8002ea6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eaa:	f002 f94d 	bl	8005148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <xQueueGenericSend+0xdc>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d129      	bne.n	8002f14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ec6:	f000 fb37 	bl	8003538 <prvCopyDataToQueue>
 8002eca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed6:	3324      	adds	r3, #36	@ 0x24
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 f905 	bl	80040e8 <xTaskRemoveFromEventList>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d013      	beq.n	8002f0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe4 <xQueueGenericSend+0x200>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	e00a      	b.n	8002f0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002efc:	4b39      	ldr	r3, [pc, #228]	@ (8002fe4 <xQueueGenericSend+0x200>)
 8002efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f0c:	f002 f94e 	bl	80051ac <vPortExitCritical>
				return pdPASS;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e063      	b.n	8002fdc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f1a:	f002 f947 	bl	80051ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e05c      	b.n	8002fdc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 f93f 	bl	80041b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f36:	f002 f939 	bl	80051ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f3a:	f000 feaf 	bl	8003c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f3e:	f002 f903 	bl	8005148 <vPortEnterCritical>
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d103      	bne.n	8002f58 <xQueueGenericSend+0x174>
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d103      	bne.n	8002f6e <xQueueGenericSend+0x18a>
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f6e:	f002 f91d 	bl	80051ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f72:	1d3a      	adds	r2, r7, #4
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 f92e 	bl	80041dc <xTaskCheckForTimeOut>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d124      	bne.n	8002fd0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f88:	f000 fbce 	bl	8003728 <prvIsQueueFull>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f94:	3310      	adds	r3, #16
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 f852 	bl	8004044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fa2:	f000 fb59 	bl	8003658 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fa6:	f000 fe87 	bl	8003cb8 <xTaskResumeAll>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f47f af7c 	bne.w	8002eaa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <xQueueGenericSend+0x200>)
 8002fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	e772      	b.n	8002eaa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fc6:	f000 fb47 	bl	8003658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fca:	f000 fe75 	bl	8003cb8 <xTaskResumeAll>
 8002fce:	e76c      	b.n	8002eaa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fd2:	f000 fb41 	bl	8003658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fd6:	f000 fe6f 	bl	8003cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3738      	adds	r7, #56	@ 0x38
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b090      	sub	sp, #64	@ 0x40
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <xQueueGenericSendFromISR+0x3e>
 800301e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <xQueueGenericSendFromISR+0x42>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <xQueueGenericSendFromISR+0x44>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d103      	bne.n	8003056 <xQueueGenericSendFromISR+0x6e>
 800304e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <xQueueGenericSendFromISR+0x72>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <xQueueGenericSendFromISR+0x74>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	623b      	str	r3, [r7, #32]
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003078:	f002 f946 	bl	8005308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800307c:	f3ef 8211 	mrs	r2, BASEPRI
 8003080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	61fa      	str	r2, [r7, #28]
 8003092:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003094:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003096:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800309c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <xQueueGenericSendFromISR+0xc2>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d12f      	bne.n	800310a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80030c0:	f000 fa3a 	bl	8003538 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d112      	bne.n	80030f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	3324      	adds	r3, #36	@ 0x24
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 f804 	bl	80040e8 <xTaskRemoveFromEventList>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e007      	b.n	8003104 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003108:	e001      	b.n	800310e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800310a:	2300      	movs	r3, #0
 800310c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800310e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003110:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003118:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800311a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800311c:	4618      	mov	r0, r3
 800311e:	3740      	adds	r7, #64	@ 0x40
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	@ 0x30
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10b      	bne.n	8003156 <xQueueReceive+0x32>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	623b      	str	r3, [r7, #32]
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	e7fd      	b.n	8003152 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d103      	bne.n	8003164 <xQueueReceive+0x40>
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <xQueueReceive+0x44>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <xQueueReceive+0x46>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10b      	bne.n	8003186 <xQueueReceive+0x62>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	61fb      	str	r3, [r7, #28]
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	e7fd      	b.n	8003182 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003186:	f001 f96f 	bl	8004468 <xTaskGetSchedulerState>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <xQueueReceive+0x72>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <xQueueReceive+0x76>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <xQueueReceive+0x78>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <xQueueReceive+0x94>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	61bb      	str	r3, [r7, #24]
}
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031b8:	f001 ffc6 	bl	8005148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01f      	beq.n	8003208 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031cc:	f000 fa1e 	bl	800360c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	1e5a      	subs	r2, r3, #1
 80031d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00f      	beq.n	8003200 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e2:	3310      	adds	r3, #16
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 ff7f 	bl	80040e8 <xTaskRemoveFromEventList>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031f0:	4b3c      	ldr	r3, [pc, #240]	@ (80032e4 <xQueueReceive+0x1c0>)
 80031f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003200:	f001 ffd4 	bl	80051ac <vPortExitCritical>
				return pdPASS;
 8003204:	2301      	movs	r3, #1
 8003206:	e069      	b.n	80032dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800320e:	f001 ffcd 	bl	80051ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003212:	2300      	movs	r3, #0
 8003214:	e062      	b.n	80032dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	4618      	mov	r0, r3
 8003222:	f000 ffc5 	bl	80041b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003226:	2301      	movs	r3, #1
 8003228:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800322a:	f001 ffbf 	bl	80051ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800322e:	f000 fd35 	bl	8003c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003232:	f001 ff89 	bl	8005148 <vPortEnterCritical>
 8003236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003238:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800323c:	b25b      	sxtb	r3, r3
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d103      	bne.n	800324c <xQueueReceive+0x128>
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800324c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003252:	b25b      	sxtb	r3, r3
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d103      	bne.n	8003262 <xQueueReceive+0x13e>
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003262:	f001 ffa3 	bl	80051ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003266:	1d3a      	adds	r2, r7, #4
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 ffb4 	bl	80041dc <xTaskCheckForTimeOut>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d123      	bne.n	80032c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800327a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800327c:	f000 fa3e 	bl	80036fc <prvIsQueueEmpty>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d017      	beq.n	80032b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003288:	3324      	adds	r3, #36	@ 0x24
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fed8 	bl	8004044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003294:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003296:	f000 f9df 	bl	8003658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800329a:	f000 fd0d 	bl	8003cb8 <xTaskResumeAll>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d189      	bne.n	80031b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80032a4:	4b0f      	ldr	r3, [pc, #60]	@ (80032e4 <xQueueReceive+0x1c0>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	e780      	b.n	80031b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032b8:	f000 f9ce 	bl	8003658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032bc:	f000 fcfc 	bl	8003cb8 <xTaskResumeAll>
 80032c0:	e77a      	b.n	80031b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032c4:	f000 f9c8 	bl	8003658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032c8:	f000 fcf6 	bl	8003cb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ce:	f000 fa15 	bl	80036fc <prvIsQueueEmpty>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f43f af6f 	beq.w	80031b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3730      	adds	r7, #48	@ 0x30
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	@ 0x38
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	623b      	str	r3, [r7, #32]
}
 8003316:	bf00      	nop
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800331c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	61fb      	str	r3, [r7, #28]
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800333c:	f001 f894 	bl	8004468 <xTaskGetSchedulerState>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <xQueueSemaphoreTake+0x64>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <xQueueSemaphoreTake+0x68>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <xQueueSemaphoreTake+0x6a>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	61bb      	str	r3, [r7, #24]
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	e7fd      	b.n	800336a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800336e:	f001 feeb 	bl	8005148 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d024      	beq.n	80033c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800337e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003384:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800338e:	f001 f9e5 	bl	800475c <pvTaskIncrementMutexHeldCount>
 8003392:	4602      	mov	r2, r0
 8003394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003396:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00f      	beq.n	80033c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a2:	3310      	adds	r3, #16
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fe9f 	bl	80040e8 <xTaskRemoveFromEventList>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033b0:	4b54      	ldr	r3, [pc, #336]	@ (8003504 <xQueueSemaphoreTake+0x21c>)
 80033b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033c0:	f001 fef4 	bl	80051ac <vPortExitCritical>
				return pdPASS;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e098      	b.n	80034fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d112      	bne.n	80033f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	617b      	str	r3, [r7, #20]
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80033ec:	f001 fede 	bl	80051ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e082      	b.n	80034fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fed6 	bl	80041b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003404:	2301      	movs	r3, #1
 8003406:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003408:	f001 fed0 	bl	80051ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800340c:	f000 fc46 	bl	8003c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003410:	f001 fe9a 	bl	8005148 <vPortEnterCritical>
 8003414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003416:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800341a:	b25b      	sxtb	r3, r3
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d103      	bne.n	800342a <xQueueSemaphoreTake+0x142>
 8003422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003430:	b25b      	sxtb	r3, r3
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d103      	bne.n	8003440 <xQueueSemaphoreTake+0x158>
 8003438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003440:	f001 feb4 	bl	80051ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003444:	463a      	mov	r2, r7
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fec5 	bl	80041dc <xTaskCheckForTimeOut>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d132      	bne.n	80034be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003458:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800345a:	f000 f94f 	bl	80036fc <prvIsQueueEmpty>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d026      	beq.n	80034b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800346c:	f001 fe6c 	bl	8005148 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4618      	mov	r0, r3
 8003476:	f001 f815 	bl	80044a4 <xTaskPriorityInherit>
 800347a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800347c:	f001 fe96 	bl	80051ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	3324      	adds	r3, #36	@ 0x24
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fddb 	bl	8004044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800348e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003490:	f000 f8e2 	bl	8003658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003494:	f000 fc10 	bl	8003cb8 <xTaskResumeAll>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	f47f af67 	bne.w	800336e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80034a0:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <xQueueSemaphoreTake+0x21c>)
 80034a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	e75d      	b.n	800336e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034b4:	f000 f8d0 	bl	8003658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034b8:	f000 fbfe 	bl	8003cb8 <xTaskResumeAll>
 80034bc:	e757      	b.n	800336e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034c0:	f000 f8ca 	bl	8003658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034c4:	f000 fbf8 	bl	8003cb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034ca:	f000 f917 	bl	80036fc <prvIsQueueEmpty>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f43f af4c 	beq.w	800336e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80034dc:	f001 fe34 	bl	8005148 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034e2:	f000 f811 	bl	8003508 <prvGetDisinheritPriorityAfterTimeout>
 80034e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 f8b0 	bl	8004654 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80034f4:	f001 fe5a 	bl	80051ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3738      	adds	r7, #56	@ 0x38
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e001      	b.n	800352a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800352a:	68fb      	ldr	r3, [r7, #12]
	}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d14d      	bne.n	80035fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f806 	bl	8004574 <xTaskPriorityDisinherit>
 8003568:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	e043      	b.n	80035fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d119      	bne.n	80035ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6858      	ldr	r0, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	461a      	mov	r2, r3
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	f002 fb63 	bl	8005c4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	441a      	add	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d32b      	bcc.n	80035fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e026      	b.n	80035fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68d8      	ldr	r0, [r3, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	461a      	mov	r2, r3
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	f002 fb49 	bl	8005c4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c4:	425b      	negs	r3, r3
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d207      	bcs.n	80035e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	425b      	negs	r3, r3
 80035e2:	441a      	add	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d105      	bne.n	80035fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003602:	697b      	ldr	r3, [r7, #20]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	441a      	add	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d303      	bcc.n	8003640 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68d9      	ldr	r1, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	461a      	mov	r2, r3
 800364a:	6838      	ldr	r0, [r7, #0]
 800364c:	f002 faff 	bl	8005c4e <memcpy>
	}
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003660:	f001 fd72 	bl	8005148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800366a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800366c:	e011      	b.n	8003692 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3324      	adds	r3, #36	@ 0x24
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd34 	bl	80040e8 <xTaskRemoveFromEventList>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003686:	f000 fe0d 	bl	80042a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	3b01      	subs	r3, #1
 800368e:	b2db      	uxtb	r3, r3
 8003690:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	dce9      	bgt.n	800366e <prvUnlockQueue+0x16>
 800369a:	e000      	b.n	800369e <prvUnlockQueue+0x46>
					break;
 800369c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	22ff      	movs	r2, #255	@ 0xff
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80036a6:	f001 fd81 	bl	80051ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036aa:	f001 fd4d 	bl	8005148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036b6:	e011      	b.n	80036dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3310      	adds	r3, #16
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fd0f 	bl	80040e8 <xTaskRemoveFromEventList>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036d0:	f000 fde8 	bl	80042a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036d4:	7bbb      	ldrb	r3, [r7, #14]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	dce9      	bgt.n	80036b8 <prvUnlockQueue+0x60>
 80036e4:	e000      	b.n	80036e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	22ff      	movs	r2, #255	@ 0xff
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80036f0:	f001 fd5c 	bl	80051ac <vPortExitCritical>
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003704:	f001 fd20 	bl	8005148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e001      	b.n	800371a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800371a:	f001 fd47 	bl	80051ac <vPortExitCritical>

	return xReturn;
 800371e:	68fb      	ldr	r3, [r7, #12]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003730:	f001 fd0a 	bl	8005148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373c:	429a      	cmp	r2, r3
 800373e:	d102      	bne.n	8003746 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e001      	b.n	800374a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800374a:	f001 fd2f 	bl	80051ac <vPortExitCritical>

	return xReturn;
 800374e:	68fb      	ldr	r3, [r7, #12]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e014      	b.n	8003792 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003768:	4a0f      	ldr	r2, [pc, #60]	@ (80037a8 <vQueueAddToRegistry+0x50>)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003774:	490c      	ldr	r1, [pc, #48]	@ (80037a8 <vQueueAddToRegistry+0x50>)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <vQueueAddToRegistry+0x50>)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800378a:	e006      	b.n	800379a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b07      	cmp	r3, #7
 8003796:	d9e7      	bls.n	8003768 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	200007e8 	.word	0x200007e8

080037ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037bc:	f001 fcc4 	bl	8005148 <vPortEnterCritical>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d103      	bne.n	80037d6 <vQueueWaitForMessageRestricted+0x2a>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037dc:	b25b      	sxtb	r3, r3
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d103      	bne.n	80037ec <vQueueWaitForMessageRestricted+0x40>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ec:	f001 fcde 	bl	80051ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3324      	adds	r3, #36	@ 0x24
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fc45 	bl	8004090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff ff26 	bl	8003658 <prvUnlockQueue>
	}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08e      	sub	sp, #56	@ 0x38
 8003818:	af04      	add	r7, sp, #16
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	623b      	str	r3, [r7, #32]
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	61fb      	str	r3, [r7, #28]
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	e7fd      	b.n	800385a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800385e:	235c      	movs	r3, #92	@ 0x5c
 8003860:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b5c      	cmp	r3, #92	@ 0x5c
 8003866:	d00b      	beq.n	8003880 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	61bb      	str	r3, [r7, #24]
}
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003880:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01e      	beq.n	80038c6 <xTaskCreateStatic+0xb2>
 8003888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01b      	beq.n	80038c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038a0:	2300      	movs	r3, #0
 80038a2:	9303      	str	r3, [sp, #12]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	9302      	str	r3, [sp, #8]
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f850 	bl	800395e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038c0:	f000 f8de 	bl	8003a80 <prvAddNewTaskToReadyList>
 80038c4:	e001      	b.n	80038ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038ca:	697b      	ldr	r3, [r7, #20]
	}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	@ 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	@ 0x30
 80038d8:	af04      	add	r7, sp, #16
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 fd4f 	bl	800538c <pvPortMalloc>
 80038ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038f6:	205c      	movs	r0, #92	@ 0x5c
 80038f8:	f001 fd48 	bl	800538c <pvPortMalloc>
 80038fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	631a      	str	r2, [r3, #48]	@ 0x30
 800390a:	e005      	b.n	8003918 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800390c:	6978      	ldr	r0, [r7, #20]
 800390e:	f001 fe0b 	bl	8005528 <vPortFree>
 8003912:	e001      	b.n	8003918 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	2300      	movs	r3, #0
 800392a:	9303      	str	r3, [sp, #12]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	9302      	str	r3, [sp, #8]
 8003930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f80e 	bl	800395e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003942:	69f8      	ldr	r0, [r7, #28]
 8003944:	f000 f89c 	bl	8003a80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003948:	2301      	movs	r3, #1
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e002      	b.n	8003954 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003954:	69bb      	ldr	r3, [r7, #24]
	}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	461a      	mov	r2, r3
 8003976:	21a5      	movs	r1, #165	@ 0xa5
 8003978:	f002 f8ee 	bl	8005b58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003986:	3b01      	subs	r3, #1
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f023 0307 	bic.w	r3, r3, #7
 8003994:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	617b      	str	r3, [r7, #20]
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01f      	beq.n	80039fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e012      	b.n	80039ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	7819      	ldrb	r1, [r3, #0]
 80039cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	3334      	adds	r3, #52	@ 0x34
 80039d4:	460a      	mov	r2, r1
 80039d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3301      	adds	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b0f      	cmp	r3, #15
 80039ee:	d9e9      	bls.n	80039c4 <prvInitialiseNewTask+0x66>
 80039f0:	e000      	b.n	80039f4 <prvInitialiseNewTask+0x96>
			{
				break;
 80039f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039fc:	e003      	b.n	8003a06 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	2b37      	cmp	r3, #55	@ 0x37
 8003a0a:	d901      	bls.n	8003a10 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a0c:	2337      	movs	r3, #55	@ 0x37
 8003a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a14:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a1a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1e:	2200      	movs	r2, #0
 8003a20:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	3304      	adds	r3, #4
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f802 	bl	8002a30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	3318      	adds	r3, #24
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe fffd 	bl	8002a30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a4a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	68f9      	ldr	r1, [r7, #12]
 8003a5e:	69b8      	ldr	r0, [r7, #24]
 8003a60:	f001 fa3e 	bl	8004ee0 <pxPortInitialiseStack>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a76:	bf00      	nop
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a88:	f001 fb5e 	bl	8005148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b44 <prvAddNewTaskToReadyList+0xc4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	4a2c      	ldr	r2, [pc, #176]	@ (8003b44 <prvAddNewTaskToReadyList+0xc4>)
 8003a94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a96:	4b2c      	ldr	r3, [pc, #176]	@ (8003b48 <prvAddNewTaskToReadyList+0xc8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003b48 <prvAddNewTaskToReadyList+0xc8>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003aa4:	4b27      	ldr	r3, [pc, #156]	@ (8003b44 <prvAddNewTaskToReadyList+0xc4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d110      	bne.n	8003ace <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003aac:	f000 fc1e 	bl	80042ec <prvInitialiseTaskLists>
 8003ab0:	e00d      	b.n	8003ace <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ab2:	4b26      	ldr	r3, [pc, #152]	@ (8003b4c <prvAddNewTaskToReadyList+0xcc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aba:	4b23      	ldr	r3, [pc, #140]	@ (8003b48 <prvAddNewTaskToReadyList+0xc8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d802      	bhi.n	8003ace <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <prvAddNewTaskToReadyList+0xc8>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ace:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <prvAddNewTaskToReadyList+0xd0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b50 <prvAddNewTaskToReadyList+0xd0>)
 8003ad6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b50 <prvAddNewTaskToReadyList+0xd0>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <prvAddNewTaskToReadyList+0xd4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d903      	bls.n	8003af4 <prvAddNewTaskToReadyList+0x74>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <prvAddNewTaskToReadyList+0xd4>)
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4a15      	ldr	r2, [pc, #84]	@ (8003b58 <prvAddNewTaskToReadyList+0xd8>)
 8003b02:	441a      	add	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7fe ff9d 	bl	8002a4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b10:	f001 fb4c 	bl	80051ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <prvAddNewTaskToReadyList+0xcc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <prvAddNewTaskToReadyList+0xc8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d207      	bcs.n	8003b3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b5c <prvAddNewTaskToReadyList+0xdc>)
 8003b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000cfc 	.word	0x20000cfc
 8003b48:	20000828 	.word	0x20000828
 8003b4c:	20000d08 	.word	0x20000d08
 8003b50:	20000d18 	.word	0x20000d18
 8003b54:	20000d04 	.word	0x20000d04
 8003b58:	2000082c 	.word	0x2000082c
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b72:	4b14      	ldr	r3, [pc, #80]	@ (8003bc4 <vTaskDelay+0x64>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <vTaskDelay+0x32>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	60bb      	str	r3, [r7, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b92:	f000 f883 	bl	8003c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b96:	2100      	movs	r1, #0
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fdf3 	bl	8004784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b9e:	f000 f88b 	bl	8003cb8 <xTaskResumeAll>
 8003ba2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003baa:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <vTaskDelay+0x68>)
 8003bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000d24 	.word	0x20000d24
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	@ 0x28
 8003bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bda:	463a      	mov	r2, r7
 8003bdc:	1d39      	adds	r1, r7, #4
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fed0 	bl	8002988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003be8:	6839      	ldr	r1, [r7, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	9202      	str	r2, [sp, #8]
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	4922      	ldr	r1, [pc, #136]	@ (8003c84 <vTaskStartScheduler+0xb8>)
 8003bfc:	4822      	ldr	r0, [pc, #136]	@ (8003c88 <vTaskStartScheduler+0xbc>)
 8003bfe:	f7ff fe09 	bl	8003814 <xTaskCreateStatic>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4a21      	ldr	r2, [pc, #132]	@ (8003c8c <vTaskStartScheduler+0xc0>)
 8003c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c08:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <vTaskStartScheduler+0xc0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c10:	2301      	movs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e001      	b.n	8003c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d102      	bne.n	8003c26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c20:	f000 fe04 	bl	800482c <xTimerCreateTimerTask>
 8003c24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d116      	bne.n	8003c5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c40:	4b13      	ldr	r3, [pc, #76]	@ (8003c90 <vTaskStartScheduler+0xc4>)
 8003c42:	f04f 32ff 	mov.w	r2, #4294967295
 8003c46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c48:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <vTaskStartScheduler+0xc8>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c4e:	4b12      	ldr	r3, [pc, #72]	@ (8003c98 <vTaskStartScheduler+0xcc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c54:	f001 f9d4 	bl	8005000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c58:	e00f      	b.n	8003c7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d10b      	bne.n	8003c7a <vTaskStartScheduler+0xae>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60fb      	str	r3, [r7, #12]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <vTaskStartScheduler+0xaa>
}
 8003c7a:	bf00      	nop
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	0800616c 	.word	0x0800616c
 8003c88:	080042bd 	.word	0x080042bd
 8003c8c:	20000d20 	.word	0x20000d20
 8003c90:	20000d1c 	.word	0x20000d1c
 8003c94:	20000d08 	.word	0x20000d08
 8003c98:	20000d00 	.word	0x20000d00

08003c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ca0:	4b04      	ldr	r3, [pc, #16]	@ (8003cb4 <vTaskSuspendAll+0x18>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a03      	ldr	r2, [pc, #12]	@ (8003cb4 <vTaskSuspendAll+0x18>)
 8003ca8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	20000d24 	.word	0x20000d24

08003cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cc6:	4b42      	ldr	r3, [pc, #264]	@ (8003dd0 <xTaskResumeAll+0x118>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	603b      	str	r3, [r7, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	e7fd      	b.n	8003ce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ce6:	f001 fa2f 	bl	8005148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cea:	4b39      	ldr	r3, [pc, #228]	@ (8003dd0 <xTaskResumeAll+0x118>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	4a37      	ldr	r2, [pc, #220]	@ (8003dd0 <xTaskResumeAll+0x118>)
 8003cf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf4:	4b36      	ldr	r3, [pc, #216]	@ (8003dd0 <xTaskResumeAll+0x118>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d162      	bne.n	8003dc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cfc:	4b35      	ldr	r3, [pc, #212]	@ (8003dd4 <xTaskResumeAll+0x11c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d05e      	beq.n	8003dc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d04:	e02f      	b.n	8003d66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d06:	4b34      	ldr	r3, [pc, #208]	@ (8003dd8 <xTaskResumeAll+0x120>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3318      	adds	r3, #24
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fef6 	bl	8002b04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fef1 	bl	8002b04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d26:	4b2d      	ldr	r3, [pc, #180]	@ (8003ddc <xTaskResumeAll+0x124>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d903      	bls.n	8003d36 <xTaskResumeAll+0x7e>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d32:	4a2a      	ldr	r2, [pc, #168]	@ (8003ddc <xTaskResumeAll+0x124>)
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4a27      	ldr	r2, [pc, #156]	@ (8003de0 <xTaskResumeAll+0x128>)
 8003d44:	441a      	add	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f7fe fe7c 	bl	8002a4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d56:	4b23      	ldr	r3, [pc, #140]	@ (8003de4 <xTaskResumeAll+0x12c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003d60:	4b21      	ldr	r3, [pc, #132]	@ (8003de8 <xTaskResumeAll+0x130>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d66:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd8 <xTaskResumeAll+0x120>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1cb      	bne.n	8003d06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d74:	f000 fb58 	bl	8004428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d78:	4b1c      	ldr	r3, [pc, #112]	@ (8003dec <xTaskResumeAll+0x134>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d010      	beq.n	8003da6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d84:	f000 f846 	bl	8003e14 <xTaskIncrementTick>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <xTaskResumeAll+0x130>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f1      	bne.n	8003d84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003da0:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <xTaskResumeAll+0x134>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003da6:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <xTaskResumeAll+0x130>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003db2:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <xTaskResumeAll+0x138>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dc2:	f001 f9f3 	bl	80051ac <vPortExitCritical>

	return xAlreadyYielded;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000d24 	.word	0x20000d24
 8003dd4:	20000cfc 	.word	0x20000cfc
 8003dd8:	20000cbc 	.word	0x20000cbc
 8003ddc:	20000d04 	.word	0x20000d04
 8003de0:	2000082c 	.word	0x2000082c
 8003de4:	20000828 	.word	0x20000828
 8003de8:	20000d10 	.word	0x20000d10
 8003dec:	20000d0c 	.word	0x20000d0c
 8003df0:	e000ed04 	.word	0xe000ed04

08003df4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dfa:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <xTaskGetTickCount+0x1c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e00:	687b      	ldr	r3, [r7, #4]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000d00 	.word	0x20000d00

08003e14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8003f5c <xTaskIncrementTick+0x148>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 8090 	bne.w	8003f48 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e28:	4b4d      	ldr	r3, [pc, #308]	@ (8003f60 <xTaskIncrementTick+0x14c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e30:	4a4b      	ldr	r2, [pc, #300]	@ (8003f60 <xTaskIncrementTick+0x14c>)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d121      	bne.n	8003e80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e3c:	4b49      	ldr	r3, [pc, #292]	@ (8003f64 <xTaskIncrementTick+0x150>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	603b      	str	r3, [r7, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	e7fd      	b.n	8003e5a <xTaskIncrementTick+0x46>
 8003e5e:	4b41      	ldr	r3, [pc, #260]	@ (8003f64 <xTaskIncrementTick+0x150>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	4b40      	ldr	r3, [pc, #256]	@ (8003f68 <xTaskIncrementTick+0x154>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a3e      	ldr	r2, [pc, #248]	@ (8003f64 <xTaskIncrementTick+0x150>)
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f68 <xTaskIncrementTick+0x154>)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4b3e      	ldr	r3, [pc, #248]	@ (8003f6c <xTaskIncrementTick+0x158>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	4a3c      	ldr	r2, [pc, #240]	@ (8003f6c <xTaskIncrementTick+0x158>)
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	f000 fad4 	bl	8004428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e80:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <xTaskIncrementTick+0x15c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d349      	bcc.n	8003f1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e8a:	4b36      	ldr	r3, [pc, #216]	@ (8003f64 <xTaskIncrementTick+0x150>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e94:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <xTaskIncrementTick+0x15c>)
 8003e96:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9a:	601a      	str	r2, [r3, #0]
					break;
 8003e9c:	e03f      	b.n	8003f1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9e:	4b31      	ldr	r3, [pc, #196]	@ (8003f64 <xTaskIncrementTick+0x150>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d203      	bcs.n	8003ebe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8003f70 <xTaskIncrementTick+0x15c>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ebc:	e02f      	b.n	8003f1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fe1e 	bl	8002b04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3318      	adds	r3, #24
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fe15 	bl	8002b04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ede:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <xTaskIncrementTick+0x160>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d903      	bls.n	8003eee <xTaskIncrementTick+0xda>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eea:	4a22      	ldr	r2, [pc, #136]	@ (8003f74 <xTaskIncrementTick+0x160>)
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f78 <xTaskIncrementTick+0x164>)
 8003efc:	441a      	add	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7fe fda0 	bl	8002a4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <xTaskIncrementTick+0x168>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d3b8      	bcc.n	8003e8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f1c:	e7b5      	b.n	8003e8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f1e:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <xTaskIncrementTick+0x168>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f24:	4914      	ldr	r1, [pc, #80]	@ (8003f78 <xTaskIncrementTick+0x164>)
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d901      	bls.n	8003f3a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f3a:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <xTaskIncrementTick+0x16c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e004      	b.n	8003f52 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <xTaskIncrementTick+0x170>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f84 <xTaskIncrementTick+0x170>)
 8003f50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f52:	697b      	ldr	r3, [r7, #20]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000d24 	.word	0x20000d24
 8003f60:	20000d00 	.word	0x20000d00
 8003f64:	20000cb4 	.word	0x20000cb4
 8003f68:	20000cb8 	.word	0x20000cb8
 8003f6c:	20000d14 	.word	0x20000d14
 8003f70:	20000d1c 	.word	0x20000d1c
 8003f74:	20000d04 	.word	0x20000d04
 8003f78:	2000082c 	.word	0x2000082c
 8003f7c:	20000828 	.word	0x20000828
 8003f80:	20000d10 	.word	0x20000d10
 8003f84:	20000d0c 	.word	0x20000d0c

08003f88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f8e:	4b28      	ldr	r3, [pc, #160]	@ (8004030 <vTaskSwitchContext+0xa8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f96:	4b27      	ldr	r3, [pc, #156]	@ (8004034 <vTaskSwitchContext+0xac>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f9c:	e042      	b.n	8004024 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003f9e:	4b25      	ldr	r3, [pc, #148]	@ (8004034 <vTaskSwitchContext+0xac>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa4:	4b24      	ldr	r3, [pc, #144]	@ (8004038 <vTaskSwitchContext+0xb0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e011      	b.n	8003fd0 <vTaskSwitchContext+0x48>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <vTaskSwitchContext+0x42>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	607b      	str	r3, [r7, #4]
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	e7fd      	b.n	8003fc6 <vTaskSwitchContext+0x3e>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	491a      	ldr	r1, [pc, #104]	@ (800403c <vTaskSwitchContext+0xb4>)
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0e3      	beq.n	8003fac <vTaskSwitchContext+0x24>
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4a13      	ldr	r2, [pc, #76]	@ (800403c <vTaskSwitchContext+0xb4>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3308      	adds	r3, #8
 8004006:	429a      	cmp	r2, r3
 8004008:	d104      	bne.n	8004014 <vTaskSwitchContext+0x8c>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	605a      	str	r2, [r3, #4]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4a09      	ldr	r2, [pc, #36]	@ (8004040 <vTaskSwitchContext+0xb8>)
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4a06      	ldr	r2, [pc, #24]	@ (8004038 <vTaskSwitchContext+0xb0>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	20000d24 	.word	0x20000d24
 8004034:	20000d10 	.word	0x20000d10
 8004038:	20000d04 	.word	0x20000d04
 800403c:	2000082c 	.word	0x2000082c
 8004040:	20000828 	.word	0x20000828

08004044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60fb      	str	r3, [r7, #12]
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800406c:	4b07      	ldr	r3, [pc, #28]	@ (800408c <vTaskPlaceOnEventList+0x48>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3318      	adds	r3, #24
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fe fd0c 	bl	8002a92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800407a:	2101      	movs	r1, #1
 800407c:	6838      	ldr	r0, [r7, #0]
 800407e:	f000 fb81 	bl	8004784 <prvAddCurrentTaskToDelayedList>
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000828 	.word	0x20000828

08004090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	617b      	str	r3, [r7, #20]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ba:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3318      	adds	r3, #24
 80040c0:	4619      	mov	r1, r3
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7fe fcc1 	bl	8002a4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	68b8      	ldr	r0, [r7, #8]
 80040d8:	f000 fb54 	bl	8004784 <prvAddCurrentTaskToDelayedList>
	}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000828 	.word	0x20000828

080040e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	60fb      	str	r3, [r7, #12]
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3318      	adds	r3, #24
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fcf2 	bl	8002b04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <xTaskRemoveFromEventList+0xb0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3304      	adds	r3, #4
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fce9 	bl	8002b04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004136:	4b19      	ldr	r3, [pc, #100]	@ (800419c <xTaskRemoveFromEventList+0xb4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d903      	bls.n	8004146 <xTaskRemoveFromEventList+0x5e>
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	4a16      	ldr	r2, [pc, #88]	@ (800419c <xTaskRemoveFromEventList+0xb4>)
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4a13      	ldr	r2, [pc, #76]	@ (80041a0 <xTaskRemoveFromEventList+0xb8>)
 8004154:	441a      	add	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7fe fc74 	bl	8002a4a <vListInsertEnd>
 8004162:	e005      	b.n	8004170 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	3318      	adds	r3, #24
 8004168:	4619      	mov	r1, r3
 800416a:	480e      	ldr	r0, [pc, #56]	@ (80041a4 <xTaskRemoveFromEventList+0xbc>)
 800416c:	f7fe fc6d 	bl	8002a4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004174:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <xTaskRemoveFromEventList+0xc0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d905      	bls.n	800418a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004182:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <xTaskRemoveFromEventList+0xc4>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e001      	b.n	800418e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800418e:	697b      	ldr	r3, [r7, #20]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000d24 	.word	0x20000d24
 800419c:	20000d04 	.word	0x20000d04
 80041a0:	2000082c 	.word	0x2000082c
 80041a4:	20000cbc 	.word	0x20000cbc
 80041a8:	20000828 	.word	0x20000828
 80041ac:	20000d10 	.word	0x20000d10

080041b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <vTaskInternalSetTimeOutState+0x24>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <vTaskInternalSetTimeOutState+0x28>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	605a      	str	r2, [r3, #4]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	20000d14 	.word	0x20000d14
 80041d8:	20000d00 	.word	0x20000d00

080041dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	613b      	str	r3, [r7, #16]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60fb      	str	r3, [r7, #12]
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	e7fd      	b.n	800421e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004222:	f000 ff91 	bl	8005148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004226:	4b1d      	ldr	r3, [pc, #116]	@ (800429c <xTaskCheckForTimeOut+0xc0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d102      	bne.n	8004246 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e023      	b.n	800428e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <xTaskCheckForTimeOut+0xc4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d007      	beq.n	8004262 <xTaskCheckForTimeOut+0x86>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e015      	b.n	800428e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d20b      	bcs.n	8004284 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff99 	bl	80041b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e004      	b.n	800428e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800428e:	f000 ff8d 	bl	80051ac <vPortExitCritical>

	return xReturn;
 8004292:	69fb      	ldr	r3, [r7, #28]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000d00 	.word	0x20000d00
 80042a0:	20000d14 	.word	0x20000d14

080042a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <vTaskMissedYield+0x14>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20000d10 	.word	0x20000d10

080042bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042c4:	f000 f852 	bl	800436c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <prvIdleTask+0x28>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d9f9      	bls.n	80042c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <prvIdleTask+0x2c>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042e0:	e7f0      	b.n	80042c4 <prvIdleTask+0x8>
 80042e2:	bf00      	nop
 80042e4:	2000082c 	.word	0x2000082c
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e00c      	b.n	8004312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a12      	ldr	r2, [pc, #72]	@ (800434c <prvInitialiseTaskLists+0x60>)
 8004304:	4413      	add	r3, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fb72 	bl	80029f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3301      	adds	r3, #1
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b37      	cmp	r3, #55	@ 0x37
 8004316:	d9ef      	bls.n	80042f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004318:	480d      	ldr	r0, [pc, #52]	@ (8004350 <prvInitialiseTaskLists+0x64>)
 800431a:	f7fe fb69 	bl	80029f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800431e:	480d      	ldr	r0, [pc, #52]	@ (8004354 <prvInitialiseTaskLists+0x68>)
 8004320:	f7fe fb66 	bl	80029f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004324:	480c      	ldr	r0, [pc, #48]	@ (8004358 <prvInitialiseTaskLists+0x6c>)
 8004326:	f7fe fb63 	bl	80029f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800432a:	480c      	ldr	r0, [pc, #48]	@ (800435c <prvInitialiseTaskLists+0x70>)
 800432c:	f7fe fb60 	bl	80029f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004330:	480b      	ldr	r0, [pc, #44]	@ (8004360 <prvInitialiseTaskLists+0x74>)
 8004332:	f7fe fb5d 	bl	80029f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004336:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <prvInitialiseTaskLists+0x78>)
 8004338:	4a05      	ldr	r2, [pc, #20]	@ (8004350 <prvInitialiseTaskLists+0x64>)
 800433a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800433c:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <prvInitialiseTaskLists+0x7c>)
 800433e:	4a05      	ldr	r2, [pc, #20]	@ (8004354 <prvInitialiseTaskLists+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	2000082c 	.word	0x2000082c
 8004350:	20000c8c 	.word	0x20000c8c
 8004354:	20000ca0 	.word	0x20000ca0
 8004358:	20000cbc 	.word	0x20000cbc
 800435c:	20000cd0 	.word	0x20000cd0
 8004360:	20000ce8 	.word	0x20000ce8
 8004364:	20000cb4 	.word	0x20000cb4
 8004368:	20000cb8 	.word	0x20000cb8

0800436c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004372:	e019      	b.n	80043a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004374:	f000 fee8 	bl	8005148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <prvCheckTasksWaitingTermination+0x50>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fbbd 	bl	8002b04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a0b      	ldr	r2, [pc, #44]	@ (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 8004392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004394:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 800439c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800439e:	f000 ff05 	bl	80051ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f810 	bl	80043c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e1      	bne.n	8004374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000cd0 	.word	0x20000cd0
 80043c0:	20000cfc 	.word	0x20000cfc
 80043c4:	20000ce4 	.word	0x20000ce4

080043c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d108      	bne.n	80043ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 f8a2 	bl	8005528 <vPortFree>
				vPortFree( pxTCB );
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f001 f89f 	bl	8005528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043ea:	e019      	b.n	8004420 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d103      	bne.n	80043fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 f896 	bl	8005528 <vPortFree>
	}
 80043fc:	e010      	b.n	8004420 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004404:	2b02      	cmp	r3, #2
 8004406:	d00b      	beq.n	8004420 <prvDeleteTCB+0x58>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <prvDeleteTCB+0x54>
	}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800442e:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <prvResetNextTaskUnblockTime+0x38>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004438:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <prvResetNextTaskUnblockTime+0x3c>)
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004440:	e008      	b.n	8004454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004442:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <prvResetNextTaskUnblockTime+0x38>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a04      	ldr	r2, [pc, #16]	@ (8004464 <prvResetNextTaskUnblockTime+0x3c>)
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	20000cb4 	.word	0x20000cb4
 8004464:	20000d1c 	.word	0x20000d1c

08004468 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800446e:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <xTaskGetSchedulerState+0x34>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004476:	2301      	movs	r3, #1
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e008      	b.n	800448e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800447c:	4b08      	ldr	r3, [pc, #32]	@ (80044a0 <xTaskGetSchedulerState+0x38>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004484:	2302      	movs	r3, #2
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	e001      	b.n	800448e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800448e:	687b      	ldr	r3, [r7, #4]
	}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	20000d08 	.word	0x20000d08
 80044a0:	20000d24 	.word	0x20000d24

080044a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d051      	beq.n	800455e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044be:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <xTaskPriorityInherit+0xc4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d241      	bcs.n	800454c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	db06      	blt.n	80044de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	4b25      	ldr	r3, [pc, #148]	@ (8004568 <xTaskPriorityInherit+0xc4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6959      	ldr	r1, [r3, #20]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4a1f      	ldr	r2, [pc, #124]	@ (800456c <xTaskPriorityInherit+0xc8>)
 80044f0:	4413      	add	r3, r2
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d122      	bne.n	800453c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fb02 	bl	8002b04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004500:	4b19      	ldr	r3, [pc, #100]	@ (8004568 <xTaskPriorityInherit+0xc4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450e:	4b18      	ldr	r3, [pc, #96]	@ (8004570 <xTaskPriorityInherit+0xcc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d903      	bls.n	800451e <xTaskPriorityInherit+0x7a>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	4a15      	ldr	r2, [pc, #84]	@ (8004570 <xTaskPriorityInherit+0xcc>)
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4a10      	ldr	r2, [pc, #64]	@ (800456c <xTaskPriorityInherit+0xc8>)
 800452c:	441a      	add	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7fe fa88 	bl	8002a4a <vListInsertEnd>
 800453a:	e004      	b.n	8004546 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800453c:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <xTaskPriorityInherit+0xc4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e008      	b.n	800455e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004550:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <xTaskPriorityInherit+0xc4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	429a      	cmp	r2, r3
 8004558:	d201      	bcs.n	800455e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800455e:	68fb      	ldr	r3, [r7, #12]
	}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000828 	.word	0x20000828
 800456c:	2000082c 	.word	0x2000082c
 8004570:	20000d04 	.word	0x20000d04

08004574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d058      	beq.n	800463c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800458a:	4b2f      	ldr	r3, [pc, #188]	@ (8004648 <xTaskPriorityDisinherit+0xd4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d00b      	beq.n	80045ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	60bb      	str	r3, [r7, #8]
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d0:	1e5a      	subs	r2, r3, #1
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045de:	429a      	cmp	r2, r3
 80045e0:	d02c      	beq.n	800463c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d128      	bne.n	800463c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fa88 	bl	8002b04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460c:	4b0f      	ldr	r3, [pc, #60]	@ (800464c <xTaskPriorityDisinherit+0xd8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d903      	bls.n	800461c <xTaskPriorityDisinherit+0xa8>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	4a0c      	ldr	r2, [pc, #48]	@ (800464c <xTaskPriorityDisinherit+0xd8>)
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4a09      	ldr	r2, [pc, #36]	@ (8004650 <xTaskPriorityDisinherit+0xdc>)
 800462a:	441a      	add	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7fe fa09 	bl	8002a4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004638:	2301      	movs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800463c:	697b      	ldr	r3, [r7, #20]
	}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000828 	.word	0x20000828
 800464c:	20000d04 	.word	0x20000d04
 8004650:	2000082c 	.word	0x2000082c

08004654 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d06c      	beq.n	8004746 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	60fb      	str	r3, [r7, #12]
}
 8004686:	bf00      	nop
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d902      	bls.n	800469c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e002      	b.n	80046a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d04c      	beq.n	8004746 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d147      	bne.n	8004746 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046b6:	4b26      	ldr	r3, [pc, #152]	@ (8004750 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d10b      	bne.n	80046d8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60bb      	str	r3, [r7, #8]
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	db04      	blt.n	80046f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	6959      	ldr	r1, [r3, #20]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4a13      	ldr	r2, [pc, #76]	@ (8004754 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004706:	4413      	add	r3, r2
 8004708:	4299      	cmp	r1, r3
 800470a:	d11c      	bne.n	8004746 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	3304      	adds	r3, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe f9f7 	bl	8002b04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471a:	4b0f      	ldr	r3, [pc, #60]	@ (8004758 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d903      	bls.n	800472a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	4a0c      	ldr	r2, [pc, #48]	@ (8004758 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4a07      	ldr	r2, [pc, #28]	@ (8004754 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004738:	441a      	add	r2, r3
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	3304      	adds	r3, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7fe f982 	bl	8002a4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004746:	bf00      	nop
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000828 	.word	0x20000828
 8004754:	2000082c 	.word	0x2000082c
 8004758:	20000d04 	.word	0x20000d04

0800475c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004760:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <pvTaskIncrementMutexHeldCount+0x24>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004768:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <pvTaskIncrementMutexHeldCount+0x24>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800476e:	3201      	adds	r2, #1
 8004770:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004772:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <pvTaskIncrementMutexHeldCount+0x24>)
 8004774:	681b      	ldr	r3, [r3, #0]
	}
 8004776:	4618      	mov	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	20000828 	.word	0x20000828

08004784 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800478e:	4b21      	ldr	r3, [pc, #132]	@ (8004814 <prvAddCurrentTaskToDelayedList+0x90>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004794:	4b20      	ldr	r3, [pc, #128]	@ (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe f9b2 	bl	8002b04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d10a      	bne.n	80047be <prvAddCurrentTaskToDelayedList+0x3a>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4819      	ldr	r0, [pc, #100]	@ (800481c <prvAddCurrentTaskToDelayedList+0x98>)
 80047b8:	f7fe f947 	bl	8002a4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047bc:	e026      	b.n	800480c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4413      	add	r3, r2
 80047c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047c6:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d209      	bcs.n	80047ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d6:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7fe f955 	bl	8002a92 <vListInsert>
}
 80047e8:	e010      	b.n	800480c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004824 <prvAddCurrentTaskToDelayedList+0xa0>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe f94b 	bl	8002a92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	429a      	cmp	r2, r3
 8004804:	d202      	bcs.n	800480c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004806:	4a08      	ldr	r2, [pc, #32]	@ (8004828 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6013      	str	r3, [r2, #0]
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000d00 	.word	0x20000d00
 8004818:	20000828 	.word	0x20000828
 800481c:	20000ce8 	.word	0x20000ce8
 8004820:	20000cb8 	.word	0x20000cb8
 8004824:	20000cb4 	.word	0x20000cb4
 8004828:	20000d1c 	.word	0x20000d1c

0800482c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	@ 0x28
 8004830:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004836:	f000 fb13 	bl	8004e60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800483a:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <xTimerCreateTimerTask+0x84>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d021      	beq.n	8004886 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800484a:	1d3a      	adds	r2, r7, #4
 800484c:	f107 0108 	add.w	r1, r7, #8
 8004850:	f107 030c 	add.w	r3, r7, #12
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe f8b1 	bl	80029bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	9202      	str	r2, [sp, #8]
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	2302      	movs	r3, #2
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	460a      	mov	r2, r1
 800486c:	4911      	ldr	r1, [pc, #68]	@ (80048b4 <xTimerCreateTimerTask+0x88>)
 800486e:	4812      	ldr	r0, [pc, #72]	@ (80048b8 <xTimerCreateTimerTask+0x8c>)
 8004870:	f7fe ffd0 	bl	8003814 <xTaskCreateStatic>
 8004874:	4603      	mov	r3, r0
 8004876:	4a11      	ldr	r2, [pc, #68]	@ (80048bc <xTimerCreateTimerTask+0x90>)
 8004878:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800487a:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <xTimerCreateTimerTask+0x90>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004882:	2301      	movs	r3, #1
 8004884:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10b      	bne.n	80048a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	613b      	str	r3, [r7, #16]
}
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	e7fd      	b.n	80048a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048a4:	697b      	ldr	r3, [r7, #20]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000d58 	.word	0x20000d58
 80048b4:	08006174 	.word	0x08006174
 80048b8:	080049f9 	.word	0x080049f9
 80048bc:	20000d5c 	.word	0x20000d5c

080048c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	@ 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <xTimerGenericCommand+0x30>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	623b      	str	r3, [r7, #32]
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	e7fd      	b.n	80048ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048f0:	4b19      	ldr	r3, [pc, #100]	@ (8004958 <xTimerGenericCommand+0x98>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02a      	beq.n	800494e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b05      	cmp	r3, #5
 8004908:	dc18      	bgt.n	800493c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800490a:	f7ff fdad 	bl	8004468 <xTaskGetSchedulerState>
 800490e:	4603      	mov	r3, r0
 8004910:	2b02      	cmp	r3, #2
 8004912:	d109      	bne.n	8004928 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004914:	4b10      	ldr	r3, [pc, #64]	@ (8004958 <xTimerGenericCommand+0x98>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	f107 0110 	add.w	r1, r7, #16
 800491c:	2300      	movs	r3, #0
 800491e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004920:	f7fe fa60 	bl	8002de4 <xQueueGenericSend>
 8004924:	6278      	str	r0, [r7, #36]	@ 0x24
 8004926:	e012      	b.n	800494e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <xTimerGenericCommand+0x98>)
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	f107 0110 	add.w	r1, r7, #16
 8004930:	2300      	movs	r3, #0
 8004932:	2200      	movs	r2, #0
 8004934:	f7fe fa56 	bl	8002de4 <xQueueGenericSend>
 8004938:	6278      	str	r0, [r7, #36]	@ 0x24
 800493a:	e008      	b.n	800494e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800493c:	4b06      	ldr	r3, [pc, #24]	@ (8004958 <xTimerGenericCommand+0x98>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	f107 0110 	add.w	r1, r7, #16
 8004944:	2300      	movs	r3, #0
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	f7fe fb4e 	bl	8002fe8 <xQueueGenericSendFromISR>
 800494c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004950:	4618      	mov	r0, r3
 8004952:	3728      	adds	r7, #40	@ 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000d58 	.word	0x20000d58

0800495c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004966:	4b23      	ldr	r3, [pc, #140]	@ (80049f4 <prvProcessExpiredTimer+0x98>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3304      	adds	r3, #4
 8004974:	4618      	mov	r0, r3
 8004976:	f7fe f8c5 	bl	8002b04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d023      	beq.n	80049d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	18d1      	adds	r1, r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	6978      	ldr	r0, [r7, #20]
 8004996:	f000 f8d5 	bl	8004b44 <prvInsertTimerInActiveList>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049a0:	2300      	movs	r3, #0
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	2100      	movs	r1, #0
 80049aa:	6978      	ldr	r0, [r7, #20]
 80049ac:	f7ff ff88 	bl	80048c0 <xTimerGenericCommand>
 80049b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d114      	bne.n	80049e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	60fb      	str	r3, [r7, #12]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	4798      	blx	r3
}
 80049ea:	bf00      	nop
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000d50 	.word	0x20000d50

080049f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f859 	bl	8004abc <prvGetNextExpireTime>
 8004a0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f805 	bl	8004a20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a16:	f000 f8d7 	bl	8004bc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a1a:	bf00      	nop
 8004a1c:	e7f0      	b.n	8004a00 <prvTimerTask+0x8>
	...

08004a20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a2a:	f7ff f937 	bl	8003c9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f866 	bl	8004b04 <prvSampleTimeNow>
 8004a38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d130      	bne.n	8004aa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <prvProcessTimerOrBlockTask+0x3c>
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d806      	bhi.n	8004a5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a4e:	f7ff f933 	bl	8003cb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff ff81 	bl	800495c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a5a:	e024      	b.n	8004aa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a62:	4b13      	ldr	r3, [pc, #76]	@ (8004ab0 <prvProcessTimerOrBlockTask+0x90>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <prvProcessTimerOrBlockTask+0x50>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <prvProcessTimerOrBlockTask+0x52>
 8004a70:	2300      	movs	r3, #0
 8004a72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a74:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab4 <prvProcessTimerOrBlockTask+0x94>)
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	f7fe fe93 	bl	80037ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a86:	f7ff f917 	bl	8003cb8 <xTaskResumeAll>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a90:	4b09      	ldr	r3, [pc, #36]	@ (8004ab8 <prvProcessTimerOrBlockTask+0x98>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
}
 8004aa0:	e001      	b.n	8004aa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004aa2:	f7ff f909 	bl	8003cb8 <xTaskResumeAll>
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000d54 	.word	0x20000d54
 8004ab4:	20000d58 	.word	0x20000d58
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b00 <prvGetNextExpireTime+0x44>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <prvGetNextExpireTime+0x16>
 8004ace:	2201      	movs	r2, #1
 8004ad0:	e000      	b.n	8004ad4 <prvGetNextExpireTime+0x18>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ae0:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <prvGetNextExpireTime+0x44>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e001      	b.n	8004af0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004af0:	68fb      	ldr	r3, [r7, #12]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000d50 	.word	0x20000d50

08004b04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b0c:	f7ff f972 	bl	8003df4 <xTaskGetTickCount>
 8004b10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b12:	4b0b      	ldr	r3, [pc, #44]	@ (8004b40 <prvSampleTimeNow+0x3c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d205      	bcs.n	8004b28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b1c:	f000 f93a 	bl	8004d94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e002      	b.n	8004b2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b2e:	4a04      	ldr	r2, [pc, #16]	@ (8004b40 <prvSampleTimeNow+0x3c>)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b34:	68fb      	ldr	r3, [r7, #12]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000d60 	.word	0x20000d60

08004b44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d812      	bhi.n	8004b90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d302      	bcc.n	8004b7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e01b      	b.n	8004bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b7e:	4b10      	ldr	r3, [pc, #64]	@ (8004bc0 <prvInsertTimerInActiveList+0x7c>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fd ff82 	bl	8002a92 <vListInsert>
 8004b8e:	e012      	b.n	8004bb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d206      	bcs.n	8004ba6 <prvInsertTimerInActiveList+0x62>
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e007      	b.n	8004bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ba6:	4b07      	ldr	r3, [pc, #28]	@ (8004bc4 <prvInsertTimerInActiveList+0x80>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7fd ff6e 	bl	8002a92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bb6:	697b      	ldr	r3, [r7, #20]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000d54 	.word	0x20000d54
 8004bc4:	20000d50 	.word	0x20000d50

08004bc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08e      	sub	sp, #56	@ 0x38
 8004bcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bce:	e0ce      	b.n	8004d6e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da19      	bge.n	8004c0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bd6:	1d3b      	adds	r3, r7, #4
 8004bd8:	3304      	adds	r3, #4
 8004bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	61fb      	str	r3, [r7, #28]
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	e7fd      	b.n	8004bf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c00:	6850      	ldr	r0, [r2, #4]
 8004c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c04:	6892      	ldr	r2, [r2, #8]
 8004c06:	4611      	mov	r1, r2
 8004c08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f2c0 80ae 	blt.w	8004d6e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fd ff6e 	bl	8002b04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c28:	463b      	mov	r3, r7
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ff6a 	bl	8004b04 <prvSampleTimeNow>
 8004c30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b09      	cmp	r3, #9
 8004c36:	f200 8097 	bhi.w	8004d68 <prvProcessReceivedCommands+0x1a0>
 8004c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <prvProcessReceivedCommands+0x78>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c69 	.word	0x08004c69
 8004c4c:	08004cdf 	.word	0x08004cdf
 8004c50:	08004cf3 	.word	0x08004cf3
 8004c54:	08004d3f 	.word	0x08004d3f
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c69 	.word	0x08004c69
 8004c60:	08004cdf 	.word	0x08004cdf
 8004c64:	08004cf3 	.word	0x08004cf3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	18d1      	adds	r1, r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c88:	f7ff ff5c 	bl	8004b44 <prvInsertTimerInActiveList>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d06c      	beq.n	8004d6c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d061      	beq.n	8004d6c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	441a      	add	r2, r3
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cba:	f7ff fe01 	bl	80048c0 <xTimerGenericCommand>
 8004cbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d152      	bne.n	8004d6c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	61bb      	str	r3, [r7, #24]
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004cf0:	e03d      	b.n	8004d6e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	617b      	str	r3, [r7, #20]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	699a      	ldr	r2, [r3, #24]
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	18d1      	adds	r1, r2, r3
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d38:	f7ff ff04 	bl	8004b44 <prvInsertTimerInActiveList>
					break;
 8004d3c:	e017      	b.n	8004d6e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d4e:	f000 fbeb 	bl	8005528 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d52:	e00c      	b.n	8004d6e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d66:	e002      	b.n	8004d6e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004d68:	bf00      	nop
 8004d6a:	e000      	b.n	8004d6e <prvProcessReceivedCommands+0x1a6>
					break;
 8004d6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d6e:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <prvProcessReceivedCommands+0x1c8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	1d39      	adds	r1, r7, #4
 8004d74:	2200      	movs	r2, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe f9d4 	bl	8003124 <xQueueReceive>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f47f af26 	bne.w	8004bd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3730      	adds	r7, #48	@ 0x30
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000d58 	.word	0x20000d58

08004d94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d9a:	e049      	b.n	8004e30 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e58 <prvSwitchTimerLists+0xc4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e58 <prvSwitchTimerLists+0xc4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3304      	adds	r3, #4
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fd fea5 	bl	8002b04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02f      	beq.n	8004e30 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d90e      	bls.n	8004e00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dee:	4b1a      	ldr	r3, [pc, #104]	@ (8004e58 <prvSwitchTimerLists+0xc4>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f7fd fe4a 	bl	8002a92 <vListInsert>
 8004dfe:	e017      	b.n	8004e30 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e00:	2300      	movs	r3, #0
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	2100      	movs	r1, #0
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f7ff fd58 	bl	80048c0 <xTimerGenericCommand>
 8004e10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	603b      	str	r3, [r7, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e30:	4b09      	ldr	r3, [pc, #36]	@ (8004e58 <prvSwitchTimerLists+0xc4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1b0      	bne.n	8004d9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e3a:	4b07      	ldr	r3, [pc, #28]	@ (8004e58 <prvSwitchTimerLists+0xc4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e40:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <prvSwitchTimerLists+0xc8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a04      	ldr	r2, [pc, #16]	@ (8004e58 <prvSwitchTimerLists+0xc4>)
 8004e46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e48:	4a04      	ldr	r2, [pc, #16]	@ (8004e5c <prvSwitchTimerLists+0xc8>)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000d50 	.word	0x20000d50
 8004e5c:	20000d54 	.word	0x20000d54

08004e60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e66:	f000 f96f 	bl	8005148 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <prvCheckForValidListAndQueue+0x60>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d120      	bne.n	8004eb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e72:	4814      	ldr	r0, [pc, #80]	@ (8004ec4 <prvCheckForValidListAndQueue+0x64>)
 8004e74:	f7fd fdbc 	bl	80029f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e78:	4813      	ldr	r0, [pc, #76]	@ (8004ec8 <prvCheckForValidListAndQueue+0x68>)
 8004e7a:	f7fd fdb9 	bl	80029f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	@ (8004ecc <prvCheckForValidListAndQueue+0x6c>)
 8004e80:	4a10      	ldr	r2, [pc, #64]	@ (8004ec4 <prvCheckForValidListAndQueue+0x64>)
 8004e82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e84:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <prvCheckForValidListAndQueue+0x70>)
 8004e86:	4a10      	ldr	r2, [pc, #64]	@ (8004ec8 <prvCheckForValidListAndQueue+0x68>)
 8004e88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <prvCheckForValidListAndQueue+0x74>)
 8004e90:	4a11      	ldr	r2, [pc, #68]	@ (8004ed8 <prvCheckForValidListAndQueue+0x78>)
 8004e92:	2110      	movs	r1, #16
 8004e94:	200a      	movs	r0, #10
 8004e96:	f7fd fec9 	bl	8002c2c <xQueueGenericCreateStatic>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4a08      	ldr	r2, [pc, #32]	@ (8004ec0 <prvCheckForValidListAndQueue+0x60>)
 8004e9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <prvCheckForValidListAndQueue+0x60>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <prvCheckForValidListAndQueue+0x60>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	490b      	ldr	r1, [pc, #44]	@ (8004edc <prvCheckForValidListAndQueue+0x7c>)
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fc52 	bl	8003758 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004eb4:	f000 f97a 	bl	80051ac <vPortExitCritical>
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000d58 	.word	0x20000d58
 8004ec4:	20000d28 	.word	0x20000d28
 8004ec8:	20000d3c 	.word	0x20000d3c
 8004ecc:	20000d50 	.word	0x20000d50
 8004ed0:	20000d54 	.word	0x20000d54
 8004ed4:	20000e04 	.word	0x20000e04
 8004ed8:	20000d64 	.word	0x20000d64
 8004edc:	0800617c 	.word	0x0800617c

08004ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b04      	subs	r3, #4
 8004f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f10:	4a0c      	ldr	r2, [pc, #48]	@ (8004f44 <pxPortInitialiseStack+0x64>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b14      	subs	r3, #20
 8004f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b04      	subs	r3, #4
 8004f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f06f 0202 	mvn.w	r2, #2
 8004f2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3b20      	subs	r3, #32
 8004f34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	08004f49 	.word	0x08004f49

08004f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f52:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <prvTaskExitError+0x58>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d00b      	beq.n	8004f74 <prvTaskExitError+0x2c>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60fb      	str	r3, [r7, #12]
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	e7fd      	b.n	8004f70 <prvTaskExitError+0x28>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	60bb      	str	r3, [r7, #8]
}
 8004f86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f88:	bf00      	nop
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0fc      	beq.n	8004f8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	2000000c 	.word	0x2000000c
	...

08004fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fb0:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <pxCurrentTCBConst2>)
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	6808      	ldr	r0, [r1, #0]
 8004fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f380 8809 	msr	PSP, r0
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8811 	msr	BASEPRI, r0
 8004fca:	4770      	bx	lr
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst2>:
 8004fd0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fd8:	4808      	ldr	r0, [pc, #32]	@ (8004ffc <prvPortStartFirstTask+0x24>)
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	6800      	ldr	r0, [r0, #0]
 8004fde:	f380 8808 	msr	MSP, r0
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8814 	msr	CONTROL, r0
 8004fea:	b662      	cpsie	i
 8004fec:	b661      	cpsie	f
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	df00      	svc	0
 8004ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ffa:	bf00      	nop
 8004ffc:	e000ed08 	.word	0xe000ed08

08005000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005006:	4b47      	ldr	r3, [pc, #284]	@ (8005124 <xPortStartScheduler+0x124>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a47      	ldr	r2, [pc, #284]	@ (8005128 <xPortStartScheduler+0x128>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10b      	bne.n	8005028 <xPortStartScheduler+0x28>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	613b      	str	r3, [r7, #16]
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005028:	4b3e      	ldr	r3, [pc, #248]	@ (8005124 <xPortStartScheduler+0x124>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a3f      	ldr	r2, [pc, #252]	@ (800512c <xPortStartScheduler+0x12c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d10b      	bne.n	800504a <xPortStartScheduler+0x4a>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60fb      	str	r3, [r7, #12]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800504a:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <xPortStartScheduler+0x130>)
 800504c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	22ff      	movs	r2, #255	@ 0xff
 800505a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b31      	ldr	r3, [pc, #196]	@ (8005134 <xPortStartScheduler+0x134>)
 8005070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005072:	4b31      	ldr	r3, [pc, #196]	@ (8005138 <xPortStartScheduler+0x138>)
 8005074:	2207      	movs	r2, #7
 8005076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005078:	e009      	b.n	800508e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800507a:	4b2f      	ldr	r3, [pc, #188]	@ (8005138 <xPortStartScheduler+0x138>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3b01      	subs	r3, #1
 8005080:	4a2d      	ldr	r2, [pc, #180]	@ (8005138 <xPortStartScheduler+0x138>)
 8005082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005096:	2b80      	cmp	r3, #128	@ 0x80
 8005098:	d0ef      	beq.n	800507a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800509a:	4b27      	ldr	r3, [pc, #156]	@ (8005138 <xPortStartScheduler+0x138>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1c3 0307 	rsb	r3, r3, #7
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d00b      	beq.n	80050be <xPortStartScheduler+0xbe>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60bb      	str	r3, [r7, #8]
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	e7fd      	b.n	80050ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050be:	4b1e      	ldr	r3, [pc, #120]	@ (8005138 <xPortStartScheduler+0x138>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005138 <xPortStartScheduler+0x138>)
 80050c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005138 <xPortStartScheduler+0x138>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050d0:	4a19      	ldr	r2, [pc, #100]	@ (8005138 <xPortStartScheduler+0x138>)
 80050d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050dc:	4b17      	ldr	r3, [pc, #92]	@ (800513c <xPortStartScheduler+0x13c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a16      	ldr	r2, [pc, #88]	@ (800513c <xPortStartScheduler+0x13c>)
 80050e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050e8:	4b14      	ldr	r3, [pc, #80]	@ (800513c <xPortStartScheduler+0x13c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a13      	ldr	r2, [pc, #76]	@ (800513c <xPortStartScheduler+0x13c>)
 80050ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050f4:	f000 f8da 	bl	80052ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050f8:	4b11      	ldr	r3, [pc, #68]	@ (8005140 <xPortStartScheduler+0x140>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050fe:	f000 f8f9 	bl	80052f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005102:	4b10      	ldr	r3, [pc, #64]	@ (8005144 <xPortStartScheduler+0x144>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a0f      	ldr	r2, [pc, #60]	@ (8005144 <xPortStartScheduler+0x144>)
 8005108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800510c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800510e:	f7ff ff63 	bl	8004fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005112:	f7fe ff39 	bl	8003f88 <vTaskSwitchContext>
	prvTaskExitError();
 8005116:	f7ff ff17 	bl	8004f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	e000ed00 	.word	0xe000ed00
 8005128:	410fc271 	.word	0x410fc271
 800512c:	410fc270 	.word	0x410fc270
 8005130:	e000e400 	.word	0xe000e400
 8005134:	20000e54 	.word	0x20000e54
 8005138:	20000e58 	.word	0x20000e58
 800513c:	e000ed20 	.word	0xe000ed20
 8005140:	2000000c 	.word	0x2000000c
 8005144:	e000ef34 	.word	0xe000ef34

08005148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
}
 8005160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005162:	4b10      	ldr	r3, [pc, #64]	@ (80051a4 <vPortEnterCritical+0x5c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3301      	adds	r3, #1
 8005168:	4a0e      	ldr	r2, [pc, #56]	@ (80051a4 <vPortEnterCritical+0x5c>)
 800516a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800516c:	4b0d      	ldr	r3, [pc, #52]	@ (80051a4 <vPortEnterCritical+0x5c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d110      	bne.n	8005196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005174:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <vPortEnterCritical+0x60>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <vPortEnterCritical+0x4e>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	603b      	str	r3, [r7, #0]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <vPortEnterCritical+0x4a>
	}
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	2000000c 	.word	0x2000000c
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051b2:	4b12      	ldr	r3, [pc, #72]	@ (80051fc <vPortExitCritical+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <vPortExitCritical+0x26>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	607b      	str	r3, [r7, #4]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <vPortExitCritical+0x50>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <vPortExitCritical+0x50>)
 80051da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051dc:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <vPortExitCritical+0x50>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <vPortExitCritical+0x44>
 80051e4:	2300      	movs	r3, #0
 80051e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f383 8811 	msr	BASEPRI, r3
}
 80051ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	2000000c 	.word	0x2000000c

08005200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f01e 0f10 	tst.w	lr, #16
 8005210:	bf08      	it	eq
 8005212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005224:	f380 8811 	msr	BASEPRI, r0
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f7fe feaa 	bl	8003f88 <vTaskSwitchContext>
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f380 8811 	msr	BASEPRI, r0
 800523c:	bc09      	pop	{r0, r3}
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	6808      	ldr	r0, [r1, #0]
 8005242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005246:	f01e 0f10 	tst.w	lr, #16
 800524a:	bf08      	it	eq
 800524c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005250:	f380 8809 	msr	PSP, r0
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst>:
 8005260:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
}
 8005280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005282:	f7fe fdc7 	bl	8003e14 <xTaskIncrementTick>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800528c:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <xPortSysTickHandler+0x40>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f383 8811 	msr	BASEPRI, r3
}
 800529e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052b0:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <vPortSetupTimerInterrupt+0x34>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b6:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <vPortSetupTimerInterrupt+0x38>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	@ (80052e8 <vPortSetupTimerInterrupt+0x3c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	@ (80052ec <vPortSetupTimerInterrupt+0x40>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	099b      	lsrs	r3, r3, #6
 80052c8:	4a09      	ldr	r2, [pc, #36]	@ (80052f0 <vPortSetupTimerInterrupt+0x44>)
 80052ca:	3b01      	subs	r3, #1
 80052cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ce:	4b04      	ldr	r3, [pc, #16]	@ (80052e0 <vPortSetupTimerInterrupt+0x34>)
 80052d0:	2207      	movs	r2, #7
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	e000e010 	.word	0xe000e010
 80052e4:	e000e018 	.word	0xe000e018
 80052e8:	20000000 	.word	0x20000000
 80052ec:	10624dd3 	.word	0x10624dd3
 80052f0:	e000e014 	.word	0xe000e014

080052f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005304 <vPortEnableVFP+0x10>
 80052f8:	6801      	ldr	r1, [r0, #0]
 80052fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80052fe:	6001      	str	r1, [r0, #0]
 8005300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005302:	bf00      	nop
 8005304:	e000ed88 	.word	0xe000ed88

08005308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800530e:	f3ef 8305 	mrs	r3, IPSR
 8005312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d915      	bls.n	8005346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800531a:	4a18      	ldr	r2, [pc, #96]	@ (800537c <vPortValidateInterruptPriority+0x74>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005324:	4b16      	ldr	r3, [pc, #88]	@ (8005380 <vPortValidateInterruptPriority+0x78>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	7afa      	ldrb	r2, [r7, #11]
 800532a:	429a      	cmp	r2, r3
 800532c:	d20b      	bcs.n	8005346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	e7fd      	b.n	8005342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005346:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <vPortValidateInterruptPriority+0x7c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800534e:	4b0e      	ldr	r3, [pc, #56]	@ (8005388 <vPortValidateInterruptPriority+0x80>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d90b      	bls.n	800536e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	603b      	str	r3, [r7, #0]
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	e7fd      	b.n	800536a <vPortValidateInterruptPriority+0x62>
	}
 800536e:	bf00      	nop
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	e000e3f0 	.word	0xe000e3f0
 8005380:	20000e54 	.word	0x20000e54
 8005384:	e000ed0c 	.word	0xe000ed0c
 8005388:	20000e58 	.word	0x20000e58

0800538c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08a      	sub	sp, #40	@ 0x28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005398:	f7fe fc80 	bl	8003c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800539c:	4b5c      	ldr	r3, [pc, #368]	@ (8005510 <pvPortMalloc+0x184>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053a4:	f000 f924 	bl	80055f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005514 <pvPortMalloc+0x188>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4013      	ands	r3, r2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f040 8095 	bne.w	80054e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01e      	beq.n	80053fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053bc:	2208      	movs	r2, #8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d015      	beq.n	80053fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f023 0307 	bic.w	r3, r3, #7
 80053d4:	3308      	adds	r3, #8
 80053d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <pvPortMalloc+0x6e>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	617b      	str	r3, [r7, #20]
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d06f      	beq.n	80054e0 <pvPortMalloc+0x154>
 8005400:	4b45      	ldr	r3, [pc, #276]	@ (8005518 <pvPortMalloc+0x18c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d86a      	bhi.n	80054e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800540a:	4b44      	ldr	r3, [pc, #272]	@ (800551c <pvPortMalloc+0x190>)
 800540c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800540e:	4b43      	ldr	r3, [pc, #268]	@ (800551c <pvPortMalloc+0x190>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005414:	e004      	b.n	8005420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	429a      	cmp	r2, r3
 8005428:	d903      	bls.n	8005432 <pvPortMalloc+0xa6>
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f1      	bne.n	8005416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005432:	4b37      	ldr	r3, [pc, #220]	@ (8005510 <pvPortMalloc+0x184>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005438:	429a      	cmp	r2, r3
 800543a:	d051      	beq.n	80054e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2208      	movs	r2, #8
 8005442:	4413      	add	r3, r2
 8005444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	1ad2      	subs	r2, r2, r3
 8005456:	2308      	movs	r3, #8
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	429a      	cmp	r2, r3
 800545c:	d920      	bls.n	80054a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800545e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4413      	add	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <pvPortMalloc+0xfc>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	613b      	str	r3, [r7, #16]
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800549a:	69b8      	ldr	r0, [r7, #24]
 800549c:	f000 f90a 	bl	80056b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005518 <pvPortMalloc+0x18c>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005518 <pvPortMalloc+0x18c>)
 80054ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005518 <pvPortMalloc+0x18c>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005520 <pvPortMalloc+0x194>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d203      	bcs.n	80054c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054ba:	4b17      	ldr	r3, [pc, #92]	@ (8005518 <pvPortMalloc+0x18c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a18      	ldr	r2, [pc, #96]	@ (8005520 <pvPortMalloc+0x194>)
 80054c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	4b13      	ldr	r3, [pc, #76]	@ (8005514 <pvPortMalloc+0x188>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054d6:	4b13      	ldr	r3, [pc, #76]	@ (8005524 <pvPortMalloc+0x198>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3301      	adds	r3, #1
 80054dc:	4a11      	ldr	r2, [pc, #68]	@ (8005524 <pvPortMalloc+0x198>)
 80054de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054e0:	f7fe fbea 	bl	8003cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <pvPortMalloc+0x17a>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60fb      	str	r3, [r7, #12]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <pvPortMalloc+0x176>
	return pvReturn;
 8005506:	69fb      	ldr	r3, [r7, #28]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3728      	adds	r7, #40	@ 0x28
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20004a64 	.word	0x20004a64
 8005514:	20004a78 	.word	0x20004a78
 8005518:	20004a68 	.word	0x20004a68
 800551c:	20004a5c 	.word	0x20004a5c
 8005520:	20004a6c 	.word	0x20004a6c
 8005524:	20004a70 	.word	0x20004a70

08005528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d04f      	beq.n	80055da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800553a:	2308      	movs	r3, #8
 800553c:	425b      	negs	r3, r3
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	4b25      	ldr	r3, [pc, #148]	@ (80055e4 <vPortFree+0xbc>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <vPortFree+0x46>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60fb      	str	r3, [r7, #12]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <vPortFree+0x66>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	60bb      	str	r3, [r7, #8]
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	e7fd      	b.n	800558a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	4b14      	ldr	r3, [pc, #80]	@ (80055e4 <vPortFree+0xbc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01e      	beq.n	80055da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d11a      	bne.n	80055da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	4b0e      	ldr	r3, [pc, #56]	@ (80055e4 <vPortFree+0xbc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	401a      	ands	r2, r3
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055b4:	f7fe fb72 	bl	8003c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <vPortFree+0xc0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4413      	add	r3, r2
 80055c2:	4a09      	ldr	r2, [pc, #36]	@ (80055e8 <vPortFree+0xc0>)
 80055c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055c6:	6938      	ldr	r0, [r7, #16]
 80055c8:	f000 f874 	bl	80056b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055cc:	4b07      	ldr	r3, [pc, #28]	@ (80055ec <vPortFree+0xc4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a06      	ldr	r2, [pc, #24]	@ (80055ec <vPortFree+0xc4>)
 80055d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055d6:	f7fe fb6f 	bl	8003cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055da:	bf00      	nop
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20004a78 	.word	0x20004a78
 80055e8:	20004a68 	.word	0x20004a68
 80055ec:	20004a74 	.word	0x20004a74

080055f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80055fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055fc:	4b27      	ldr	r3, [pc, #156]	@ (800569c <prvHeapInit+0xac>)
 80055fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00c      	beq.n	8005624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3307      	adds	r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0307 	bic.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	4a1f      	ldr	r2, [pc, #124]	@ (800569c <prvHeapInit+0xac>)
 8005620:	4413      	add	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005628:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <prvHeapInit+0xb0>)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800562e:	4b1c      	ldr	r3, [pc, #112]	@ (80056a0 <prvHeapInit+0xb0>)
 8005630:	2200      	movs	r2, #0
 8005632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	4413      	add	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800563c:	2208      	movs	r2, #8
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0307 	bic.w	r3, r3, #7
 800564a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <prvHeapInit+0xb4>)
 8005650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005652:	4b14      	ldr	r3, [pc, #80]	@ (80056a4 <prvHeapInit+0xb4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800565a:	4b12      	ldr	r3, [pc, #72]	@ (80056a4 <prvHeapInit+0xb4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005670:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <prvHeapInit+0xb4>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4a0a      	ldr	r2, [pc, #40]	@ (80056a8 <prvHeapInit+0xb8>)
 800567e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4a09      	ldr	r2, [pc, #36]	@ (80056ac <prvHeapInit+0xbc>)
 8005686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005688:	4b09      	ldr	r3, [pc, #36]	@ (80056b0 <prvHeapInit+0xc0>)
 800568a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800568e:	601a      	str	r2, [r3, #0]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20000e5c 	.word	0x20000e5c
 80056a0:	20004a5c 	.word	0x20004a5c
 80056a4:	20004a64 	.word	0x20004a64
 80056a8:	20004a6c 	.word	0x20004a6c
 80056ac:	20004a68 	.word	0x20004a68
 80056b0:	20004a78 	.word	0x20004a78

080056b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056bc:	4b28      	ldr	r3, [pc, #160]	@ (8005760 <prvInsertBlockIntoFreeList+0xac>)
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e002      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x14>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d8f7      	bhi.n	80056c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	4413      	add	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d108      	bne.n	80056f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	441a      	add	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d118      	bne.n	800573c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4b15      	ldr	r3, [pc, #84]	@ (8005764 <prvInsertBlockIntoFreeList+0xb0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d00d      	beq.n	8005732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e008      	b.n	8005744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005732:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <prvInsertBlockIntoFreeList+0xb0>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e003      	b.n	8005744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d002      	beq.n	8005752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20004a5c 	.word	0x20004a5c
 8005764:	20004a64 	.word	0x20004a64

08005768 <std>:
 8005768:	2300      	movs	r3, #0
 800576a:	b510      	push	{r4, lr}
 800576c:	4604      	mov	r4, r0
 800576e:	e9c0 3300 	strd	r3, r3, [r0]
 8005772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005776:	6083      	str	r3, [r0, #8]
 8005778:	8181      	strh	r1, [r0, #12]
 800577a:	6643      	str	r3, [r0, #100]	@ 0x64
 800577c:	81c2      	strh	r2, [r0, #14]
 800577e:	6183      	str	r3, [r0, #24]
 8005780:	4619      	mov	r1, r3
 8005782:	2208      	movs	r2, #8
 8005784:	305c      	adds	r0, #92	@ 0x5c
 8005786:	f000 f9e7 	bl	8005b58 <memset>
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <std+0x58>)
 800578c:	6263      	str	r3, [r4, #36]	@ 0x24
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <std+0x5c>)
 8005790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <std+0x60>)
 8005794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <std+0x64>)
 8005798:	6323      	str	r3, [r4, #48]	@ 0x30
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <std+0x68>)
 800579c:	6224      	str	r4, [r4, #32]
 800579e:	429c      	cmp	r4, r3
 80057a0:	d006      	beq.n	80057b0 <std+0x48>
 80057a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057a6:	4294      	cmp	r4, r2
 80057a8:	d002      	beq.n	80057b0 <std+0x48>
 80057aa:	33d0      	adds	r3, #208	@ 0xd0
 80057ac:	429c      	cmp	r4, r3
 80057ae:	d105      	bne.n	80057bc <std+0x54>
 80057b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f000 ba46 	b.w	8005c48 <__retarget_lock_init_recursive>
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	bf00      	nop
 80057c0:	080059a9 	.word	0x080059a9
 80057c4:	080059cb 	.word	0x080059cb
 80057c8:	08005a03 	.word	0x08005a03
 80057cc:	08005a27 	.word	0x08005a27
 80057d0:	20004a7c 	.word	0x20004a7c

080057d4 <stdio_exit_handler>:
 80057d4:	4a02      	ldr	r2, [pc, #8]	@ (80057e0 <stdio_exit_handler+0xc>)
 80057d6:	4903      	ldr	r1, [pc, #12]	@ (80057e4 <stdio_exit_handler+0x10>)
 80057d8:	4803      	ldr	r0, [pc, #12]	@ (80057e8 <stdio_exit_handler+0x14>)
 80057da:	f000 b869 	b.w	80058b0 <_fwalk_sglue>
 80057de:	bf00      	nop
 80057e0:	20000010 	.word	0x20000010
 80057e4:	08005f65 	.word	0x08005f65
 80057e8:	20000020 	.word	0x20000020

080057ec <cleanup_stdio>:
 80057ec:	6841      	ldr	r1, [r0, #4]
 80057ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <cleanup_stdio+0x34>)
 80057f0:	4299      	cmp	r1, r3
 80057f2:	b510      	push	{r4, lr}
 80057f4:	4604      	mov	r4, r0
 80057f6:	d001      	beq.n	80057fc <cleanup_stdio+0x10>
 80057f8:	f000 fbb4 	bl	8005f64 <_fflush_r>
 80057fc:	68a1      	ldr	r1, [r4, #8]
 80057fe:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <cleanup_stdio+0x38>)
 8005800:	4299      	cmp	r1, r3
 8005802:	d002      	beq.n	800580a <cleanup_stdio+0x1e>
 8005804:	4620      	mov	r0, r4
 8005806:	f000 fbad 	bl	8005f64 <_fflush_r>
 800580a:	68e1      	ldr	r1, [r4, #12]
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <cleanup_stdio+0x3c>)
 800580e:	4299      	cmp	r1, r3
 8005810:	d004      	beq.n	800581c <cleanup_stdio+0x30>
 8005812:	4620      	mov	r0, r4
 8005814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005818:	f000 bba4 	b.w	8005f64 <_fflush_r>
 800581c:	bd10      	pop	{r4, pc}
 800581e:	bf00      	nop
 8005820:	20004a7c 	.word	0x20004a7c
 8005824:	20004ae4 	.word	0x20004ae4
 8005828:	20004b4c 	.word	0x20004b4c

0800582c <global_stdio_init.part.0>:
 800582c:	b510      	push	{r4, lr}
 800582e:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <global_stdio_init.part.0+0x30>)
 8005830:	4c0b      	ldr	r4, [pc, #44]	@ (8005860 <global_stdio_init.part.0+0x34>)
 8005832:	4a0c      	ldr	r2, [pc, #48]	@ (8005864 <global_stdio_init.part.0+0x38>)
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	4620      	mov	r0, r4
 8005838:	2200      	movs	r2, #0
 800583a:	2104      	movs	r1, #4
 800583c:	f7ff ff94 	bl	8005768 <std>
 8005840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005844:	2201      	movs	r2, #1
 8005846:	2109      	movs	r1, #9
 8005848:	f7ff ff8e 	bl	8005768 <std>
 800584c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005850:	2202      	movs	r2, #2
 8005852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005856:	2112      	movs	r1, #18
 8005858:	f7ff bf86 	b.w	8005768 <std>
 800585c:	20004bb4 	.word	0x20004bb4
 8005860:	20004a7c 	.word	0x20004a7c
 8005864:	080057d5 	.word	0x080057d5

08005868 <__sfp_lock_acquire>:
 8005868:	4801      	ldr	r0, [pc, #4]	@ (8005870 <__sfp_lock_acquire+0x8>)
 800586a:	f000 b9ee 	b.w	8005c4a <__retarget_lock_acquire_recursive>
 800586e:	bf00      	nop
 8005870:	20004bbd 	.word	0x20004bbd

08005874 <__sfp_lock_release>:
 8005874:	4801      	ldr	r0, [pc, #4]	@ (800587c <__sfp_lock_release+0x8>)
 8005876:	f000 b9e9 	b.w	8005c4c <__retarget_lock_release_recursive>
 800587a:	bf00      	nop
 800587c:	20004bbd 	.word	0x20004bbd

08005880 <__sinit>:
 8005880:	b510      	push	{r4, lr}
 8005882:	4604      	mov	r4, r0
 8005884:	f7ff fff0 	bl	8005868 <__sfp_lock_acquire>
 8005888:	6a23      	ldr	r3, [r4, #32]
 800588a:	b11b      	cbz	r3, 8005894 <__sinit+0x14>
 800588c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005890:	f7ff bff0 	b.w	8005874 <__sfp_lock_release>
 8005894:	4b04      	ldr	r3, [pc, #16]	@ (80058a8 <__sinit+0x28>)
 8005896:	6223      	str	r3, [r4, #32]
 8005898:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <__sinit+0x2c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f5      	bne.n	800588c <__sinit+0xc>
 80058a0:	f7ff ffc4 	bl	800582c <global_stdio_init.part.0>
 80058a4:	e7f2      	b.n	800588c <__sinit+0xc>
 80058a6:	bf00      	nop
 80058a8:	080057ed 	.word	0x080057ed
 80058ac:	20004bb4 	.word	0x20004bb4

080058b0 <_fwalk_sglue>:
 80058b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b4:	4607      	mov	r7, r0
 80058b6:	4688      	mov	r8, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	2600      	movs	r6, #0
 80058bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058c0:	f1b9 0901 	subs.w	r9, r9, #1
 80058c4:	d505      	bpl.n	80058d2 <_fwalk_sglue+0x22>
 80058c6:	6824      	ldr	r4, [r4, #0]
 80058c8:	2c00      	cmp	r4, #0
 80058ca:	d1f7      	bne.n	80058bc <_fwalk_sglue+0xc>
 80058cc:	4630      	mov	r0, r6
 80058ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d2:	89ab      	ldrh	r3, [r5, #12]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d907      	bls.n	80058e8 <_fwalk_sglue+0x38>
 80058d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058dc:	3301      	adds	r3, #1
 80058de:	d003      	beq.n	80058e8 <_fwalk_sglue+0x38>
 80058e0:	4629      	mov	r1, r5
 80058e2:	4638      	mov	r0, r7
 80058e4:	47c0      	blx	r8
 80058e6:	4306      	orrs	r6, r0
 80058e8:	3568      	adds	r5, #104	@ 0x68
 80058ea:	e7e9      	b.n	80058c0 <_fwalk_sglue+0x10>

080058ec <_puts_r>:
 80058ec:	6a03      	ldr	r3, [r0, #32]
 80058ee:	b570      	push	{r4, r5, r6, lr}
 80058f0:	6884      	ldr	r4, [r0, #8]
 80058f2:	4605      	mov	r5, r0
 80058f4:	460e      	mov	r6, r1
 80058f6:	b90b      	cbnz	r3, 80058fc <_puts_r+0x10>
 80058f8:	f7ff ffc2 	bl	8005880 <__sinit>
 80058fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058fe:	07db      	lsls	r3, r3, #31
 8005900:	d405      	bmi.n	800590e <_puts_r+0x22>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	0598      	lsls	r0, r3, #22
 8005906:	d402      	bmi.n	800590e <_puts_r+0x22>
 8005908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800590a:	f000 f99e 	bl	8005c4a <__retarget_lock_acquire_recursive>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	0719      	lsls	r1, r3, #28
 8005912:	d502      	bpl.n	800591a <_puts_r+0x2e>
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d135      	bne.n	8005986 <_puts_r+0x9a>
 800591a:	4621      	mov	r1, r4
 800591c:	4628      	mov	r0, r5
 800591e:	f000 f8c5 	bl	8005aac <__swsetup_r>
 8005922:	b380      	cbz	r0, 8005986 <_puts_r+0x9a>
 8005924:	f04f 35ff 	mov.w	r5, #4294967295
 8005928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800592a:	07da      	lsls	r2, r3, #31
 800592c:	d405      	bmi.n	800593a <_puts_r+0x4e>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	059b      	lsls	r3, r3, #22
 8005932:	d402      	bmi.n	800593a <_puts_r+0x4e>
 8005934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005936:	f000 f989 	bl	8005c4c <__retarget_lock_release_recursive>
 800593a:	4628      	mov	r0, r5
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	2b00      	cmp	r3, #0
 8005940:	da04      	bge.n	800594c <_puts_r+0x60>
 8005942:	69a2      	ldr	r2, [r4, #24]
 8005944:	429a      	cmp	r2, r3
 8005946:	dc17      	bgt.n	8005978 <_puts_r+0x8c>
 8005948:	290a      	cmp	r1, #10
 800594a:	d015      	beq.n	8005978 <_puts_r+0x8c>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	6022      	str	r2, [r4, #0]
 8005952:	7019      	strb	r1, [r3, #0]
 8005954:	68a3      	ldr	r3, [r4, #8]
 8005956:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800595a:	3b01      	subs	r3, #1
 800595c:	60a3      	str	r3, [r4, #8]
 800595e:	2900      	cmp	r1, #0
 8005960:	d1ed      	bne.n	800593e <_puts_r+0x52>
 8005962:	2b00      	cmp	r3, #0
 8005964:	da11      	bge.n	800598a <_puts_r+0x9e>
 8005966:	4622      	mov	r2, r4
 8005968:	210a      	movs	r1, #10
 800596a:	4628      	mov	r0, r5
 800596c:	f000 f85f 	bl	8005a2e <__swbuf_r>
 8005970:	3001      	adds	r0, #1
 8005972:	d0d7      	beq.n	8005924 <_puts_r+0x38>
 8005974:	250a      	movs	r5, #10
 8005976:	e7d7      	b.n	8005928 <_puts_r+0x3c>
 8005978:	4622      	mov	r2, r4
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f857 	bl	8005a2e <__swbuf_r>
 8005980:	3001      	adds	r0, #1
 8005982:	d1e7      	bne.n	8005954 <_puts_r+0x68>
 8005984:	e7ce      	b.n	8005924 <_puts_r+0x38>
 8005986:	3e01      	subs	r6, #1
 8005988:	e7e4      	b.n	8005954 <_puts_r+0x68>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	6022      	str	r2, [r4, #0]
 8005990:	220a      	movs	r2, #10
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e7ee      	b.n	8005974 <_puts_r+0x88>
	...

08005998 <puts>:
 8005998:	4b02      	ldr	r3, [pc, #8]	@ (80059a4 <puts+0xc>)
 800599a:	4601      	mov	r1, r0
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f7ff bfa5 	b.w	80058ec <_puts_r>
 80059a2:	bf00      	nop
 80059a4:	2000001c 	.word	0x2000001c

080059a8 <__sread>:
 80059a8:	b510      	push	{r4, lr}
 80059aa:	460c      	mov	r4, r1
 80059ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b0:	f000 f8fc 	bl	8005bac <_read_r>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	bfab      	itete	ge
 80059b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ba:	89a3      	ldrhlt	r3, [r4, #12]
 80059bc:	181b      	addge	r3, r3, r0
 80059be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059c2:	bfac      	ite	ge
 80059c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059c6:	81a3      	strhlt	r3, [r4, #12]
 80059c8:	bd10      	pop	{r4, pc}

080059ca <__swrite>:
 80059ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ce:	461f      	mov	r7, r3
 80059d0:	898b      	ldrh	r3, [r1, #12]
 80059d2:	05db      	lsls	r3, r3, #23
 80059d4:	4605      	mov	r5, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	4616      	mov	r6, r2
 80059da:	d505      	bpl.n	80059e8 <__swrite+0x1e>
 80059dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e0:	2302      	movs	r3, #2
 80059e2:	2200      	movs	r2, #0
 80059e4:	f000 f8d0 	bl	8005b88 <_lseek_r>
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059f2:	81a3      	strh	r3, [r4, #12]
 80059f4:	4632      	mov	r2, r6
 80059f6:	463b      	mov	r3, r7
 80059f8:	4628      	mov	r0, r5
 80059fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059fe:	f000 b8e7 	b.w	8005bd0 <_write_r>

08005a02 <__sseek>:
 8005a02:	b510      	push	{r4, lr}
 8005a04:	460c      	mov	r4, r1
 8005a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0a:	f000 f8bd 	bl	8005b88 <_lseek_r>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	bf15      	itete	ne
 8005a14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a1e:	81a3      	strheq	r3, [r4, #12]
 8005a20:	bf18      	it	ne
 8005a22:	81a3      	strhne	r3, [r4, #12]
 8005a24:	bd10      	pop	{r4, pc}

08005a26 <__sclose>:
 8005a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2a:	f000 b89d 	b.w	8005b68 <_close_r>

08005a2e <__swbuf_r>:
 8005a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a30:	460e      	mov	r6, r1
 8005a32:	4614      	mov	r4, r2
 8005a34:	4605      	mov	r5, r0
 8005a36:	b118      	cbz	r0, 8005a40 <__swbuf_r+0x12>
 8005a38:	6a03      	ldr	r3, [r0, #32]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <__swbuf_r+0x12>
 8005a3c:	f7ff ff20 	bl	8005880 <__sinit>
 8005a40:	69a3      	ldr	r3, [r4, #24]
 8005a42:	60a3      	str	r3, [r4, #8]
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	071a      	lsls	r2, r3, #28
 8005a48:	d501      	bpl.n	8005a4e <__swbuf_r+0x20>
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	b943      	cbnz	r3, 8005a60 <__swbuf_r+0x32>
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4628      	mov	r0, r5
 8005a52:	f000 f82b 	bl	8005aac <__swsetup_r>
 8005a56:	b118      	cbz	r0, 8005a60 <__swbuf_r+0x32>
 8005a58:	f04f 37ff 	mov.w	r7, #4294967295
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	6922      	ldr	r2, [r4, #16]
 8005a64:	1a98      	subs	r0, r3, r2
 8005a66:	6963      	ldr	r3, [r4, #20]
 8005a68:	b2f6      	uxtb	r6, r6
 8005a6a:	4283      	cmp	r3, r0
 8005a6c:	4637      	mov	r7, r6
 8005a6e:	dc05      	bgt.n	8005a7c <__swbuf_r+0x4e>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 fa76 	bl	8005f64 <_fflush_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d1ed      	bne.n	8005a58 <__swbuf_r+0x2a>
 8005a7c:	68a3      	ldr	r3, [r4, #8]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	60a3      	str	r3, [r4, #8]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	6022      	str	r2, [r4, #0]
 8005a88:	701e      	strb	r6, [r3, #0]
 8005a8a:	6962      	ldr	r2, [r4, #20]
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d004      	beq.n	8005a9c <__swbuf_r+0x6e>
 8005a92:	89a3      	ldrh	r3, [r4, #12]
 8005a94:	07db      	lsls	r3, r3, #31
 8005a96:	d5e1      	bpl.n	8005a5c <__swbuf_r+0x2e>
 8005a98:	2e0a      	cmp	r6, #10
 8005a9a:	d1df      	bne.n	8005a5c <__swbuf_r+0x2e>
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 fa60 	bl	8005f64 <_fflush_r>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d0d9      	beq.n	8005a5c <__swbuf_r+0x2e>
 8005aa8:	e7d6      	b.n	8005a58 <__swbuf_r+0x2a>
	...

08005aac <__swsetup_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4b29      	ldr	r3, [pc, #164]	@ (8005b54 <__swsetup_r+0xa8>)
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	b118      	cbz	r0, 8005ac0 <__swsetup_r+0x14>
 8005ab8:	6a03      	ldr	r3, [r0, #32]
 8005aba:	b90b      	cbnz	r3, 8005ac0 <__swsetup_r+0x14>
 8005abc:	f7ff fee0 	bl	8005880 <__sinit>
 8005ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac4:	0719      	lsls	r1, r3, #28
 8005ac6:	d422      	bmi.n	8005b0e <__swsetup_r+0x62>
 8005ac8:	06da      	lsls	r2, r3, #27
 8005aca:	d407      	bmi.n	8005adc <__swsetup_r+0x30>
 8005acc:	2209      	movs	r2, #9
 8005ace:	602a      	str	r2, [r5, #0]
 8005ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	e033      	b.n	8005b44 <__swsetup_r+0x98>
 8005adc:	0758      	lsls	r0, r3, #29
 8005ade:	d512      	bpl.n	8005b06 <__swsetup_r+0x5a>
 8005ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ae2:	b141      	cbz	r1, 8005af6 <__swsetup_r+0x4a>
 8005ae4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	d002      	beq.n	8005af2 <__swsetup_r+0x46>
 8005aec:	4628      	mov	r0, r5
 8005aee:	f000 f8bd 	bl	8005c6c <_free_r>
 8005af2:	2300      	movs	r3, #0
 8005af4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	2300      	movs	r3, #0
 8005b00:	6063      	str	r3, [r4, #4]
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	f043 0308 	orr.w	r3, r3, #8
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	b94b      	cbnz	r3, 8005b26 <__swsetup_r+0x7a>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1c:	d003      	beq.n	8005b26 <__swsetup_r+0x7a>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 fa6d 	bl	8006000 <__smakebuf_r>
 8005b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b2a:	f013 0201 	ands.w	r2, r3, #1
 8005b2e:	d00a      	beq.n	8005b46 <__swsetup_r+0x9a>
 8005b30:	2200      	movs	r2, #0
 8005b32:	60a2      	str	r2, [r4, #8]
 8005b34:	6962      	ldr	r2, [r4, #20]
 8005b36:	4252      	negs	r2, r2
 8005b38:	61a2      	str	r2, [r4, #24]
 8005b3a:	6922      	ldr	r2, [r4, #16]
 8005b3c:	b942      	cbnz	r2, 8005b50 <__swsetup_r+0xa4>
 8005b3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b42:	d1c5      	bne.n	8005ad0 <__swsetup_r+0x24>
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	0799      	lsls	r1, r3, #30
 8005b48:	bf58      	it	pl
 8005b4a:	6962      	ldrpl	r2, [r4, #20]
 8005b4c:	60a2      	str	r2, [r4, #8]
 8005b4e:	e7f4      	b.n	8005b3a <__swsetup_r+0x8e>
 8005b50:	2000      	movs	r0, #0
 8005b52:	e7f7      	b.n	8005b44 <__swsetup_r+0x98>
 8005b54:	2000001c 	.word	0x2000001c

08005b58 <memset>:
 8005b58:	4402      	add	r2, r0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d100      	bne.n	8005b62 <memset+0xa>
 8005b60:	4770      	bx	lr
 8005b62:	f803 1b01 	strb.w	r1, [r3], #1
 8005b66:	e7f9      	b.n	8005b5c <memset+0x4>

08005b68 <_close_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d06      	ldr	r5, [pc, #24]	@ (8005b84 <_close_r+0x1c>)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f7fb f805 	bl	8000b82 <_close>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_close_r+0x1a>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_close_r+0x1a>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	20004bb8 	.word	0x20004bb8

08005b88 <_lseek_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ba8 <_lseek_r+0x20>)
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	4608      	mov	r0, r1
 8005b90:	4611      	mov	r1, r2
 8005b92:	2200      	movs	r2, #0
 8005b94:	602a      	str	r2, [r5, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f7fb f81a 	bl	8000bd0 <_lseek>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_lseek_r+0x1e>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_lseek_r+0x1e>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	20004bb8 	.word	0x20004bb8

08005bac <_read_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d07      	ldr	r5, [pc, #28]	@ (8005bcc <_read_r+0x20>)
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	602a      	str	r2, [r5, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f7fa ffa8 	bl	8000b10 <_read>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_read_r+0x1e>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_read_r+0x1e>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	20004bb8 	.word	0x20004bb8

08005bd0 <_write_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d07      	ldr	r5, [pc, #28]	@ (8005bf0 <_write_r+0x20>)
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	4611      	mov	r1, r2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	602a      	str	r2, [r5, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f7fa ffb3 	bl	8000b4a <_write>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_write_r+0x1e>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_write_r+0x1e>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	20004bb8 	.word	0x20004bb8

08005bf4 <__errno>:
 8005bf4:	4b01      	ldr	r3, [pc, #4]	@ (8005bfc <__errno+0x8>)
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	2000001c 	.word	0x2000001c

08005c00 <__libc_init_array>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	4d0d      	ldr	r5, [pc, #52]	@ (8005c38 <__libc_init_array+0x38>)
 8005c04:	4c0d      	ldr	r4, [pc, #52]	@ (8005c3c <__libc_init_array+0x3c>)
 8005c06:	1b64      	subs	r4, r4, r5
 8005c08:	10a4      	asrs	r4, r4, #2
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	42a6      	cmp	r6, r4
 8005c0e:	d109      	bne.n	8005c24 <__libc_init_array+0x24>
 8005c10:	4d0b      	ldr	r5, [pc, #44]	@ (8005c40 <__libc_init_array+0x40>)
 8005c12:	4c0c      	ldr	r4, [pc, #48]	@ (8005c44 <__libc_init_array+0x44>)
 8005c14:	f000 fa62 	bl	80060dc <_init>
 8005c18:	1b64      	subs	r4, r4, r5
 8005c1a:	10a4      	asrs	r4, r4, #2
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	42a6      	cmp	r6, r4
 8005c20:	d105      	bne.n	8005c2e <__libc_init_array+0x2e>
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
 8005c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c28:	4798      	blx	r3
 8005c2a:	3601      	adds	r6, #1
 8005c2c:	e7ee      	b.n	8005c0c <__libc_init_array+0xc>
 8005c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c32:	4798      	blx	r3
 8005c34:	3601      	adds	r6, #1
 8005c36:	e7f2      	b.n	8005c1e <__libc_init_array+0x1e>
 8005c38:	080061a4 	.word	0x080061a4
 8005c3c:	080061a4 	.word	0x080061a4
 8005c40:	080061a4 	.word	0x080061a4
 8005c44:	080061a8 	.word	0x080061a8

08005c48 <__retarget_lock_init_recursive>:
 8005c48:	4770      	bx	lr

08005c4a <__retarget_lock_acquire_recursive>:
 8005c4a:	4770      	bx	lr

08005c4c <__retarget_lock_release_recursive>:
 8005c4c:	4770      	bx	lr

08005c4e <memcpy>:
 8005c4e:	440a      	add	r2, r1
 8005c50:	4291      	cmp	r1, r2
 8005c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c56:	d100      	bne.n	8005c5a <memcpy+0xc>
 8005c58:	4770      	bx	lr
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c64:	4291      	cmp	r1, r2
 8005c66:	d1f9      	bne.n	8005c5c <memcpy+0xe>
 8005c68:	bd10      	pop	{r4, pc}
	...

08005c6c <_free_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4605      	mov	r5, r0
 8005c70:	2900      	cmp	r1, #0
 8005c72:	d041      	beq.n	8005cf8 <_free_r+0x8c>
 8005c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c78:	1f0c      	subs	r4, r1, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bfb8      	it	lt
 8005c7e:	18e4      	addlt	r4, r4, r3
 8005c80:	f000 f8e0 	bl	8005e44 <__malloc_lock>
 8005c84:	4a1d      	ldr	r2, [pc, #116]	@ (8005cfc <_free_r+0x90>)
 8005c86:	6813      	ldr	r3, [r2, #0]
 8005c88:	b933      	cbnz	r3, 8005c98 <_free_r+0x2c>
 8005c8a:	6063      	str	r3, [r4, #4]
 8005c8c:	6014      	str	r4, [r2, #0]
 8005c8e:	4628      	mov	r0, r5
 8005c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c94:	f000 b8dc 	b.w	8005e50 <__malloc_unlock>
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	d908      	bls.n	8005cae <_free_r+0x42>
 8005c9c:	6820      	ldr	r0, [r4, #0]
 8005c9e:	1821      	adds	r1, r4, r0
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	bf01      	itttt	eq
 8005ca4:	6819      	ldreq	r1, [r3, #0]
 8005ca6:	685b      	ldreq	r3, [r3, #4]
 8005ca8:	1809      	addeq	r1, r1, r0
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	e7ed      	b.n	8005c8a <_free_r+0x1e>
 8005cae:	461a      	mov	r2, r3
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	b10b      	cbz	r3, 8005cb8 <_free_r+0x4c>
 8005cb4:	42a3      	cmp	r3, r4
 8005cb6:	d9fa      	bls.n	8005cae <_free_r+0x42>
 8005cb8:	6811      	ldr	r1, [r2, #0]
 8005cba:	1850      	adds	r0, r2, r1
 8005cbc:	42a0      	cmp	r0, r4
 8005cbe:	d10b      	bne.n	8005cd8 <_free_r+0x6c>
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	4401      	add	r1, r0
 8005cc4:	1850      	adds	r0, r2, r1
 8005cc6:	4283      	cmp	r3, r0
 8005cc8:	6011      	str	r1, [r2, #0]
 8005cca:	d1e0      	bne.n	8005c8e <_free_r+0x22>
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	6053      	str	r3, [r2, #4]
 8005cd2:	4408      	add	r0, r1
 8005cd4:	6010      	str	r0, [r2, #0]
 8005cd6:	e7da      	b.n	8005c8e <_free_r+0x22>
 8005cd8:	d902      	bls.n	8005ce0 <_free_r+0x74>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	e7d6      	b.n	8005c8e <_free_r+0x22>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	1821      	adds	r1, r4, r0
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	bf04      	itt	eq
 8005ce8:	6819      	ldreq	r1, [r3, #0]
 8005cea:	685b      	ldreq	r3, [r3, #4]
 8005cec:	6063      	str	r3, [r4, #4]
 8005cee:	bf04      	itt	eq
 8005cf0:	1809      	addeq	r1, r1, r0
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	6054      	str	r4, [r2, #4]
 8005cf6:	e7ca      	b.n	8005c8e <_free_r+0x22>
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20004bc4 	.word	0x20004bc4

08005d00 <sbrk_aligned>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4e0f      	ldr	r6, [pc, #60]	@ (8005d40 <sbrk_aligned+0x40>)
 8005d04:	460c      	mov	r4, r1
 8005d06:	6831      	ldr	r1, [r6, #0]
 8005d08:	4605      	mov	r5, r0
 8005d0a:	b911      	cbnz	r1, 8005d12 <sbrk_aligned+0x12>
 8005d0c:	f000 f9d6 	bl	80060bc <_sbrk_r>
 8005d10:	6030      	str	r0, [r6, #0]
 8005d12:	4621      	mov	r1, r4
 8005d14:	4628      	mov	r0, r5
 8005d16:	f000 f9d1 	bl	80060bc <_sbrk_r>
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	d103      	bne.n	8005d26 <sbrk_aligned+0x26>
 8005d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d22:	4620      	mov	r0, r4
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	1cc4      	adds	r4, r0, #3
 8005d28:	f024 0403 	bic.w	r4, r4, #3
 8005d2c:	42a0      	cmp	r0, r4
 8005d2e:	d0f8      	beq.n	8005d22 <sbrk_aligned+0x22>
 8005d30:	1a21      	subs	r1, r4, r0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 f9c2 	bl	80060bc <_sbrk_r>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d1f2      	bne.n	8005d22 <sbrk_aligned+0x22>
 8005d3c:	e7ef      	b.n	8005d1e <sbrk_aligned+0x1e>
 8005d3e:	bf00      	nop
 8005d40:	20004bc0 	.word	0x20004bc0

08005d44 <_malloc_r>:
 8005d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	1ccd      	adds	r5, r1, #3
 8005d4a:	f025 0503 	bic.w	r5, r5, #3
 8005d4e:	3508      	adds	r5, #8
 8005d50:	2d0c      	cmp	r5, #12
 8005d52:	bf38      	it	cc
 8005d54:	250c      	movcc	r5, #12
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	4606      	mov	r6, r0
 8005d5a:	db01      	blt.n	8005d60 <_malloc_r+0x1c>
 8005d5c:	42a9      	cmp	r1, r5
 8005d5e:	d904      	bls.n	8005d6a <_malloc_r+0x26>
 8005d60:	230c      	movs	r3, #12
 8005d62:	6033      	str	r3, [r6, #0]
 8005d64:	2000      	movs	r0, #0
 8005d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e40 <_malloc_r+0xfc>
 8005d6e:	f000 f869 	bl	8005e44 <__malloc_lock>
 8005d72:	f8d8 3000 	ldr.w	r3, [r8]
 8005d76:	461c      	mov	r4, r3
 8005d78:	bb44      	cbnz	r4, 8005dcc <_malloc_r+0x88>
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f7ff ffbf 	bl	8005d00 <sbrk_aligned>
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	4604      	mov	r4, r0
 8005d86:	d158      	bne.n	8005e3a <_malloc_r+0xf6>
 8005d88:	f8d8 4000 	ldr.w	r4, [r8]
 8005d8c:	4627      	mov	r7, r4
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	d143      	bne.n	8005e1a <_malloc_r+0xd6>
 8005d92:	2c00      	cmp	r4, #0
 8005d94:	d04b      	beq.n	8005e2e <_malloc_r+0xea>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	4639      	mov	r1, r7
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	eb04 0903 	add.w	r9, r4, r3
 8005da0:	f000 f98c 	bl	80060bc <_sbrk_r>
 8005da4:	4581      	cmp	r9, r0
 8005da6:	d142      	bne.n	8005e2e <_malloc_r+0xea>
 8005da8:	6821      	ldr	r1, [r4, #0]
 8005daa:	1a6d      	subs	r5, r5, r1
 8005dac:	4629      	mov	r1, r5
 8005dae:	4630      	mov	r0, r6
 8005db0:	f7ff ffa6 	bl	8005d00 <sbrk_aligned>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d03a      	beq.n	8005e2e <_malloc_r+0xea>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	442b      	add	r3, r5
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	bb62      	cbnz	r2, 8005e20 <_malloc_r+0xdc>
 8005dc6:	f8c8 7000 	str.w	r7, [r8]
 8005dca:	e00f      	b.n	8005dec <_malloc_r+0xa8>
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	1b52      	subs	r2, r2, r5
 8005dd0:	d420      	bmi.n	8005e14 <_malloc_r+0xd0>
 8005dd2:	2a0b      	cmp	r2, #11
 8005dd4:	d917      	bls.n	8005e06 <_malloc_r+0xc2>
 8005dd6:	1961      	adds	r1, r4, r5
 8005dd8:	42a3      	cmp	r3, r4
 8005dda:	6025      	str	r5, [r4, #0]
 8005ddc:	bf18      	it	ne
 8005dde:	6059      	strne	r1, [r3, #4]
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	bf08      	it	eq
 8005de4:	f8c8 1000 	streq.w	r1, [r8]
 8005de8:	5162      	str	r2, [r4, r5]
 8005dea:	604b      	str	r3, [r1, #4]
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 f82f 	bl	8005e50 <__malloc_unlock>
 8005df2:	f104 000b 	add.w	r0, r4, #11
 8005df6:	1d23      	adds	r3, r4, #4
 8005df8:	f020 0007 	bic.w	r0, r0, #7
 8005dfc:	1ac2      	subs	r2, r0, r3
 8005dfe:	bf1c      	itt	ne
 8005e00:	1a1b      	subne	r3, r3, r0
 8005e02:	50a3      	strne	r3, [r4, r2]
 8005e04:	e7af      	b.n	8005d66 <_malloc_r+0x22>
 8005e06:	6862      	ldr	r2, [r4, #4]
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	bf0c      	ite	eq
 8005e0c:	f8c8 2000 	streq.w	r2, [r8]
 8005e10:	605a      	strne	r2, [r3, #4]
 8005e12:	e7eb      	b.n	8005dec <_malloc_r+0xa8>
 8005e14:	4623      	mov	r3, r4
 8005e16:	6864      	ldr	r4, [r4, #4]
 8005e18:	e7ae      	b.n	8005d78 <_malloc_r+0x34>
 8005e1a:	463c      	mov	r4, r7
 8005e1c:	687f      	ldr	r7, [r7, #4]
 8005e1e:	e7b6      	b.n	8005d8e <_malloc_r+0x4a>
 8005e20:	461a      	mov	r2, r3
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d1fb      	bne.n	8005e20 <_malloc_r+0xdc>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	6053      	str	r3, [r2, #4]
 8005e2c:	e7de      	b.n	8005dec <_malloc_r+0xa8>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	4630      	mov	r0, r6
 8005e34:	f000 f80c 	bl	8005e50 <__malloc_unlock>
 8005e38:	e794      	b.n	8005d64 <_malloc_r+0x20>
 8005e3a:	6005      	str	r5, [r0, #0]
 8005e3c:	e7d6      	b.n	8005dec <_malloc_r+0xa8>
 8005e3e:	bf00      	nop
 8005e40:	20004bc4 	.word	0x20004bc4

08005e44 <__malloc_lock>:
 8005e44:	4801      	ldr	r0, [pc, #4]	@ (8005e4c <__malloc_lock+0x8>)
 8005e46:	f7ff bf00 	b.w	8005c4a <__retarget_lock_acquire_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	20004bbc 	.word	0x20004bbc

08005e50 <__malloc_unlock>:
 8005e50:	4801      	ldr	r0, [pc, #4]	@ (8005e58 <__malloc_unlock+0x8>)
 8005e52:	f7ff befb 	b.w	8005c4c <__retarget_lock_release_recursive>
 8005e56:	bf00      	nop
 8005e58:	20004bbc 	.word	0x20004bbc

08005e5c <__sflush_r>:
 8005e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e64:	0716      	lsls	r6, r2, #28
 8005e66:	4605      	mov	r5, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	d454      	bmi.n	8005f16 <__sflush_r+0xba>
 8005e6c:	684b      	ldr	r3, [r1, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dc02      	bgt.n	8005e78 <__sflush_r+0x1c>
 8005e72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	dd48      	ble.n	8005f0a <__sflush_r+0xae>
 8005e78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e7a:	2e00      	cmp	r6, #0
 8005e7c:	d045      	beq.n	8005f0a <__sflush_r+0xae>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e84:	682f      	ldr	r7, [r5, #0]
 8005e86:	6a21      	ldr	r1, [r4, #32]
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	d030      	beq.n	8005eee <__sflush_r+0x92>
 8005e8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	0759      	lsls	r1, r3, #29
 8005e92:	d505      	bpl.n	8005ea0 <__sflush_r+0x44>
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	1ad2      	subs	r2, r2, r3
 8005e98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e9a:	b10b      	cbz	r3, 8005ea0 <__sflush_r+0x44>
 8005e9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ea4:	6a21      	ldr	r1, [r4, #32]
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b0      	blx	r6
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	d106      	bne.n	8005ebe <__sflush_r+0x62>
 8005eb0:	6829      	ldr	r1, [r5, #0]
 8005eb2:	291d      	cmp	r1, #29
 8005eb4:	d82b      	bhi.n	8005f0e <__sflush_r+0xb2>
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f60 <__sflush_r+0x104>)
 8005eb8:	410a      	asrs	r2, r1
 8005eba:	07d6      	lsls	r6, r2, #31
 8005ebc:	d427      	bmi.n	8005f0e <__sflush_r+0xb2>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	6062      	str	r2, [r4, #4]
 8005ec2:	04d9      	lsls	r1, r3, #19
 8005ec4:	6922      	ldr	r2, [r4, #16]
 8005ec6:	6022      	str	r2, [r4, #0]
 8005ec8:	d504      	bpl.n	8005ed4 <__sflush_r+0x78>
 8005eca:	1c42      	adds	r2, r0, #1
 8005ecc:	d101      	bne.n	8005ed2 <__sflush_r+0x76>
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	b903      	cbnz	r3, 8005ed4 <__sflush_r+0x78>
 8005ed2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ed6:	602f      	str	r7, [r5, #0]
 8005ed8:	b1b9      	cbz	r1, 8005f0a <__sflush_r+0xae>
 8005eda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	d002      	beq.n	8005ee8 <__sflush_r+0x8c>
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f7ff fec2 	bl	8005c6c <_free_r>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6363      	str	r3, [r4, #52]	@ 0x34
 8005eec:	e00d      	b.n	8005f0a <__sflush_r+0xae>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b0      	blx	r6
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	1c50      	adds	r0, r2, #1
 8005ef8:	d1c9      	bne.n	8005e8e <__sflush_r+0x32>
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0c6      	beq.n	8005e8e <__sflush_r+0x32>
 8005f00:	2b1d      	cmp	r3, #29
 8005f02:	d001      	beq.n	8005f08 <__sflush_r+0xac>
 8005f04:	2b16      	cmp	r3, #22
 8005f06:	d11e      	bne.n	8005f46 <__sflush_r+0xea>
 8005f08:	602f      	str	r7, [r5, #0]
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e022      	b.n	8005f54 <__sflush_r+0xf8>
 8005f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	e01b      	b.n	8005f4e <__sflush_r+0xf2>
 8005f16:	690f      	ldr	r7, [r1, #16]
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	d0f6      	beq.n	8005f0a <__sflush_r+0xae>
 8005f1c:	0793      	lsls	r3, r2, #30
 8005f1e:	680e      	ldr	r6, [r1, #0]
 8005f20:	bf08      	it	eq
 8005f22:	694b      	ldreq	r3, [r1, #20]
 8005f24:	600f      	str	r7, [r1, #0]
 8005f26:	bf18      	it	ne
 8005f28:	2300      	movne	r3, #0
 8005f2a:	eba6 0807 	sub.w	r8, r6, r7
 8005f2e:	608b      	str	r3, [r1, #8]
 8005f30:	f1b8 0f00 	cmp.w	r8, #0
 8005f34:	dde9      	ble.n	8005f0a <__sflush_r+0xae>
 8005f36:	6a21      	ldr	r1, [r4, #32]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f3a:	4643      	mov	r3, r8
 8005f3c:	463a      	mov	r2, r7
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b0      	blx	r6
 8005f42:	2800      	cmp	r0, #0
 8005f44:	dc08      	bgt.n	8005f58 <__sflush_r+0xfc>
 8005f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f58:	4407      	add	r7, r0
 8005f5a:	eba8 0800 	sub.w	r8, r8, r0
 8005f5e:	e7e7      	b.n	8005f30 <__sflush_r+0xd4>
 8005f60:	dfbffffe 	.word	0xdfbffffe

08005f64 <_fflush_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	690b      	ldr	r3, [r1, #16]
 8005f68:	4605      	mov	r5, r0
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	b913      	cbnz	r3, 8005f74 <_fflush_r+0x10>
 8005f6e:	2500      	movs	r5, #0
 8005f70:	4628      	mov	r0, r5
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	b118      	cbz	r0, 8005f7e <_fflush_r+0x1a>
 8005f76:	6a03      	ldr	r3, [r0, #32]
 8005f78:	b90b      	cbnz	r3, 8005f7e <_fflush_r+0x1a>
 8005f7a:	f7ff fc81 	bl	8005880 <__sinit>
 8005f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f3      	beq.n	8005f6e <_fflush_r+0xa>
 8005f86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f88:	07d0      	lsls	r0, r2, #31
 8005f8a:	d404      	bmi.n	8005f96 <_fflush_r+0x32>
 8005f8c:	0599      	lsls	r1, r3, #22
 8005f8e:	d402      	bmi.n	8005f96 <_fflush_r+0x32>
 8005f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f92:	f7ff fe5a 	bl	8005c4a <__retarget_lock_acquire_recursive>
 8005f96:	4628      	mov	r0, r5
 8005f98:	4621      	mov	r1, r4
 8005f9a:	f7ff ff5f 	bl	8005e5c <__sflush_r>
 8005f9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fa0:	07da      	lsls	r2, r3, #31
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	d4e4      	bmi.n	8005f70 <_fflush_r+0xc>
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	059b      	lsls	r3, r3, #22
 8005faa:	d4e1      	bmi.n	8005f70 <_fflush_r+0xc>
 8005fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fae:	f7ff fe4d 	bl	8005c4c <__retarget_lock_release_recursive>
 8005fb2:	e7dd      	b.n	8005f70 <_fflush_r+0xc>

08005fb4 <__swhatbuf_r>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	b096      	sub	sp, #88	@ 0x58
 8005fc0:	4615      	mov	r5, r2
 8005fc2:	461e      	mov	r6, r3
 8005fc4:	da0d      	bge.n	8005fe2 <__swhatbuf_r+0x2e>
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fcc:	f04f 0100 	mov.w	r1, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	2340      	movne	r3, #64	@ 0x40
 8005fd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005fd8:	2000      	movs	r0, #0
 8005fda:	6031      	str	r1, [r6, #0]
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	b016      	add	sp, #88	@ 0x58
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	466a      	mov	r2, sp
 8005fe4:	f000 f848 	bl	8006078 <_fstat_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	dbec      	blt.n	8005fc6 <__swhatbuf_r+0x12>
 8005fec:	9901      	ldr	r1, [sp, #4]
 8005fee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ff2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ff6:	4259      	negs	r1, r3
 8005ff8:	4159      	adcs	r1, r3
 8005ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ffe:	e7eb      	b.n	8005fd8 <__swhatbuf_r+0x24>

08006000 <__smakebuf_r>:
 8006000:	898b      	ldrh	r3, [r1, #12]
 8006002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006004:	079d      	lsls	r5, r3, #30
 8006006:	4606      	mov	r6, r0
 8006008:	460c      	mov	r4, r1
 800600a:	d507      	bpl.n	800601c <__smakebuf_r+0x1c>
 800600c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	2301      	movs	r3, #1
 8006016:	6163      	str	r3, [r4, #20]
 8006018:	b003      	add	sp, #12
 800601a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601c:	ab01      	add	r3, sp, #4
 800601e:	466a      	mov	r2, sp
 8006020:	f7ff ffc8 	bl	8005fb4 <__swhatbuf_r>
 8006024:	9f00      	ldr	r7, [sp, #0]
 8006026:	4605      	mov	r5, r0
 8006028:	4639      	mov	r1, r7
 800602a:	4630      	mov	r0, r6
 800602c:	f7ff fe8a 	bl	8005d44 <_malloc_r>
 8006030:	b948      	cbnz	r0, 8006046 <__smakebuf_r+0x46>
 8006032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006036:	059a      	lsls	r2, r3, #22
 8006038:	d4ee      	bmi.n	8006018 <__smakebuf_r+0x18>
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	f043 0302 	orr.w	r3, r3, #2
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	e7e2      	b.n	800600c <__smakebuf_r+0xc>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	6020      	str	r0, [r4, #0]
 800604a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800604e:	81a3      	strh	r3, [r4, #12]
 8006050:	9b01      	ldr	r3, [sp, #4]
 8006052:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006056:	b15b      	cbz	r3, 8006070 <__smakebuf_r+0x70>
 8006058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800605c:	4630      	mov	r0, r6
 800605e:	f000 f81d 	bl	800609c <_isatty_r>
 8006062:	b128      	cbz	r0, 8006070 <__smakebuf_r+0x70>
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	f023 0303 	bic.w	r3, r3, #3
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	431d      	orrs	r5, r3
 8006074:	81a5      	strh	r5, [r4, #12]
 8006076:	e7cf      	b.n	8006018 <__smakebuf_r+0x18>

08006078 <_fstat_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4d07      	ldr	r5, [pc, #28]	@ (8006098 <_fstat_r+0x20>)
 800607c:	2300      	movs	r3, #0
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	4611      	mov	r1, r2
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	f7fa fd88 	bl	8000b9a <_fstat>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	d102      	bne.n	8006094 <_fstat_r+0x1c>
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	b103      	cbz	r3, 8006094 <_fstat_r+0x1c>
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	bf00      	nop
 8006098:	20004bb8 	.word	0x20004bb8

0800609c <_isatty_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d06      	ldr	r5, [pc, #24]	@ (80060b8 <_isatty_r+0x1c>)
 80060a0:	2300      	movs	r3, #0
 80060a2:	4604      	mov	r4, r0
 80060a4:	4608      	mov	r0, r1
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	f7fa fd87 	bl	8000bba <_isatty>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d102      	bne.n	80060b6 <_isatty_r+0x1a>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	b103      	cbz	r3, 80060b6 <_isatty_r+0x1a>
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	20004bb8 	.word	0x20004bb8

080060bc <_sbrk_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4d06      	ldr	r5, [pc, #24]	@ (80060d8 <_sbrk_r+0x1c>)
 80060c0:	2300      	movs	r3, #0
 80060c2:	4604      	mov	r4, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	602b      	str	r3, [r5, #0]
 80060c8:	f7fa fd90 	bl	8000bec <_sbrk>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d102      	bne.n	80060d6 <_sbrk_r+0x1a>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	b103      	cbz	r3, 80060d6 <_sbrk_r+0x1a>
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	20004bb8 	.word	0x20004bb8

080060dc <_init>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	bf00      	nop
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr

080060e8 <_fini>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr
