
5_changingPriorityInRunTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800648c  0800648c  0000748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006544  08006544  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006544  08006544  00007544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800654c  0800654c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006554  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  2000006c  080065c0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd0  080065c0  00008bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174c3  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034eb  00000000  00000000  0001f55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00022a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104c  00000000  00000000  00023f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049aa  00000000  00000000  00024f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179c5  00000000  00000000  00029946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd112  00000000  00000000  0004130b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e41d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff0  00000000  00000000  0011e460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00124450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006474 	.word	0x08006474

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006474 	.word	0x08006474

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
typedef uint32_t TaskProfiler;
TaskProfiler BlueTaskProfiler,RedTaskProfiler, GreenTaskProfiler;
TaskHandle_t blue_handle, red_handle, green_handle;

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af02      	add	r7, sp, #8

  HAL_Init();
 80005a6:	f000 fb93 	bl	8000cd0 <HAL_Init>

  SystemClock_Config();
 80005aa:	f000 f887 	bl	80006bc <SystemClock_Config>

  MX_GPIO_Init();
 80005ae:	f000 f91d 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f8f1 	bl	8000798 <MX_USART2_UART_Init>

	// changing priority number (fifth argument) means higher priority
	//in this case only vBlueLedController would run as it has higher priority
  	//than the other two
  xTaskCreate(vBlueLedController,
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <main+0x60>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2264      	movs	r2, #100	@ 0x64
 80005c2:	4910      	ldr	r1, [pc, #64]	@ (8000604 <main+0x64>)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <main+0x68>)
 80005c6:	f003 f969 	bl	800389c <xTaskCreate>
		  100,
		  NULL,
		  2,
		  &blue_handle);

  xTaskCreate(vRedLedController,
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <main+0x6c>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2264      	movs	r2, #100	@ 0x64
 80005d6:	490e      	ldr	r1, [pc, #56]	@ (8000610 <main+0x70>)
 80005d8:	480e      	ldr	r0, [pc, #56]	@ (8000614 <main+0x74>)
 80005da:	f003 f95f 	bl	800389c <xTaskCreate>
  		  100,
  		  NULL,
  		  1,
  		  &red_handle);

  xTaskCreate(vGreenLedController,
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <main+0x78>)
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2302      	movs	r3, #2
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2264      	movs	r2, #100	@ 0x64
 80005ea:	490c      	ldr	r1, [pc, #48]	@ (800061c <main+0x7c>)
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <main+0x80>)
 80005ee:	f003 f955 	bl	800389c <xTaskCreate>
  		  100,
  		  NULL,
  		  2,
  		  &green_handle);

  vTaskStartScheduler();
 80005f2:	f003 fb37 	bl	8003c64 <vTaskStartScheduler>

  while (1)
  {
	  printf("Hello from stm32 \n\r");
 80005f6:	480b      	ldr	r0, [pc, #44]	@ (8000624 <main+0x84>)
 80005f8:	f005 f8c0 	bl	800577c <iprintf>
 80005fc:	e7fb      	b.n	80005f6 <main+0x56>
 80005fe:	bf00      	nop
 8000600:	200000dc 	.word	0x200000dc
 8000604:	0800648c 	.word	0x0800648c
 8000608:	08000629 	.word	0x08000629
 800060c:	200000e0 	.word	0x200000e0
 8000610:	080064a0 	.word	0x080064a0
 8000614:	08000669 	.word	0x08000669
 8000618:	200000e4 	.word	0x200000e4
 800061c:	080064b4 	.word	0x080064b4
 8000620:	08000681 	.word	0x08000681
 8000624:	080064cc 	.word	0x080064cc

08000628 <vBlueLedController>:
  }
}


void vBlueLedController(void *pvParameter)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		BlueTaskProfiler++;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <vBlueLedController+0x34>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <vBlueLedController+0x34>)
 8000638:	6013      	str	r3, [r2, #0]
		for(i=0 ; i<=700000 ; i++){}
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	e002      	b.n	8000646 <vBlueLedController+0x1e>
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <vBlueLedController+0x38>)
 800064a:	4293      	cmp	r3, r2
 800064c:	ddf8      	ble.n	8000640 <vBlueLedController+0x18>
		vTaskPrioritySet(red_handle , 3);
 800064e:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <vBlueLedController+0x3c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2103      	movs	r1, #3
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fa67 	bl	8003b28 <vTaskPrioritySet>
		BlueTaskProfiler++;
 800065a:	e7e9      	b.n	8000630 <vBlueLedController+0x8>
 800065c:	200000d0 	.word	0x200000d0
 8000660:	000aae60 	.word	0x000aae60
 8000664:	200000e0 	.word	0x200000e0

08000668 <vRedLedController>:
	}
}

void vRedLedController(void *pvParameter)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 8000670:	4b02      	ldr	r3, [pc, #8]	@ (800067c <vRedLedController+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a01      	ldr	r2, [pc, #4]	@ (800067c <vRedLedController+0x14>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e7f9      	b.n	8000670 <vRedLedController+0x8>
 800067c:	200000d4 	.word	0x200000d4

08000680 <vGreenLedController>:
	}
}

void vGreenLedController(void *pvParameter)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 8000688:	4b02      	ldr	r3, [pc, #8]	@ (8000694 <vGreenLedController+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a01      	ldr	r2, [pc, #4]	@ (8000694 <vGreenLedController+0x14>)
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	e7f9      	b.n	8000688 <vGreenLedController+0x8>
 8000694:	200000d8 	.word	0x200000d8

08000698 <__io_putchar>:
	}
}

//this function for printf to be used in printing sentences
int __io_putchar(int ch)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006a6:	2201      	movs	r2, #1
 80006a8:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <__io_putchar+0x20>)
 80006aa:	f001 fee9 	bl	8002480 <HAL_UART_Transmit>
	return ch;
 80006ae:	687b      	ldr	r3, [r7, #4]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000088 	.word	0x20000088

080006bc <SystemClock_Config>:

void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	@ 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 f8ab 	bl	8005826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a29      	ldr	r2, [pc, #164]	@ (8000790 <SystemClock_Config+0xd4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <SystemClock_Config+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000708:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <SystemClock_Config+0xd8>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <SystemClock_Config+0xd8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000730:	2310      	movs	r3, #16
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000734:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000738:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073a:	2304      	movs	r3, #4
 800073c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f90e 	bl	800196c <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000756:	f000 f8c9 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fd7c 	bl	8001274 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000782:	f000 f8b3 	bl	80008ec <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 fe06 	bl	80023e0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f887 	bl	80008ec <Error_Handler>
  }

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000088 	.word	0x20000088
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a2c      	ldr	r2, [pc, #176]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a25      	ldr	r2, [pc, #148]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <MX_GPIO_Init+0xd4>)
 8000878:	f000 fce2 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000882:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_GPIO_Init+0xd8>)
 8000894:	f000 fb40 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000898:	2320      	movs	r3, #32
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_GPIO_Init+0xd4>)
 80008b0:	f000 fb32 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	@ 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40020800 	.word	0x40020800

080008c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d101      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008da:	f000 fa1b 	bl	8000d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40010000 	.word	0x40010000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a11      	ldr	r2, [pc, #68]	@ (800094c <HAL_MspInit+0x54>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_MspInit+0x54>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fac1 	bl	8000ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	@ (80009d4 <HAL_UART_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12b      	bne.n	80009ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009aa:	230c      	movs	r3, #12
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <HAL_UART_MspInit+0x8c>)
 80009c6:	f000 faa7 	bl	8000f18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab0 <HAL_InitTick+0xd0>)
 80009f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f8:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab0 <HAL_InitTick+0xd0>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a00:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <HAL_InitTick+0xd0>)
 8000a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	f107 020c 	add.w	r2, r7, #12
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fd46 	bl	80014a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a1c:	f000 fd30 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 8000a20:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a24:	4a23      	ldr	r2, [pc, #140]	@ (8000ab4 <HAL_InitTick+0xd4>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	0c9b      	lsrs	r3, r3, #18
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a30:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a32:	4a22      	ldr	r2, [pc, #136]	@ (8000abc <HAL_InitTick+0xdc>)
 8000a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a36:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a56:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a58:	f001 fa26 	bl	8001ea8 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d11b      	bne.n	8000aa2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a6a:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <HAL_InitTick+0xd8>)
 8000a6c:	f001 fa76 	bl	8001f5c <HAL_TIM_Base_Start_IT>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d111      	bne.n	8000aa2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a7e:	2019      	movs	r0, #25
 8000a80:	f000 fa3c 	bl	8000efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	d808      	bhi.n	8000a9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 fa18 	bl	8000ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <HAL_InitTick+0xe0>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e002      	b.n	8000aa2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3730      	adds	r7, #48	@ 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	200000e8 	.word	0x200000e8
 8000abc:	40010000 	.word	0x40010000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b02:	f001 fa9b 	bl	800203c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000e8 	.word	0x200000e8

08000b10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e00a      	b.n	8000b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b22:	f3af 8000 	nop.w
 8000b26:	4601      	mov	r1, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf0      	blt.n	8000b22 <_read+0x12>
  }

  return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e009      	b.n	8000b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fd97 	bl	8000698 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf1      	blt.n	8000b5c <_write+0x12>
  }
  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_close>:

int _close(int file)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000baa:	605a      	str	r2, [r3, #4]
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_isatty>:

int _isatty(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f004 fe52 	bl	80058c4 <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20020000 	.word	0x20020000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	20000130 	.word	0x20000130
 8000c54:	20004bd0 	.word	0x20004bd0

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f004 fe11 	bl	80058d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc77 	bl	80005a0 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cc0:	08006554 	.word	0x08006554
  ldr r2, =_sbss
 8000cc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cc8:	20004bd0 	.word	0x20004bd0

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f8d8 	bl	8000eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f7ff fe6e 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fdf8 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000134 	.word	0x20000134

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000134 	.word	0x20000134

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	@ 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4c 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed6:	f7ff ff61 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	f7ff ffb1 	bl	8000e48 <NVIC_EncodePriority>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff80 	bl	8000df4 <__NVIC_SetPriority>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff54 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e165      	b.n	8001200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8154 	bne.w	80011fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80ae 	beq.w	80011fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <HAL_GPIO_Init+0x300>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001218 <HAL_GPIO_Init+0x300>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001218 <HAL_GPIO_Init+0x300>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a58      	ldr	r2, [pc, #352]	@ (800121c <HAL_GPIO_Init+0x304>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001220 <HAL_GPIO_Init+0x308>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001224 <HAL_GPIO_Init+0x30c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001228 <HAL_GPIO_Init+0x310>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	@ (800122c <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	@ (8001230 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x20a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4a      	ldr	r2, [pc, #296]	@ (8001234 <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x206>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a49      	ldr	r2, [pc, #292]	@ (8001238 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x202>
 8001116:	2306      	movs	r3, #6
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800111a:	2307      	movs	r3, #7
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x21c>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b3a      	ldr	r3, [pc, #232]	@ (800123c <HAL_GPIO_Init+0x324>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a31      	ldr	r2, [pc, #196]	@ (800123c <HAL_GPIO_Init+0x324>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <HAL_GPIO_Init+0x324>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a26      	ldr	r2, [pc, #152]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a11      	ldr	r2, [pc, #68]	@ (800123c <HAL_GPIO_Init+0x324>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f ae96 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40013c00 	.word	0x40013c00

08001240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0cc      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001288:	4b68      	ldr	r3, [pc, #416]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d90c      	bls.n	80012b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b65      	ldr	r3, [pc, #404]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b63      	ldr	r3, [pc, #396]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0b8      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c8:	4b59      	ldr	r3, [pc, #356]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a58      	ldr	r2, [pc, #352]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e0:	4b53      	ldr	r3, [pc, #332]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4a52      	ldr	r2, [pc, #328]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ec:	4b50      	ldr	r3, [pc, #320]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	494d      	ldr	r1, [pc, #308]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d044      	beq.n	8001394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d119      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e07f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d003      	beq.n	8001332 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132e:	2b03      	cmp	r3, #3
 8001330:	d107      	bne.n	8001342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001332:	4b3f      	ldr	r3, [pc, #252]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e06f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001342:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e067      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001352:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 0203 	bic.w	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4934      	ldr	r1, [pc, #208]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001364:	f7ff fcea 	bl	8000d3c <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	e00a      	b.n	8001382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136c:	f7ff fce6 	bl	8000d3c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e04f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001382:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 020c 	and.w	r2, r3, #12
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	429a      	cmp	r2, r3
 8001392:	d1eb      	bne.n	800136c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001394:	4b25      	ldr	r3, [pc, #148]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d20c      	bcs.n	80013bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_RCC_ClockConfig+0x1b8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e032      	b.n	8001422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4916      	ldr	r1, [pc, #88]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	490e      	ldr	r1, [pc, #56]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fa:	f000 f887 	bl	800150c <HAL_RCC_GetSysClockFreq>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	490a      	ldr	r1, [pc, #40]	@ (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	5ccb      	ldrb	r3, [r1, r3]
 800140e:	fa22 f303 	lsr.w	r3, r2, r3
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_RCC_ClockConfig+0x1c8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fae0 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023c00 	.word	0x40023c00
 8001430:	40023800 	.word	0x40023800
 8001434:	080064f8 	.word	0x080064f8
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_RCC_GetHCLKFreq+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000000 	.word	0x20000000

08001458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800145c:	f7ff fff0 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	0a9b      	lsrs	r3, r3, #10
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4903      	ldr	r1, [pc, #12]	@ (800147c <HAL_RCC_GetPCLK1Freq+0x24>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	08006508 	.word	0x08006508

08001480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001484:	f7ff ffdc 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	0b5b      	lsrs	r3, r3, #13
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	@ (80014a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	08006508 	.word	0x08006508

080014a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	220f      	movs	r2, #15
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <HAL_RCC_GetClockConfig+0x60>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 020f 	and.w	r2, r3, #15
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800150c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001510:	b0ae      	sub	sp, #184	@ 0xb8
 8001512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001532:	4bcb      	ldr	r3, [pc, #812]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b0c      	cmp	r3, #12
 800153c:	f200 8206 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x440>
 8001540:	a201      	add	r2, pc, #4	@ (adr r2, 8001548 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	0800157d 	.word	0x0800157d
 800154c:	0800194d 	.word	0x0800194d
 8001550:	0800194d 	.word	0x0800194d
 8001554:	0800194d 	.word	0x0800194d
 8001558:	08001585 	.word	0x08001585
 800155c:	0800194d 	.word	0x0800194d
 8001560:	0800194d 	.word	0x0800194d
 8001564:	0800194d 	.word	0x0800194d
 8001568:	0800158d 	.word	0x0800158d
 800156c:	0800194d 	.word	0x0800194d
 8001570:	0800194d 	.word	0x0800194d
 8001574:	0800194d 	.word	0x0800194d
 8001578:	0800177d 	.word	0x0800177d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800157c:	4bb9      	ldr	r3, [pc, #740]	@ (8001864 <HAL_RCC_GetSysClockFreq+0x358>)
 800157e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001582:	e1e7      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001584:	4bb8      	ldr	r3, [pc, #736]	@ (8001868 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800158a:	e1e3      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158c:	4bb4      	ldr	r3, [pc, #720]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001598:	4bb1      	ldr	r3, [pc, #708]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d071      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a4:	4bae      	ldr	r3, [pc, #696]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	2200      	movs	r2, #0
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015ca:	4622      	mov	r2, r4
 80015cc:	462b      	mov	r3, r5
 80015ce:	f04f 0000 	mov.w	r0, #0
 80015d2:	f04f 0100 	mov.w	r1, #0
 80015d6:	0159      	lsls	r1, r3, #5
 80015d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015dc:	0150      	lsls	r0, r2, #5
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4621      	mov	r1, r4
 80015e4:	1a51      	subs	r1, r2, r1
 80015e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80015e8:	4629      	mov	r1, r5
 80015ea:	eb63 0301 	sbc.w	r3, r3, r1
 80015ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015fc:	4649      	mov	r1, r9
 80015fe:	018b      	lsls	r3, r1, #6
 8001600:	4641      	mov	r1, r8
 8001602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001606:	4641      	mov	r1, r8
 8001608:	018a      	lsls	r2, r1, #6
 800160a:	4641      	mov	r1, r8
 800160c:	1a51      	subs	r1, r2, r1
 800160e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001610:	4649      	mov	r1, r9
 8001612:	eb63 0301 	sbc.w	r3, r3, r1
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001624:	4649      	mov	r1, r9
 8001626:	00cb      	lsls	r3, r1, #3
 8001628:	4641      	mov	r1, r8
 800162a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800162e:	4641      	mov	r1, r8
 8001630:	00ca      	lsls	r2, r1, #3
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	4603      	mov	r3, r0
 8001638:	4622      	mov	r2, r4
 800163a:	189b      	adds	r3, r3, r2
 800163c:	633b      	str	r3, [r7, #48]	@ 0x30
 800163e:	462b      	mov	r3, r5
 8001640:	460a      	mov	r2, r1
 8001642:	eb42 0303 	adc.w	r3, r2, r3
 8001646:	637b      	str	r3, [r7, #52]	@ 0x34
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001654:	4629      	mov	r1, r5
 8001656:	024b      	lsls	r3, r1, #9
 8001658:	4621      	mov	r1, r4
 800165a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800165e:	4621      	mov	r1, r4
 8001660:	024a      	lsls	r2, r1, #9
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800166a:	2200      	movs	r2, #0
 800166c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001674:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001678:	f7fe fe1a 	bl	80002b0 <__aeabi_uldivmod>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4613      	mov	r3, r2
 8001682:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001686:	e067      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001688:	4b75      	ldr	r3, [pc, #468]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	099b      	lsrs	r3, r3, #6
 800168e:	2200      	movs	r2, #0
 8001690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001694:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001698:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800169c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016a2:	2300      	movs	r3, #0
 80016a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016aa:	4622      	mov	r2, r4
 80016ac:	462b      	mov	r3, r5
 80016ae:	f04f 0000 	mov.w	r0, #0
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	0159      	lsls	r1, r3, #5
 80016b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016bc:	0150      	lsls	r0, r2, #5
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4621      	mov	r1, r4
 80016c4:	1a51      	subs	r1, r2, r1
 80016c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016c8:	4629      	mov	r1, r5
 80016ca:	eb63 0301 	sbc.w	r3, r3, r1
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016dc:	4649      	mov	r1, r9
 80016de:	018b      	lsls	r3, r1, #6
 80016e0:	4641      	mov	r1, r8
 80016e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e6:	4641      	mov	r1, r8
 80016e8:	018a      	lsls	r2, r1, #6
 80016ea:	4641      	mov	r1, r8
 80016ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80016f0:	4649      	mov	r1, r9
 80016f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001702:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800170a:	4692      	mov	sl, r2
 800170c:	469b      	mov	fp, r3
 800170e:	4623      	mov	r3, r4
 8001710:	eb1a 0303 	adds.w	r3, sl, r3
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	462b      	mov	r3, r5
 8001718:	eb4b 0303 	adc.w	r3, fp, r3
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800172a:	4629      	mov	r1, r5
 800172c:	028b      	lsls	r3, r1, #10
 800172e:	4621      	mov	r1, r4
 8001730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001734:	4621      	mov	r1, r4
 8001736:	028a      	lsls	r2, r1, #10
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001740:	2200      	movs	r2, #0
 8001742:	673b      	str	r3, [r7, #112]	@ 0x70
 8001744:	677a      	str	r2, [r7, #116]	@ 0x74
 8001746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800174a:	f7fe fdb1 	bl	80002b0 <__aeabi_uldivmod>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4613      	mov	r3, r2
 8001754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001758:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800176a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800176e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800177a:	e0eb      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177c:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001784:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001788:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d06b      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001794:	4b32      	ldr	r3, [pc, #200]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	2200      	movs	r2, #0
 800179c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800179e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80017a8:	2300      	movs	r3, #0
 80017aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80017ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017b0:	4622      	mov	r2, r4
 80017b2:	462b      	mov	r3, r5
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	0159      	lsls	r1, r3, #5
 80017be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c2:	0150      	lsls	r0, r2, #5
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4621      	mov	r1, r4
 80017ca:	1a51      	subs	r1, r2, r1
 80017cc:	61b9      	str	r1, [r7, #24]
 80017ce:	4629      	mov	r1, r5
 80017d0:	eb63 0301 	sbc.w	r3, r3, r1
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017e2:	4659      	mov	r1, fp
 80017e4:	018b      	lsls	r3, r1, #6
 80017e6:	4651      	mov	r1, sl
 80017e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ec:	4651      	mov	r1, sl
 80017ee:	018a      	lsls	r2, r1, #6
 80017f0:	4651      	mov	r1, sl
 80017f2:	ebb2 0801 	subs.w	r8, r2, r1
 80017f6:	4659      	mov	r1, fp
 80017f8:	eb63 0901 	sbc.w	r9, r3, r1
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001808:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800180c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001810:	4690      	mov	r8, r2
 8001812:	4699      	mov	r9, r3
 8001814:	4623      	mov	r3, r4
 8001816:	eb18 0303 	adds.w	r3, r8, r3
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	462b      	mov	r3, r5
 800181e:	eb49 0303 	adc.w	r3, r9, r3
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001830:	4629      	mov	r1, r5
 8001832:	024b      	lsls	r3, r1, #9
 8001834:	4621      	mov	r1, r4
 8001836:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800183a:	4621      	mov	r1, r4
 800183c:	024a      	lsls	r2, r1, #9
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001846:	2200      	movs	r2, #0
 8001848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800184a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800184c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001850:	f7fe fd2e 	bl	80002b0 <__aeabi_uldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4613      	mov	r3, r2
 800185a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800185e:	e065      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x420>
 8001860:	40023800 	.word	0x40023800
 8001864:	00f42400 	.word	0x00f42400
 8001868:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186c:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x458>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	2200      	movs	r2, #0
 8001874:	4618      	mov	r0, r3
 8001876:	4611      	mov	r1, r2
 8001878:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800187c:	653b      	str	r3, [r7, #80]	@ 0x50
 800187e:	2300      	movs	r3, #0
 8001880:	657b      	str	r3, [r7, #84]	@ 0x54
 8001882:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001886:	4642      	mov	r2, r8
 8001888:	464b      	mov	r3, r9
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	0159      	lsls	r1, r3, #5
 8001894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001898:	0150      	lsls	r0, r2, #5
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4641      	mov	r1, r8
 80018a0:	1a51      	subs	r1, r2, r1
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	4649      	mov	r1, r9
 80018a6:	eb63 0301 	sbc.w	r3, r3, r1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018b8:	4659      	mov	r1, fp
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4651      	mov	r1, sl
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4651      	mov	r1, sl
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4651      	mov	r1, sl
 80018c8:	1a54      	subs	r4, r2, r1
 80018ca:	4659      	mov	r1, fp
 80018cc:	eb63 0501 	sbc.w	r5, r3, r1
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00eb      	lsls	r3, r5, #3
 80018da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	4643      	mov	r3, r8
 80018e6:	18e3      	adds	r3, r4, r3
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	464b      	mov	r3, r9
 80018ec:	eb45 0303 	adc.w	r3, r5, r3
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fe:	4629      	mov	r1, r5
 8001900:	028b      	lsls	r3, r1, #10
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001908:	4621      	mov	r1, r4
 800190a:	028a      	lsls	r2, r1, #10
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001914:	2200      	movs	r2, #0
 8001916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001918:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800191a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800191e:	f7fe fcc7 	bl	80002b0 <__aeabi_uldivmod>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4613      	mov	r3, r2
 8001928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x458>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	0f1b      	lsrs	r3, r3, #28
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800193a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800193e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800194a:	e003      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x45c>)
 800194e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001952:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001958:	4618      	mov	r0, r3
 800195a:	37b8      	adds	r7, #184	@ 0xb8
 800195c:	46bd      	mov	sp, r7
 800195e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400

0800196c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e28d      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8083 	beq.w	8001a92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800198c:	4b94      	ldr	r3, [pc, #592]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b04      	cmp	r3, #4
 8001996:	d019      	beq.n	80019cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001998:	4b91      	ldr	r3, [pc, #580]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
        || \
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019a4:	4b8e      	ldr	r3, [pc, #568]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019b0:	d00c      	beq.n	80019cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b2:	4b8b      	ldr	r3, [pc, #556]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d112      	bne.n	80019e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	4b88      	ldr	r3, [pc, #544]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	4b84      	ldr	r3, [pc, #528]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d05b      	beq.n	8001a90 <HAL_RCC_OscConfig+0x124>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d157      	bne.n	8001a90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e25a      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x90>
 80019ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7b      	ldr	r2, [pc, #492]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xcc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0xb4>
 8001a06:	4b76      	ldr	r3, [pc, #472]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a75      	ldr	r2, [pc, #468]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b73      	ldr	r3, [pc, #460]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a72      	ldr	r2, [pc, #456]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xcc>
 8001a20:	4b6f      	ldr	r3, [pc, #444]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6e      	ldr	r2, [pc, #440]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6b      	ldr	r2, [pc, #428]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f97c 	bl	8000d3c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff f978 	bl	8000d3c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e21f      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b61      	ldr	r3, [pc, #388]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xdc>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f968 	bl	8000d3c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff f964 	bl	8000d3c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	@ 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e20b      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	4b57      	ldr	r3, [pc, #348]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x104>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d06f      	beq.n	8001b7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a9e:	4b50      	ldr	r3, [pc, #320]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d017      	beq.n	8001ada <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	4b41      	ldr	r3, [pc, #260]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x186>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1d3      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4937      	ldr	r1, [pc, #220]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_RCC_OscConfig+0x278>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff f911 	bl	8000d3c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f90d 	bl	8000d3c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1b4      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b28      	ldr	r3, [pc, #160]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4925      	ldr	r1, [pc, #148]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_RCC_OscConfig+0x278>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f8f0 	bl	8000d3c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff f8ec 	bl	8000d3c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e193      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d036      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff f8d0 	bl	8000d3c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff f8cc 	bl	8000d3c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e173      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x234>
 8001bbe:	e01b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f8b9 	bl	8000d3c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	e00e      	b.n	8001bec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff f8b5 	bl	8000d3c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d907      	bls.n	8001bec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e15c      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
 8001be0:	40023800 	.word	0x40023800
 8001be4:	42470000 	.word	0x42470000
 8001be8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	4b8a      	ldr	r3, [pc, #552]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ea      	bne.n	8001bce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8097 	beq.w	8001d34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b83      	ldr	r3, [pc, #524]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b7c      	ldr	r3, [pc, #496]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b79      	ldr	r3, [pc, #484]	@ (8001e1c <HAL_RCC_OscConfig+0x4b0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b76      	ldr	r3, [pc, #472]	@ (8001e1c <HAL_RCC_OscConfig+0x4b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a75      	ldr	r2, [pc, #468]	@ (8001e1c <HAL_RCC_OscConfig+0x4b0>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f875 	bl	8000d3c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff f871 	bl	8000d3c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e118      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b6c      	ldr	r3, [pc, #432]	@ (8001e1c <HAL_RCC_OscConfig+0x4b0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x31e>
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c80:	4a65      	ldr	r2, [pc, #404]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x358>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x340>
 8001c92:	4b61      	ldr	r3, [pc, #388]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	4a60      	ldr	r2, [pc, #384]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x358>
 8001cac:	4b5a      	ldr	r3, [pc, #360]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb0:	4a59      	ldr	r2, [pc, #356]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb8:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbc:	4a56      	ldr	r2, [pc, #344]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d015      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f836 	bl	8000d3c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f832 	bl	8000d3c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0d7      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	4b4b      	ldr	r3, [pc, #300]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0ee      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x368>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f820 	bl	8000d3c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7ff f81c 	bl	8000d3c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0c1      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d16:	4b40      	ldr	r3, [pc, #256]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ee      	bne.n	8001d00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80ad 	beq.w	8001e98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3e:	4b36      	ldr	r3, [pc, #216]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d060      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d145      	bne.n	8001dde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d52:	4b33      	ldr	r3, [pc, #204]	@ (8001e20 <HAL_RCC_OscConfig+0x4b4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7fe fff0 	bl	8000d3c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe ffec 	bl	8000d3c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e093      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	071b      	lsls	r3, r3, #28
 8001daa:	491b      	ldr	r1, [pc, #108]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_RCC_OscConfig+0x4b4>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7fe ffc1 	bl	8000d3c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7fe ffbd 	bl	8000d3c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e064      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x452>
 8001ddc:	e05c      	b.n	8001e98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_RCC_OscConfig+0x4b4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe ffaa 	bl	8000d3c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe ffa6 	bl	8000d3c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e04d      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_RCC_OscConfig+0x4ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x480>
 8001e0a:	e045      	b.n	8001e98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e040      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_RCC_OscConfig+0x538>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d030      	beq.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d129      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d122      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d119      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d10f      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e041      	b.n	8001f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f839 	bl	8001f46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f000 f9c0 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d001      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e04e      	b.n	8002012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a23      	ldr	r2, [pc, #140]	@ (8002020 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d022      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f9e:	d01d      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002024 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d018      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800202c <HAL_TIM_Base_Start_IT+0xd0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00e      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002030 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d009      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a18      	ldr	r2, [pc, #96]	@ (8002038 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d111      	bne.n	8002000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d010      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffe:	e007      	b.n	8002010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40010000 	.word	0x40010000
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40010400 	.word	0x40010400
 8002034:	40014000 	.word	0x40014000
 8002038:	40001800 	.word	0x40001800

0800203c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d020      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0202 	mvn.w	r2, #2
 8002070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8d2 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8c4 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8d5 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d020      	beq.n	80020ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01b      	beq.n	80020ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0204 	mvn.w	r2, #4
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8ac 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f89e 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f8af 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d020      	beq.n	8002138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01b      	beq.n	8002138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0208 	mvn.w	r2, #8
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f886 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f878 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f889 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d020      	beq.n	8002184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0210 	mvn.w	r2, #16
 8002154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2208      	movs	r2, #8
 800215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f860 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 8002170:	e005      	b.n	800217e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f852 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f863 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0201 	mvn.w	r2, #1
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fb90 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f900 	bl	80023cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00c      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f834 	bl	8002258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0220 	mvn.w	r2, #32
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8d2 	bl	80023b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a43      	ldr	r2, [pc, #268]	@ (800238c <TIM_Base_SetConfig+0x120>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800228a:	d00f      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a40      	ldr	r2, [pc, #256]	@ (8002390 <TIM_Base_SetConfig+0x124>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00b      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3f      	ldr	r2, [pc, #252]	@ (8002394 <TIM_Base_SetConfig+0x128>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3e      	ldr	r2, [pc, #248]	@ (8002398 <TIM_Base_SetConfig+0x12c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3d      	ldr	r2, [pc, #244]	@ (800239c <TIM_Base_SetConfig+0x130>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a32      	ldr	r2, [pc, #200]	@ (800238c <TIM_Base_SetConfig+0x120>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022cc:	d027      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002390 <TIM_Base_SetConfig+0x124>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d023      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002394 <TIM_Base_SetConfig+0x128>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002398 <TIM_Base_SetConfig+0x12c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <TIM_Base_SetConfig+0x130>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d017      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2b      	ldr	r2, [pc, #172]	@ (80023a0 <TIM_Base_SetConfig+0x134>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	@ (80023a4 <TIM_Base_SetConfig+0x138>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00f      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a29      	ldr	r2, [pc, #164]	@ (80023a8 <TIM_Base_SetConfig+0x13c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a28      	ldr	r2, [pc, #160]	@ (80023ac <TIM_Base_SetConfig+0x140>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a27      	ldr	r2, [pc, #156]	@ (80023b0 <TIM_Base_SetConfig+0x144>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a26      	ldr	r2, [pc, #152]	@ (80023b4 <TIM_Base_SetConfig+0x148>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d108      	bne.n	8002330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a0e      	ldr	r2, [pc, #56]	@ (800238c <TIM_Base_SetConfig+0x120>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0xf2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a10      	ldr	r2, [pc, #64]	@ (800239c <TIM_Base_SetConfig+0x130>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d103      	bne.n	8002366 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	601a      	str	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40010000 	.word	0x40010000
 8002390:	40000400 	.word	0x40000400
 8002394:	40000800 	.word	0x40000800
 8002398:	40000c00 	.word	0x40000c00
 800239c:	40010400 	.word	0x40010400
 80023a0:	40014000 	.word	0x40014000
 80023a4:	40014400 	.word	0x40014400
 80023a8:	40014800 	.word	0x40014800
 80023ac:	40001800 	.word	0x40001800
 80023b0:	40001c00 	.word	0x40001c00
 80023b4:	40002000 	.word	0x40002000

080023b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e042      	b.n	8002478 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe faa2 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	@ 0x24
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f973 	bl	8002710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	@ 0x28
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	d175      	bne.n	800258c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_UART_Transmit+0x2c>
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e06e      	b.n	800258e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2221      	movs	r2, #33	@ 0x21
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024be:	f7fe fc3d 	bl	8000d3c <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d8:	d108      	bne.n	80024ec <HAL_UART_Transmit+0x6c>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	e003      	b.n	80024f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024f4:	e02e      	b.n	8002554 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2180      	movs	r1, #128	@ 0x80
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f848 	bl	8002596 <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e03a      	b.n	800258e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10b      	bne.n	8002536 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800252c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	3302      	adds	r3, #2
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	e007      	b.n	8002546 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	3301      	adds	r3, #1
 8002544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1cb      	bne.n	80024f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2200      	movs	r2, #0
 8002566:	2140      	movs	r1, #64	@ 0x40
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f814 	bl	8002596 <UART_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e006      	b.n	800258e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a6:	e03b      	b.n	8002620 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d037      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b0:	f7fe fbc4 	bl	8000d3c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	6a3a      	ldr	r2, [r7, #32]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d302      	bcc.n	80025c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e03a      	b.n	8002640 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d023      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b80      	cmp	r3, #128	@ 0x80
 80025dc:	d020      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b40      	cmp	r3, #64	@ 0x40
 80025e2:	d01d      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d116      	bne.n	8002620 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f81d 	bl	8002648 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2208      	movs	r2, #8
 8002612:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e00f      	b.n	8002640 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	429a      	cmp	r2, r3
 800263c:	d0b4      	beq.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002648:	b480      	push	{r7}
 800264a:	b095      	sub	sp, #84	@ 0x54
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	330c      	adds	r3, #12
 8002656:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265a:	e853 3f00 	ldrex	r3, [r3]
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002662:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	330c      	adds	r3, #12
 800266e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002670:	643a      	str	r2, [r7, #64]	@ 0x40
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002674:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002676:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002678:	e841 2300 	strex	r3, r2, [r1]
 800267c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e5      	bne.n	8002650 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3314      	adds	r3, #20
 800268a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	e853 3f00 	ldrex	r3, [r3]
 8002692:	61fb      	str	r3, [r7, #28]
   return(result);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3314      	adds	r3, #20
 80026a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ac:	e841 2300 	strex	r3, r2, [r1]
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e5      	bne.n	8002684 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d119      	bne.n	80026f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	330c      	adds	r3, #12
 80026c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	e853 3f00 	ldrex	r3, [r3]
 80026ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f023 0310 	bic.w	r3, r3, #16
 80026d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026e0:	61ba      	str	r2, [r7, #24]
 80026e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e4:	6979      	ldr	r1, [r7, #20]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	e841 2300 	strex	r3, r2, [r1]
 80026ec:	613b      	str	r3, [r7, #16]
   return(result);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e5      	bne.n	80026c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002702:	bf00      	nop
 8002704:	3754      	adds	r7, #84	@ 0x54
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002714:	b0c0      	sub	sp, #256	@ 0x100
 8002716:	af00      	add	r7, sp, #0
 8002718:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	68d9      	ldr	r1, [r3, #12]
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	ea40 0301 	orr.w	r3, r0, r1
 8002738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	431a      	orrs	r2, r3
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	431a      	orrs	r2, r3
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002768:	f021 010c 	bic.w	r1, r1, #12
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002776:	430b      	orrs	r3, r1
 8002778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800277a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278a:	6999      	ldr	r1, [r3, #24]
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	ea40 0301 	orr.w	r3, r0, r1
 8002796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b8f      	ldr	r3, [pc, #572]	@ (80029dc <UART_SetConfig+0x2cc>)
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d005      	beq.n	80027b0 <UART_SetConfig+0xa0>
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b8d      	ldr	r3, [pc, #564]	@ (80029e0 <UART_SetConfig+0x2d0>)
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d104      	bne.n	80027ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027b0:	f7fe fe66 	bl	8001480 <HAL_RCC_GetPCLK2Freq>
 80027b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027b8:	e003      	b.n	80027c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ba:	f7fe fe4d 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 80027be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027cc:	f040 810c 	bne.w	80029e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027e2:	4622      	mov	r2, r4
 80027e4:	462b      	mov	r3, r5
 80027e6:	1891      	adds	r1, r2, r2
 80027e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027ea:	415b      	adcs	r3, r3
 80027ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027f2:	4621      	mov	r1, r4
 80027f4:	eb12 0801 	adds.w	r8, r2, r1
 80027f8:	4629      	mov	r1, r5
 80027fa:	eb43 0901 	adc.w	r9, r3, r1
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002812:	4690      	mov	r8, r2
 8002814:	4699      	mov	r9, r3
 8002816:	4623      	mov	r3, r4
 8002818:	eb18 0303 	adds.w	r3, r8, r3
 800281c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002820:	462b      	mov	r3, r5
 8002822:	eb49 0303 	adc.w	r3, r9, r3
 8002826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800282a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002836:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800283a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800283e:	460b      	mov	r3, r1
 8002840:	18db      	adds	r3, r3, r3
 8002842:	653b      	str	r3, [r7, #80]	@ 0x50
 8002844:	4613      	mov	r3, r2
 8002846:	eb42 0303 	adc.w	r3, r2, r3
 800284a:	657b      	str	r3, [r7, #84]	@ 0x54
 800284c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002854:	f7fd fd2c 	bl	80002b0 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4b61      	ldr	r3, [pc, #388]	@ (80029e4 <UART_SetConfig+0x2d4>)
 800285e:	fba3 2302 	umull	r2, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	011c      	lsls	r4, r3, #4
 8002866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002870:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	1891      	adds	r1, r2, r2
 800287e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002880:	415b      	adcs	r3, r3
 8002882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002888:	4641      	mov	r1, r8
 800288a:	eb12 0a01 	adds.w	sl, r2, r1
 800288e:	4649      	mov	r1, r9
 8002890:	eb43 0b01 	adc.w	fp, r3, r1
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028a8:	4692      	mov	sl, r2
 80028aa:	469b      	mov	fp, r3
 80028ac:	4643      	mov	r3, r8
 80028ae:	eb1a 0303 	adds.w	r3, sl, r3
 80028b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028b6:	464b      	mov	r3, r9
 80028b8:	eb4b 0303 	adc.w	r3, fp, r3
 80028bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028d4:	460b      	mov	r3, r1
 80028d6:	18db      	adds	r3, r3, r3
 80028d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80028da:	4613      	mov	r3, r2
 80028dc:	eb42 0303 	adc.w	r3, r2, r3
 80028e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028ea:	f7fd fce1 	bl	80002b0 <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <UART_SetConfig+0x2d4>)
 80028f6:	fba3 2301 	umull	r2, r3, r3, r1
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2264      	movs	r2, #100	@ 0x64
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800290a:	4b36      	ldr	r3, [pc, #216]	@ (80029e4 <UART_SetConfig+0x2d4>)
 800290c:	fba3 2302 	umull	r2, r3, r3, r2
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002918:	441c      	add	r4, r3
 800291a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002924:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	1891      	adds	r1, r2, r2
 8002932:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002934:	415b      	adcs	r3, r3
 8002936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800293c:	4641      	mov	r1, r8
 800293e:	1851      	adds	r1, r2, r1
 8002940:	6339      	str	r1, [r7, #48]	@ 0x30
 8002942:	4649      	mov	r1, r9
 8002944:	414b      	adcs	r3, r1
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002954:	4659      	mov	r1, fp
 8002956:	00cb      	lsls	r3, r1, #3
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295e:	4651      	mov	r1, sl
 8002960:	00ca      	lsls	r2, r1, #3
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	4603      	mov	r3, r0
 8002968:	4642      	mov	r2, r8
 800296a:	189b      	adds	r3, r3, r2
 800296c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002970:	464b      	mov	r3, r9
 8002972:	460a      	mov	r2, r1
 8002974:	eb42 0303 	adc.w	r3, r2, r3
 8002978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002988:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800298c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002990:	460b      	mov	r3, r1
 8002992:	18db      	adds	r3, r3, r3
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002996:	4613      	mov	r3, r2
 8002998:	eb42 0303 	adc.w	r3, r2, r3
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800299e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029a6:	f7fd fc83 	bl	80002b0 <__aeabi_uldivmod>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <UART_SetConfig+0x2d4>)
 80029b0:	fba3 1302 	umull	r1, r3, r3, r2
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	2164      	movs	r1, #100	@ 0x64
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	3332      	adds	r3, #50	@ 0x32
 80029c2:	4a08      	ldr	r2, [pc, #32]	@ (80029e4 <UART_SetConfig+0x2d4>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4422      	add	r2, r4
 80029d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029d8:	e106      	b.n	8002be8 <UART_SetConfig+0x4d8>
 80029da:	bf00      	nop
 80029dc:	40011000 	.word	0x40011000
 80029e0:	40011400 	.word	0x40011400
 80029e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029fa:	4642      	mov	r2, r8
 80029fc:	464b      	mov	r3, r9
 80029fe:	1891      	adds	r1, r2, r2
 8002a00:	6239      	str	r1, [r7, #32]
 8002a02:	415b      	adcs	r3, r3
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a0a:	4641      	mov	r1, r8
 8002a0c:	1854      	adds	r4, r2, r1
 8002a0e:	4649      	mov	r1, r9
 8002a10:	eb43 0501 	adc.w	r5, r3, r1
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	00eb      	lsls	r3, r5, #3
 8002a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a22:	00e2      	lsls	r2, r4, #3
 8002a24:	4614      	mov	r4, r2
 8002a26:	461d      	mov	r5, r3
 8002a28:	4643      	mov	r3, r8
 8002a2a:	18e3      	adds	r3, r4, r3
 8002a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a30:	464b      	mov	r3, r9
 8002a32:	eb45 0303 	adc.w	r3, r5, r3
 8002a36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a56:	4629      	mov	r1, r5
 8002a58:	008b      	lsls	r3, r1, #2
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a60:	4621      	mov	r1, r4
 8002a62:	008a      	lsls	r2, r1, #2
 8002a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a68:	f7fd fc22 	bl	80002b0 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4b60      	ldr	r3, [pc, #384]	@ (8002bf4 <UART_SetConfig+0x4e4>)
 8002a72:	fba3 2302 	umull	r2, r3, r3, r2
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	011c      	lsls	r4, r3, #4
 8002a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	1891      	adds	r1, r2, r2
 8002a92:	61b9      	str	r1, [r7, #24]
 8002a94:	415b      	adcs	r3, r3
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	1851      	adds	r1, r2, r1
 8002aa0:	6139      	str	r1, [r7, #16]
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	414b      	adcs	r3, r1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	00cb      	lsls	r3, r1, #3
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002abe:	4651      	mov	r1, sl
 8002ac0:	00ca      	lsls	r2, r1, #3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4642      	mov	r2, r8
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	eb42 0303 	adc.w	r3, r2, r3
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ae6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002af4:	4649      	mov	r1, r9
 8002af6:	008b      	lsls	r3, r1, #2
 8002af8:	4641      	mov	r1, r8
 8002afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002afe:	4641      	mov	r1, r8
 8002b00:	008a      	lsls	r2, r1, #2
 8002b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b06:	f7fd fbd3 	bl	80002b0 <__aeabi_uldivmod>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4b38      	ldr	r3, [pc, #224]	@ (8002bf4 <UART_SetConfig+0x4e4>)
 8002b12:	fba3 2301 	umull	r2, r3, r3, r1
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2264      	movs	r2, #100	@ 0x64
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	1acb      	subs	r3, r1, r3
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	3332      	adds	r3, #50	@ 0x32
 8002b24:	4a33      	ldr	r2, [pc, #204]	@ (8002bf4 <UART_SetConfig+0x4e4>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b30:	441c      	add	r4, r3
 8002b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b36:	2200      	movs	r2, #0
 8002b38:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b40:	4642      	mov	r2, r8
 8002b42:	464b      	mov	r3, r9
 8002b44:	1891      	adds	r1, r2, r2
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	415b      	adcs	r3, r3
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b50:	4641      	mov	r1, r8
 8002b52:	1851      	adds	r1, r2, r1
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	4649      	mov	r1, r9
 8002b58:	414b      	adcs	r3, r1
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b68:	4659      	mov	r1, fp
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4651      	mov	r1, sl
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b82:	464b      	mov	r3, r9
 8002b84:	460a      	mov	r2, r1
 8002b86:	eb42 0303 	adc.w	r3, r2, r3
 8002b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b96:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	008b      	lsls	r3, r1, #2
 8002ba8:	4641      	mov	r1, r8
 8002baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bae:	4641      	mov	r1, r8
 8002bb0:	008a      	lsls	r2, r1, #2
 8002bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bb6:	f7fd fb7b 	bl	80002b0 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <UART_SetConfig+0x4e4>)
 8002bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	2164      	movs	r1, #100	@ 0x64
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	3332      	adds	r3, #50	@ 0x32
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <UART_SetConfig+0x4e4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4422      	add	r2, r4
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	bf00      	nop
 8002bea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf4:	51eb851f 	.word	0x51eb851f

08002bf8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <SysTick_Handler+0x1c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002c00:	f001 fc7e 	bl	8004500 <xTaskGetSchedulerState>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d001      	beq.n	8002c0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c0a:	f002 fa75 	bl	80050f8 <xPortSysTickHandler>
  }
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4a06      	ldr	r2, [pc, #24]	@ (8002c48 <vApplicationGetIdleTaskMemory+0x30>)
 8002c2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2280      	movs	r2, #128	@ 0x80
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000138 	.word	0x20000138
 8002c48:	20000194 	.word	0x20000194

08002c4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4a06      	ldr	r2, [pc, #24]	@ (8002c7c <vApplicationGetTimerTaskMemory+0x30>)
 8002c62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	20000394 	.word	0x20000394
 8002c7c:	200003f0 	.word	0x200003f0

08002c80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f103 0208 	add.w	r2, r3, #8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f103 0208 	add.w	r2, r3, #8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f103 0208 	add.w	r2, r3, #8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d103      	bne.n	8002d42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e00c      	b.n	8002d5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3308      	adds	r3, #8
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	e002      	b.n	8002d50 <vListInsert+0x2e>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d2f6      	bcs.n	8002d4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	601a      	str	r2, [r3, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6892      	ldr	r2, [r2, #8]
 8002daa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6852      	ldr	r2, [r2, #4]
 8002db4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d103      	bne.n	8002dc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	1e5a      	subs	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e0e:	bf00      	nop
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e14:	f002 f8e0 	bl	8004fd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	441a      	add	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e44:	3b01      	subs	r3, #1
 8002e46:	68f9      	ldr	r1, [r7, #12]
 8002e48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	441a      	add	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	22ff      	movs	r2, #255	@ 0xff
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	22ff      	movs	r2, #255	@ 0xff
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d114      	bne.n	8002e94 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01a      	beq.n	8002ea8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3310      	adds	r3, #16
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 f982 	bl	8004180 <xTaskRemoveFromEventList>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d012      	beq.n	8002ea8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <xQueueGenericReset+0xd0>)
 8002e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	e009      	b.n	8002ea8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3310      	adds	r3, #16
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fef1 	bl	8002c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3324      	adds	r3, #36	@ 0x24
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff feec 	bl	8002c80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ea8:	f002 f8c8 	bl	800503c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08e      	sub	sp, #56	@ 0x38
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	e7fd      	b.n	8002f02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <xQueueGenericCreateStatic+0x56>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <xQueueGenericCreateStatic+0x5a>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <xQueueGenericCreateStatic+0x5c>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	623b      	str	r3, [r7, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <xQueueGenericCreateStatic+0x84>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <xQueueGenericCreateStatic+0x88>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <xQueueGenericCreateStatic+0x8a>
 8002f44:	2300      	movs	r3, #0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	61fb      	str	r3, [r7, #28]
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	e7fd      	b.n	8002f5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f62:	2350      	movs	r3, #80	@ 0x50
 8002f64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b50      	cmp	r3, #80	@ 0x50
 8002f6a:	d00b      	beq.n	8002f84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61bb      	str	r3, [r7, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	e7fd      	b.n	8002f80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00d      	beq.n	8002fac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f805 	bl	8002fb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3730      	adds	r7, #48	@ 0x30
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e002      	b.n	8002fd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	69b8      	ldr	r0, [r7, #24]
 8002fe8:	f7ff fefe 	bl	8002de8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08e      	sub	sp, #56	@ 0x38
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <xQueueGenericSend+0x34>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <xQueueGenericSend+0x42>
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <xQueueGenericSend+0x46>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <xQueueGenericSend+0x48>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <xQueueGenericSend+0x64>
	__asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d103      	bne.n	800306e <xQueueGenericSend+0x72>
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <xQueueGenericSend+0x76>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <xQueueGenericSend+0x78>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xQueueGenericSend+0x94>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	623b      	str	r3, [r7, #32]
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003090:	f001 fa36 	bl	8004500 <xTaskGetSchedulerState>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <xQueueGenericSend+0xa4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <xQueueGenericSend+0xa8>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <xQueueGenericSend+0xaa>
 80030a4:	2300      	movs	r3, #0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	61fb      	str	r3, [r7, #28]
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	e7fd      	b.n	80030be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030c2:	f001 ff89 	bl	8004fd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <xQueueGenericSend+0xdc>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d129      	bne.n	800312c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030de:	f000 fa0f 	bl	8003500 <prvCopyDataToQueue>
 80030e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	3324      	adds	r3, #36	@ 0x24
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 f845 	bl	8004180 <xTaskRemoveFromEventList>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030fc:	4b3f      	ldr	r3, [pc, #252]	@ (80031fc <xQueueGenericSend+0x200>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	e00a      	b.n	8003124 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003114:	4b39      	ldr	r3, [pc, #228]	@ (80031fc <xQueueGenericSend+0x200>)
 8003116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003124:	f001 ff8a 	bl	800503c <vPortExitCritical>
				return pdPASS;
 8003128:	2301      	movs	r3, #1
 800312a:	e063      	b.n	80031f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003132:	f001 ff83 	bl	800503c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003136:	2300      	movs	r3, #0
 8003138:	e05c      	b.n	80031f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800313a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4618      	mov	r0, r3
 8003146:	f001 f87f 	bl	8004248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800314a:	2301      	movs	r3, #1
 800314c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800314e:	f001 ff75 	bl	800503c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003152:	f000 fdef 	bl	8003d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003156:	f001 ff3f 	bl	8004fd8 <vPortEnterCritical>
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003160:	b25b      	sxtb	r3, r3
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d103      	bne.n	8003170 <xQueueGenericSend+0x174>
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003176:	b25b      	sxtb	r3, r3
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d103      	bne.n	8003186 <xQueueGenericSend+0x18a>
 800317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003186:	f001 ff59 	bl	800503c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800318a:	1d3a      	adds	r2, r7, #4
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f001 f86e 	bl	8004274 <xTaskCheckForTimeOut>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d124      	bne.n	80031e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800319e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031a0:	f000 faa6 	bl	80036f0 <prvIsQueueFull>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d018      	beq.n	80031dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ac:	3310      	adds	r3, #16
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 ff92 	bl	80040dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031ba:	f000 fa31 	bl	8003620 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031be:	f000 fdc7 	bl	8003d50 <xTaskResumeAll>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f af7c 	bne.w	80030c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031ca:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <xQueueGenericSend+0x200>)
 80031cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	e772      	b.n	80030c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031de:	f000 fa1f 	bl	8003620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031e2:	f000 fdb5 	bl	8003d50 <xTaskResumeAll>
 80031e6:	e76c      	b.n	80030c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031ea:	f000 fa19 	bl	8003620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ee:	f000 fdaf 	bl	8003d50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3738      	adds	r7, #56	@ 0x38
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b090      	sub	sp, #64	@ 0x40
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <xQueueGenericSendFromISR+0x3e>
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <xQueueGenericSendFromISR+0x42>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <xQueueGenericSendFromISR+0x44>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	e7fd      	b.n	800325c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d103      	bne.n	800326e <xQueueGenericSendFromISR+0x6e>
 8003266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <xQueueGenericSendFromISR+0x72>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <xQueueGenericSendFromISR+0x74>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	623b      	str	r3, [r7, #32]
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003290:	f001 ff82 	bl	8005198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003294:	f3ef 8211 	mrs	r2, BASEPRI
 8003298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	61fa      	str	r2, [r7, #28]
 80032aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d302      	bcc.n	80032c2 <xQueueGenericSendFromISR+0xc2>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d12f      	bne.n	8003322 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032d8:	f000 f912 	bl	8003500 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d112      	bne.n	800330c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	3324      	adds	r3, #36	@ 0x24
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 ff44 	bl	8004180 <xTaskRemoveFromEventList>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00e      	beq.n	800331c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e007      	b.n	800331c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800330c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003310:	3301      	adds	r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	b25a      	sxtb	r2, r3
 8003316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800331c:	2301      	movs	r3, #1
 800331e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003320:	e001      	b.n	8003326 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003322:	2300      	movs	r3, #0
 8003324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003328:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003330:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003334:	4618      	mov	r0, r3
 8003336:	3740      	adds	r7, #64	@ 0x40
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	@ 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <xQueueReceive+0x32>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	623b      	str	r3, [r7, #32]
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	e7fd      	b.n	800336a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <xQueueReceive+0x40>
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <xQueueReceive+0x44>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <xQueueReceive+0x46>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <xQueueReceive+0x62>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	61fb      	str	r3, [r7, #28]
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800339e:	f001 f8af 	bl	8004500 <xTaskGetSchedulerState>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <xQueueReceive+0x72>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <xQueueReceive+0x76>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <xQueueReceive+0x78>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <xQueueReceive+0x94>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	61bb      	str	r3, [r7, #24]
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033d0:	f001 fe02 	bl	8004fd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01f      	beq.n	8003420 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033e4:	f000 f8f6 	bl	80035d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	1e5a      	subs	r2, r3, #1
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00f      	beq.n	8003418 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	3310      	adds	r3, #16
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 febf 	bl	8004180 <xTaskRemoveFromEventList>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003408:	4b3c      	ldr	r3, [pc, #240]	@ (80034fc <xQueueReceive+0x1c0>)
 800340a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003418:	f001 fe10 	bl	800503c <vPortExitCritical>
				return pdPASS;
 800341c:	2301      	movs	r3, #1
 800341e:	e069      	b.n	80034f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003426:	f001 fe09 	bl	800503c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800342a:	2300      	movs	r3, #0
 800342c:	e062      	b.n	80034f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003434:	f107 0310 	add.w	r3, r7, #16
 8003438:	4618      	mov	r0, r3
 800343a:	f000 ff05 	bl	8004248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800343e:	2301      	movs	r3, #1
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003442:	f001 fdfb 	bl	800503c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003446:	f000 fc75 	bl	8003d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800344a:	f001 fdc5 	bl	8004fd8 <vPortEnterCritical>
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003454:	b25b      	sxtb	r3, r3
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d103      	bne.n	8003464 <xQueueReceive+0x128>
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800346a:	b25b      	sxtb	r3, r3
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d103      	bne.n	800347a <xQueueReceive+0x13e>
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800347a:	f001 fddf 	bl	800503c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800347e:	1d3a      	adds	r2, r7, #4
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fef4 	bl	8004274 <xTaskCheckForTimeOut>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d123      	bne.n	80034da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003494:	f000 f916 	bl	80036c4 <prvIsQueueEmpty>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d017      	beq.n	80034ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800349e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a0:	3324      	adds	r3, #36	@ 0x24
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fe18 	bl	80040dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ae:	f000 f8b7 	bl	8003620 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034b2:	f000 fc4d 	bl	8003d50 <xTaskResumeAll>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d189      	bne.n	80033d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80034bc:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <xQueueReceive+0x1c0>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	e780      	b.n	80033d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034d0:	f000 f8a6 	bl	8003620 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034d4:	f000 fc3c 	bl	8003d50 <xTaskResumeAll>
 80034d8:	e77a      	b.n	80033d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034dc:	f000 f8a0 	bl	8003620 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034e0:	f000 fc36 	bl	8003d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034e6:	f000 f8ed 	bl	80036c4 <prvIsQueueEmpty>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f43f af6f 	beq.w	80033d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3730      	adds	r7, #48	@ 0x30
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003514:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d14d      	bne.n	80035c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f001 f806 	bl	800453c <xTaskPriorityDisinherit>
 8003530:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	e043      	b.n	80035c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d119      	bne.n	8003574 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6858      	ldr	r0, [r3, #4]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	461a      	mov	r2, r3
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	f002 f9e7 	bl	800591e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	441a      	add	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	d32b      	bcc.n	80035c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	e026      	b.n	80035c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68d8      	ldr	r0, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	461a      	mov	r2, r3
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	f002 f9cd 	bl	800591e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	425b      	negs	r3, r3
 800358e:	441a      	add	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d207      	bcs.n	80035b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	425b      	negs	r3, r3
 80035aa:	441a      	add	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d105      	bne.n	80035c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	3b01      	subs	r3, #1
 80035c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80035ca:	697b      	ldr	r3, [r7, #20]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d018      	beq.n	8003618 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	441a      	add	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d303      	bcc.n	8003608 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68d9      	ldr	r1, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	461a      	mov	r2, r3
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	f002 f983 	bl	800591e <memcpy>
	}
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003628:	f001 fcd6 	bl	8004fd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003632:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003634:	e011      	b.n	800365a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3324      	adds	r3, #36	@ 0x24
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fd9c 	bl	8004180 <xTaskRemoveFromEventList>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800364e:	f000 fe75 	bl	800433c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	3b01      	subs	r3, #1
 8003656:	b2db      	uxtb	r3, r3
 8003658:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800365a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	dce9      	bgt.n	8003636 <prvUnlockQueue+0x16>
 8003662:	e000      	b.n	8003666 <prvUnlockQueue+0x46>
					break;
 8003664:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	22ff      	movs	r2, #255	@ 0xff
 800366a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800366e:	f001 fce5 	bl	800503c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003672:	f001 fcb1 	bl	8004fd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800367c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800367e:	e011      	b.n	80036a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d012      	beq.n	80036ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3310      	adds	r3, #16
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fd77 	bl	8004180 <xTaskRemoveFromEventList>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003698:	f000 fe50 	bl	800433c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800369c:	7bbb      	ldrb	r3, [r7, #14]
 800369e:	3b01      	subs	r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dce9      	bgt.n	8003680 <prvUnlockQueue+0x60>
 80036ac:	e000      	b.n	80036b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	22ff      	movs	r2, #255	@ 0xff
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80036b8:	f001 fcc0 	bl	800503c <vPortExitCritical>
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036cc:	f001 fc84 	bl	8004fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036d8:	2301      	movs	r3, #1
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e001      	b.n	80036e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036e2:	f001 fcab 	bl	800503c <vPortExitCritical>

	return xReturn;
 80036e6:	68fb      	ldr	r3, [r7, #12]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036f8:	f001 fc6e 	bl	8004fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	429a      	cmp	r2, r3
 8003706:	d102      	bne.n	800370e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e001      	b.n	8003712 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003712:	f001 fc93 	bl	800503c <vPortExitCritical>

	return xReturn;
 8003716:	68fb      	ldr	r3, [r7, #12]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	e014      	b.n	800375a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003730:	4a0f      	ldr	r2, [pc, #60]	@ (8003770 <vQueueAddToRegistry+0x50>)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800373c:	490c      	ldr	r1, [pc, #48]	@ (8003770 <vQueueAddToRegistry+0x50>)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003746:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <vQueueAddToRegistry+0x50>)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003752:	e006      	b.n	8003762 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3301      	adds	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b07      	cmp	r3, #7
 800375e:	d9e7      	bls.n	8003730 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	200007f0 	.word	0x200007f0

08003774 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003784:	f001 fc28 	bl	8004fd8 <vPortEnterCritical>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800378e:	b25b      	sxtb	r3, r3
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d103      	bne.n	800379e <vQueueWaitForMessageRestricted+0x2a>
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d103      	bne.n	80037b4 <vQueueWaitForMessageRestricted+0x40>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037b4:	f001 fc42 	bl	800503c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3324      	adds	r3, #36	@ 0x24
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fcad 	bl	8004128 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037ce:	6978      	ldr	r0, [r7, #20]
 80037d0:	f7ff ff26 	bl	8003620 <prvUnlockQueue>
	}
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08e      	sub	sp, #56	@ 0x38
 80037e0:	af04      	add	r7, sp, #16
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10b      	bne.n	8003808 <xTaskCreateStatic+0x2c>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	623b      	str	r3, [r7, #32]
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10b      	bne.n	8003826 <xTaskCreateStatic+0x4a>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	61fb      	str	r3, [r7, #28]
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003826:	235c      	movs	r3, #92	@ 0x5c
 8003828:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b5c      	cmp	r3, #92	@ 0x5c
 800382e:	d00b      	beq.n	8003848 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	61bb      	str	r3, [r7, #24]
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	e7fd      	b.n	8003844 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003848:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800384a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01e      	beq.n	800388e <xTaskCreateStatic+0xb2>
 8003850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01b      	beq.n	800388e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003868:	2300      	movs	r3, #0
 800386a:	9303      	str	r3, [sp, #12]
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	9302      	str	r3, [sp, #8]
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f850 	bl	8003926 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003886:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003888:	f000 f8de 	bl	8003a48 <prvAddNewTaskToReadyList>
 800388c:	e001      	b.n	8003892 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003892:	697b      	ldr	r3, [r7, #20]
	}
 8003894:	4618      	mov	r0, r3
 8003896:	3728      	adds	r7, #40	@ 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	@ 0x30
 80038a0:	af04      	add	r7, sp, #16
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fcb3 	bl	800521c <pvPortMalloc>
 80038b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00e      	beq.n	80038dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038be:	205c      	movs	r0, #92	@ 0x5c
 80038c0:	f001 fcac 	bl	800521c <pvPortMalloc>
 80038c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80038d2:	e005      	b.n	80038e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f001 fd6f 	bl	80053b8 <vPortFree>
 80038da:	e001      	b.n	80038e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d017      	beq.n	8003916 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	2300      	movs	r3, #0
 80038f2:	9303      	str	r3, [sp, #12]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	9302      	str	r3, [sp, #8]
 80038f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f80e 	bl	8003926 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800390a:	69f8      	ldr	r0, [r7, #28]
 800390c:	f000 f89c 	bl	8003a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003910:	2301      	movs	r3, #1
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	e002      	b.n	800391c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800391c:	69bb      	ldr	r3, [r7, #24]
	}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b088      	sub	sp, #32
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	461a      	mov	r2, r3
 800393e:	21a5      	movs	r1, #165	@ 0xa5
 8003940:	f001 ff71 	bl	8005826 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800394e:	3b01      	subs	r3, #1
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f023 0307 	bic.w	r3, r3, #7
 800395c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	617b      	str	r3, [r7, #20]
}
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01f      	beq.n	80039c6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e012      	b.n	80039b2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	7819      	ldrb	r1, [r3, #0]
 8003994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	3334      	adds	r3, #52	@ 0x34
 800399c:	460a      	mov	r2, r1
 800399e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d9e9      	bls.n	800398c <prvInitialiseNewTask+0x66>
 80039b8:	e000      	b.n	80039bc <prvInitialiseNewTask+0x96>
			{
				break;
 80039ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039c4:	e003      	b.n	80039ce <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	2b37      	cmp	r3, #55	@ 0x37
 80039d2:	d901      	bls.n	80039d8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039d4:	2337      	movs	r3, #55	@ 0x37
 80039d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	2200      	movs	r2, #0
 80039e8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f966 	bl	8002cc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	3318      	adds	r3, #24
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff f961 	bl	8002cc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a06:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a16:	2200      	movs	r2, #0
 8003a18:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	68f9      	ldr	r1, [r7, #12]
 8003a26:	69b8      	ldr	r0, [r7, #24]
 8003a28:	f001 f9a6 	bl	8004d78 <pxPortInitialiseStack>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a3e:	bf00      	nop
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a50:	f001 fac2 	bl	8004fd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a54:	4b2d      	ldr	r3, [pc, #180]	@ (8003b0c <prvAddNewTaskToReadyList+0xc4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b0c <prvAddNewTaskToReadyList+0xc4>)
 8003a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b10 <prvAddNewTaskToReadyList+0xc8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a66:	4a2a      	ldr	r2, [pc, #168]	@ (8003b10 <prvAddNewTaskToReadyList+0xc8>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a6c:	4b27      	ldr	r3, [pc, #156]	@ (8003b0c <prvAddNewTaskToReadyList+0xc4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d110      	bne.n	8003a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a74:	f000 fc86 	bl	8004384 <prvInitialiseTaskLists>
 8003a78:	e00d      	b.n	8003a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a7a:	4b26      	ldr	r3, [pc, #152]	@ (8003b14 <prvAddNewTaskToReadyList+0xcc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a82:	4b23      	ldr	r3, [pc, #140]	@ (8003b10 <prvAddNewTaskToReadyList+0xc8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d802      	bhi.n	8003a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a90:	4a1f      	ldr	r2, [pc, #124]	@ (8003b10 <prvAddNewTaskToReadyList+0xc8>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a96:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <prvAddNewTaskToReadyList+0xd0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b18 <prvAddNewTaskToReadyList+0xd0>)
 8003a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <prvAddNewTaskToReadyList+0xd0>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aac:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <prvAddNewTaskToReadyList+0xd4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d903      	bls.n	8003abc <prvAddNewTaskToReadyList+0x74>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	4a18      	ldr	r2, [pc, #96]	@ (8003b1c <prvAddNewTaskToReadyList+0xd4>)
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4a15      	ldr	r2, [pc, #84]	@ (8003b20 <prvAddNewTaskToReadyList+0xd8>)
 8003aca:	441a      	add	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f7ff f901 	bl	8002cda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ad8:	f001 fab0 	bl	800503c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003adc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <prvAddNewTaskToReadyList+0xcc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <prvAddNewTaskToReadyList+0xc8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d207      	bcs.n	8003b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003af2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <prvAddNewTaskToReadyList+0xdc>)
 8003af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000d04 	.word	0x20000d04
 8003b10:	20000830 	.word	0x20000830
 8003b14:	20000d10 	.word	0x20000d10
 8003b18:	20000d20 	.word	0x20000d20
 8003b1c:	20000d0c 	.word	0x20000d0c
 8003b20:	20000834 	.word	0x20000834
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b37      	cmp	r3, #55	@ 0x37
 8003b3a:	d90b      	bls.n	8003b54 <vTaskPrioritySet+0x2c>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60fb      	str	r3, [r7, #12]
}
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b37      	cmp	r3, #55	@ 0x37
 8003b58:	d901      	bls.n	8003b5e <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b5a:	2337      	movs	r3, #55	@ 0x37
 8003b5c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003b5e:	f001 fa3b 	bl	8004fd8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <vTaskPrioritySet+0x46>
 8003b68:	4b3a      	ldr	r3, [pc, #232]	@ (8003c54 <vTaskPrioritySet+0x12c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	e000      	b.n	8003b70 <vTaskPrioritySet+0x48>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d063      	beq.n	8003c48 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d90d      	bls.n	8003ba4 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8003b88:	4b32      	ldr	r3, [pc, #200]	@ (8003c54 <vTaskPrioritySet+0x12c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d00f      	beq.n	8003bb2 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003b92:	4b30      	ldr	r3, [pc, #192]	@ (8003c54 <vTaskPrioritySet+0x12c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d309      	bcc.n	8003bb2 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	e006      	b.n	8003bb2 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c54 <vTaskPrioritySet+0x12c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d101      	bne.n	8003bb2 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d102      	bne.n	8003bca <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db04      	blt.n	8003be2 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	6959      	ldr	r1, [r3, #20]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <vTaskPrioritySet+0x130>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4299      	cmp	r1, r3
 8003bf6:	d11c      	bne.n	8003c32 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff f8c9 	bl	8002d94 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c06:	4b15      	ldr	r3, [pc, #84]	@ (8003c5c <vTaskPrioritySet+0x134>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d903      	bls.n	8003c16 <vTaskPrioritySet+0xee>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	4a12      	ldr	r2, [pc, #72]	@ (8003c5c <vTaskPrioritySet+0x134>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a0d      	ldr	r2, [pc, #52]	@ (8003c58 <vTaskPrioritySet+0x130>)
 8003c24:	441a      	add	r2, r3
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7ff f854 	bl	8002cda <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003c38:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <vTaskPrioritySet+0x138>)
 8003c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003c48:	f001 f9f8 	bl	800503c <vPortExitCritical>
	}
 8003c4c:	bf00      	nop
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000830 	.word	0x20000830
 8003c58:	20000834 	.word	0x20000834
 8003c5c:	20000d0c 	.word	0x20000d0c
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	@ 0x28
 8003c68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c72:	463a      	mov	r2, r7
 8003c74:	1d39      	adds	r1, r7, #4
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe ffcc 	bl	8002c18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	9202      	str	r2, [sp, #8]
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	460a      	mov	r2, r1
 8003c92:	4922      	ldr	r1, [pc, #136]	@ (8003d1c <vTaskStartScheduler+0xb8>)
 8003c94:	4822      	ldr	r0, [pc, #136]	@ (8003d20 <vTaskStartScheduler+0xbc>)
 8003c96:	f7ff fda1 	bl	80037dc <xTaskCreateStatic>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4a21      	ldr	r2, [pc, #132]	@ (8003d24 <vTaskStartScheduler+0xc0>)
 8003c9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ca0:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <vTaskStartScheduler+0xc0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e001      	b.n	8003cb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d102      	bne.n	8003cbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cb8:	f000 fd04 	bl	80046c4 <xTimerCreateTimerTask>
 8003cbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d116      	bne.n	8003cf2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	613b      	str	r3, [r7, #16]
}
 8003cd6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <vTaskStartScheduler+0xc4>)
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295
 8003cde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ce0:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <vTaskStartScheduler+0xc8>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ce6:	4b12      	ldr	r3, [pc, #72]	@ (8003d30 <vTaskStartScheduler+0xcc>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cec:	f001 f8d0 	bl	8004e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cf0:	e00f      	b.n	8003d12 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d10b      	bne.n	8003d12 <vTaskStartScheduler+0xae>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	60fb      	str	r3, [r7, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	e7fd      	b.n	8003d0e <vTaskStartScheduler+0xaa>
}
 8003d12:	bf00      	nop
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	080064e0 	.word	0x080064e0
 8003d20:	08004355 	.word	0x08004355
 8003d24:	20000d28 	.word	0x20000d28
 8003d28:	20000d24 	.word	0x20000d24
 8003d2c:	20000d10 	.word	0x20000d10
 8003d30:	20000d08 	.word	0x20000d08

08003d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d38:	4b04      	ldr	r3, [pc, #16]	@ (8003d4c <vTaskSuspendAll+0x18>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a03      	ldr	r2, [pc, #12]	@ (8003d4c <vTaskSuspendAll+0x18>)
 8003d40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	20000d2c 	.word	0x20000d2c

08003d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d5e:	4b42      	ldr	r3, [pc, #264]	@ (8003e68 <xTaskResumeAll+0x118>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <xTaskResumeAll+0x2e>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	603b      	str	r3, [r7, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	e7fd      	b.n	8003d7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d7e:	f001 f92b 	bl	8004fd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d82:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <xTaskResumeAll+0x118>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	4a37      	ldr	r2, [pc, #220]	@ (8003e68 <xTaskResumeAll+0x118>)
 8003d8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <xTaskResumeAll+0x118>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d162      	bne.n	8003e5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d94:	4b35      	ldr	r3, [pc, #212]	@ (8003e6c <xTaskResumeAll+0x11c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05e      	beq.n	8003e5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d9c:	e02f      	b.n	8003dfe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9e:	4b34      	ldr	r3, [pc, #208]	@ (8003e70 <xTaskResumeAll+0x120>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3318      	adds	r3, #24
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fff2 	bl	8002d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe ffed 	bl	8002d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8003e74 <xTaskResumeAll+0x124>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d903      	bls.n	8003dce <xTaskResumeAll+0x7e>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <xTaskResumeAll+0x124>)
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4a27      	ldr	r2, [pc, #156]	@ (8003e78 <xTaskResumeAll+0x128>)
 8003ddc:	441a      	add	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3304      	adds	r3, #4
 8003de2:	4619      	mov	r1, r3
 8003de4:	4610      	mov	r0, r2
 8003de6:	f7fe ff78 	bl	8002cda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dee:	4b23      	ldr	r3, [pc, #140]	@ (8003e7c <xTaskResumeAll+0x12c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d302      	bcc.n	8003dfe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003df8:	4b21      	ldr	r3, [pc, #132]	@ (8003e80 <xTaskResumeAll+0x130>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003e70 <xTaskResumeAll+0x120>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1cb      	bne.n	8003d9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e0c:	f000 fb58 	bl	80044c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e10:	4b1c      	ldr	r3, [pc, #112]	@ (8003e84 <xTaskResumeAll+0x134>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e1c:	f000 f846 	bl	8003eac <xTaskIncrementTick>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003e26:	4b16      	ldr	r3, [pc, #88]	@ (8003e80 <xTaskResumeAll+0x130>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f1      	bne.n	8003e1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003e38:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <xTaskResumeAll+0x134>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e3e:	4b10      	ldr	r3, [pc, #64]	@ (8003e80 <xTaskResumeAll+0x130>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e46:	2301      	movs	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e88 <xTaskResumeAll+0x138>)
 8003e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e5a:	f001 f8ef 	bl	800503c <vPortExitCritical>

	return xAlreadyYielded;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000d2c 	.word	0x20000d2c
 8003e6c:	20000d04 	.word	0x20000d04
 8003e70:	20000cc4 	.word	0x20000cc4
 8003e74:	20000d0c 	.word	0x20000d0c
 8003e78:	20000834 	.word	0x20000834
 8003e7c:	20000830 	.word	0x20000830
 8003e80:	20000d18 	.word	0x20000d18
 8003e84:	20000d14 	.word	0x20000d14
 8003e88:	e000ed04 	.word	0xe000ed04

08003e8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e92:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <xTaskGetTickCount+0x1c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e98:	687b      	ldr	r3, [r7, #4]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000d08 	.word	0x20000d08

08003eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff4 <xTaskIncrementTick+0x148>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 8090 	bne.w	8003fe0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff8 <xTaskIncrementTick+0x14c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8003ff8 <xTaskIncrementTick+0x14c>)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d121      	bne.n	8003f18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ed4:	4b49      	ldr	r3, [pc, #292]	@ (8003ffc <xTaskIncrementTick+0x150>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	603b      	str	r3, [r7, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <xTaskIncrementTick+0x46>
 8003ef6:	4b41      	ldr	r3, [pc, #260]	@ (8003ffc <xTaskIncrementTick+0x150>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	4b40      	ldr	r3, [pc, #256]	@ (8004000 <xTaskIncrementTick+0x154>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a3e      	ldr	r2, [pc, #248]	@ (8003ffc <xTaskIncrementTick+0x150>)
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4a3e      	ldr	r2, [pc, #248]	@ (8004000 <xTaskIncrementTick+0x154>)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004004 <xTaskIncrementTick+0x158>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	4a3c      	ldr	r2, [pc, #240]	@ (8004004 <xTaskIncrementTick+0x158>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	f000 fad4 	bl	80044c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f18:	4b3b      	ldr	r3, [pc, #236]	@ (8004008 <xTaskIncrementTick+0x15c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d349      	bcc.n	8003fb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f22:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <xTaskIncrementTick+0x150>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d104      	bne.n	8003f36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f2c:	4b36      	ldr	r3, [pc, #216]	@ (8004008 <xTaskIncrementTick+0x15c>)
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f32:	601a      	str	r2, [r3, #0]
					break;
 8003f34:	e03f      	b.n	8003fb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f36:	4b31      	ldr	r3, [pc, #196]	@ (8003ffc <xTaskIncrementTick+0x150>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d203      	bcs.n	8003f56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004008 <xTaskIncrementTick+0x15c>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f54:	e02f      	b.n	8003fb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe ff1a 	bl	8002d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe ff11 	bl	8002d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f76:	4b25      	ldr	r3, [pc, #148]	@ (800400c <xTaskIncrementTick+0x160>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d903      	bls.n	8003f86 <xTaskIncrementTick+0xda>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	4a22      	ldr	r2, [pc, #136]	@ (800400c <xTaskIncrementTick+0x160>)
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4a1f      	ldr	r2, [pc, #124]	@ (8004010 <xTaskIncrementTick+0x164>)
 8003f94:	441a      	add	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7fe fe9c 	bl	8002cda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <xTaskIncrementTick+0x168>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d3b8      	bcc.n	8003f22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb4:	e7b5      	b.n	8003f22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fb6:	4b17      	ldr	r3, [pc, #92]	@ (8004014 <xTaskIncrementTick+0x168>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fbc:	4914      	ldr	r1, [pc, #80]	@ (8004010 <xTaskIncrementTick+0x164>)
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d901      	bls.n	8003fd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fd2:	4b11      	ldr	r3, [pc, #68]	@ (8004018 <xTaskIncrementTick+0x16c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e004      	b.n	8003fea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800401c <xTaskIncrementTick+0x170>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800401c <xTaskIncrementTick+0x170>)
 8003fe8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fea:	697b      	ldr	r3, [r7, #20]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000d2c 	.word	0x20000d2c
 8003ff8:	20000d08 	.word	0x20000d08
 8003ffc:	20000cbc 	.word	0x20000cbc
 8004000:	20000cc0 	.word	0x20000cc0
 8004004:	20000d1c 	.word	0x20000d1c
 8004008:	20000d24 	.word	0x20000d24
 800400c:	20000d0c 	.word	0x20000d0c
 8004010:	20000834 	.word	0x20000834
 8004014:	20000830 	.word	0x20000830
 8004018:	20000d18 	.word	0x20000d18
 800401c:	20000d14 	.word	0x20000d14

08004020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004026:	4b28      	ldr	r3, [pc, #160]	@ (80040c8 <vTaskSwitchContext+0xa8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800402e:	4b27      	ldr	r3, [pc, #156]	@ (80040cc <vTaskSwitchContext+0xac>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004034:	e042      	b.n	80040bc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004036:	4b25      	ldr	r3, [pc, #148]	@ (80040cc <vTaskSwitchContext+0xac>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800403c:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <vTaskSwitchContext+0xb0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e011      	b.n	8004068 <vTaskSwitchContext+0x48>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <vTaskSwitchContext+0x42>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	607b      	str	r3, [r7, #4]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <vTaskSwitchContext+0x3e>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b01      	subs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	491a      	ldr	r1, [pc, #104]	@ (80040d4 <vTaskSwitchContext+0xb4>)
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0e3      	beq.n	8004044 <vTaskSwitchContext+0x24>
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4a13      	ldr	r2, [pc, #76]	@ (80040d4 <vTaskSwitchContext+0xb4>)
 8004088:	4413      	add	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3308      	adds	r3, #8
 800409e:	429a      	cmp	r2, r3
 80040a0:	d104      	bne.n	80040ac <vTaskSwitchContext+0x8c>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	4a09      	ldr	r2, [pc, #36]	@ (80040d8 <vTaskSwitchContext+0xb8>)
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4a06      	ldr	r2, [pc, #24]	@ (80040d0 <vTaskSwitchContext+0xb0>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	20000d2c 	.word	0x20000d2c
 80040cc:	20000d18 	.word	0x20000d18
 80040d0:	20000d0c 	.word	0x20000d0c
 80040d4:	20000834 	.word	0x20000834
 80040d8:	20000830 	.word	0x20000830

080040dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	60fb      	str	r3, [r7, #12]
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004104:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <vTaskPlaceOnEventList+0x48>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3318      	adds	r3, #24
 800410a:	4619      	mov	r1, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fe fe08 	bl	8002d22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004112:	2101      	movs	r1, #1
 8004114:	6838      	ldr	r0, [r7, #0]
 8004116:	f000 fa81 	bl	800461c <prvAddCurrentTaskToDelayedList>
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000830 	.word	0x20000830

08004128 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	617b      	str	r3, [r7, #20]
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	e7fd      	b.n	800414e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004152:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <vTaskPlaceOnEventListRestricted+0x54>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3318      	adds	r3, #24
 8004158:	4619      	mov	r1, r3
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7fe fdbd 	bl	8002cda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	68b8      	ldr	r0, [r7, #8]
 8004170:	f000 fa54 	bl	800461c <prvAddCurrentTaskToDelayedList>
	}
 8004174:	bf00      	nop
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000830 	.word	0x20000830

08004180 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	60fb      	str	r3, [r7, #12]
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3318      	adds	r3, #24
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fdee 	bl	8002d94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004230 <xTaskRemoveFromEventList+0xb0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11d      	bne.n	80041fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe fde5 	bl	8002d94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ce:	4b19      	ldr	r3, [pc, #100]	@ (8004234 <xTaskRemoveFromEventList+0xb4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d903      	bls.n	80041de <xTaskRemoveFromEventList+0x5e>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041da:	4a16      	ldr	r2, [pc, #88]	@ (8004234 <xTaskRemoveFromEventList+0xb4>)
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4a13      	ldr	r2, [pc, #76]	@ (8004238 <xTaskRemoveFromEventList+0xb8>)
 80041ec:	441a      	add	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe fd70 	bl	8002cda <vListInsertEnd>
 80041fa:	e005      	b.n	8004208 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	3318      	adds	r3, #24
 8004200:	4619      	mov	r1, r3
 8004202:	480e      	ldr	r0, [pc, #56]	@ (800423c <xTaskRemoveFromEventList+0xbc>)
 8004204:	f7fe fd69 	bl	8002cda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420c:	4b0c      	ldr	r3, [pc, #48]	@ (8004240 <xTaskRemoveFromEventList+0xc0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	429a      	cmp	r2, r3
 8004214:	d905      	bls.n	8004222 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800421a:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <xTaskRemoveFromEventList+0xc4>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e001      	b.n	8004226 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004226:	697b      	ldr	r3, [r7, #20]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000d2c 	.word	0x20000d2c
 8004234:	20000d0c 	.word	0x20000d0c
 8004238:	20000834 	.word	0x20000834
 800423c:	20000cc4 	.word	0x20000cc4
 8004240:	20000830 	.word	0x20000830
 8004244:	20000d18 	.word	0x20000d18

08004248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <vTaskInternalSetTimeOutState+0x24>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <vTaskInternalSetTimeOutState+0x28>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	605a      	str	r2, [r3, #4]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	20000d1c 	.word	0x20000d1c
 8004270:	20000d08 	.word	0x20000d08

08004274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	613b      	str	r3, [r7, #16]
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	60fb      	str	r3, [r7, #12]
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	e7fd      	b.n	80042b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80042ba:	f000 fe8d 	bl	8004fd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042be:	4b1d      	ldr	r3, [pc, #116]	@ (8004334 <xTaskCheckForTimeOut+0xc0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d102      	bne.n	80042de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	e023      	b.n	8004326 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b15      	ldr	r3, [pc, #84]	@ (8004338 <xTaskCheckForTimeOut+0xc4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d007      	beq.n	80042fa <xTaskCheckForTimeOut+0x86>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e015      	b.n	8004326 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	429a      	cmp	r2, r3
 8004302:	d20b      	bcs.n	800431c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad2      	subs	r2, r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff99 	bl	8004248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	e004      	b.n	8004326 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004322:	2301      	movs	r3, #1
 8004324:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004326:	f000 fe89 	bl	800503c <vPortExitCritical>

	return xReturn;
 800432a:	69fb      	ldr	r3, [r7, #28]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000d08 	.word	0x20000d08
 8004338:	20000d1c 	.word	0x20000d1c

0800433c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004340:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <vTaskMissedYield+0x14>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	20000d18 	.word	0x20000d18

08004354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800435c:	f000 f852 	bl	8004404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <prvIdleTask+0x28>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d9f9      	bls.n	800435c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <prvIdleTask+0x2c>)
 800436a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004378:	e7f0      	b.n	800435c <prvIdleTask+0x8>
 800437a:	bf00      	nop
 800437c:	20000834 	.word	0x20000834
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	e00c      	b.n	80043aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a12      	ldr	r2, [pc, #72]	@ (80043e4 <prvInitialiseTaskLists+0x60>)
 800439c:	4413      	add	r3, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fc6e 	bl	8002c80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3301      	adds	r3, #1
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b37      	cmp	r3, #55	@ 0x37
 80043ae:	d9ef      	bls.n	8004390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043b0:	480d      	ldr	r0, [pc, #52]	@ (80043e8 <prvInitialiseTaskLists+0x64>)
 80043b2:	f7fe fc65 	bl	8002c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043b6:	480d      	ldr	r0, [pc, #52]	@ (80043ec <prvInitialiseTaskLists+0x68>)
 80043b8:	f7fe fc62 	bl	8002c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043bc:	480c      	ldr	r0, [pc, #48]	@ (80043f0 <prvInitialiseTaskLists+0x6c>)
 80043be:	f7fe fc5f 	bl	8002c80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043c2:	480c      	ldr	r0, [pc, #48]	@ (80043f4 <prvInitialiseTaskLists+0x70>)
 80043c4:	f7fe fc5c 	bl	8002c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043c8:	480b      	ldr	r0, [pc, #44]	@ (80043f8 <prvInitialiseTaskLists+0x74>)
 80043ca:	f7fe fc59 	bl	8002c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <prvInitialiseTaskLists+0x78>)
 80043d0:	4a05      	ldr	r2, [pc, #20]	@ (80043e8 <prvInitialiseTaskLists+0x64>)
 80043d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004400 <prvInitialiseTaskLists+0x7c>)
 80043d6:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <prvInitialiseTaskLists+0x68>)
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000834 	.word	0x20000834
 80043e8:	20000c94 	.word	0x20000c94
 80043ec:	20000ca8 	.word	0x20000ca8
 80043f0:	20000cc4 	.word	0x20000cc4
 80043f4:	20000cd8 	.word	0x20000cd8
 80043f8:	20000cf0 	.word	0x20000cf0
 80043fc:	20000cbc 	.word	0x20000cbc
 8004400:	20000cc0 	.word	0x20000cc0

08004404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800440a:	e019      	b.n	8004440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800440c:	f000 fde4 	bl	8004fd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004410:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <prvCheckTasksWaitingTermination+0x50>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fcb9 	bl	8002d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <prvCheckTasksWaitingTermination+0x54>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3b01      	subs	r3, #1
 8004428:	4a0b      	ldr	r2, [pc, #44]	@ (8004458 <prvCheckTasksWaitingTermination+0x54>)
 800442a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <prvCheckTasksWaitingTermination+0x58>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3b01      	subs	r3, #1
 8004432:	4a0a      	ldr	r2, [pc, #40]	@ (800445c <prvCheckTasksWaitingTermination+0x58>)
 8004434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004436:	f000 fe01 	bl	800503c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f810 	bl	8004460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004440:	4b06      	ldr	r3, [pc, #24]	@ (800445c <prvCheckTasksWaitingTermination+0x58>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e1      	bne.n	800440c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000cd8 	.word	0x20000cd8
 8004458:	20000d04 	.word	0x20000d04
 800445c:	20000cec 	.word	0x20000cec

08004460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800446e:	2b00      	cmp	r3, #0
 8004470:	d108      	bne.n	8004484 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	4618      	mov	r0, r3
 8004478:	f000 ff9e 	bl	80053b8 <vPortFree>
				vPortFree( pxTCB );
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 ff9b 	bl	80053b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004482:	e019      	b.n	80044b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800448a:	2b01      	cmp	r3, #1
 800448c:	d103      	bne.n	8004496 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 ff92 	bl	80053b8 <vPortFree>
	}
 8004494:	e010      	b.n	80044b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800449c:	2b02      	cmp	r3, #2
 800449e:	d00b      	beq.n	80044b8 <prvDeleteTCB+0x58>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <prvDeleteTCB+0x54>
	}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044c6:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <prvResetNextTaskUnblockTime+0x38>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d104      	bne.n	80044da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044d0:	4b0a      	ldr	r3, [pc, #40]	@ (80044fc <prvResetNextTaskUnblockTime+0x3c>)
 80044d2:	f04f 32ff 	mov.w	r2, #4294967295
 80044d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044d8:	e008      	b.n	80044ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044da:	4b07      	ldr	r3, [pc, #28]	@ (80044f8 <prvResetNextTaskUnblockTime+0x38>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a04      	ldr	r2, [pc, #16]	@ (80044fc <prvResetNextTaskUnblockTime+0x3c>)
 80044ea:	6013      	str	r3, [r2, #0]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	20000cbc 	.word	0x20000cbc
 80044fc:	20000d24 	.word	0x20000d24

08004500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <xTaskGetSchedulerState+0x34>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800450e:	2301      	movs	r3, #1
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	e008      	b.n	8004526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004514:	4b08      	ldr	r3, [pc, #32]	@ (8004538 <xTaskGetSchedulerState+0x38>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800451c:	2302      	movs	r3, #2
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	e001      	b.n	8004526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004522:	2300      	movs	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004526:	687b      	ldr	r3, [r7, #4]
	}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	20000d10 	.word	0x20000d10
 8004538:	20000d2c 	.word	0x20000d2c

0800453c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d058      	beq.n	8004604 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004552:	4b2f      	ldr	r3, [pc, #188]	@ (8004610 <xTaskPriorityDisinherit+0xd4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	429a      	cmp	r2, r3
 800455a:	d00b      	beq.n	8004574 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	60fb      	str	r3, [r7, #12]
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	60bb      	str	r3, [r7, #8]
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004598:	1e5a      	subs	r2, r3, #1
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d02c      	beq.n	8004604 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d128      	bne.n	8004604 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fbec 	bl	8002d94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004614 <xTaskPriorityDisinherit+0xd8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d903      	bls.n	80045e4 <xTaskPriorityDisinherit+0xa8>
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004614 <xTaskPriorityDisinherit+0xd8>)
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4a09      	ldr	r2, [pc, #36]	@ (8004618 <xTaskPriorityDisinherit+0xdc>)
 80045f2:	441a      	add	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f7fe fb6d 	bl	8002cda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004604:	697b      	ldr	r3, [r7, #20]
	}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000830 	.word	0x20000830
 8004614:	20000d0c 	.word	0x20000d0c
 8004618:	20000834 	.word	0x20000834

0800461c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004626:	4b21      	ldr	r3, [pc, #132]	@ (80046ac <prvAddCurrentTaskToDelayedList+0x90>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800462c:	4b20      	ldr	r3, [pc, #128]	@ (80046b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3304      	adds	r3, #4
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fbae 	bl	8002d94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d10a      	bne.n	8004656 <prvAddCurrentTaskToDelayedList+0x3a>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004646:	4b1a      	ldr	r3, [pc, #104]	@ (80046b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4819      	ldr	r0, [pc, #100]	@ (80046b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004650:	f7fe fb43 	bl	8002cda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004654:	e026      	b.n	80046a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800465e:	4b14      	ldr	r3, [pc, #80]	@ (80046b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	429a      	cmp	r2, r3
 800466c:	d209      	bcs.n	8004682 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800466e:	4b12      	ldr	r3, [pc, #72]	@ (80046b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f7fe fb51 	bl	8002d22 <vListInsert>
}
 8004680:	e010      	b.n	80046a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004682:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f7fe fb47 	bl	8002d22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004694:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	d202      	bcs.n	80046a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800469e:	4a08      	ldr	r2, [pc, #32]	@ (80046c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6013      	str	r3, [r2, #0]
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000d08 	.word	0x20000d08
 80046b0:	20000830 	.word	0x20000830
 80046b4:	20000cf0 	.word	0x20000cf0
 80046b8:	20000cc0 	.word	0x20000cc0
 80046bc:	20000cbc 	.word	0x20000cbc
 80046c0:	20000d24 	.word	0x20000d24

080046c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	@ 0x28
 80046c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80046ce:	f000 fb13 	bl	8004cf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80046d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004748 <xTimerCreateTimerTask+0x84>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d021      	beq.n	800471e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046e2:	1d3a      	adds	r2, r7, #4
 80046e4:	f107 0108 	add.w	r1, r7, #8
 80046e8:	f107 030c 	add.w	r3, r7, #12
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe faad 	bl	8002c4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	9202      	str	r2, [sp, #8]
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	2302      	movs	r3, #2
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2300      	movs	r3, #0
 8004702:	460a      	mov	r2, r1
 8004704:	4911      	ldr	r1, [pc, #68]	@ (800474c <xTimerCreateTimerTask+0x88>)
 8004706:	4812      	ldr	r0, [pc, #72]	@ (8004750 <xTimerCreateTimerTask+0x8c>)
 8004708:	f7ff f868 	bl	80037dc <xTaskCreateStatic>
 800470c:	4603      	mov	r3, r0
 800470e:	4a11      	ldr	r2, [pc, #68]	@ (8004754 <xTimerCreateTimerTask+0x90>)
 8004710:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <xTimerCreateTimerTask+0x90>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800471a:	2301      	movs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	613b      	str	r3, [r7, #16]
}
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800473c:	697b      	ldr	r3, [r7, #20]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000d60 	.word	0x20000d60
 800474c:	080064e8 	.word	0x080064e8
 8004750:	08004891 	.word	0x08004891
 8004754:	20000d64 	.word	0x20000d64

08004758 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	@ 0x28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004766:	2300      	movs	r3, #0
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <xTimerGenericCommand+0x30>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	623b      	str	r3, [r7, #32]
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <xTimerGenericCommand+0x98>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d02a      	beq.n	80047e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b05      	cmp	r3, #5
 80047a0:	dc18      	bgt.n	80047d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047a2:	f7ff fead 	bl	8004500 <xTaskGetSchedulerState>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d109      	bne.n	80047c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047ac:	4b10      	ldr	r3, [pc, #64]	@ (80047f0 <xTimerGenericCommand+0x98>)
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	f107 0110 	add.w	r1, r7, #16
 80047b4:	2300      	movs	r3, #0
 80047b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047b8:	f7fe fc20 	bl	8002ffc <xQueueGenericSend>
 80047bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80047be:	e012      	b.n	80047e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <xTimerGenericCommand+0x98>)
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	f107 0110 	add.w	r1, r7, #16
 80047c8:	2300      	movs	r3, #0
 80047ca:	2200      	movs	r2, #0
 80047cc:	f7fe fc16 	bl	8002ffc <xQueueGenericSend>
 80047d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80047d2:	e008      	b.n	80047e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <xTimerGenericCommand+0x98>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	f107 0110 	add.w	r1, r7, #16
 80047dc:	2300      	movs	r3, #0
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	f7fe fd0e 	bl	8003200 <xQueueGenericSendFromISR>
 80047e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3728      	adds	r7, #40	@ 0x28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000d60 	.word	0x20000d60

080047f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047fe:	4b23      	ldr	r3, [pc, #140]	@ (800488c <prvProcessExpiredTimer+0x98>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3304      	adds	r3, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fac1 	bl	8002d94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d023      	beq.n	8004868 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	18d1      	adds	r1, r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	6978      	ldr	r0, [r7, #20]
 800482e:	f000 f8d5 	bl	80049dc <prvInsertTimerInActiveList>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	2100      	movs	r1, #0
 8004842:	6978      	ldr	r0, [r7, #20]
 8004844:	f7ff ff88 	bl	8004758 <xTimerGenericCommand>
 8004848:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d114      	bne.n	800487a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60fb      	str	r3, [r7, #12]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	b2da      	uxtb	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	6978      	ldr	r0, [r7, #20]
 8004880:	4798      	blx	r3
}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000d58 	.word	0x20000d58

08004890 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f859 	bl	8004954 <prvGetNextExpireTime>
 80048a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4619      	mov	r1, r3
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f805 	bl	80048b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048ae:	f000 f8d7 	bl	8004a60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048b2:	bf00      	nop
 80048b4:	e7f0      	b.n	8004898 <prvTimerTask+0x8>
	...

080048b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048c2:	f7ff fa37 	bl	8003d34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048c6:	f107 0308 	add.w	r3, r7, #8
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f866 	bl	800499c <prvSampleTimeNow>
 80048d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d130      	bne.n	800493a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <prvProcessTimerOrBlockTask+0x3c>
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d806      	bhi.n	80048f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048e6:	f7ff fa33 	bl	8003d50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ff81 	bl	80047f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048f2:	e024      	b.n	800493e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048fa:	4b13      	ldr	r3, [pc, #76]	@ (8004948 <prvProcessTimerOrBlockTask+0x90>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <prvProcessTimerOrBlockTask+0x50>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <prvProcessTimerOrBlockTask+0x52>
 8004908:	2300      	movs	r3, #0
 800490a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800490c:	4b0f      	ldr	r3, [pc, #60]	@ (800494c <prvProcessTimerOrBlockTask+0x94>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	4619      	mov	r1, r3
 800491a:	f7fe ff2b 	bl	8003774 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800491e:	f7ff fa17 	bl	8003d50 <xTaskResumeAll>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004928:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <prvProcessTimerOrBlockTask+0x98>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
}
 8004938:	e001      	b.n	800493e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800493a:	f7ff fa09 	bl	8003d50 <xTaskResumeAll>
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000d5c 	.word	0x20000d5c
 800494c:	20000d60 	.word	0x20000d60
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800495c:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <prvGetNextExpireTime+0x44>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <prvGetNextExpireTime+0x16>
 8004966:	2201      	movs	r2, #1
 8004968:	e000      	b.n	800496c <prvGetNextExpireTime+0x18>
 800496a:	2200      	movs	r2, #0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d105      	bne.n	8004984 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004978:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <prvGetNextExpireTime+0x44>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e001      	b.n	8004988 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004988:	68fb      	ldr	r3, [r7, #12]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000d58 	.word	0x20000d58

0800499c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049a4:	f7ff fa72 	bl	8003e8c <xTaskGetTickCount>
 80049a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <prvSampleTimeNow+0x3c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d205      	bcs.n	80049c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049b4:	f000 f93a 	bl	8004c2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e002      	b.n	80049c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80049c6:	4a04      	ldr	r2, [pc, #16]	@ (80049d8 <prvSampleTimeNow+0x3c>)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80049cc:	68fb      	ldr	r3, [r7, #12]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000d68 	.word	0x20000d68

080049dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d812      	bhi.n	8004a28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e01b      	b.n	8004a4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a16:	4b10      	ldr	r3, [pc, #64]	@ (8004a58 <prvInsertTimerInActiveList+0x7c>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7fe f97e 	bl	8002d22 <vListInsert>
 8004a26:	e012      	b.n	8004a4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d206      	bcs.n	8004a3e <prvInsertTimerInActiveList+0x62>
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d302      	bcc.n	8004a3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e007      	b.n	8004a4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a3e:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <prvInsertTimerInActiveList+0x80>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3304      	adds	r3, #4
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f7fe f96a 	bl	8002d22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a4e:	697b      	ldr	r3, [r7, #20]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000d5c 	.word	0x20000d5c
 8004a5c:	20000d58 	.word	0x20000d58

08004a60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08e      	sub	sp, #56	@ 0x38
 8004a64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a66:	e0ce      	b.n	8004c06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da19      	bge.n	8004aa2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	3304      	adds	r3, #4
 8004a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61fb      	str	r3, [r7, #28]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a98:	6850      	ldr	r0, [r2, #4]
 8004a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a9c:	6892      	ldr	r2, [r2, #8]
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f2c0 80ae 	blt.w	8004c06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe f96a 	bl	8002d94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff6a 	bl	800499c <prvSampleTimeNow>
 8004ac8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b09      	cmp	r3, #9
 8004ace:	f200 8097 	bhi.w	8004c00 <prvProcessReceivedCommands+0x1a0>
 8004ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <prvProcessReceivedCommands+0x78>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b01 	.word	0x08004b01
 8004ae4:	08004b77 	.word	0x08004b77
 8004ae8:	08004b8b 	.word	0x08004b8b
 8004aec:	08004bd7 	.word	0x08004bd7
 8004af0:	08004b01 	.word	0x08004b01
 8004af4:	08004b01 	.word	0x08004b01
 8004af8:	08004b77 	.word	0x08004b77
 8004afc:	08004b8b 	.word	0x08004b8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	18d1      	adds	r1, r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b20:	f7ff ff5c 	bl	80049dc <prvInsertTimerInActiveList>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d06c      	beq.n	8004c04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d061      	beq.n	8004c04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	441a      	add	r2, r3
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	2100      	movs	r1, #0
 8004b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b52:	f7ff fe01 	bl	8004758 <xTimerGenericCommand>
 8004b56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d152      	bne.n	8004c04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	61bb      	str	r3, [r7, #24]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b88:	e03d      	b.n	8004c06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	617b      	str	r3, [r7, #20]
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	e7fd      	b.n	8004bbe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	18d1      	adds	r1, r2, r3
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bd0:	f7ff ff04 	bl	80049dc <prvInsertTimerInActiveList>
					break;
 8004bd4:	e017      	b.n	8004c06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004be6:	f000 fbe7 	bl	80053b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bea:	e00c      	b.n	8004c06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004bfe:	e002      	b.n	8004c06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <prvProcessReceivedCommands+0x1a6>
					break;
 8004c04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c06:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <prvProcessReceivedCommands+0x1c8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d39      	adds	r1, r7, #4
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fb94 	bl	800333c <xQueueReceive>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f47f af26 	bne.w	8004a68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3730      	adds	r7, #48	@ 0x30
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000d60 	.word	0x20000d60

08004c2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c32:	e049      	b.n	8004cc8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c34:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf0 <prvSwitchTimerLists+0xc4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf0 <prvSwitchTimerLists+0xc4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fe f8a1 	bl	8002d94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d02f      	beq.n	8004cc8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4413      	add	r3, r2
 8004c70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d90e      	bls.n	8004c98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c86:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <prvSwitchTimerLists+0xc4>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7fe f846 	bl	8002d22 <vListInsert>
 8004c96:	e017      	b.n	8004cc8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff fd58 	bl	8004758 <xTimerGenericCommand>
 8004ca8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	603b      	str	r3, [r7, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cc8:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <prvSwitchTimerLists+0xc4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1b0      	bne.n	8004c34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004cd2:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <prvSwitchTimerLists+0xc4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004cd8:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <prvSwitchTimerLists+0xc8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a04      	ldr	r2, [pc, #16]	@ (8004cf0 <prvSwitchTimerLists+0xc4>)
 8004cde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ce0:	4a04      	ldr	r2, [pc, #16]	@ (8004cf4 <prvSwitchTimerLists+0xc8>)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	6013      	str	r3, [r2, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000d58 	.word	0x20000d58
 8004cf4:	20000d5c 	.word	0x20000d5c

08004cf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cfe:	f000 f96b 	bl	8004fd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d02:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <prvCheckForValidListAndQueue+0x60>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d120      	bne.n	8004d4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d0a:	4814      	ldr	r0, [pc, #80]	@ (8004d5c <prvCheckForValidListAndQueue+0x64>)
 8004d0c:	f7fd ffb8 	bl	8002c80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d10:	4813      	ldr	r0, [pc, #76]	@ (8004d60 <prvCheckForValidListAndQueue+0x68>)
 8004d12:	f7fd ffb5 	bl	8002c80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d16:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <prvCheckForValidListAndQueue+0x6c>)
 8004d18:	4a10      	ldr	r2, [pc, #64]	@ (8004d5c <prvCheckForValidListAndQueue+0x64>)
 8004d1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <prvCheckForValidListAndQueue+0x70>)
 8004d1e:	4a10      	ldr	r2, [pc, #64]	@ (8004d60 <prvCheckForValidListAndQueue+0x68>)
 8004d20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d22:	2300      	movs	r3, #0
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4b11      	ldr	r3, [pc, #68]	@ (8004d6c <prvCheckForValidListAndQueue+0x74>)
 8004d28:	4a11      	ldr	r2, [pc, #68]	@ (8004d70 <prvCheckForValidListAndQueue+0x78>)
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	200a      	movs	r0, #10
 8004d2e:	f7fe f8c5 	bl	8002ebc <xQueueGenericCreateStatic>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4a08      	ldr	r2, [pc, #32]	@ (8004d58 <prvCheckForValidListAndQueue+0x60>)
 8004d36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d38:	4b07      	ldr	r3, [pc, #28]	@ (8004d58 <prvCheckForValidListAndQueue+0x60>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d40:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <prvCheckForValidListAndQueue+0x60>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	490b      	ldr	r1, [pc, #44]	@ (8004d74 <prvCheckForValidListAndQueue+0x7c>)
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fcea 	bl	8003720 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d4c:	f000 f976 	bl	800503c <vPortExitCritical>
}
 8004d50:	bf00      	nop
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000d60 	.word	0x20000d60
 8004d5c:	20000d30 	.word	0x20000d30
 8004d60:	20000d44 	.word	0x20000d44
 8004d64:	20000d58 	.word	0x20000d58
 8004d68:	20000d5c 	.word	0x20000d5c
 8004d6c:	20000e0c 	.word	0x20000e0c
 8004d70:	20000d6c 	.word	0x20000d6c
 8004d74:	080064f0 	.word	0x080064f0

08004d78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3b04      	subs	r3, #4
 8004d88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b04      	subs	r3, #4
 8004d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f023 0201 	bic.w	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3b04      	subs	r3, #4
 8004da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004da8:	4a0c      	ldr	r2, [pc, #48]	@ (8004ddc <pxPortInitialiseStack+0x64>)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3b14      	subs	r3, #20
 8004db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3b04      	subs	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f06f 0202 	mvn.w	r2, #2
 8004dc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b20      	subs	r3, #32
 8004dcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	08004de1 	.word	0x08004de1

08004de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dea:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <prvTaskExitError+0x58>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df2:	d00b      	beq.n	8004e0c <prvTaskExitError+0x2c>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	60fb      	str	r3, [r7, #12]
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <prvTaskExitError+0x28>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	60bb      	str	r3, [r7, #8]
}
 8004e1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e20:	bf00      	nop
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0fc      	beq.n	8004e22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	00000000 	.word	0x00000000

08004e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e40:	4b07      	ldr	r3, [pc, #28]	@ (8004e60 <pxCurrentTCBConst2>)
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	6808      	ldr	r0, [r1, #0]
 8004e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	f380 8809 	msr	PSP, r0
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f380 8811 	msr	BASEPRI, r0
 8004e5a:	4770      	bx	lr
 8004e5c:	f3af 8000 	nop.w

08004e60 <pxCurrentTCBConst2>:
 8004e60:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop

08004e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e68:	4808      	ldr	r0, [pc, #32]	@ (8004e8c <prvPortStartFirstTask+0x24>)
 8004e6a:	6800      	ldr	r0, [r0, #0]
 8004e6c:	6800      	ldr	r0, [r0, #0]
 8004e6e:	f380 8808 	msr	MSP, r0
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8814 	msr	CONTROL, r0
 8004e7a:	b662      	cpsie	i
 8004e7c:	b661      	cpsie	f
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	df00      	svc	0
 8004e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e8a:	bf00      	nop
 8004e8c:	e000ed08 	.word	0xe000ed08

08004e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e96:	4b47      	ldr	r3, [pc, #284]	@ (8004fb4 <xPortStartScheduler+0x124>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a47      	ldr	r2, [pc, #284]	@ (8004fb8 <xPortStartScheduler+0x128>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10b      	bne.n	8004eb8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb4 <xPortStartScheduler+0x124>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8004fbc <xPortStartScheduler+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10b      	bne.n	8004eda <xPortStartScheduler+0x4a>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60fb      	str	r3, [r7, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	e7fd      	b.n	8004ed6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004eda:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <xPortStartScheduler+0x130>)
 8004edc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	22ff      	movs	r2, #255	@ 0xff
 8004eea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	4b31      	ldr	r3, [pc, #196]	@ (8004fc4 <xPortStartScheduler+0x134>)
 8004f00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f02:	4b31      	ldr	r3, [pc, #196]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f04:	2207      	movs	r2, #7
 8004f06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f08:	e009      	b.n	8004f1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f26:	2b80      	cmp	r3, #128	@ 0x80
 8004f28:	d0ef      	beq.n	8004f0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f2a:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f1c3 0307 	rsb	r3, r3, #7
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d00b      	beq.n	8004f4e <xPortStartScheduler+0xbe>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	60bb      	str	r3, [r7, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f60:	4a19      	ldr	r2, [pc, #100]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f6c:	4b17      	ldr	r3, [pc, #92]	@ (8004fcc <xPortStartScheduler+0x13c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <xPortStartScheduler+0x13c>)
 8004f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f78:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <xPortStartScheduler+0x13c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a13      	ldr	r2, [pc, #76]	@ (8004fcc <xPortStartScheduler+0x13c>)
 8004f7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f84:	f000 f8da 	bl	800513c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f88:	4b11      	ldr	r3, [pc, #68]	@ (8004fd0 <xPortStartScheduler+0x140>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f8e:	f000 f8f9 	bl	8005184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f92:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <xPortStartScheduler+0x144>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a0f      	ldr	r2, [pc, #60]	@ (8004fd4 <xPortStartScheduler+0x144>)
 8004f98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004f9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f9e:	f7ff ff63 	bl	8004e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fa2:	f7ff f83d 	bl	8004020 <vTaskSwitchContext>
	prvTaskExitError();
 8004fa6:	f7ff ff1b 	bl	8004de0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	e000ed00 	.word	0xe000ed00
 8004fb8:	410fc271 	.word	0x410fc271
 8004fbc:	410fc270 	.word	0x410fc270
 8004fc0:	e000e400 	.word	0xe000e400
 8004fc4:	20000e5c 	.word	0x20000e5c
 8004fc8:	20000e60 	.word	0x20000e60
 8004fcc:	e000ed20 	.word	0xe000ed20
 8004fd0:	2000000c 	.word	0x2000000c
 8004fd4:	e000ef34 	.word	0xe000ef34

08004fd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <vPortEnterCritical+0x5c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <vPortEnterCritical+0x5c>)
 8004ffa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <vPortEnterCritical+0x5c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d110      	bne.n	8005026 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005004:	4b0c      	ldr	r3, [pc, #48]	@ (8005038 <vPortEnterCritical+0x60>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <vPortEnterCritical+0x4e>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	603b      	str	r3, [r7, #0]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <vPortEnterCritical+0x4a>
	}
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005042:	4b12      	ldr	r3, [pc, #72]	@ (800508c <vPortExitCritical+0x50>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <vPortExitCritical+0x26>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <vPortExitCritical+0x50>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3b01      	subs	r3, #1
 8005068:	4a08      	ldr	r2, [pc, #32]	@ (800508c <vPortExitCritical+0x50>)
 800506a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800506c:	4b07      	ldr	r3, [pc, #28]	@ (800508c <vPortExitCritical+0x50>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <vPortExitCritical+0x44>
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f383 8811 	msr	BASEPRI, r3
}
 800507e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	2000000c 	.word	0x2000000c

08005090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005090:	f3ef 8009 	mrs	r0, PSP
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4b15      	ldr	r3, [pc, #84]	@ (80050f0 <pxCurrentTCBConst>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	f01e 0f10 	tst.w	lr, #16
 80050a0:	bf08      	it	eq
 80050a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	6010      	str	r0, [r2, #0]
 80050ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80050b4:	f380 8811 	msr	BASEPRI, r0
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f7fe ffae 	bl	8004020 <vTaskSwitchContext>
 80050c4:	f04f 0000 	mov.w	r0, #0
 80050c8:	f380 8811 	msr	BASEPRI, r0
 80050cc:	bc09      	pop	{r0, r3}
 80050ce:	6819      	ldr	r1, [r3, #0]
 80050d0:	6808      	ldr	r0, [r1, #0]
 80050d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d6:	f01e 0f10 	tst.w	lr, #16
 80050da:	bf08      	it	eq
 80050dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050e0:	f380 8809 	msr	PSP, r0
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst>:
 80050f0:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	607b      	str	r3, [r7, #4]
}
 8005110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005112:	f7fe fecb 	bl	8003eac <xTaskIncrementTick>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800511c:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <xPortSysTickHandler+0x40>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005140:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <vPortSetupTimerInterrupt+0x34>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005146:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <vPortSetupTimerInterrupt+0x38>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800514c:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <vPortSetupTimerInterrupt+0x3c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <vPortSetupTimerInterrupt+0x40>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	099b      	lsrs	r3, r3, #6
 8005158:	4a09      	ldr	r2, [pc, #36]	@ (8005180 <vPortSetupTimerInterrupt+0x44>)
 800515a:	3b01      	subs	r3, #1
 800515c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800515e:	4b04      	ldr	r3, [pc, #16]	@ (8005170 <vPortSetupTimerInterrupt+0x34>)
 8005160:	2207      	movs	r2, #7
 8005162:	601a      	str	r2, [r3, #0]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	e000e010 	.word	0xe000e010
 8005174:	e000e018 	.word	0xe000e018
 8005178:	20000000 	.word	0x20000000
 800517c:	10624dd3 	.word	0x10624dd3
 8005180:	e000e014 	.word	0xe000e014

08005184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005184:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005194 <vPortEnableVFP+0x10>
 8005188:	6801      	ldr	r1, [r0, #0]
 800518a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800518e:	6001      	str	r1, [r0, #0]
 8005190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005192:	bf00      	nop
 8005194:	e000ed88 	.word	0xe000ed88

08005198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800519e:	f3ef 8305 	mrs	r3, IPSR
 80051a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b0f      	cmp	r3, #15
 80051a8:	d915      	bls.n	80051d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051aa:	4a18      	ldr	r2, [pc, #96]	@ (800520c <vPortValidateInterruptPriority+0x74>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051b4:	4b16      	ldr	r3, [pc, #88]	@ (8005210 <vPortValidateInterruptPriority+0x78>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	7afa      	ldrb	r2, [r7, #11]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d20b      	bcs.n	80051d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80051d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <vPortValidateInterruptPriority+0x7c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051de:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <vPortValidateInterruptPriority+0x80>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d90b      	bls.n	80051fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	603b      	str	r3, [r7, #0]
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <vPortValidateInterruptPriority+0x62>
	}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	e000e3f0 	.word	0xe000e3f0
 8005210:	20000e5c 	.word	0x20000e5c
 8005214:	e000ed0c 	.word	0xe000ed0c
 8005218:	20000e60 	.word	0x20000e60

0800521c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005228:	f7fe fd84 	bl	8003d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800522c:	4b5c      	ldr	r3, [pc, #368]	@ (80053a0 <pvPortMalloc+0x184>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005234:	f000 f924 	bl	8005480 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005238:	4b5a      	ldr	r3, [pc, #360]	@ (80053a4 <pvPortMalloc+0x188>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 8095 	bne.w	8005370 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01e      	beq.n	800528a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800524c:	2208      	movs	r2, #8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d015      	beq.n	800528a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	3308      	adds	r3, #8
 8005266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <pvPortMalloc+0x6e>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	617b      	str	r3, [r7, #20]
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d06f      	beq.n	8005370 <pvPortMalloc+0x154>
 8005290:	4b45      	ldr	r3, [pc, #276]	@ (80053a8 <pvPortMalloc+0x18c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	429a      	cmp	r2, r3
 8005298:	d86a      	bhi.n	8005370 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800529a:	4b44      	ldr	r3, [pc, #272]	@ (80053ac <pvPortMalloc+0x190>)
 800529c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800529e:	4b43      	ldr	r3, [pc, #268]	@ (80053ac <pvPortMalloc+0x190>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052a4:	e004      	b.n	80052b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d903      	bls.n	80052c2 <pvPortMalloc+0xa6>
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f1      	bne.n	80052a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052c2:	4b37      	ldr	r3, [pc, #220]	@ (80053a0 <pvPortMalloc+0x184>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d051      	beq.n	8005370 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2208      	movs	r2, #8
 80052d2:	4413      	add	r3, r2
 80052d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	1ad2      	subs	r2, r2, r3
 80052e6:	2308      	movs	r3, #8
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d920      	bls.n	8005330 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4413      	add	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <pvPortMalloc+0xfc>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	613b      	str	r3, [r7, #16]
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800532a:	69b8      	ldr	r0, [r7, #24]
 800532c:	f000 f90a 	bl	8005544 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005330:	4b1d      	ldr	r3, [pc, #116]	@ (80053a8 <pvPortMalloc+0x18c>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	4a1b      	ldr	r2, [pc, #108]	@ (80053a8 <pvPortMalloc+0x18c>)
 800533c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800533e:	4b1a      	ldr	r3, [pc, #104]	@ (80053a8 <pvPortMalloc+0x18c>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <pvPortMalloc+0x194>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d203      	bcs.n	8005352 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800534a:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <pvPortMalloc+0x18c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a18      	ldr	r2, [pc, #96]	@ (80053b0 <pvPortMalloc+0x194>)
 8005350:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	4b13      	ldr	r3, [pc, #76]	@ (80053a4 <pvPortMalloc+0x188>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	431a      	orrs	r2, r3
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005366:	4b13      	ldr	r3, [pc, #76]	@ (80053b4 <pvPortMalloc+0x198>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3301      	adds	r3, #1
 800536c:	4a11      	ldr	r2, [pc, #68]	@ (80053b4 <pvPortMalloc+0x198>)
 800536e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005370:	f7fe fcee 	bl	8003d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <pvPortMalloc+0x17a>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	60fb      	str	r3, [r7, #12]
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	e7fd      	b.n	8005392 <pvPortMalloc+0x176>
	return pvReturn;
 8005396:	69fb      	ldr	r3, [r7, #28]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	@ 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20004a6c 	.word	0x20004a6c
 80053a4:	20004a80 	.word	0x20004a80
 80053a8:	20004a70 	.word	0x20004a70
 80053ac:	20004a64 	.word	0x20004a64
 80053b0:	20004a74 	.word	0x20004a74
 80053b4:	20004a78 	.word	0x20004a78

080053b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d04f      	beq.n	800546a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053ca:	2308      	movs	r3, #8
 80053cc:	425b      	negs	r3, r3
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4413      	add	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	4b25      	ldr	r3, [pc, #148]	@ (8005474 <vPortFree+0xbc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10b      	bne.n	80053fe <vPortFree+0x46>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60fb      	str	r3, [r7, #12]
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	e7fd      	b.n	80053fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <vPortFree+0x66>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60bb      	str	r3, [r7, #8]
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	e7fd      	b.n	800541a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	4b14      	ldr	r3, [pc, #80]	@ (8005474 <vPortFree+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01e      	beq.n	800546a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d11a      	bne.n	800546a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	4b0e      	ldr	r3, [pc, #56]	@ (8005474 <vPortFree+0xbc>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	43db      	mvns	r3, r3
 800543e:	401a      	ands	r2, r3
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005444:	f7fe fc76 	bl	8003d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4b0a      	ldr	r3, [pc, #40]	@ (8005478 <vPortFree+0xc0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4413      	add	r3, r2
 8005452:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <vPortFree+0xc0>)
 8005454:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005456:	6938      	ldr	r0, [r7, #16]
 8005458:	f000 f874 	bl	8005544 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800545c:	4b07      	ldr	r3, [pc, #28]	@ (800547c <vPortFree+0xc4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	4a06      	ldr	r2, [pc, #24]	@ (800547c <vPortFree+0xc4>)
 8005464:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005466:	f7fe fc73 	bl	8003d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800546a:	bf00      	nop
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20004a80 	.word	0x20004a80
 8005478:	20004a70 	.word	0x20004a70
 800547c:	20004a7c 	.word	0x20004a7c

08005480 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005486:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800548a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800548c:	4b27      	ldr	r3, [pc, #156]	@ (800552c <prvHeapInit+0xac>)
 800548e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00c      	beq.n	80054b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3307      	adds	r3, #7
 800549e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0307 	bic.w	r3, r3, #7
 80054a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	4a1f      	ldr	r2, [pc, #124]	@ (800552c <prvHeapInit+0xac>)
 80054b0:	4413      	add	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005530 <prvHeapInit+0xb0>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054be:	4b1c      	ldr	r3, [pc, #112]	@ (8005530 <prvHeapInit+0xb0>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4413      	add	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054cc:	2208      	movs	r2, #8
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0307 	bic.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <prvHeapInit+0xb4>)
 80054e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054e2:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <prvHeapInit+0xb4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2200      	movs	r2, #0
 80054e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054ea:	4b12      	ldr	r3, [pc, #72]	@ (8005534 <prvHeapInit+0xb4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005500:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <prvHeapInit+0xb4>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a0a      	ldr	r2, [pc, #40]	@ (8005538 <prvHeapInit+0xb8>)
 800550e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4a09      	ldr	r2, [pc, #36]	@ (800553c <prvHeapInit+0xbc>)
 8005516:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005518:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <prvHeapInit+0xc0>)
 800551a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800551e:	601a      	str	r2, [r3, #0]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	20000e64 	.word	0x20000e64
 8005530:	20004a64 	.word	0x20004a64
 8005534:	20004a6c 	.word	0x20004a6c
 8005538:	20004a74 	.word	0x20004a74
 800553c:	20004a70 	.word	0x20004a70
 8005540:	20004a80 	.word	0x20004a80

08005544 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800554c:	4b28      	ldr	r3, [pc, #160]	@ (80055f0 <prvInsertBlockIntoFreeList+0xac>)
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	e002      	b.n	8005558 <prvInsertBlockIntoFreeList+0x14>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	d8f7      	bhi.n	8005552 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	4413      	add	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d108      	bne.n	8005586 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	441a      	add	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d118      	bne.n	80055cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4b15      	ldr	r3, [pc, #84]	@ (80055f4 <prvInsertBlockIntoFreeList+0xb0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d00d      	beq.n	80055c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	441a      	add	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e008      	b.n	80055d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055c2:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <prvInsertBlockIntoFreeList+0xb0>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e003      	b.n	80055d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d002      	beq.n	80055e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20004a64 	.word	0x20004a64
 80055f4:	20004a6c 	.word	0x20004a6c

080055f8 <std>:
 80055f8:	2300      	movs	r3, #0
 80055fa:	b510      	push	{r4, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005606:	6083      	str	r3, [r0, #8]
 8005608:	8181      	strh	r1, [r0, #12]
 800560a:	6643      	str	r3, [r0, #100]	@ 0x64
 800560c:	81c2      	strh	r2, [r0, #14]
 800560e:	6183      	str	r3, [r0, #24]
 8005610:	4619      	mov	r1, r3
 8005612:	2208      	movs	r2, #8
 8005614:	305c      	adds	r0, #92	@ 0x5c
 8005616:	f000 f906 	bl	8005826 <memset>
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <std+0x58>)
 800561c:	6263      	str	r3, [r4, #36]	@ 0x24
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <std+0x5c>)
 8005620:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <std+0x60>)
 8005624:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005626:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <std+0x64>)
 8005628:	6323      	str	r3, [r4, #48]	@ 0x30
 800562a:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <std+0x68>)
 800562c:	6224      	str	r4, [r4, #32]
 800562e:	429c      	cmp	r4, r3
 8005630:	d006      	beq.n	8005640 <std+0x48>
 8005632:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005636:	4294      	cmp	r4, r2
 8005638:	d002      	beq.n	8005640 <std+0x48>
 800563a:	33d0      	adds	r3, #208	@ 0xd0
 800563c:	429c      	cmp	r4, r3
 800563e:	d105      	bne.n	800564c <std+0x54>
 8005640:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005648:	f000 b966 	b.w	8005918 <__retarget_lock_init_recursive>
 800564c:	bd10      	pop	{r4, pc}
 800564e:	bf00      	nop
 8005650:	080057a1 	.word	0x080057a1
 8005654:	080057c3 	.word	0x080057c3
 8005658:	080057fb 	.word	0x080057fb
 800565c:	0800581f 	.word	0x0800581f
 8005660:	20004a84 	.word	0x20004a84

08005664 <stdio_exit_handler>:
 8005664:	4a02      	ldr	r2, [pc, #8]	@ (8005670 <stdio_exit_handler+0xc>)
 8005666:	4903      	ldr	r1, [pc, #12]	@ (8005674 <stdio_exit_handler+0x10>)
 8005668:	4803      	ldr	r0, [pc, #12]	@ (8005678 <stdio_exit_handler+0x14>)
 800566a:	f000 b869 	b.w	8005740 <_fwalk_sglue>
 800566e:	bf00      	nop
 8005670:	20000010 	.word	0x20000010
 8005674:	080061d5 	.word	0x080061d5
 8005678:	20000020 	.word	0x20000020

0800567c <cleanup_stdio>:
 800567c:	6841      	ldr	r1, [r0, #4]
 800567e:	4b0c      	ldr	r3, [pc, #48]	@ (80056b0 <cleanup_stdio+0x34>)
 8005680:	4299      	cmp	r1, r3
 8005682:	b510      	push	{r4, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	d001      	beq.n	800568c <cleanup_stdio+0x10>
 8005688:	f000 fda4 	bl	80061d4 <_fflush_r>
 800568c:	68a1      	ldr	r1, [r4, #8]
 800568e:	4b09      	ldr	r3, [pc, #36]	@ (80056b4 <cleanup_stdio+0x38>)
 8005690:	4299      	cmp	r1, r3
 8005692:	d002      	beq.n	800569a <cleanup_stdio+0x1e>
 8005694:	4620      	mov	r0, r4
 8005696:	f000 fd9d 	bl	80061d4 <_fflush_r>
 800569a:	68e1      	ldr	r1, [r4, #12]
 800569c:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <cleanup_stdio+0x3c>)
 800569e:	4299      	cmp	r1, r3
 80056a0:	d004      	beq.n	80056ac <cleanup_stdio+0x30>
 80056a2:	4620      	mov	r0, r4
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a8:	f000 bd94 	b.w	80061d4 <_fflush_r>
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	bf00      	nop
 80056b0:	20004a84 	.word	0x20004a84
 80056b4:	20004aec 	.word	0x20004aec
 80056b8:	20004b54 	.word	0x20004b54

080056bc <global_stdio_init.part.0>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <global_stdio_init.part.0+0x30>)
 80056c0:	4c0b      	ldr	r4, [pc, #44]	@ (80056f0 <global_stdio_init.part.0+0x34>)
 80056c2:	4a0c      	ldr	r2, [pc, #48]	@ (80056f4 <global_stdio_init.part.0+0x38>)
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	4620      	mov	r0, r4
 80056c8:	2200      	movs	r2, #0
 80056ca:	2104      	movs	r1, #4
 80056cc:	f7ff ff94 	bl	80055f8 <std>
 80056d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056d4:	2201      	movs	r2, #1
 80056d6:	2109      	movs	r1, #9
 80056d8:	f7ff ff8e 	bl	80055f8 <std>
 80056dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056e0:	2202      	movs	r2, #2
 80056e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e6:	2112      	movs	r1, #18
 80056e8:	f7ff bf86 	b.w	80055f8 <std>
 80056ec:	20004bbc 	.word	0x20004bbc
 80056f0:	20004a84 	.word	0x20004a84
 80056f4:	08005665 	.word	0x08005665

080056f8 <__sfp_lock_acquire>:
 80056f8:	4801      	ldr	r0, [pc, #4]	@ (8005700 <__sfp_lock_acquire+0x8>)
 80056fa:	f000 b90e 	b.w	800591a <__retarget_lock_acquire_recursive>
 80056fe:	bf00      	nop
 8005700:	20004bc5 	.word	0x20004bc5

08005704 <__sfp_lock_release>:
 8005704:	4801      	ldr	r0, [pc, #4]	@ (800570c <__sfp_lock_release+0x8>)
 8005706:	f000 b909 	b.w	800591c <__retarget_lock_release_recursive>
 800570a:	bf00      	nop
 800570c:	20004bc5 	.word	0x20004bc5

08005710 <__sinit>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	f7ff fff0 	bl	80056f8 <__sfp_lock_acquire>
 8005718:	6a23      	ldr	r3, [r4, #32]
 800571a:	b11b      	cbz	r3, 8005724 <__sinit+0x14>
 800571c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005720:	f7ff bff0 	b.w	8005704 <__sfp_lock_release>
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <__sinit+0x28>)
 8005726:	6223      	str	r3, [r4, #32]
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <__sinit+0x2c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f5      	bne.n	800571c <__sinit+0xc>
 8005730:	f7ff ffc4 	bl	80056bc <global_stdio_init.part.0>
 8005734:	e7f2      	b.n	800571c <__sinit+0xc>
 8005736:	bf00      	nop
 8005738:	0800567d 	.word	0x0800567d
 800573c:	20004bbc 	.word	0x20004bbc

08005740 <_fwalk_sglue>:
 8005740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005744:	4607      	mov	r7, r0
 8005746:	4688      	mov	r8, r1
 8005748:	4614      	mov	r4, r2
 800574a:	2600      	movs	r6, #0
 800574c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005750:	f1b9 0901 	subs.w	r9, r9, #1
 8005754:	d505      	bpl.n	8005762 <_fwalk_sglue+0x22>
 8005756:	6824      	ldr	r4, [r4, #0]
 8005758:	2c00      	cmp	r4, #0
 800575a:	d1f7      	bne.n	800574c <_fwalk_sglue+0xc>
 800575c:	4630      	mov	r0, r6
 800575e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005762:	89ab      	ldrh	r3, [r5, #12]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d907      	bls.n	8005778 <_fwalk_sglue+0x38>
 8005768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800576c:	3301      	adds	r3, #1
 800576e:	d003      	beq.n	8005778 <_fwalk_sglue+0x38>
 8005770:	4629      	mov	r1, r5
 8005772:	4638      	mov	r0, r7
 8005774:	47c0      	blx	r8
 8005776:	4306      	orrs	r6, r0
 8005778:	3568      	adds	r5, #104	@ 0x68
 800577a:	e7e9      	b.n	8005750 <_fwalk_sglue+0x10>

0800577c <iprintf>:
 800577c:	b40f      	push	{r0, r1, r2, r3}
 800577e:	b507      	push	{r0, r1, r2, lr}
 8005780:	4906      	ldr	r1, [pc, #24]	@ (800579c <iprintf+0x20>)
 8005782:	ab04      	add	r3, sp, #16
 8005784:	6808      	ldr	r0, [r1, #0]
 8005786:	f853 2b04 	ldr.w	r2, [r3], #4
 800578a:	6881      	ldr	r1, [r0, #8]
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	f000 f9f7 	bl	8005b80 <_vfiprintf_r>
 8005792:	b003      	add	sp, #12
 8005794:	f85d eb04 	ldr.w	lr, [sp], #4
 8005798:	b004      	add	sp, #16
 800579a:	4770      	bx	lr
 800579c:	2000001c 	.word	0x2000001c

080057a0 <__sread>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	460c      	mov	r4, r1
 80057a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a8:	f000 f868 	bl	800587c <_read_r>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	bfab      	itete	ge
 80057b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057b2:	89a3      	ldrhlt	r3, [r4, #12]
 80057b4:	181b      	addge	r3, r3, r0
 80057b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ba:	bfac      	ite	ge
 80057bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057be:	81a3      	strhlt	r3, [r4, #12]
 80057c0:	bd10      	pop	{r4, pc}

080057c2 <__swrite>:
 80057c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c6:	461f      	mov	r7, r3
 80057c8:	898b      	ldrh	r3, [r1, #12]
 80057ca:	05db      	lsls	r3, r3, #23
 80057cc:	4605      	mov	r5, r0
 80057ce:	460c      	mov	r4, r1
 80057d0:	4616      	mov	r6, r2
 80057d2:	d505      	bpl.n	80057e0 <__swrite+0x1e>
 80057d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d8:	2302      	movs	r3, #2
 80057da:	2200      	movs	r2, #0
 80057dc:	f000 f83c 	bl	8005858 <_lseek_r>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	4632      	mov	r2, r6
 80057ee:	463b      	mov	r3, r7
 80057f0:	4628      	mov	r0, r5
 80057f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	f000 b853 	b.w	80058a0 <_write_r>

080057fa <__sseek>:
 80057fa:	b510      	push	{r4, lr}
 80057fc:	460c      	mov	r4, r1
 80057fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005802:	f000 f829 	bl	8005858 <_lseek_r>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	bf15      	itete	ne
 800580c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800580e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005812:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005816:	81a3      	strheq	r3, [r4, #12]
 8005818:	bf18      	it	ne
 800581a:	81a3      	strhne	r3, [r4, #12]
 800581c:	bd10      	pop	{r4, pc}

0800581e <__sclose>:
 800581e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005822:	f000 b809 	b.w	8005838 <_close_r>

08005826 <memset>:
 8005826:	4402      	add	r2, r0
 8005828:	4603      	mov	r3, r0
 800582a:	4293      	cmp	r3, r2
 800582c:	d100      	bne.n	8005830 <memset+0xa>
 800582e:	4770      	bx	lr
 8005830:	f803 1b01 	strb.w	r1, [r3], #1
 8005834:	e7f9      	b.n	800582a <memset+0x4>
	...

08005838 <_close_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d06      	ldr	r5, [pc, #24]	@ (8005854 <_close_r+0x1c>)
 800583c:	2300      	movs	r3, #0
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fb f99d 	bl	8000b82 <_close>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_close_r+0x1a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_close_r+0x1a>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	20004bc0 	.word	0x20004bc0

08005858 <_lseek_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d07      	ldr	r5, [pc, #28]	@ (8005878 <_lseek_r+0x20>)
 800585c:	4604      	mov	r4, r0
 800585e:	4608      	mov	r0, r1
 8005860:	4611      	mov	r1, r2
 8005862:	2200      	movs	r2, #0
 8005864:	602a      	str	r2, [r5, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f7fb f9b2 	bl	8000bd0 <_lseek>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_lseek_r+0x1e>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_lseek_r+0x1e>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20004bc0 	.word	0x20004bc0

0800587c <_read_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d07      	ldr	r5, [pc, #28]	@ (800589c <_read_r+0x20>)
 8005880:	4604      	mov	r4, r0
 8005882:	4608      	mov	r0, r1
 8005884:	4611      	mov	r1, r2
 8005886:	2200      	movs	r2, #0
 8005888:	602a      	str	r2, [r5, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	f7fb f940 	bl	8000b10 <_read>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_read_r+0x1e>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_read_r+0x1e>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	20004bc0 	.word	0x20004bc0

080058a0 <_write_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d07      	ldr	r5, [pc, #28]	@ (80058c0 <_write_r+0x20>)
 80058a4:	4604      	mov	r4, r0
 80058a6:	4608      	mov	r0, r1
 80058a8:	4611      	mov	r1, r2
 80058aa:	2200      	movs	r2, #0
 80058ac:	602a      	str	r2, [r5, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f7fb f94b 	bl	8000b4a <_write>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_write_r+0x1e>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_write_r+0x1e>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	20004bc0 	.word	0x20004bc0

080058c4 <__errno>:
 80058c4:	4b01      	ldr	r3, [pc, #4]	@ (80058cc <__errno+0x8>)
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	2000001c 	.word	0x2000001c

080058d0 <__libc_init_array>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005908 <__libc_init_array+0x38>)
 80058d4:	4c0d      	ldr	r4, [pc, #52]	@ (800590c <__libc_init_array+0x3c>)
 80058d6:	1b64      	subs	r4, r4, r5
 80058d8:	10a4      	asrs	r4, r4, #2
 80058da:	2600      	movs	r6, #0
 80058dc:	42a6      	cmp	r6, r4
 80058de:	d109      	bne.n	80058f4 <__libc_init_array+0x24>
 80058e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005910 <__libc_init_array+0x40>)
 80058e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005914 <__libc_init_array+0x44>)
 80058e4:	f000 fdc6 	bl	8006474 <_init>
 80058e8:	1b64      	subs	r4, r4, r5
 80058ea:	10a4      	asrs	r4, r4, #2
 80058ec:	2600      	movs	r6, #0
 80058ee:	42a6      	cmp	r6, r4
 80058f0:	d105      	bne.n	80058fe <__libc_init_array+0x2e>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f8:	4798      	blx	r3
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7ee      	b.n	80058dc <__libc_init_array+0xc>
 80058fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005902:	4798      	blx	r3
 8005904:	3601      	adds	r6, #1
 8005906:	e7f2      	b.n	80058ee <__libc_init_array+0x1e>
 8005908:	0800654c 	.word	0x0800654c
 800590c:	0800654c 	.word	0x0800654c
 8005910:	0800654c 	.word	0x0800654c
 8005914:	08006550 	.word	0x08006550

08005918 <__retarget_lock_init_recursive>:
 8005918:	4770      	bx	lr

0800591a <__retarget_lock_acquire_recursive>:
 800591a:	4770      	bx	lr

0800591c <__retarget_lock_release_recursive>:
 800591c:	4770      	bx	lr

0800591e <memcpy>:
 800591e:	440a      	add	r2, r1
 8005920:	4291      	cmp	r1, r2
 8005922:	f100 33ff 	add.w	r3, r0, #4294967295
 8005926:	d100      	bne.n	800592a <memcpy+0xc>
 8005928:	4770      	bx	lr
 800592a:	b510      	push	{r4, lr}
 800592c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005934:	4291      	cmp	r1, r2
 8005936:	d1f9      	bne.n	800592c <memcpy+0xe>
 8005938:	bd10      	pop	{r4, pc}
	...

0800593c <_free_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4605      	mov	r5, r0
 8005940:	2900      	cmp	r1, #0
 8005942:	d041      	beq.n	80059c8 <_free_r+0x8c>
 8005944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005948:	1f0c      	subs	r4, r1, #4
 800594a:	2b00      	cmp	r3, #0
 800594c:	bfb8      	it	lt
 800594e:	18e4      	addlt	r4, r4, r3
 8005950:	f000 f8e0 	bl	8005b14 <__malloc_lock>
 8005954:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <_free_r+0x90>)
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	b933      	cbnz	r3, 8005968 <_free_r+0x2c>
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	6014      	str	r4, [r2, #0]
 800595e:	4628      	mov	r0, r5
 8005960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005964:	f000 b8dc 	b.w	8005b20 <__malloc_unlock>
 8005968:	42a3      	cmp	r3, r4
 800596a:	d908      	bls.n	800597e <_free_r+0x42>
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	1821      	adds	r1, r4, r0
 8005970:	428b      	cmp	r3, r1
 8005972:	bf01      	itttt	eq
 8005974:	6819      	ldreq	r1, [r3, #0]
 8005976:	685b      	ldreq	r3, [r3, #4]
 8005978:	1809      	addeq	r1, r1, r0
 800597a:	6021      	streq	r1, [r4, #0]
 800597c:	e7ed      	b.n	800595a <_free_r+0x1e>
 800597e:	461a      	mov	r2, r3
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	b10b      	cbz	r3, 8005988 <_free_r+0x4c>
 8005984:	42a3      	cmp	r3, r4
 8005986:	d9fa      	bls.n	800597e <_free_r+0x42>
 8005988:	6811      	ldr	r1, [r2, #0]
 800598a:	1850      	adds	r0, r2, r1
 800598c:	42a0      	cmp	r0, r4
 800598e:	d10b      	bne.n	80059a8 <_free_r+0x6c>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	4401      	add	r1, r0
 8005994:	1850      	adds	r0, r2, r1
 8005996:	4283      	cmp	r3, r0
 8005998:	6011      	str	r1, [r2, #0]
 800599a:	d1e0      	bne.n	800595e <_free_r+0x22>
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	6053      	str	r3, [r2, #4]
 80059a2:	4408      	add	r0, r1
 80059a4:	6010      	str	r0, [r2, #0]
 80059a6:	e7da      	b.n	800595e <_free_r+0x22>
 80059a8:	d902      	bls.n	80059b0 <_free_r+0x74>
 80059aa:	230c      	movs	r3, #12
 80059ac:	602b      	str	r3, [r5, #0]
 80059ae:	e7d6      	b.n	800595e <_free_r+0x22>
 80059b0:	6820      	ldr	r0, [r4, #0]
 80059b2:	1821      	adds	r1, r4, r0
 80059b4:	428b      	cmp	r3, r1
 80059b6:	bf04      	itt	eq
 80059b8:	6819      	ldreq	r1, [r3, #0]
 80059ba:	685b      	ldreq	r3, [r3, #4]
 80059bc:	6063      	str	r3, [r4, #4]
 80059be:	bf04      	itt	eq
 80059c0:	1809      	addeq	r1, r1, r0
 80059c2:	6021      	streq	r1, [r4, #0]
 80059c4:	6054      	str	r4, [r2, #4]
 80059c6:	e7ca      	b.n	800595e <_free_r+0x22>
 80059c8:	bd38      	pop	{r3, r4, r5, pc}
 80059ca:	bf00      	nop
 80059cc:	20004bcc 	.word	0x20004bcc

080059d0 <sbrk_aligned>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005a10 <sbrk_aligned+0x40>)
 80059d4:	460c      	mov	r4, r1
 80059d6:	6831      	ldr	r1, [r6, #0]
 80059d8:	4605      	mov	r5, r0
 80059da:	b911      	cbnz	r1, 80059e2 <sbrk_aligned+0x12>
 80059dc:	f000 fcb6 	bl	800634c <_sbrk_r>
 80059e0:	6030      	str	r0, [r6, #0]
 80059e2:	4621      	mov	r1, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 fcb1 	bl	800634c <_sbrk_r>
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	d103      	bne.n	80059f6 <sbrk_aligned+0x26>
 80059ee:	f04f 34ff 	mov.w	r4, #4294967295
 80059f2:	4620      	mov	r0, r4
 80059f4:	bd70      	pop	{r4, r5, r6, pc}
 80059f6:	1cc4      	adds	r4, r0, #3
 80059f8:	f024 0403 	bic.w	r4, r4, #3
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d0f8      	beq.n	80059f2 <sbrk_aligned+0x22>
 8005a00:	1a21      	subs	r1, r4, r0
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 fca2 	bl	800634c <_sbrk_r>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d1f2      	bne.n	80059f2 <sbrk_aligned+0x22>
 8005a0c:	e7ef      	b.n	80059ee <sbrk_aligned+0x1e>
 8005a0e:	bf00      	nop
 8005a10:	20004bc8 	.word	0x20004bc8

08005a14 <_malloc_r>:
 8005a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a18:	1ccd      	adds	r5, r1, #3
 8005a1a:	f025 0503 	bic.w	r5, r5, #3
 8005a1e:	3508      	adds	r5, #8
 8005a20:	2d0c      	cmp	r5, #12
 8005a22:	bf38      	it	cc
 8005a24:	250c      	movcc	r5, #12
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	4606      	mov	r6, r0
 8005a2a:	db01      	blt.n	8005a30 <_malloc_r+0x1c>
 8005a2c:	42a9      	cmp	r1, r5
 8005a2e:	d904      	bls.n	8005a3a <_malloc_r+0x26>
 8005a30:	230c      	movs	r3, #12
 8005a32:	6033      	str	r3, [r6, #0]
 8005a34:	2000      	movs	r0, #0
 8005a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b10 <_malloc_r+0xfc>
 8005a3e:	f000 f869 	bl	8005b14 <__malloc_lock>
 8005a42:	f8d8 3000 	ldr.w	r3, [r8]
 8005a46:	461c      	mov	r4, r3
 8005a48:	bb44      	cbnz	r4, 8005a9c <_malloc_r+0x88>
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f7ff ffbf 	bl	80059d0 <sbrk_aligned>
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	4604      	mov	r4, r0
 8005a56:	d158      	bne.n	8005b0a <_malloc_r+0xf6>
 8005a58:	f8d8 4000 	ldr.w	r4, [r8]
 8005a5c:	4627      	mov	r7, r4
 8005a5e:	2f00      	cmp	r7, #0
 8005a60:	d143      	bne.n	8005aea <_malloc_r+0xd6>
 8005a62:	2c00      	cmp	r4, #0
 8005a64:	d04b      	beq.n	8005afe <_malloc_r+0xea>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	4639      	mov	r1, r7
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	eb04 0903 	add.w	r9, r4, r3
 8005a70:	f000 fc6c 	bl	800634c <_sbrk_r>
 8005a74:	4581      	cmp	r9, r0
 8005a76:	d142      	bne.n	8005afe <_malloc_r+0xea>
 8005a78:	6821      	ldr	r1, [r4, #0]
 8005a7a:	1a6d      	subs	r5, r5, r1
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff ffa6 	bl	80059d0 <sbrk_aligned>
 8005a84:	3001      	adds	r0, #1
 8005a86:	d03a      	beq.n	8005afe <_malloc_r+0xea>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	442b      	add	r3, r5
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	bb62      	cbnz	r2, 8005af0 <_malloc_r+0xdc>
 8005a96:	f8c8 7000 	str.w	r7, [r8]
 8005a9a:	e00f      	b.n	8005abc <_malloc_r+0xa8>
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	1b52      	subs	r2, r2, r5
 8005aa0:	d420      	bmi.n	8005ae4 <_malloc_r+0xd0>
 8005aa2:	2a0b      	cmp	r2, #11
 8005aa4:	d917      	bls.n	8005ad6 <_malloc_r+0xc2>
 8005aa6:	1961      	adds	r1, r4, r5
 8005aa8:	42a3      	cmp	r3, r4
 8005aaa:	6025      	str	r5, [r4, #0]
 8005aac:	bf18      	it	ne
 8005aae:	6059      	strne	r1, [r3, #4]
 8005ab0:	6863      	ldr	r3, [r4, #4]
 8005ab2:	bf08      	it	eq
 8005ab4:	f8c8 1000 	streq.w	r1, [r8]
 8005ab8:	5162      	str	r2, [r4, r5]
 8005aba:	604b      	str	r3, [r1, #4]
 8005abc:	4630      	mov	r0, r6
 8005abe:	f000 f82f 	bl	8005b20 <__malloc_unlock>
 8005ac2:	f104 000b 	add.w	r0, r4, #11
 8005ac6:	1d23      	adds	r3, r4, #4
 8005ac8:	f020 0007 	bic.w	r0, r0, #7
 8005acc:	1ac2      	subs	r2, r0, r3
 8005ace:	bf1c      	itt	ne
 8005ad0:	1a1b      	subne	r3, r3, r0
 8005ad2:	50a3      	strne	r3, [r4, r2]
 8005ad4:	e7af      	b.n	8005a36 <_malloc_r+0x22>
 8005ad6:	6862      	ldr	r2, [r4, #4]
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	bf0c      	ite	eq
 8005adc:	f8c8 2000 	streq.w	r2, [r8]
 8005ae0:	605a      	strne	r2, [r3, #4]
 8005ae2:	e7eb      	b.n	8005abc <_malloc_r+0xa8>
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	6864      	ldr	r4, [r4, #4]
 8005ae8:	e7ae      	b.n	8005a48 <_malloc_r+0x34>
 8005aea:	463c      	mov	r4, r7
 8005aec:	687f      	ldr	r7, [r7, #4]
 8005aee:	e7b6      	b.n	8005a5e <_malloc_r+0x4a>
 8005af0:	461a      	mov	r2, r3
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	42a3      	cmp	r3, r4
 8005af6:	d1fb      	bne.n	8005af0 <_malloc_r+0xdc>
 8005af8:	2300      	movs	r3, #0
 8005afa:	6053      	str	r3, [r2, #4]
 8005afc:	e7de      	b.n	8005abc <_malloc_r+0xa8>
 8005afe:	230c      	movs	r3, #12
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	4630      	mov	r0, r6
 8005b04:	f000 f80c 	bl	8005b20 <__malloc_unlock>
 8005b08:	e794      	b.n	8005a34 <_malloc_r+0x20>
 8005b0a:	6005      	str	r5, [r0, #0]
 8005b0c:	e7d6      	b.n	8005abc <_malloc_r+0xa8>
 8005b0e:	bf00      	nop
 8005b10:	20004bcc 	.word	0x20004bcc

08005b14 <__malloc_lock>:
 8005b14:	4801      	ldr	r0, [pc, #4]	@ (8005b1c <__malloc_lock+0x8>)
 8005b16:	f7ff bf00 	b.w	800591a <__retarget_lock_acquire_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	20004bc4 	.word	0x20004bc4

08005b20 <__malloc_unlock>:
 8005b20:	4801      	ldr	r0, [pc, #4]	@ (8005b28 <__malloc_unlock+0x8>)
 8005b22:	f7ff befb 	b.w	800591c <__retarget_lock_release_recursive>
 8005b26:	bf00      	nop
 8005b28:	20004bc4 	.word	0x20004bc4

08005b2c <__sfputc_r>:
 8005b2c:	6893      	ldr	r3, [r2, #8]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	b410      	push	{r4}
 8005b34:	6093      	str	r3, [r2, #8]
 8005b36:	da08      	bge.n	8005b4a <__sfputc_r+0x1e>
 8005b38:	6994      	ldr	r4, [r2, #24]
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	db01      	blt.n	8005b42 <__sfputc_r+0x16>
 8005b3e:	290a      	cmp	r1, #10
 8005b40:	d103      	bne.n	8005b4a <__sfputc_r+0x1e>
 8005b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b46:	f000 bb6d 	b.w	8006224 <__swbuf_r>
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	1c58      	adds	r0, r3, #1
 8005b4e:	6010      	str	r0, [r2, #0]
 8005b50:	7019      	strb	r1, [r3, #0]
 8005b52:	4608      	mov	r0, r1
 8005b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <__sfputs_r>:
 8005b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	460f      	mov	r7, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	18d5      	adds	r5, r2, r3
 8005b64:	42ac      	cmp	r4, r5
 8005b66:	d101      	bne.n	8005b6c <__sfputs_r+0x12>
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e007      	b.n	8005b7c <__sfputs_r+0x22>
 8005b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b70:	463a      	mov	r2, r7
 8005b72:	4630      	mov	r0, r6
 8005b74:	f7ff ffda 	bl	8005b2c <__sfputc_r>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d1f3      	bne.n	8005b64 <__sfputs_r+0xa>
 8005b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b80 <_vfiprintf_r>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	460d      	mov	r5, r1
 8005b86:	b09d      	sub	sp, #116	@ 0x74
 8005b88:	4614      	mov	r4, r2
 8005b8a:	4698      	mov	r8, r3
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	b118      	cbz	r0, 8005b98 <_vfiprintf_r+0x18>
 8005b90:	6a03      	ldr	r3, [r0, #32]
 8005b92:	b90b      	cbnz	r3, 8005b98 <_vfiprintf_r+0x18>
 8005b94:	f7ff fdbc 	bl	8005710 <__sinit>
 8005b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b9a:	07d9      	lsls	r1, r3, #31
 8005b9c:	d405      	bmi.n	8005baa <_vfiprintf_r+0x2a>
 8005b9e:	89ab      	ldrh	r3, [r5, #12]
 8005ba0:	059a      	lsls	r2, r3, #22
 8005ba2:	d402      	bmi.n	8005baa <_vfiprintf_r+0x2a>
 8005ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ba6:	f7ff feb8 	bl	800591a <__retarget_lock_acquire_recursive>
 8005baa:	89ab      	ldrh	r3, [r5, #12]
 8005bac:	071b      	lsls	r3, r3, #28
 8005bae:	d501      	bpl.n	8005bb4 <_vfiprintf_r+0x34>
 8005bb0:	692b      	ldr	r3, [r5, #16]
 8005bb2:	b99b      	cbnz	r3, 8005bdc <_vfiprintf_r+0x5c>
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f000 fb72 	bl	80062a0 <__swsetup_r>
 8005bbc:	b170      	cbz	r0, 8005bdc <_vfiprintf_r+0x5c>
 8005bbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bc0:	07dc      	lsls	r4, r3, #31
 8005bc2:	d504      	bpl.n	8005bce <_vfiprintf_r+0x4e>
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	b01d      	add	sp, #116	@ 0x74
 8005bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	0598      	lsls	r0, r3, #22
 8005bd2:	d4f7      	bmi.n	8005bc4 <_vfiprintf_r+0x44>
 8005bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bd6:	f7ff fea1 	bl	800591c <__retarget_lock_release_recursive>
 8005bda:	e7f3      	b.n	8005bc4 <_vfiprintf_r+0x44>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8005be0:	2320      	movs	r3, #32
 8005be2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bea:	2330      	movs	r3, #48	@ 0x30
 8005bec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d9c <_vfiprintf_r+0x21c>
 8005bf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bf4:	f04f 0901 	mov.w	r9, #1
 8005bf8:	4623      	mov	r3, r4
 8005bfa:	469a      	mov	sl, r3
 8005bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c00:	b10a      	cbz	r2, 8005c06 <_vfiprintf_r+0x86>
 8005c02:	2a25      	cmp	r2, #37	@ 0x25
 8005c04:	d1f9      	bne.n	8005bfa <_vfiprintf_r+0x7a>
 8005c06:	ebba 0b04 	subs.w	fp, sl, r4
 8005c0a:	d00b      	beq.n	8005c24 <_vfiprintf_r+0xa4>
 8005c0c:	465b      	mov	r3, fp
 8005c0e:	4622      	mov	r2, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	f7ff ffa1 	bl	8005b5a <__sfputs_r>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f000 80a7 	beq.w	8005d6c <_vfiprintf_r+0x1ec>
 8005c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c20:	445a      	add	r2, fp
 8005c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c24:	f89a 3000 	ldrb.w	r3, [sl]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 809f 	beq.w	8005d6c <_vfiprintf_r+0x1ec>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f04f 32ff 	mov.w	r2, #4294967295
 8005c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c38:	f10a 0a01 	add.w	sl, sl, #1
 8005c3c:	9304      	str	r3, [sp, #16]
 8005c3e:	9307      	str	r3, [sp, #28]
 8005c40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c44:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c46:	4654      	mov	r4, sl
 8005c48:	2205      	movs	r2, #5
 8005c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c4e:	4853      	ldr	r0, [pc, #332]	@ (8005d9c <_vfiprintf_r+0x21c>)
 8005c50:	f7fa fade 	bl	8000210 <memchr>
 8005c54:	9a04      	ldr	r2, [sp, #16]
 8005c56:	b9d8      	cbnz	r0, 8005c90 <_vfiprintf_r+0x110>
 8005c58:	06d1      	lsls	r1, r2, #27
 8005c5a:	bf44      	itt	mi
 8005c5c:	2320      	movmi	r3, #32
 8005c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c62:	0713      	lsls	r3, r2, #28
 8005c64:	bf44      	itt	mi
 8005c66:	232b      	movmi	r3, #43	@ 0x2b
 8005c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c72:	d015      	beq.n	8005ca0 <_vfiprintf_r+0x120>
 8005c74:	9a07      	ldr	r2, [sp, #28]
 8005c76:	4654      	mov	r4, sl
 8005c78:	2000      	movs	r0, #0
 8005c7a:	f04f 0c0a 	mov.w	ip, #10
 8005c7e:	4621      	mov	r1, r4
 8005c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c84:	3b30      	subs	r3, #48	@ 0x30
 8005c86:	2b09      	cmp	r3, #9
 8005c88:	d94b      	bls.n	8005d22 <_vfiprintf_r+0x1a2>
 8005c8a:	b1b0      	cbz	r0, 8005cba <_vfiprintf_r+0x13a>
 8005c8c:	9207      	str	r2, [sp, #28]
 8005c8e:	e014      	b.n	8005cba <_vfiprintf_r+0x13a>
 8005c90:	eba0 0308 	sub.w	r3, r0, r8
 8005c94:	fa09 f303 	lsl.w	r3, r9, r3
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	9304      	str	r3, [sp, #16]
 8005c9c:	46a2      	mov	sl, r4
 8005c9e:	e7d2      	b.n	8005c46 <_vfiprintf_r+0xc6>
 8005ca0:	9b03      	ldr	r3, [sp, #12]
 8005ca2:	1d19      	adds	r1, r3, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	9103      	str	r1, [sp, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bfbb      	ittet	lt
 8005cac:	425b      	neglt	r3, r3
 8005cae:	f042 0202 	orrlt.w	r2, r2, #2
 8005cb2:	9307      	strge	r3, [sp, #28]
 8005cb4:	9307      	strlt	r3, [sp, #28]
 8005cb6:	bfb8      	it	lt
 8005cb8:	9204      	strlt	r2, [sp, #16]
 8005cba:	7823      	ldrb	r3, [r4, #0]
 8005cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cbe:	d10a      	bne.n	8005cd6 <_vfiprintf_r+0x156>
 8005cc0:	7863      	ldrb	r3, [r4, #1]
 8005cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cc4:	d132      	bne.n	8005d2c <_vfiprintf_r+0x1ac>
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	1d1a      	adds	r2, r3, #4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	9203      	str	r2, [sp, #12]
 8005cce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cd2:	3402      	adds	r4, #2
 8005cd4:	9305      	str	r3, [sp, #20]
 8005cd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005dac <_vfiprintf_r+0x22c>
 8005cda:	7821      	ldrb	r1, [r4, #0]
 8005cdc:	2203      	movs	r2, #3
 8005cde:	4650      	mov	r0, sl
 8005ce0:	f7fa fa96 	bl	8000210 <memchr>
 8005ce4:	b138      	cbz	r0, 8005cf6 <_vfiprintf_r+0x176>
 8005ce6:	9b04      	ldr	r3, [sp, #16]
 8005ce8:	eba0 000a 	sub.w	r0, r0, sl
 8005cec:	2240      	movs	r2, #64	@ 0x40
 8005cee:	4082      	lsls	r2, r0
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	3401      	adds	r4, #1
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cfa:	4829      	ldr	r0, [pc, #164]	@ (8005da0 <_vfiprintf_r+0x220>)
 8005cfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d00:	2206      	movs	r2, #6
 8005d02:	f7fa fa85 	bl	8000210 <memchr>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d03f      	beq.n	8005d8a <_vfiprintf_r+0x20a>
 8005d0a:	4b26      	ldr	r3, [pc, #152]	@ (8005da4 <_vfiprintf_r+0x224>)
 8005d0c:	bb1b      	cbnz	r3, 8005d56 <_vfiprintf_r+0x1d6>
 8005d0e:	9b03      	ldr	r3, [sp, #12]
 8005d10:	3307      	adds	r3, #7
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	3308      	adds	r3, #8
 8005d18:	9303      	str	r3, [sp, #12]
 8005d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d1c:	443b      	add	r3, r7
 8005d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d20:	e76a      	b.n	8005bf8 <_vfiprintf_r+0x78>
 8005d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d26:	460c      	mov	r4, r1
 8005d28:	2001      	movs	r0, #1
 8005d2a:	e7a8      	b.n	8005c7e <_vfiprintf_r+0xfe>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	3401      	adds	r4, #1
 8005d30:	9305      	str	r3, [sp, #20]
 8005d32:	4619      	mov	r1, r3
 8005d34:	f04f 0c0a 	mov.w	ip, #10
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d3e:	3a30      	subs	r2, #48	@ 0x30
 8005d40:	2a09      	cmp	r2, #9
 8005d42:	d903      	bls.n	8005d4c <_vfiprintf_r+0x1cc>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0c6      	beq.n	8005cd6 <_vfiprintf_r+0x156>
 8005d48:	9105      	str	r1, [sp, #20]
 8005d4a:	e7c4      	b.n	8005cd6 <_vfiprintf_r+0x156>
 8005d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d50:	4604      	mov	r4, r0
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7f0      	b.n	8005d38 <_vfiprintf_r+0x1b8>
 8005d56:	ab03      	add	r3, sp, #12
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4b12      	ldr	r3, [pc, #72]	@ (8005da8 <_vfiprintf_r+0x228>)
 8005d5e:	a904      	add	r1, sp, #16
 8005d60:	4630      	mov	r0, r6
 8005d62:	f3af 8000 	nop.w
 8005d66:	4607      	mov	r7, r0
 8005d68:	1c78      	adds	r0, r7, #1
 8005d6a:	d1d6      	bne.n	8005d1a <_vfiprintf_r+0x19a>
 8005d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d6e:	07d9      	lsls	r1, r3, #31
 8005d70:	d405      	bmi.n	8005d7e <_vfiprintf_r+0x1fe>
 8005d72:	89ab      	ldrh	r3, [r5, #12]
 8005d74:	059a      	lsls	r2, r3, #22
 8005d76:	d402      	bmi.n	8005d7e <_vfiprintf_r+0x1fe>
 8005d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d7a:	f7ff fdcf 	bl	800591c <__retarget_lock_release_recursive>
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	065b      	lsls	r3, r3, #25
 8005d82:	f53f af1f 	bmi.w	8005bc4 <_vfiprintf_r+0x44>
 8005d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d88:	e71e      	b.n	8005bc8 <_vfiprintf_r+0x48>
 8005d8a:	ab03      	add	r3, sp, #12
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	462a      	mov	r2, r5
 8005d90:	4b05      	ldr	r3, [pc, #20]	@ (8005da8 <_vfiprintf_r+0x228>)
 8005d92:	a904      	add	r1, sp, #16
 8005d94:	4630      	mov	r0, r6
 8005d96:	f000 f879 	bl	8005e8c <_printf_i>
 8005d9a:	e7e4      	b.n	8005d66 <_vfiprintf_r+0x1e6>
 8005d9c:	08006510 	.word	0x08006510
 8005da0:	0800651a 	.word	0x0800651a
 8005da4:	00000000 	.word	0x00000000
 8005da8:	08005b5b 	.word	0x08005b5b
 8005dac:	08006516 	.word	0x08006516

08005db0 <_printf_common>:
 8005db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	4616      	mov	r6, r2
 8005db6:	4698      	mov	r8, r3
 8005db8:	688a      	ldr	r2, [r1, #8]
 8005dba:	690b      	ldr	r3, [r1, #16]
 8005dbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	bfb8      	it	lt
 8005dc4:	4613      	movlt	r3, r2
 8005dc6:	6033      	str	r3, [r6, #0]
 8005dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dcc:	4607      	mov	r7, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	b10a      	cbz	r2, 8005dd6 <_printf_common+0x26>
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	0699      	lsls	r1, r3, #26
 8005dda:	bf42      	ittt	mi
 8005ddc:	6833      	ldrmi	r3, [r6, #0]
 8005dde:	3302      	addmi	r3, #2
 8005de0:	6033      	strmi	r3, [r6, #0]
 8005de2:	6825      	ldr	r5, [r4, #0]
 8005de4:	f015 0506 	ands.w	r5, r5, #6
 8005de8:	d106      	bne.n	8005df8 <_printf_common+0x48>
 8005dea:	f104 0a19 	add.w	sl, r4, #25
 8005dee:	68e3      	ldr	r3, [r4, #12]
 8005df0:	6832      	ldr	r2, [r6, #0]
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	42ab      	cmp	r3, r5
 8005df6:	dc26      	bgt.n	8005e46 <_printf_common+0x96>
 8005df8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005dfc:	6822      	ldr	r2, [r4, #0]
 8005dfe:	3b00      	subs	r3, #0
 8005e00:	bf18      	it	ne
 8005e02:	2301      	movne	r3, #1
 8005e04:	0692      	lsls	r2, r2, #26
 8005e06:	d42b      	bmi.n	8005e60 <_printf_common+0xb0>
 8005e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	4638      	mov	r0, r7
 8005e10:	47c8      	blx	r9
 8005e12:	3001      	adds	r0, #1
 8005e14:	d01e      	beq.n	8005e54 <_printf_common+0xa4>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	6922      	ldr	r2, [r4, #16]
 8005e1a:	f003 0306 	and.w	r3, r3, #6
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	bf02      	ittt	eq
 8005e22:	68e5      	ldreq	r5, [r4, #12]
 8005e24:	6833      	ldreq	r3, [r6, #0]
 8005e26:	1aed      	subeq	r5, r5, r3
 8005e28:	68a3      	ldr	r3, [r4, #8]
 8005e2a:	bf0c      	ite	eq
 8005e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e30:	2500      	movne	r5, #0
 8005e32:	4293      	cmp	r3, r2
 8005e34:	bfc4      	itt	gt
 8005e36:	1a9b      	subgt	r3, r3, r2
 8005e38:	18ed      	addgt	r5, r5, r3
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	341a      	adds	r4, #26
 8005e3e:	42b5      	cmp	r5, r6
 8005e40:	d11a      	bne.n	8005e78 <_printf_common+0xc8>
 8005e42:	2000      	movs	r0, #0
 8005e44:	e008      	b.n	8005e58 <_printf_common+0xa8>
 8005e46:	2301      	movs	r3, #1
 8005e48:	4652      	mov	r2, sl
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	47c8      	blx	r9
 8005e50:	3001      	adds	r0, #1
 8005e52:	d103      	bne.n	8005e5c <_printf_common+0xac>
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	e7c6      	b.n	8005dee <_printf_common+0x3e>
 8005e60:	18e1      	adds	r1, r4, r3
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	2030      	movs	r0, #48	@ 0x30
 8005e66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e6a:	4422      	add	r2, r4
 8005e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e74:	3302      	adds	r3, #2
 8005e76:	e7c7      	b.n	8005e08 <_printf_common+0x58>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c8      	blx	r9
 8005e82:	3001      	adds	r0, #1
 8005e84:	d0e6      	beq.n	8005e54 <_printf_common+0xa4>
 8005e86:	3601      	adds	r6, #1
 8005e88:	e7d9      	b.n	8005e3e <_printf_common+0x8e>
	...

08005e8c <_printf_i>:
 8005e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e90:	7e0f      	ldrb	r7, [r1, #24]
 8005e92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e94:	2f78      	cmp	r7, #120	@ 0x78
 8005e96:	4691      	mov	r9, r2
 8005e98:	4680      	mov	r8, r0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	469a      	mov	sl, r3
 8005e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ea2:	d807      	bhi.n	8005eb4 <_printf_i+0x28>
 8005ea4:	2f62      	cmp	r7, #98	@ 0x62
 8005ea6:	d80a      	bhi.n	8005ebe <_printf_i+0x32>
 8005ea8:	2f00      	cmp	r7, #0
 8005eaa:	f000 80d2 	beq.w	8006052 <_printf_i+0x1c6>
 8005eae:	2f58      	cmp	r7, #88	@ 0x58
 8005eb0:	f000 80b9 	beq.w	8006026 <_printf_i+0x19a>
 8005eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ebc:	e03a      	b.n	8005f34 <_printf_i+0xa8>
 8005ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ec2:	2b15      	cmp	r3, #21
 8005ec4:	d8f6      	bhi.n	8005eb4 <_printf_i+0x28>
 8005ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ecc <_printf_i+0x40>)
 8005ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ecc:	08005f25 	.word	0x08005f25
 8005ed0:	08005f39 	.word	0x08005f39
 8005ed4:	08005eb5 	.word	0x08005eb5
 8005ed8:	08005eb5 	.word	0x08005eb5
 8005edc:	08005eb5 	.word	0x08005eb5
 8005ee0:	08005eb5 	.word	0x08005eb5
 8005ee4:	08005f39 	.word	0x08005f39
 8005ee8:	08005eb5 	.word	0x08005eb5
 8005eec:	08005eb5 	.word	0x08005eb5
 8005ef0:	08005eb5 	.word	0x08005eb5
 8005ef4:	08005eb5 	.word	0x08005eb5
 8005ef8:	08006039 	.word	0x08006039
 8005efc:	08005f63 	.word	0x08005f63
 8005f00:	08005ff3 	.word	0x08005ff3
 8005f04:	08005eb5 	.word	0x08005eb5
 8005f08:	08005eb5 	.word	0x08005eb5
 8005f0c:	0800605b 	.word	0x0800605b
 8005f10:	08005eb5 	.word	0x08005eb5
 8005f14:	08005f63 	.word	0x08005f63
 8005f18:	08005eb5 	.word	0x08005eb5
 8005f1c:	08005eb5 	.word	0x08005eb5
 8005f20:	08005ffb 	.word	0x08005ffb
 8005f24:	6833      	ldr	r3, [r6, #0]
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6032      	str	r2, [r6, #0]
 8005f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f34:	2301      	movs	r3, #1
 8005f36:	e09d      	b.n	8006074 <_printf_i+0x1e8>
 8005f38:	6833      	ldr	r3, [r6, #0]
 8005f3a:	6820      	ldr	r0, [r4, #0]
 8005f3c:	1d19      	adds	r1, r3, #4
 8005f3e:	6031      	str	r1, [r6, #0]
 8005f40:	0606      	lsls	r6, r0, #24
 8005f42:	d501      	bpl.n	8005f48 <_printf_i+0xbc>
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	e003      	b.n	8005f50 <_printf_i+0xc4>
 8005f48:	0645      	lsls	r5, r0, #25
 8005f4a:	d5fb      	bpl.n	8005f44 <_printf_i+0xb8>
 8005f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	da03      	bge.n	8005f5c <_printf_i+0xd0>
 8005f54:	232d      	movs	r3, #45	@ 0x2d
 8005f56:	426d      	negs	r5, r5
 8005f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f5c:	4859      	ldr	r0, [pc, #356]	@ (80060c4 <_printf_i+0x238>)
 8005f5e:	230a      	movs	r3, #10
 8005f60:	e011      	b.n	8005f86 <_printf_i+0xfa>
 8005f62:	6821      	ldr	r1, [r4, #0]
 8005f64:	6833      	ldr	r3, [r6, #0]
 8005f66:	0608      	lsls	r0, r1, #24
 8005f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f6c:	d402      	bmi.n	8005f74 <_printf_i+0xe8>
 8005f6e:	0649      	lsls	r1, r1, #25
 8005f70:	bf48      	it	mi
 8005f72:	b2ad      	uxthmi	r5, r5
 8005f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f76:	4853      	ldr	r0, [pc, #332]	@ (80060c4 <_printf_i+0x238>)
 8005f78:	6033      	str	r3, [r6, #0]
 8005f7a:	bf14      	ite	ne
 8005f7c:	230a      	movne	r3, #10
 8005f7e:	2308      	moveq	r3, #8
 8005f80:	2100      	movs	r1, #0
 8005f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f86:	6866      	ldr	r6, [r4, #4]
 8005f88:	60a6      	str	r6, [r4, #8]
 8005f8a:	2e00      	cmp	r6, #0
 8005f8c:	bfa2      	ittt	ge
 8005f8e:	6821      	ldrge	r1, [r4, #0]
 8005f90:	f021 0104 	bicge.w	r1, r1, #4
 8005f94:	6021      	strge	r1, [r4, #0]
 8005f96:	b90d      	cbnz	r5, 8005f9c <_printf_i+0x110>
 8005f98:	2e00      	cmp	r6, #0
 8005f9a:	d04b      	beq.n	8006034 <_printf_i+0x1a8>
 8005f9c:	4616      	mov	r6, r2
 8005f9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fa2:	fb03 5711 	mls	r7, r3, r1, r5
 8005fa6:	5dc7      	ldrb	r7, [r0, r7]
 8005fa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fac:	462f      	mov	r7, r5
 8005fae:	42bb      	cmp	r3, r7
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	d9f4      	bls.n	8005f9e <_printf_i+0x112>
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d10b      	bne.n	8005fd0 <_printf_i+0x144>
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	07df      	lsls	r7, r3, #31
 8005fbc:	d508      	bpl.n	8005fd0 <_printf_i+0x144>
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	6861      	ldr	r1, [r4, #4]
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	bfde      	ittt	le
 8005fc6:	2330      	movle	r3, #48	@ 0x30
 8005fc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fd0:	1b92      	subs	r2, r2, r6
 8005fd2:	6122      	str	r2, [r4, #16]
 8005fd4:	f8cd a000 	str.w	sl, [sp]
 8005fd8:	464b      	mov	r3, r9
 8005fda:	aa03      	add	r2, sp, #12
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f7ff fee6 	bl	8005db0 <_printf_common>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d14a      	bne.n	800607e <_printf_i+0x1f2>
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	b004      	add	sp, #16
 8005fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	f043 0320 	orr.w	r3, r3, #32
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	4833      	ldr	r0, [pc, #204]	@ (80060c8 <_printf_i+0x23c>)
 8005ffc:	2778      	movs	r7, #120	@ 0x78
 8005ffe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	6831      	ldr	r1, [r6, #0]
 8006006:	061f      	lsls	r7, r3, #24
 8006008:	f851 5b04 	ldr.w	r5, [r1], #4
 800600c:	d402      	bmi.n	8006014 <_printf_i+0x188>
 800600e:	065f      	lsls	r7, r3, #25
 8006010:	bf48      	it	mi
 8006012:	b2ad      	uxthmi	r5, r5
 8006014:	6031      	str	r1, [r6, #0]
 8006016:	07d9      	lsls	r1, r3, #31
 8006018:	bf44      	itt	mi
 800601a:	f043 0320 	orrmi.w	r3, r3, #32
 800601e:	6023      	strmi	r3, [r4, #0]
 8006020:	b11d      	cbz	r5, 800602a <_printf_i+0x19e>
 8006022:	2310      	movs	r3, #16
 8006024:	e7ac      	b.n	8005f80 <_printf_i+0xf4>
 8006026:	4827      	ldr	r0, [pc, #156]	@ (80060c4 <_printf_i+0x238>)
 8006028:	e7e9      	b.n	8005ffe <_printf_i+0x172>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	f023 0320 	bic.w	r3, r3, #32
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	e7f6      	b.n	8006022 <_printf_i+0x196>
 8006034:	4616      	mov	r6, r2
 8006036:	e7bd      	b.n	8005fb4 <_printf_i+0x128>
 8006038:	6833      	ldr	r3, [r6, #0]
 800603a:	6825      	ldr	r5, [r4, #0]
 800603c:	6961      	ldr	r1, [r4, #20]
 800603e:	1d18      	adds	r0, r3, #4
 8006040:	6030      	str	r0, [r6, #0]
 8006042:	062e      	lsls	r6, r5, #24
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	d501      	bpl.n	800604c <_printf_i+0x1c0>
 8006048:	6019      	str	r1, [r3, #0]
 800604a:	e002      	b.n	8006052 <_printf_i+0x1c6>
 800604c:	0668      	lsls	r0, r5, #25
 800604e:	d5fb      	bpl.n	8006048 <_printf_i+0x1bc>
 8006050:	8019      	strh	r1, [r3, #0]
 8006052:	2300      	movs	r3, #0
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	4616      	mov	r6, r2
 8006058:	e7bc      	b.n	8005fd4 <_printf_i+0x148>
 800605a:	6833      	ldr	r3, [r6, #0]
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	6032      	str	r2, [r6, #0]
 8006060:	681e      	ldr	r6, [r3, #0]
 8006062:	6862      	ldr	r2, [r4, #4]
 8006064:	2100      	movs	r1, #0
 8006066:	4630      	mov	r0, r6
 8006068:	f7fa f8d2 	bl	8000210 <memchr>
 800606c:	b108      	cbz	r0, 8006072 <_printf_i+0x1e6>
 800606e:	1b80      	subs	r0, r0, r6
 8006070:	6060      	str	r0, [r4, #4]
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	6123      	str	r3, [r4, #16]
 8006076:	2300      	movs	r3, #0
 8006078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800607c:	e7aa      	b.n	8005fd4 <_printf_i+0x148>
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	4632      	mov	r2, r6
 8006082:	4649      	mov	r1, r9
 8006084:	4640      	mov	r0, r8
 8006086:	47d0      	blx	sl
 8006088:	3001      	adds	r0, #1
 800608a:	d0ad      	beq.n	8005fe8 <_printf_i+0x15c>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	079b      	lsls	r3, r3, #30
 8006090:	d413      	bmi.n	80060ba <_printf_i+0x22e>
 8006092:	68e0      	ldr	r0, [r4, #12]
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	4298      	cmp	r0, r3
 8006098:	bfb8      	it	lt
 800609a:	4618      	movlt	r0, r3
 800609c:	e7a6      	b.n	8005fec <_printf_i+0x160>
 800609e:	2301      	movs	r3, #1
 80060a0:	4632      	mov	r2, r6
 80060a2:	4649      	mov	r1, r9
 80060a4:	4640      	mov	r0, r8
 80060a6:	47d0      	blx	sl
 80060a8:	3001      	adds	r0, #1
 80060aa:	d09d      	beq.n	8005fe8 <_printf_i+0x15c>
 80060ac:	3501      	adds	r5, #1
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	9903      	ldr	r1, [sp, #12]
 80060b2:	1a5b      	subs	r3, r3, r1
 80060b4:	42ab      	cmp	r3, r5
 80060b6:	dcf2      	bgt.n	800609e <_printf_i+0x212>
 80060b8:	e7eb      	b.n	8006092 <_printf_i+0x206>
 80060ba:	2500      	movs	r5, #0
 80060bc:	f104 0619 	add.w	r6, r4, #25
 80060c0:	e7f5      	b.n	80060ae <_printf_i+0x222>
 80060c2:	bf00      	nop
 80060c4:	08006521 	.word	0x08006521
 80060c8:	08006532 	.word	0x08006532

080060cc <__sflush_r>:
 80060cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	0716      	lsls	r6, r2, #28
 80060d6:	4605      	mov	r5, r0
 80060d8:	460c      	mov	r4, r1
 80060da:	d454      	bmi.n	8006186 <__sflush_r+0xba>
 80060dc:	684b      	ldr	r3, [r1, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dc02      	bgt.n	80060e8 <__sflush_r+0x1c>
 80060e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dd48      	ble.n	800617a <__sflush_r+0xae>
 80060e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060ea:	2e00      	cmp	r6, #0
 80060ec:	d045      	beq.n	800617a <__sflush_r+0xae>
 80060ee:	2300      	movs	r3, #0
 80060f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060f4:	682f      	ldr	r7, [r5, #0]
 80060f6:	6a21      	ldr	r1, [r4, #32]
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	d030      	beq.n	800615e <__sflush_r+0x92>
 80060fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	0759      	lsls	r1, r3, #29
 8006102:	d505      	bpl.n	8006110 <__sflush_r+0x44>
 8006104:	6863      	ldr	r3, [r4, #4]
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800610a:	b10b      	cbz	r3, 8006110 <__sflush_r+0x44>
 800610c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	2300      	movs	r3, #0
 8006112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006114:	6a21      	ldr	r1, [r4, #32]
 8006116:	4628      	mov	r0, r5
 8006118:	47b0      	blx	r6
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	d106      	bne.n	800612e <__sflush_r+0x62>
 8006120:	6829      	ldr	r1, [r5, #0]
 8006122:	291d      	cmp	r1, #29
 8006124:	d82b      	bhi.n	800617e <__sflush_r+0xb2>
 8006126:	4a2a      	ldr	r2, [pc, #168]	@ (80061d0 <__sflush_r+0x104>)
 8006128:	410a      	asrs	r2, r1
 800612a:	07d6      	lsls	r6, r2, #31
 800612c:	d427      	bmi.n	800617e <__sflush_r+0xb2>
 800612e:	2200      	movs	r2, #0
 8006130:	6062      	str	r2, [r4, #4]
 8006132:	04d9      	lsls	r1, r3, #19
 8006134:	6922      	ldr	r2, [r4, #16]
 8006136:	6022      	str	r2, [r4, #0]
 8006138:	d504      	bpl.n	8006144 <__sflush_r+0x78>
 800613a:	1c42      	adds	r2, r0, #1
 800613c:	d101      	bne.n	8006142 <__sflush_r+0x76>
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	b903      	cbnz	r3, 8006144 <__sflush_r+0x78>
 8006142:	6560      	str	r0, [r4, #84]	@ 0x54
 8006144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006146:	602f      	str	r7, [r5, #0]
 8006148:	b1b9      	cbz	r1, 800617a <__sflush_r+0xae>
 800614a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800614e:	4299      	cmp	r1, r3
 8006150:	d002      	beq.n	8006158 <__sflush_r+0x8c>
 8006152:	4628      	mov	r0, r5
 8006154:	f7ff fbf2 	bl	800593c <_free_r>
 8006158:	2300      	movs	r3, #0
 800615a:	6363      	str	r3, [r4, #52]	@ 0x34
 800615c:	e00d      	b.n	800617a <__sflush_r+0xae>
 800615e:	2301      	movs	r3, #1
 8006160:	4628      	mov	r0, r5
 8006162:	47b0      	blx	r6
 8006164:	4602      	mov	r2, r0
 8006166:	1c50      	adds	r0, r2, #1
 8006168:	d1c9      	bne.n	80060fe <__sflush_r+0x32>
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0c6      	beq.n	80060fe <__sflush_r+0x32>
 8006170:	2b1d      	cmp	r3, #29
 8006172:	d001      	beq.n	8006178 <__sflush_r+0xac>
 8006174:	2b16      	cmp	r3, #22
 8006176:	d11e      	bne.n	80061b6 <__sflush_r+0xea>
 8006178:	602f      	str	r7, [r5, #0]
 800617a:	2000      	movs	r0, #0
 800617c:	e022      	b.n	80061c4 <__sflush_r+0xf8>
 800617e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006182:	b21b      	sxth	r3, r3
 8006184:	e01b      	b.n	80061be <__sflush_r+0xf2>
 8006186:	690f      	ldr	r7, [r1, #16]
 8006188:	2f00      	cmp	r7, #0
 800618a:	d0f6      	beq.n	800617a <__sflush_r+0xae>
 800618c:	0793      	lsls	r3, r2, #30
 800618e:	680e      	ldr	r6, [r1, #0]
 8006190:	bf08      	it	eq
 8006192:	694b      	ldreq	r3, [r1, #20]
 8006194:	600f      	str	r7, [r1, #0]
 8006196:	bf18      	it	ne
 8006198:	2300      	movne	r3, #0
 800619a:	eba6 0807 	sub.w	r8, r6, r7
 800619e:	608b      	str	r3, [r1, #8]
 80061a0:	f1b8 0f00 	cmp.w	r8, #0
 80061a4:	dde9      	ble.n	800617a <__sflush_r+0xae>
 80061a6:	6a21      	ldr	r1, [r4, #32]
 80061a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061aa:	4643      	mov	r3, r8
 80061ac:	463a      	mov	r2, r7
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b0      	blx	r6
 80061b2:	2800      	cmp	r0, #0
 80061b4:	dc08      	bgt.n	80061c8 <__sflush_r+0xfc>
 80061b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c8:	4407      	add	r7, r0
 80061ca:	eba8 0800 	sub.w	r8, r8, r0
 80061ce:	e7e7      	b.n	80061a0 <__sflush_r+0xd4>
 80061d0:	dfbffffe 	.word	0xdfbffffe

080061d4 <_fflush_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	690b      	ldr	r3, [r1, #16]
 80061d8:	4605      	mov	r5, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	b913      	cbnz	r3, 80061e4 <_fflush_r+0x10>
 80061de:	2500      	movs	r5, #0
 80061e0:	4628      	mov	r0, r5
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	b118      	cbz	r0, 80061ee <_fflush_r+0x1a>
 80061e6:	6a03      	ldr	r3, [r0, #32]
 80061e8:	b90b      	cbnz	r3, 80061ee <_fflush_r+0x1a>
 80061ea:	f7ff fa91 	bl	8005710 <__sinit>
 80061ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f3      	beq.n	80061de <_fflush_r+0xa>
 80061f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061f8:	07d0      	lsls	r0, r2, #31
 80061fa:	d404      	bmi.n	8006206 <_fflush_r+0x32>
 80061fc:	0599      	lsls	r1, r3, #22
 80061fe:	d402      	bmi.n	8006206 <_fflush_r+0x32>
 8006200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006202:	f7ff fb8a 	bl	800591a <__retarget_lock_acquire_recursive>
 8006206:	4628      	mov	r0, r5
 8006208:	4621      	mov	r1, r4
 800620a:	f7ff ff5f 	bl	80060cc <__sflush_r>
 800620e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006210:	07da      	lsls	r2, r3, #31
 8006212:	4605      	mov	r5, r0
 8006214:	d4e4      	bmi.n	80061e0 <_fflush_r+0xc>
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	059b      	lsls	r3, r3, #22
 800621a:	d4e1      	bmi.n	80061e0 <_fflush_r+0xc>
 800621c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800621e:	f7ff fb7d 	bl	800591c <__retarget_lock_release_recursive>
 8006222:	e7dd      	b.n	80061e0 <_fflush_r+0xc>

08006224 <__swbuf_r>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	460e      	mov	r6, r1
 8006228:	4614      	mov	r4, r2
 800622a:	4605      	mov	r5, r0
 800622c:	b118      	cbz	r0, 8006236 <__swbuf_r+0x12>
 800622e:	6a03      	ldr	r3, [r0, #32]
 8006230:	b90b      	cbnz	r3, 8006236 <__swbuf_r+0x12>
 8006232:	f7ff fa6d 	bl	8005710 <__sinit>
 8006236:	69a3      	ldr	r3, [r4, #24]
 8006238:	60a3      	str	r3, [r4, #8]
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	071a      	lsls	r2, r3, #28
 800623e:	d501      	bpl.n	8006244 <__swbuf_r+0x20>
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	b943      	cbnz	r3, 8006256 <__swbuf_r+0x32>
 8006244:	4621      	mov	r1, r4
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f82a 	bl	80062a0 <__swsetup_r>
 800624c:	b118      	cbz	r0, 8006256 <__swbuf_r+0x32>
 800624e:	f04f 37ff 	mov.w	r7, #4294967295
 8006252:	4638      	mov	r0, r7
 8006254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	6922      	ldr	r2, [r4, #16]
 800625a:	1a98      	subs	r0, r3, r2
 800625c:	6963      	ldr	r3, [r4, #20]
 800625e:	b2f6      	uxtb	r6, r6
 8006260:	4283      	cmp	r3, r0
 8006262:	4637      	mov	r7, r6
 8006264:	dc05      	bgt.n	8006272 <__swbuf_r+0x4e>
 8006266:	4621      	mov	r1, r4
 8006268:	4628      	mov	r0, r5
 800626a:	f7ff ffb3 	bl	80061d4 <_fflush_r>
 800626e:	2800      	cmp	r0, #0
 8006270:	d1ed      	bne.n	800624e <__swbuf_r+0x2a>
 8006272:	68a3      	ldr	r3, [r4, #8]
 8006274:	3b01      	subs	r3, #1
 8006276:	60a3      	str	r3, [r4, #8]
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	6022      	str	r2, [r4, #0]
 800627e:	701e      	strb	r6, [r3, #0]
 8006280:	6962      	ldr	r2, [r4, #20]
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	429a      	cmp	r2, r3
 8006286:	d004      	beq.n	8006292 <__swbuf_r+0x6e>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	07db      	lsls	r3, r3, #31
 800628c:	d5e1      	bpl.n	8006252 <__swbuf_r+0x2e>
 800628e:	2e0a      	cmp	r6, #10
 8006290:	d1df      	bne.n	8006252 <__swbuf_r+0x2e>
 8006292:	4621      	mov	r1, r4
 8006294:	4628      	mov	r0, r5
 8006296:	f7ff ff9d 	bl	80061d4 <_fflush_r>
 800629a:	2800      	cmp	r0, #0
 800629c:	d0d9      	beq.n	8006252 <__swbuf_r+0x2e>
 800629e:	e7d6      	b.n	800624e <__swbuf_r+0x2a>

080062a0 <__swsetup_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4b29      	ldr	r3, [pc, #164]	@ (8006348 <__swsetup_r+0xa8>)
 80062a4:	4605      	mov	r5, r0
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	460c      	mov	r4, r1
 80062aa:	b118      	cbz	r0, 80062b4 <__swsetup_r+0x14>
 80062ac:	6a03      	ldr	r3, [r0, #32]
 80062ae:	b90b      	cbnz	r3, 80062b4 <__swsetup_r+0x14>
 80062b0:	f7ff fa2e 	bl	8005710 <__sinit>
 80062b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b8:	0719      	lsls	r1, r3, #28
 80062ba:	d422      	bmi.n	8006302 <__swsetup_r+0x62>
 80062bc:	06da      	lsls	r2, r3, #27
 80062be:	d407      	bmi.n	80062d0 <__swsetup_r+0x30>
 80062c0:	2209      	movs	r2, #9
 80062c2:	602a      	str	r2, [r5, #0]
 80062c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295
 80062ce:	e033      	b.n	8006338 <__swsetup_r+0x98>
 80062d0:	0758      	lsls	r0, r3, #29
 80062d2:	d512      	bpl.n	80062fa <__swsetup_r+0x5a>
 80062d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062d6:	b141      	cbz	r1, 80062ea <__swsetup_r+0x4a>
 80062d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062dc:	4299      	cmp	r1, r3
 80062de:	d002      	beq.n	80062e6 <__swsetup_r+0x46>
 80062e0:	4628      	mov	r0, r5
 80062e2:	f7ff fb2b 	bl	800593c <_free_r>
 80062e6:	2300      	movs	r3, #0
 80062e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062f0:	81a3      	strh	r3, [r4, #12]
 80062f2:	2300      	movs	r3, #0
 80062f4:	6063      	str	r3, [r4, #4]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f043 0308 	orr.w	r3, r3, #8
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	b94b      	cbnz	r3, 800631a <__swsetup_r+0x7a>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800630c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006310:	d003      	beq.n	800631a <__swsetup_r+0x7a>
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f000 f84f 	bl	80063b8 <__smakebuf_r>
 800631a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800631e:	f013 0201 	ands.w	r2, r3, #1
 8006322:	d00a      	beq.n	800633a <__swsetup_r+0x9a>
 8006324:	2200      	movs	r2, #0
 8006326:	60a2      	str	r2, [r4, #8]
 8006328:	6962      	ldr	r2, [r4, #20]
 800632a:	4252      	negs	r2, r2
 800632c:	61a2      	str	r2, [r4, #24]
 800632e:	6922      	ldr	r2, [r4, #16]
 8006330:	b942      	cbnz	r2, 8006344 <__swsetup_r+0xa4>
 8006332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006336:	d1c5      	bne.n	80062c4 <__swsetup_r+0x24>
 8006338:	bd38      	pop	{r3, r4, r5, pc}
 800633a:	0799      	lsls	r1, r3, #30
 800633c:	bf58      	it	pl
 800633e:	6962      	ldrpl	r2, [r4, #20]
 8006340:	60a2      	str	r2, [r4, #8]
 8006342:	e7f4      	b.n	800632e <__swsetup_r+0x8e>
 8006344:	2000      	movs	r0, #0
 8006346:	e7f7      	b.n	8006338 <__swsetup_r+0x98>
 8006348:	2000001c 	.word	0x2000001c

0800634c <_sbrk_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	@ (8006368 <_sbrk_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fa fc48 	bl	8000bec <_sbrk>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_sbrk_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_sbrk_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20004bc0 	.word	0x20004bc0

0800636c <__swhatbuf_r>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	460c      	mov	r4, r1
 8006370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006374:	2900      	cmp	r1, #0
 8006376:	b096      	sub	sp, #88	@ 0x58
 8006378:	4615      	mov	r5, r2
 800637a:	461e      	mov	r6, r3
 800637c:	da0d      	bge.n	800639a <__swhatbuf_r+0x2e>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006384:	f04f 0100 	mov.w	r1, #0
 8006388:	bf14      	ite	ne
 800638a:	2340      	movne	r3, #64	@ 0x40
 800638c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006390:	2000      	movs	r0, #0
 8006392:	6031      	str	r1, [r6, #0]
 8006394:	602b      	str	r3, [r5, #0]
 8006396:	b016      	add	sp, #88	@ 0x58
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	466a      	mov	r2, sp
 800639c:	f000 f848 	bl	8006430 <_fstat_r>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dbec      	blt.n	800637e <__swhatbuf_r+0x12>
 80063a4:	9901      	ldr	r1, [sp, #4]
 80063a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063ae:	4259      	negs	r1, r3
 80063b0:	4159      	adcs	r1, r3
 80063b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063b6:	e7eb      	b.n	8006390 <__swhatbuf_r+0x24>

080063b8 <__smakebuf_r>:
 80063b8:	898b      	ldrh	r3, [r1, #12]
 80063ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063bc:	079d      	lsls	r5, r3, #30
 80063be:	4606      	mov	r6, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	d507      	bpl.n	80063d4 <__smakebuf_r+0x1c>
 80063c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	2301      	movs	r3, #1
 80063ce:	6163      	str	r3, [r4, #20]
 80063d0:	b003      	add	sp, #12
 80063d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063d4:	ab01      	add	r3, sp, #4
 80063d6:	466a      	mov	r2, sp
 80063d8:	f7ff ffc8 	bl	800636c <__swhatbuf_r>
 80063dc:	9f00      	ldr	r7, [sp, #0]
 80063de:	4605      	mov	r5, r0
 80063e0:	4639      	mov	r1, r7
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7ff fb16 	bl	8005a14 <_malloc_r>
 80063e8:	b948      	cbnz	r0, 80063fe <__smakebuf_r+0x46>
 80063ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ee:	059a      	lsls	r2, r3, #22
 80063f0:	d4ee      	bmi.n	80063d0 <__smakebuf_r+0x18>
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	f043 0302 	orr.w	r3, r3, #2
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	e7e2      	b.n	80063c4 <__smakebuf_r+0xc>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	6020      	str	r0, [r4, #0]
 8006402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	9b01      	ldr	r3, [sp, #4]
 800640a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800640e:	b15b      	cbz	r3, 8006428 <__smakebuf_r+0x70>
 8006410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f81d 	bl	8006454 <_isatty_r>
 800641a:	b128      	cbz	r0, 8006428 <__smakebuf_r+0x70>
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	431d      	orrs	r5, r3
 800642c:	81a5      	strh	r5, [r4, #12]
 800642e:	e7cf      	b.n	80063d0 <__smakebuf_r+0x18>

08006430 <_fstat_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	@ (8006450 <_fstat_r+0x20>)
 8006434:	2300      	movs	r3, #0
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	4611      	mov	r1, r2
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f7fa fbac 	bl	8000b9a <_fstat>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d102      	bne.n	800644c <_fstat_r+0x1c>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	b103      	cbz	r3, 800644c <_fstat_r+0x1c>
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	bd38      	pop	{r3, r4, r5, pc}
 800644e:	bf00      	nop
 8006450:	20004bc0 	.word	0x20004bc0

08006454 <_isatty_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	@ (8006470 <_isatty_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fa fbab 	bl	8000bba <_isatty>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_isatty_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_isatty_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	20004bc0 	.word	0x20004bc0

08006474 <_init>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr

08006480 <_fini>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr
