
8_blockingATask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800639c  0800639c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006454  08006454  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006454  08006454  00007454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800645c  0800645c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800645c  0800645c  0000745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006464  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  2000006c  080064d0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bc4  080064d0  00008bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174a0  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034da  00000000  00000000  0001f53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00022a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104b  00000000  00000000  00023f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049aa  00000000  00000000  00024f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179bd  00000000  00000000  0002990d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd0e8  00000000  00000000  000412ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e3b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff0  00000000  00000000  0011e3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  001243e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006384 	.word	0x08006384

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006384 	.word	0x08006384

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
typedef uint32_t TaskProfiler;
TaskProfiler BlueTaskProfiler,RedTaskProfiler, GreenTaskProfiler;
const TickType_t _50ms = pdMS_TO_TICKS(50);

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af02      	add	r7, sp, #8

  HAL_Init();
 80005a6:	f000 fb7f 	bl	8000ca8 <HAL_Init>

  SystemClock_Config();
 80005aa:	f000 f873 	bl	8000694 <SystemClock_Config>

  MX_GPIO_Init();
 80005ae:	f000 f909 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f8dd 	bl	8000770 <MX_USART2_UART_Init>

	// changing priority number (fifth argument) means higher priority
	//in this case only vBlueLedController would run as it has higher priority
  	//than the other two
  xTaskCreate(vBlueLedController,
 80005b6:	2300      	movs	r3, #0
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2264      	movs	r2, #100	@ 0x64
 80005c2:	490f      	ldr	r1, [pc, #60]	@ (8000600 <main+0x60>)
 80005c4:	480f      	ldr	r0, [pc, #60]	@ (8000604 <main+0x64>)
 80005c6:	f003 f955 	bl	8003874 <xTaskCreate>
		  100,
		  NULL,
		  1,
		  NULL);

  xTaskCreate(vRedLedController,
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2264      	movs	r2, #100	@ 0x64
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <main+0x68>)
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <main+0x6c>)
 80005da:	f003 f94b 	bl	8003874 <xTaskCreate>
  		  100,
  		  NULL,
  		  1,
  		  NULL);

  xTaskCreate(vGreenLedController,
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2264      	movs	r2, #100	@ 0x64
 80005ea:	4909      	ldr	r1, [pc, #36]	@ (8000610 <main+0x70>)
 80005ec:	4809      	ldr	r0, [pc, #36]	@ (8000614 <main+0x74>)
 80005ee:	f003 f941 	bl	8003874 <xTaskCreate>
  		  100,
  		  NULL,
  		  1,
  		  NULL);

  vTaskStartScheduler();
 80005f2:	f003 fabb 	bl	8003b6c <vTaskStartScheduler>

  while (1)
  {
	  printf("Hello from stm32 \n\r");
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <main+0x78>)
 80005f8:	f005 f848 	bl	800568c <iprintf>
 80005fc:	e7fb      	b.n	80005f6 <main+0x56>
 80005fe:	bf00      	nop
 8000600:	0800639c 	.word	0x0800639c
 8000604:	0800061d 	.word	0x0800061d
 8000608:	080063b0 	.word	0x080063b0
 800060c:	08000641 	.word	0x08000641
 8000610:	080063c4 	.word	0x080063c4
 8000614:	08000659 	.word	0x08000659
 8000618:	080063dc 	.word	0x080063dc

0800061c <vBlueLedController>:
  }
}


void vBlueLedController(void *pvParameter)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlueTaskProfiler++;
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <vBlueLedController+0x20>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a04      	ldr	r2, [pc, #16]	@ (800063c <vBlueLedController+0x20>)
 800062c:	6013      	str	r3, [r2, #0]
		vTaskDelay(_50ms);
 800062e:	2332      	movs	r3, #50	@ 0x32
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fa65 	bl	8003b00 <vTaskDelay>
		BlueTaskProfiler++;
 8000636:	bf00      	nop
 8000638:	e7f4      	b.n	8000624 <vBlueLedController+0x8>
 800063a:	bf00      	nop
 800063c:	200000d0 	.word	0x200000d0

08000640 <vRedLedController>:
	}
}

void vRedLedController(void *pvParameter)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 8000648:	4b02      	ldr	r3, [pc, #8]	@ (8000654 <vRedLedController+0x14>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a01      	ldr	r2, [pc, #4]	@ (8000654 <vRedLedController+0x14>)
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e7f9      	b.n	8000648 <vRedLedController+0x8>
 8000654:	200000d4 	.word	0x200000d4

08000658 <vGreenLedController>:
	}
}

void vGreenLedController(void *pvParameter)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 8000660:	4b02      	ldr	r3, [pc, #8]	@ (800066c <vGreenLedController+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a01      	ldr	r2, [pc, #4]	@ (800066c <vGreenLedController+0x14>)
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e7f9      	b.n	8000660 <vGreenLedController+0x8>
 800066c:	200000d8 	.word	0x200000d8

08000670 <__io_putchar>:
	}
}

//this function for printf to be used in printing sentences
int __io_putchar(int ch)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <__io_putchar+0x20>)
 8000682:	f001 fee9 	bl	8002458 <HAL_UART_Transmit>
	return ch;
 8000686:	687b      	ldr	r3, [r7, #4]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000088 	.word	0x20000088

08000694 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	@ 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 f847 	bl	8005736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a29      	ldr	r2, [pc, #164]	@ (8000768 <SystemClock_Config+0xd4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e0:	4a22      	ldr	r2, [pc, #136]	@ (800076c <SystemClock_Config+0xd8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <SystemClock_Config+0xd8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000710:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f90e 	bl	8001944 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 f8c9 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fd7c 	bl	800124c <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075a:	f000 f8b3 	bl	80008c4 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f001 fe06 	bl	80023b8 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f887 	bl	80008c4 <Error_Handler>
  }

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000088 	.word	0x20000088
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000894 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <MX_GPIO_Init+0xd0>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a1e      	ldr	r2, [pc, #120]	@ (8000894 <MX_GPIO_Init+0xd0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <MX_GPIO_Init+0xd0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	4812      	ldr	r0, [pc, #72]	@ (8000898 <MX_GPIO_Init+0xd4>)
 8000850:	f000 fce2 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	480c      	ldr	r0, [pc, #48]	@ (800089c <MX_GPIO_Init+0xd8>)
 800086c:	f000 fb40 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_GPIO_Init+0xd4>)
 8000888:	f000 fb32 	bl	8000ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020800 	.word	0x40020800

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 fa1b 	bl	8000cec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40010000 	.word	0x40010000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_MspInit+0x54>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x54>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_MspInit+0x54>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_MspInit+0x54>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fac1 	bl	8000e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	@ (80009ac <HAL_UART_MspInit+0x84>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12b      	bne.n	80009a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000982:	230c      	movs	r3, #12
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000992:	2307      	movs	r3, #7
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 800099e:	f000 faa7 	bl	8000ef0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	@ 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	@ 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e4:	f107 020c 	add.w	r2, r7, #12
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fd46 	bl	8001480 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009f4:	f000 fd30 	bl	8001458 <HAL_RCC_GetPCLK2Freq>
 80009f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fc:	4a23      	ldr	r2, [pc, #140]	@ (8000a8c <HAL_InitTick+0xd4>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	0c9b      	lsrs	r3, r3, #18
 8000a04:	3b01      	subs	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a08:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a0a:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <HAL_InitTick+0xdc>)
 8000a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a16:	4a1e      	ldr	r2, [pc, #120]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a2e:	4818      	ldr	r0, [pc, #96]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a30:	f001 fa26 	bl	8001e80 <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d11b      	bne.n	8000a7a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a42:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a44:	f001 fa76 	bl	8001f34 <HAL_TIM_Base_Start_IT>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d111      	bne.n	8000a7a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a56:	2019      	movs	r0, #25
 8000a58:	f000 fa3c 	bl	8000ed4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b0f      	cmp	r3, #15
 8000a60:	d808      	bhi.n	8000a74 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a62:	2200      	movs	r2, #0
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	2019      	movs	r0, #25
 8000a68:	f000 fa18 	bl	8000e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_InitTick+0xe0>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	e002      	b.n	8000a7a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3730      	adds	r7, #48	@ 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	200000dc 	.word	0x200000dc
 8000a94:	40010000 	.word	0x40010000
 8000a98:	20000004 	.word	0x20000004

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ada:	f001 fa9b 	bl	8002014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000dc 	.word	0x200000dc

08000ae8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e00a      	b.n	8000b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afa:	f3af 8000 	nop.w
 8000afe:	4601      	mov	r1, r0
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	b2ca      	uxtb	r2, r1
 8000b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf0      	blt.n	8000afa <_read+0x12>
  }

  return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e009      	b.n	8000b48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fd97 	bl	8000670 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf1      	blt.n	8000b34 <_write+0x12>
  }
  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_close>:

int _close(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b82:	605a      	str	r2, [r3, #4]
  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_isatty>:

int _isatty(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f004 fdee 	bl	80057d4 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20020000 	.word	0x20020000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000124 	.word	0x20000124
 8000c2c:	20004bc8 	.word	0x20004bc8

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f004 fdad 	bl	80057e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fc8b 	bl	80005a0 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c98:	08006464 	.word	0x08006464
  ldr r2, =_sbss
 8000c9c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ca0:	20004bc4 	.word	0x20004bc4

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <HAL_Init+0x40>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_Init+0x40>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	@ (8000ce8 <HAL_Init+0x40>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f8d8 	bl	8000e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f7ff fe6e 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fdf8 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000128 	.word	0x20000128

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000128 	.word	0x20000128

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	@ (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	@ (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	@ (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	@ 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	@ 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff4c 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eae:	f7ff ff61 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	6978      	ldr	r0, [r7, #20]
 8000eba:	f7ff ffb1 	bl	8000e20 <NVIC_EncodePriority>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff80 	bl	8000dcc <__NVIC_SetPriority>
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff54 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	@ 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e165      	b.n	80011d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 8154 	bne.w	80011d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80ae 	beq.w	80011d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b5d      	ldr	r3, [pc, #372]	@ (80011f0 <HAL_GPIO_Init+0x300>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	4a5c      	ldr	r2, [pc, #368]	@ (80011f0 <HAL_GPIO_Init+0x300>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6453      	str	r3, [r2, #68]	@ 0x44
 8001086:	4b5a      	ldr	r3, [pc, #360]	@ (80011f0 <HAL_GPIO_Init+0x300>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a58      	ldr	r2, [pc, #352]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4f      	ldr	r2, [pc, #316]	@ (80011f8 <HAL_GPIO_Init+0x308>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4e      	ldr	r2, [pc, #312]	@ (80011fc <HAL_GPIO_Init+0x30c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001200 <HAL_GPIO_Init+0x310>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001204 <HAL_GPIO_Init+0x314>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001208 <HAL_GPIO_Init+0x318>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x20a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4a      	ldr	r2, [pc, #296]	@ (800120c <HAL_GPIO_Init+0x31c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x206>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a49      	ldr	r2, [pc, #292]	@ (8001210 <HAL_GPIO_Init+0x320>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x202>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x21c>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x21c>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x21c>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112a:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <HAL_GPIO_Init+0x324>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114e:	4a31      	ldr	r2, [pc, #196]	@ (8001214 <HAL_GPIO_Init+0x324>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001154:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <HAL_GPIO_Init+0x324>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001178:	4a26      	ldr	r2, [pc, #152]	@ (8001214 <HAL_GPIO_Init+0x324>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <HAL_GPIO_Init+0x324>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <HAL_GPIO_Init+0x324>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <HAL_GPIO_Init+0x324>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011cc:	4a11      	ldr	r2, [pc, #68]	@ (8001214 <HAL_GPIO_Init+0x324>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f ae96 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	@ 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0cc      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001260:	4b68      	ldr	r3, [pc, #416]	@ (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d90c      	bls.n	8001288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b65      	ldr	r3, [pc, #404]	@ (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b63      	ldr	r3, [pc, #396]	@ (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0b8      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a0:	4b59      	ldr	r3, [pc, #356]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a58      	ldr	r2, [pc, #352]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b8:	4b53      	ldr	r3, [pc, #332]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a52      	ldr	r2, [pc, #328]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c4:	4b50      	ldr	r3, [pc, #320]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	494d      	ldr	r1, [pc, #308]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d044      	beq.n	800136c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	4b47      	ldr	r3, [pc, #284]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d119      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e07f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d003      	beq.n	800130a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001306:	2b03      	cmp	r3, #3
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	4b3f      	ldr	r3, [pc, #252]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e06f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	4b3b      	ldr	r3, [pc, #236]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e067      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132a:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f023 0203 	bic.w	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4934      	ldr	r1, [pc, #208]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	4313      	orrs	r3, r2
 800133a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800133c:	f7ff fcea 	bl	8000d14 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	e00a      	b.n	800135a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001344:	f7ff fce6 	bl	8000d14 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e04f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 020c 	and.w	r2, r3, #12
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	429a      	cmp	r2, r3
 800136a:	d1eb      	bne.n	8001344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800136c:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d20c      	bcs.n	8001394 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e032      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4916      	ldr	r1, [pc, #88]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	490e      	ldr	r1, [pc, #56]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013d2:	f000 f887 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 80013d6:	4602      	mov	r2, r0
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	490a      	ldr	r1, [pc, #40]	@ (800140c <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	5ccb      	ldrb	r3, [r1, r3]
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	4a09      	ldr	r2, [pc, #36]	@ (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fae0 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00
 8001408:	40023800 	.word	0x40023800
 800140c:	08006408 	.word	0x08006408
 8001410:	20000000 	.word	0x20000000
 8001414:	20000004 	.word	0x20000004

08001418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_RCC_GetHCLKFreq+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000

08001430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001434:	f7ff fff0 	bl	8001418 <HAL_RCC_GetHCLKFreq>
 8001438:	4602      	mov	r2, r0
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	0a9b      	lsrs	r3, r3, #10
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	4903      	ldr	r1, [pc, #12]	@ (8001454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001446:	5ccb      	ldrb	r3, [r1, r3]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800144c:	4618      	mov	r0, r3
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	08006418 	.word	0x08006418

08001458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800145c:	f7ff ffdc 	bl	8001418 <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	0b5b      	lsrs	r3, r3, #13
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4903      	ldr	r1, [pc, #12]	@ (800147c <HAL_RCC_GetPCLK2Freq+0x24>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	08006418 	.word	0x08006418

08001480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	220f      	movs	r2, #15
 800148e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0203 	and.w	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <HAL_RCC_GetClockConfig+0x60>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 020f 	and.w	r2, r3, #15
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014e8:	b0ae      	sub	sp, #184	@ 0xb8
 80014ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800150a:	4bcb      	ldr	r3, [pc, #812]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b0c      	cmp	r3, #12
 8001514:	f200 8206 	bhi.w	8001924 <HAL_RCC_GetSysClockFreq+0x440>
 8001518:	a201      	add	r2, pc, #4	@ (adr r2, 8001520 <HAL_RCC_GetSysClockFreq+0x3c>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001555 	.word	0x08001555
 8001524:	08001925 	.word	0x08001925
 8001528:	08001925 	.word	0x08001925
 800152c:	08001925 	.word	0x08001925
 8001530:	0800155d 	.word	0x0800155d
 8001534:	08001925 	.word	0x08001925
 8001538:	08001925 	.word	0x08001925
 800153c:	08001925 	.word	0x08001925
 8001540:	08001565 	.word	0x08001565
 8001544:	08001925 	.word	0x08001925
 8001548:	08001925 	.word	0x08001925
 800154c:	08001925 	.word	0x08001925
 8001550:	08001755 	.word	0x08001755
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001554:	4bb9      	ldr	r3, [pc, #740]	@ (800183c <HAL_RCC_GetSysClockFreq+0x358>)
 8001556:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800155a:	e1e7      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800155c:	4bb8      	ldr	r3, [pc, #736]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x35c>)
 800155e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001562:	e1e3      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001564:	4bb4      	ldr	r3, [pc, #720]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800156c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001570:	4bb1      	ldr	r3, [pc, #708]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d071      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800157c:	4bae      	ldr	r3, [pc, #696]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	2200      	movs	r2, #0
 8001584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001588:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800158c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800159e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015a2:	4622      	mov	r2, r4
 80015a4:	462b      	mov	r3, r5
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	0159      	lsls	r1, r3, #5
 80015b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b4:	0150      	lsls	r0, r2, #5
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4621      	mov	r1, r4
 80015bc:	1a51      	subs	r1, r2, r1
 80015be:	6439      	str	r1, [r7, #64]	@ 0x40
 80015c0:	4629      	mov	r1, r5
 80015c2:	eb63 0301 	sbc.w	r3, r3, r1
 80015c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015d4:	4649      	mov	r1, r9
 80015d6:	018b      	lsls	r3, r1, #6
 80015d8:	4641      	mov	r1, r8
 80015da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015de:	4641      	mov	r1, r8
 80015e0:	018a      	lsls	r2, r1, #6
 80015e2:	4641      	mov	r1, r8
 80015e4:	1a51      	subs	r1, r2, r1
 80015e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015e8:	4649      	mov	r1, r9
 80015ea:	eb63 0301 	sbc.w	r3, r3, r1
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015fc:	4649      	mov	r1, r9
 80015fe:	00cb      	lsls	r3, r1, #3
 8001600:	4641      	mov	r1, r8
 8001602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001606:	4641      	mov	r1, r8
 8001608:	00ca      	lsls	r2, r1, #3
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	4603      	mov	r3, r0
 8001610:	4622      	mov	r2, r4
 8001612:	189b      	adds	r3, r3, r2
 8001614:	633b      	str	r3, [r7, #48]	@ 0x30
 8001616:	462b      	mov	r3, r5
 8001618:	460a      	mov	r2, r1
 800161a:	eb42 0303 	adc.w	r3, r2, r3
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800162c:	4629      	mov	r1, r5
 800162e:	024b      	lsls	r3, r1, #9
 8001630:	4621      	mov	r1, r4
 8001632:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001636:	4621      	mov	r1, r4
 8001638:	024a      	lsls	r2, r1, #9
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001642:	2200      	movs	r2, #0
 8001644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001648:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800164c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001650:	f7fe fe2e 	bl	80002b0 <__aeabi_uldivmod>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4613      	mov	r3, r2
 800165a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800165e:	e067      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001660:	4b75      	ldr	r3, [pc, #468]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800166c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001670:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001678:	67bb      	str	r3, [r7, #120]	@ 0x78
 800167a:	2300      	movs	r3, #0
 800167c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800167e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001682:	4622      	mov	r2, r4
 8001684:	462b      	mov	r3, r5
 8001686:	f04f 0000 	mov.w	r0, #0
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	0159      	lsls	r1, r3, #5
 8001690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001694:	0150      	lsls	r0, r2, #5
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4621      	mov	r1, r4
 800169c:	1a51      	subs	r1, r2, r1
 800169e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016a0:	4629      	mov	r1, r5
 80016a2:	eb63 0301 	sbc.w	r3, r3, r1
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016b4:	4649      	mov	r1, r9
 80016b6:	018b      	lsls	r3, r1, #6
 80016b8:	4641      	mov	r1, r8
 80016ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016be:	4641      	mov	r1, r8
 80016c0:	018a      	lsls	r2, r1, #6
 80016c2:	4641      	mov	r1, r8
 80016c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016c8:	4649      	mov	r1, r9
 80016ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016e2:	4692      	mov	sl, r2
 80016e4:	469b      	mov	fp, r3
 80016e6:	4623      	mov	r3, r4
 80016e8:	eb1a 0303 	adds.w	r3, sl, r3
 80016ec:	623b      	str	r3, [r7, #32]
 80016ee:	462b      	mov	r3, r5
 80016f0:	eb4b 0303 	adc.w	r3, fp, r3
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001702:	4629      	mov	r1, r5
 8001704:	028b      	lsls	r3, r1, #10
 8001706:	4621      	mov	r1, r4
 8001708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800170c:	4621      	mov	r1, r4
 800170e:	028a      	lsls	r2, r1, #10
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001718:	2200      	movs	r2, #0
 800171a:	673b      	str	r3, [r7, #112]	@ 0x70
 800171c:	677a      	str	r2, [r7, #116]	@ 0x74
 800171e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001722:	f7fe fdc5 	bl	80002b0 <__aeabi_uldivmod>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4613      	mov	r3, r2
 800172c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001730:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	0c1b      	lsrs	r3, r3, #16
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	3301      	adds	r3, #1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001752:	e0eb      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001754:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800175c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001760:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d06b      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x354>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	2200      	movs	r2, #0
 8001774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001776:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800177a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800177e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001780:	2300      	movs	r3, #0
 8001782:	667b      	str	r3, [r7, #100]	@ 0x64
 8001784:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001788:	4622      	mov	r2, r4
 800178a:	462b      	mov	r3, r5
 800178c:	f04f 0000 	mov.w	r0, #0
 8001790:	f04f 0100 	mov.w	r1, #0
 8001794:	0159      	lsls	r1, r3, #5
 8001796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800179a:	0150      	lsls	r0, r2, #5
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4621      	mov	r1, r4
 80017a2:	1a51      	subs	r1, r2, r1
 80017a4:	61b9      	str	r1, [r7, #24]
 80017a6:	4629      	mov	r1, r5
 80017a8:	eb63 0301 	sbc.w	r3, r3, r1
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ba:	4659      	mov	r1, fp
 80017bc:	018b      	lsls	r3, r1, #6
 80017be:	4651      	mov	r1, sl
 80017c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017c4:	4651      	mov	r1, sl
 80017c6:	018a      	lsls	r2, r1, #6
 80017c8:	4651      	mov	r1, sl
 80017ca:	ebb2 0801 	subs.w	r8, r2, r1
 80017ce:	4659      	mov	r1, fp
 80017d0:	eb63 0901 	sbc.w	r9, r3, r1
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017e8:	4690      	mov	r8, r2
 80017ea:	4699      	mov	r9, r3
 80017ec:	4623      	mov	r3, r4
 80017ee:	eb18 0303 	adds.w	r3, r8, r3
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	462b      	mov	r3, r5
 80017f6:	eb49 0303 	adc.w	r3, r9, r3
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001808:	4629      	mov	r1, r5
 800180a:	024b      	lsls	r3, r1, #9
 800180c:	4621      	mov	r1, r4
 800180e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001812:	4621      	mov	r1, r4
 8001814:	024a      	lsls	r2, r1, #9
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800181e:	2200      	movs	r2, #0
 8001820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001822:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001824:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001828:	f7fe fd42 	bl	80002b0 <__aeabi_uldivmod>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4613      	mov	r3, r2
 8001832:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001836:	e065      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x420>
 8001838:	40023800 	.word	0x40023800
 800183c:	00f42400 	.word	0x00f42400
 8001840:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_RCC_GetSysClockFreq+0x458>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	4618      	mov	r0, r3
 800184e:	4611      	mov	r1, r2
 8001850:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001854:	653b      	str	r3, [r7, #80]	@ 0x50
 8001856:	2300      	movs	r3, #0
 8001858:	657b      	str	r3, [r7, #84]	@ 0x54
 800185a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800185e:	4642      	mov	r2, r8
 8001860:	464b      	mov	r3, r9
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0159      	lsls	r1, r3, #5
 800186c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001870:	0150      	lsls	r0, r2, #5
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4641      	mov	r1, r8
 8001878:	1a51      	subs	r1, r2, r1
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	4649      	mov	r1, r9
 800187e:	eb63 0301 	sbc.w	r3, r3, r1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001890:	4659      	mov	r1, fp
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	4651      	mov	r1, sl
 8001896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189a:	4651      	mov	r1, sl
 800189c:	018a      	lsls	r2, r1, #6
 800189e:	4651      	mov	r1, sl
 80018a0:	1a54      	subs	r4, r2, r1
 80018a2:	4659      	mov	r1, fp
 80018a4:	eb63 0501 	sbc.w	r5, r3, r1
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	00eb      	lsls	r3, r5, #3
 80018b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b6:	00e2      	lsls	r2, r4, #3
 80018b8:	4614      	mov	r4, r2
 80018ba:	461d      	mov	r5, r3
 80018bc:	4643      	mov	r3, r8
 80018be:	18e3      	adds	r3, r4, r3
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	464b      	mov	r3, r9
 80018c4:	eb45 0303 	adc.w	r3, r5, r3
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d6:	4629      	mov	r1, r5
 80018d8:	028b      	lsls	r3, r1, #10
 80018da:	4621      	mov	r1, r4
 80018dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e0:	4621      	mov	r1, r4
 80018e2:	028a      	lsls	r2, r1, #10
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018ec:	2200      	movs	r2, #0
 80018ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018f6:	f7fe fcdb 	bl	80002b0 <__aeabi_uldivmod>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4613      	mov	r3, r2
 8001900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_RCC_GetSysClockFreq+0x458>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	0f1b      	lsrs	r3, r3, #28
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001922:	e003      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800192a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001930:	4618      	mov	r0, r3
 8001932:	37b8      	adds	r7, #184	@ 0xb8
 8001934:	46bd      	mov	sp, r7
 8001936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	00f42400 	.word	0x00f42400

08001944 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e28d      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8083 	beq.w	8001a6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001964:	4b94      	ldr	r3, [pc, #592]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b04      	cmp	r3, #4
 800196e:	d019      	beq.n	80019a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001970:	4b91      	ldr	r3, [pc, #580]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
        || \
 8001978:	2b08      	cmp	r3, #8
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800197c:	4b8e      	ldr	r3, [pc, #568]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001988:	d00c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198a:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d112      	bne.n	80019bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4b88      	ldr	r3, [pc, #544]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019a2:	d10b      	bne.n	80019bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b84      	ldr	r3, [pc, #528]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05b      	beq.n	8001a68 <HAL_RCC_OscConfig+0x124>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d157      	bne.n	8001a68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e25a      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x90>
 80019c6:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a7b      	ldr	r2, [pc, #492]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e01d      	b.n	8001a10 <HAL_RCC_OscConfig+0xcc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0xb4>
 80019de:	4b76      	ldr	r3, [pc, #472]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a75      	ldr	r2, [pc, #468]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b73      	ldr	r3, [pc, #460]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a72      	ldr	r2, [pc, #456]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0xcc>
 80019f8:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a6b      	ldr	r2, [pc, #428]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f97c 	bl	8000d14 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff f978 	bl	8000d14 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e21f      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b61      	ldr	r3, [pc, #388]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0xdc>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f968 	bl	8000d14 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff f964 	bl	8000d14 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e20b      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	4b57      	ldr	r3, [pc, #348]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x104>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d06f      	beq.n	8001b56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a76:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d017      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a82:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d105      	bne.n	8001a9a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d11c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa6:	4b44      	ldr	r3, [pc, #272]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d116      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x186>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e1d3      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aca:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4937      	ldr	r1, [pc, #220]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	e03a      	b.n	8001b56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae8:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <HAL_RCC_OscConfig+0x278>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f911 	bl	8000d14 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff f90d 	bl	8000d14 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1b4      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4925      	ldr	r1, [pc, #148]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2a:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <HAL_RCC_OscConfig+0x278>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f8f0 	bl	8000d14 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b38:	f7ff f8ec 	bl	8000d14 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e193      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d036      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d016      	beq.n	8001b98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f8d0 	bl	8000d14 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f8cc 	bl	8000d14 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e173      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x234>
 8001b96:	e01b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f8b9 	bl	8000d14 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	e00e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f8b5 	bl	8000d14 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d907      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e15c      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	42470000 	.word	0x42470000
 8001bc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ea      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8097 	beq.w	8001d0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be2:	4b83      	ldr	r3, [pc, #524]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b79      	ldr	r3, [pc, #484]	@ (8001df4 <HAL_RCC_OscConfig+0x4b0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4b76      	ldr	r3, [pc, #472]	@ (8001df4 <HAL_RCC_OscConfig+0x4b0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a75      	ldr	r2, [pc, #468]	@ (8001df4 <HAL_RCC_OscConfig+0x4b0>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff f875 	bl	8000d14 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7ff f871 	bl	8000d14 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e118      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b6c      	ldr	r3, [pc, #432]	@ (8001df4 <HAL_RCC_OscConfig+0x4b0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x31e>
 8001c54:	4b66      	ldr	r3, [pc, #408]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c58:	4a65      	ldr	r2, [pc, #404]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c60:	e01c      	b.n	8001c9c <HAL_RCC_OscConfig+0x358>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x340>
 8001c6a:	4b61      	ldr	r3, [pc, #388]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6e:	4a60      	ldr	r2, [pc, #384]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c76:	4b5e      	ldr	r3, [pc, #376]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0x358>
 8001c84:	4b5a      	ldr	r3, [pc, #360]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c88:	4a59      	ldr	r2, [pc, #356]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c90:	4b57      	ldr	r3, [pc, #348]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c94:	4a56      	ldr	r2, [pc, #344]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001c96:	f023 0304 	bic.w	r3, r3, #4
 8001c9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d015      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f836 	bl	8000d14 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff f832 	bl	8000d14 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0d7      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0ee      	beq.n	8001cac <HAL_RCC_OscConfig+0x368>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f820 	bl	8000d14 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f81c 	bl	8000d14 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0c1      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	4b40      	ldr	r3, [pc, #256]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ee      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d00:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	4a3a      	ldr	r2, [pc, #232]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80ad 	beq.w	8001e70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d16:	4b36      	ldr	r3, [pc, #216]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d060      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d145      	bne.n	8001db6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b33      	ldr	r3, [pc, #204]	@ (8001df8 <HAL_RCC_OscConfig+0x4b4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe fff0 	bl	8000d14 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe ffec 	bl	8000d14 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e093      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	4b29      	ldr	r3, [pc, #164]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	071b      	lsls	r3, r3, #28
 8001d82:	491b      	ldr	r1, [pc, #108]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_RCC_OscConfig+0x4b4>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7fe ffc1 	bl	8000d14 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe ffbd 	bl	8000d14 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e064      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x452>
 8001db4:	e05c      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_RCC_OscConfig+0x4b4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ffaa 	bl	8000d14 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe ffa6 	bl	8000d14 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e04d      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x480>
 8001de2:	e045      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e040      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000
 8001df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <HAL_RCC_OscConfig+0x538>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d030      	beq.n	8001e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d129      	bne.n	8001e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d122      	bne.n	8001e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d119      	bne.n	8001e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	3b01      	subs	r3, #1
 8001e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d10f      	bne.n	8001e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e041      	b.n	8001f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f839 	bl	8001f1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f000 f9c0 	bl	8002244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d001      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e04e      	b.n	8001fea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a23      	ldr	r2, [pc, #140]	@ (8001ff8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d022      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x80>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f76:	d01d      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x80>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ffc <HAL_TIM_Base_Start_IT+0xc8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d018      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x80>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1e      	ldr	r2, [pc, #120]	@ (8002000 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x80>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00e      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x80>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x80>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	@ (800200c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x80>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d111      	bne.n	8001fd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d010      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	e007      	b.n	8001fe8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40010400 	.word	0x40010400
 800200c:	40014000 	.word	0x40014000
 8002010:	40001800 	.word	0x40001800

08002014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d020      	beq.n	8002078 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01b      	beq.n	8002078 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0202 	mvn.w	r2, #2
 8002048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8d2 	bl	8002208 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8c4 	bl	80021f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f8d5 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d020      	beq.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0204 	mvn.w	r2, #4
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8ac 	bl	8002208 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f89e 	bl	80021f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f8af 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d020      	beq.n	8002110 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01b      	beq.n	8002110 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0208 	mvn.w	r2, #8
 80020e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2204      	movs	r2, #4
 80020e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f886 	bl	8002208 <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f878 	bl	80021f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f889 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d020      	beq.n	800215c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0210 	mvn.w	r2, #16
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2208      	movs	r2, #8
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f860 	bl	8002208 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f852 	bl	80021f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f863 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0201 	mvn.w	r2, #1
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fb90 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f900 	bl	80023a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f834 	bl	8002230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00c      	beq.n	80021ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0220 	mvn.w	r2, #32
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8d2 	bl	8002390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a43      	ldr	r2, [pc, #268]	@ (8002364 <TIM_Base_SetConfig+0x120>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <TIM_Base_SetConfig+0x40>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002262:	d00f      	beq.n	8002284 <TIM_Base_SetConfig+0x40>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a40      	ldr	r2, [pc, #256]	@ (8002368 <TIM_Base_SetConfig+0x124>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00b      	beq.n	8002284 <TIM_Base_SetConfig+0x40>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3f      	ldr	r2, [pc, #252]	@ (800236c <TIM_Base_SetConfig+0x128>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d007      	beq.n	8002284 <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3e      	ldr	r2, [pc, #248]	@ (8002370 <TIM_Base_SetConfig+0x12c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d003      	beq.n	8002284 <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3d      	ldr	r2, [pc, #244]	@ (8002374 <TIM_Base_SetConfig+0x130>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d108      	bne.n	8002296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800228a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a32      	ldr	r2, [pc, #200]	@ (8002364 <TIM_Base_SetConfig+0x120>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02b      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a4:	d027      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002368 <TIM_Base_SetConfig+0x124>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d023      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a2e      	ldr	r2, [pc, #184]	@ (800236c <TIM_Base_SetConfig+0x128>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01f      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002370 <TIM_Base_SetConfig+0x12c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01b      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002374 <TIM_Base_SetConfig+0x130>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d017      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002378 <TIM_Base_SetConfig+0x134>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2a      	ldr	r2, [pc, #168]	@ (800237c <TIM_Base_SetConfig+0x138>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00f      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a29      	ldr	r2, [pc, #164]	@ (8002380 <TIM_Base_SetConfig+0x13c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00b      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a28      	ldr	r2, [pc, #160]	@ (8002384 <TIM_Base_SetConfig+0x140>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a27      	ldr	r2, [pc, #156]	@ (8002388 <TIM_Base_SetConfig+0x144>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d003      	beq.n	80022f6 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a26      	ldr	r2, [pc, #152]	@ (800238c <TIM_Base_SetConfig+0x148>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d108      	bne.n	8002308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a0e      	ldr	r2, [pc, #56]	@ (8002364 <TIM_Base_SetConfig+0x120>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0xf2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a10      	ldr	r2, [pc, #64]	@ (8002374 <TIM_Base_SetConfig+0x130>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d103      	bne.n	800233e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f043 0204 	orr.w	r2, r3, #4
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40010000 	.word	0x40010000
 8002368:	40000400 	.word	0x40000400
 800236c:	40000800 	.word	0x40000800
 8002370:	40000c00 	.word	0x40000c00
 8002374:	40010400 	.word	0x40010400
 8002378:	40014000 	.word	0x40014000
 800237c:	40014400 	.word	0x40014400
 8002380:	40014800 	.word	0x40014800
 8002384:	40001800 	.word	0x40001800
 8002388:	40001c00 	.word	0x40001c00
 800238c:	40002000 	.word	0x40002000

08002390 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e042      	b.n	8002450 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe faa2 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2224      	movs	r2, #36	@ 0x24
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f973 	bl	80026e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	d175      	bne.n	8002564 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_UART_Transmit+0x2c>
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e06e      	b.n	8002566 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2221      	movs	r2, #33	@ 0x21
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002496:	f7fe fc3d 	bl	8000d14 <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	88fa      	ldrh	r2, [r7, #6]
 80024a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	88fa      	ldrh	r2, [r7, #6]
 80024a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b0:	d108      	bne.n	80024c4 <HAL_UART_Transmit+0x6c>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d104      	bne.n	80024c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	e003      	b.n	80024cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024cc:	e02e      	b.n	800252c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	@ 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f848 	bl	800256e <UART_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e03a      	b.n	8002566 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10b      	bne.n	800250e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	3302      	adds	r3, #2
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	e007      	b.n	800251e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3301      	adds	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1cb      	bne.n	80024ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2200      	movs	r2, #0
 800253e:	2140      	movs	r1, #64	@ 0x40
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f814 	bl	800256e <UART_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e006      	b.n	8002566 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e000      	b.n	8002566 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	4613      	mov	r3, r2
 800257c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257e:	e03b      	b.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d037      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002588:	f7fe fbc4 	bl	8000d14 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	6a3a      	ldr	r2, [r7, #32]
 8002594:	429a      	cmp	r2, r3
 8002596:	d302      	bcc.n	800259e <UART_WaitOnFlagUntilTimeout+0x30>
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e03a      	b.n	8002618 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d023      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b80      	cmp	r3, #128	@ 0x80
 80025b4:	d020      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b40      	cmp	r3, #64	@ 0x40
 80025ba:	d01d      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d116      	bne.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f81d 	bl	8002620 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2208      	movs	r2, #8
 80025ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e00f      	b.n	8002618 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4013      	ands	r3, r2
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	429a      	cmp	r2, r3
 8002614:	d0b4      	beq.n	8002580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002620:	b480      	push	{r7}
 8002622:	b095      	sub	sp, #84	@ 0x54
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	330c      	adds	r3, #12
 800262e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002632:	e853 3f00 	ldrex	r3, [r3]
 8002636:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800263e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002648:	643a      	str	r2, [r7, #64]	@ 0x40
 800264a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800264e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e5      	bne.n	8002628 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3314      	adds	r3, #20
 8002662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	e853 3f00 	ldrex	r3, [r3]
 800266a:	61fb      	str	r3, [r7, #28]
   return(result);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800267c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002684:	e841 2300 	strex	r3, r2, [r1]
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e5      	bne.n	800265c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	2b01      	cmp	r3, #1
 8002696:	d119      	bne.n	80026cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	e853 3f00 	ldrex	r3, [r3]
 80026a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f023 0310 	bic.w	r3, r3, #16
 80026ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	330c      	adds	r3, #12
 80026b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026b8:	61ba      	str	r2, [r7, #24]
 80026ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026bc:	6979      	ldr	r1, [r7, #20]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	e841 2300 	strex	r3, r2, [r1]
 80026c4:	613b      	str	r3, [r7, #16]
   return(result);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e5      	bne.n	8002698 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026da:	bf00      	nop
 80026dc:	3754      	adds	r7, #84	@ 0x54
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ec:	b0c0      	sub	sp, #256	@ 0x100
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002704:	68d9      	ldr	r1, [r3, #12]
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	ea40 0301 	orr.w	r3, r0, r1
 8002710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	431a      	orrs	r2, r3
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	431a      	orrs	r2, r3
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002740:	f021 010c 	bic.w	r1, r1, #12
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800274e:	430b      	orrs	r3, r1
 8002750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002762:	6999      	ldr	r1, [r3, #24]
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	ea40 0301 	orr.w	r3, r0, r1
 800276e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b8f      	ldr	r3, [pc, #572]	@ (80029b4 <UART_SetConfig+0x2cc>)
 8002778:	429a      	cmp	r2, r3
 800277a:	d005      	beq.n	8002788 <UART_SetConfig+0xa0>
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b8d      	ldr	r3, [pc, #564]	@ (80029b8 <UART_SetConfig+0x2d0>)
 8002784:	429a      	cmp	r2, r3
 8002786:	d104      	bne.n	8002792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002788:	f7fe fe66 	bl	8001458 <HAL_RCC_GetPCLK2Freq>
 800278c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002790:	e003      	b.n	800279a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002792:	f7fe fe4d 	bl	8001430 <HAL_RCC_GetPCLK1Freq>
 8002796:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027a4:	f040 810c 	bne.w	80029c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027ba:	4622      	mov	r2, r4
 80027bc:	462b      	mov	r3, r5
 80027be:	1891      	adds	r1, r2, r2
 80027c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027c2:	415b      	adcs	r3, r3
 80027c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027ca:	4621      	mov	r1, r4
 80027cc:	eb12 0801 	adds.w	r8, r2, r1
 80027d0:	4629      	mov	r1, r5
 80027d2:	eb43 0901 	adc.w	r9, r3, r1
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ea:	4690      	mov	r8, r2
 80027ec:	4699      	mov	r9, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	eb18 0303 	adds.w	r3, r8, r3
 80027f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027f8:	462b      	mov	r3, r5
 80027fa:	eb49 0303 	adc.w	r3, r9, r3
 80027fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800280e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002816:	460b      	mov	r3, r1
 8002818:	18db      	adds	r3, r3, r3
 800281a:	653b      	str	r3, [r7, #80]	@ 0x50
 800281c:	4613      	mov	r3, r2
 800281e:	eb42 0303 	adc.w	r3, r2, r3
 8002822:	657b      	str	r3, [r7, #84]	@ 0x54
 8002824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800282c:	f7fd fd40 	bl	80002b0 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4b61      	ldr	r3, [pc, #388]	@ (80029bc <UART_SetConfig+0x2d4>)
 8002836:	fba3 2302 	umull	r2, r3, r3, r2
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	011c      	lsls	r4, r3, #4
 800283e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002848:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800284c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002850:	4642      	mov	r2, r8
 8002852:	464b      	mov	r3, r9
 8002854:	1891      	adds	r1, r2, r2
 8002856:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002858:	415b      	adcs	r3, r3
 800285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800285c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002860:	4641      	mov	r1, r8
 8002862:	eb12 0a01 	adds.w	sl, r2, r1
 8002866:	4649      	mov	r1, r9
 8002868:	eb43 0b01 	adc.w	fp, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800287c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002880:	4692      	mov	sl, r2
 8002882:	469b      	mov	fp, r3
 8002884:	4643      	mov	r3, r8
 8002886:	eb1a 0303 	adds.w	r3, sl, r3
 800288a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800288e:	464b      	mov	r3, r9
 8002890:	eb4b 0303 	adc.w	r3, fp, r3
 8002894:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028ac:	460b      	mov	r3, r1
 80028ae:	18db      	adds	r3, r3, r3
 80028b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80028b2:	4613      	mov	r3, r2
 80028b4:	eb42 0303 	adc.w	r3, r2, r3
 80028b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028c2:	f7fd fcf5 	bl	80002b0 <__aeabi_uldivmod>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	4b3b      	ldr	r3, [pc, #236]	@ (80029bc <UART_SetConfig+0x2d4>)
 80028ce:	fba3 2301 	umull	r2, r3, r3, r1
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2264      	movs	r2, #100	@ 0x64
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	1acb      	subs	r3, r1, r3
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028e2:	4b36      	ldr	r3, [pc, #216]	@ (80029bc <UART_SetConfig+0x2d4>)
 80028e4:	fba3 2302 	umull	r2, r3, r3, r2
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028f0:	441c      	add	r4, r3
 80028f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	1891      	adds	r1, r2, r2
 800290a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800290c:	415b      	adcs	r3, r3
 800290e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002914:	4641      	mov	r1, r8
 8002916:	1851      	adds	r1, r2, r1
 8002918:	6339      	str	r1, [r7, #48]	@ 0x30
 800291a:	4649      	mov	r1, r9
 800291c:	414b      	adcs	r3, r1
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800292c:	4659      	mov	r1, fp
 800292e:	00cb      	lsls	r3, r1, #3
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002936:	4651      	mov	r1, sl
 8002938:	00ca      	lsls	r2, r1, #3
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	4603      	mov	r3, r0
 8002940:	4642      	mov	r2, r8
 8002942:	189b      	adds	r3, r3, r2
 8002944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002948:	464b      	mov	r3, r9
 800294a:	460a      	mov	r2, r1
 800294c:	eb42 0303 	adc.w	r3, r2, r3
 8002950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002960:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002968:	460b      	mov	r3, r1
 800296a:	18db      	adds	r3, r3, r3
 800296c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800296e:	4613      	mov	r3, r2
 8002970:	eb42 0303 	adc.w	r3, r2, r3
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800297a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800297e:	f7fd fc97 	bl	80002b0 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <UART_SetConfig+0x2d4>)
 8002988:	fba3 1302 	umull	r1, r3, r3, r2
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	2164      	movs	r1, #100	@ 0x64
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	3332      	adds	r3, #50	@ 0x32
 800299a:	4a08      	ldr	r2, [pc, #32]	@ (80029bc <UART_SetConfig+0x2d4>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	f003 0207 	and.w	r2, r3, #7
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4422      	add	r2, r4
 80029ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029b0:	e106      	b.n	8002bc0 <UART_SetConfig+0x4d8>
 80029b2:	bf00      	nop
 80029b4:	40011000 	.word	0x40011000
 80029b8:	40011400 	.word	0x40011400
 80029bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029d2:	4642      	mov	r2, r8
 80029d4:	464b      	mov	r3, r9
 80029d6:	1891      	adds	r1, r2, r2
 80029d8:	6239      	str	r1, [r7, #32]
 80029da:	415b      	adcs	r3, r3
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029e2:	4641      	mov	r1, r8
 80029e4:	1854      	adds	r4, r2, r1
 80029e6:	4649      	mov	r1, r9
 80029e8:	eb43 0501 	adc.w	r5, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	00eb      	lsls	r3, r5, #3
 80029f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fa:	00e2      	lsls	r2, r4, #3
 80029fc:	4614      	mov	r4, r2
 80029fe:	461d      	mov	r5, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	18e3      	adds	r3, r4, r3
 8002a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a08:	464b      	mov	r3, r9
 8002a0a:	eb45 0303 	adc.w	r3, r5, r3
 8002a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a2e:	4629      	mov	r1, r5
 8002a30:	008b      	lsls	r3, r1, #2
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a38:	4621      	mov	r1, r4
 8002a3a:	008a      	lsls	r2, r1, #2
 8002a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a40:	f7fd fc36 	bl	80002b0 <__aeabi_uldivmod>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4b60      	ldr	r3, [pc, #384]	@ (8002bcc <UART_SetConfig+0x4e4>)
 8002a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	011c      	lsls	r4, r3, #4
 8002a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a64:	4642      	mov	r2, r8
 8002a66:	464b      	mov	r3, r9
 8002a68:	1891      	adds	r1, r2, r2
 8002a6a:	61b9      	str	r1, [r7, #24]
 8002a6c:	415b      	adcs	r3, r3
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a74:	4641      	mov	r1, r8
 8002a76:	1851      	adds	r1, r2, r1
 8002a78:	6139      	str	r1, [r7, #16]
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	414b      	adcs	r3, r1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a8c:	4659      	mov	r1, fp
 8002a8e:	00cb      	lsls	r3, r1, #3
 8002a90:	4651      	mov	r1, sl
 8002a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a96:	4651      	mov	r1, sl
 8002a98:	00ca      	lsls	r2, r1, #3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	460a      	mov	r2, r1
 8002aac:	eb42 0303 	adc.w	r3, r2, r3
 8002ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002abe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002acc:	4649      	mov	r1, r9
 8002ace:	008b      	lsls	r3, r1, #2
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ad6:	4641      	mov	r1, r8
 8002ad8:	008a      	lsls	r2, r1, #2
 8002ada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ade:	f7fd fbe7 	bl	80002b0 <__aeabi_uldivmod>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <UART_SetConfig+0x4e4>)
 8002aea:	fba3 2301 	umull	r2, r3, r3, r1
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2264      	movs	r2, #100	@ 0x64
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	1acb      	subs	r3, r1, r3
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	3332      	adds	r3, #50	@ 0x32
 8002afc:	4a33      	ldr	r2, [pc, #204]	@ (8002bcc <UART_SetConfig+0x4e4>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b08:	441c      	add	r4, r3
 8002b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b0e:	2200      	movs	r2, #0
 8002b10:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b12:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b18:	4642      	mov	r2, r8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	1891      	adds	r1, r2, r2
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	415b      	adcs	r3, r3
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b28:	4641      	mov	r1, r8
 8002b2a:	1851      	adds	r1, r2, r1
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	4649      	mov	r1, r9
 8002b30:	414b      	adcs	r3, r1
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b40:	4659      	mov	r1, fp
 8002b42:	00cb      	lsls	r3, r1, #3
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	00ca      	lsls	r2, r1, #3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	4642      	mov	r2, r8
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	eb42 0303 	adc.w	r3, r2, r3
 8002b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	008b      	lsls	r3, r1, #2
 8002b80:	4641      	mov	r1, r8
 8002b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b86:	4641      	mov	r1, r8
 8002b88:	008a      	lsls	r2, r1, #2
 8002b8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b8e:	f7fd fb8f 	bl	80002b0 <__aeabi_uldivmod>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <UART_SetConfig+0x4e4>)
 8002b98:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	2164      	movs	r1, #100	@ 0x64
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	3332      	adds	r3, #50	@ 0x32
 8002baa:	4a08      	ldr	r2, [pc, #32]	@ (8002bcc <UART_SetConfig+0x4e4>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	f003 020f 	and.w	r2, r3, #15
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4422      	add	r2, r4
 8002bbe:	609a      	str	r2, [r3, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bcc:	51eb851f 	.word	0x51eb851f

08002bd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <SysTick_Handler+0x1c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bd8:	f001 fc16 	bl	8004408 <xTaskGetSchedulerState>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002be2:	f002 fa11 	bl	8005008 <xPortSysTickHandler>
  }
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	e000e010 	.word	0xe000e010

08002bf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a07      	ldr	r2, [pc, #28]	@ (8002c1c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4a06      	ldr	r2, [pc, #24]	@ (8002c20 <vApplicationGetIdleTaskMemory+0x30>)
 8002c06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2000012c 	.word	0x2000012c
 8002c20:	20000188 	.word	0x20000188

08002c24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a07      	ldr	r2, [pc, #28]	@ (8002c50 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4a06      	ldr	r2, [pc, #24]	@ (8002c54 <vApplicationGetTimerTaskMemory+0x30>)
 8002c3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	20000388 	.word	0x20000388
 8002c54:	200003e4 	.word	0x200003e4

08002c58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f103 0208 	add.w	r2, r3, #8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f103 0208 	add.w	r2, r3, #8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f103 0208 	add.w	r2, r3, #8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d103      	bne.n	8002d1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e00c      	b.n	8002d34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	e002      	b.n	8002d28 <vListInsert+0x2e>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d2f6      	bcs.n	8002d22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	601a      	str	r2, [r3, #0]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6892      	ldr	r2, [r2, #8]
 8002d82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6852      	ldr	r2, [r2, #4]
 8002d8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d103      	bne.n	8002da0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	1e5a      	subs	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	e7fd      	b.n	8002de8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dec:	f002 f87c 	bl	8004ee8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df8:	68f9      	ldr	r1, [r7, #12]
 8002dfa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	441a      	add	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	441a      	add	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	22ff      	movs	r2, #255	@ 0xff
 8002e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	22ff      	movs	r2, #255	@ 0xff
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d114      	bne.n	8002e6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d01a      	beq.n	8002e80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 f91a 	bl	8004088 <xTaskRemoveFromEventList>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d012      	beq.n	8002e80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <xQueueGenericReset+0xd0>)
 8002e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	e009      	b.n	8002e80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3310      	adds	r3, #16
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fef1 	bl	8002c58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3324      	adds	r3, #36	@ 0x24
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff feec 	bl	8002c58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e80:	f002 f864 	bl	8004f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e84:	2301      	movs	r3, #1
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	@ 0x38
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <xQueueGenericCreateStatic+0x56>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <xQueueGenericCreateStatic+0x5a>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <xQueueGenericCreateStatic+0x5c>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	623b      	str	r3, [r7, #32]
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <xQueueGenericCreateStatic+0x84>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <xQueueGenericCreateStatic+0x88>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <xQueueGenericCreateStatic+0x8a>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	61fb      	str	r3, [r7, #28]
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	e7fd      	b.n	8002f36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f3a:	2350      	movs	r3, #80	@ 0x50
 8002f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b50      	cmp	r3, #80	@ 0x50
 8002f42:	d00b      	beq.n	8002f5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	61bb      	str	r3, [r7, #24]
}
 8002f56:	bf00      	nop
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f805 	bl	8002f8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3730      	adds	r7, #48	@ 0x30
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e002      	b.n	8002fb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	69b8      	ldr	r0, [r7, #24]
 8002fc0:	f7ff fefe 	bl	8002dc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08e      	sub	sp, #56	@ 0x38
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <xQueueGenericSend+0x34>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <xQueueGenericSend+0x42>
 800300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <xQueueGenericSend+0x46>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <xQueueGenericSend+0x48>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10b      	bne.n	8003038 <xQueueGenericSend+0x64>
	__asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d103      	bne.n	8003046 <xQueueGenericSend+0x72>
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <xQueueGenericSend+0x76>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <xQueueGenericSend+0x78>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <xQueueGenericSend+0x94>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	623b      	str	r3, [r7, #32]
}
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003068:	f001 f9ce 	bl	8004408 <xTaskGetSchedulerState>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <xQueueGenericSend+0xa4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <xQueueGenericSend+0xa8>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <xQueueGenericSend+0xaa>
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <xQueueGenericSend+0xc6>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	61fb      	str	r3, [r7, #28]
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	e7fd      	b.n	8003096 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800309a:	f001 ff25 	bl	8004ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <xQueueGenericSend+0xdc>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d129      	bne.n	8003104 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030b6:	f000 fa0f 	bl	80034d8 <prvCopyDataToQueue>
 80030ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c6:	3324      	adds	r3, #36	@ 0x24
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 ffdd 	bl	8004088 <xTaskRemoveFromEventList>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030d4:	4b3f      	ldr	r3, [pc, #252]	@ (80031d4 <xQueueGenericSend+0x200>)
 80030d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	e00a      	b.n	80030fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030ec:	4b39      	ldr	r3, [pc, #228]	@ (80031d4 <xQueueGenericSend+0x200>)
 80030ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030fc:	f001 ff26 	bl	8004f4c <vPortExitCritical>
				return pdPASS;
 8003100:	2301      	movs	r3, #1
 8003102:	e063      	b.n	80031cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800310a:	f001 ff1f 	bl	8004f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800310e:	2300      	movs	r3, #0
 8003110:	e05c      	b.n	80031cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	4618      	mov	r0, r3
 800311e:	f001 f817 	bl	8004150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003126:	f001 ff11 	bl	8004f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800312a:	f000 fd87 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800312e:	f001 fedb 	bl	8004ee8 <vPortEnterCritical>
 8003132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003138:	b25b      	sxtb	r3, r3
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d103      	bne.n	8003148 <xQueueGenericSend+0x174>
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800314e:	b25b      	sxtb	r3, r3
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d103      	bne.n	800315e <xQueueGenericSend+0x18a>
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800315e:	f001 fef5 	bl	8004f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003162:	1d3a      	adds	r2, r7, #4
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f001 f806 	bl	800417c <xTaskCheckForTimeOut>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d124      	bne.n	80031c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003176:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003178:	f000 faa6 	bl	80036c8 <prvIsQueueFull>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	3310      	adds	r3, #16
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 ff2a 	bl	8003fe4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003192:	f000 fa31 	bl	80035f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003196:	f000 fd5f 	bl	8003c58 <xTaskResumeAll>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f47f af7c 	bne.w	800309a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031a2:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <xQueueGenericSend+0x200>)
 80031a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	e772      	b.n	800309a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031b6:	f000 fa1f 	bl	80035f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ba:	f000 fd4d 	bl	8003c58 <xTaskResumeAll>
 80031be:	e76c      	b.n	800309a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031c2:	f000 fa19 	bl	80035f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031c6:	f000 fd47 	bl	8003c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3738      	adds	r7, #56	@ 0x38
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b090      	sub	sp, #64	@ 0x40
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80031ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <xQueueGenericSendFromISR+0x3e>
 800320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <xQueueGenericSendFromISR+0x42>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <xQueueGenericSendFromISR+0x44>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d103      	bne.n	8003246 <xQueueGenericSendFromISR+0x6e>
 800323e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <xQueueGenericSendFromISR+0x72>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <xQueueGenericSendFromISR+0x74>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	623b      	str	r3, [r7, #32]
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003268:	f001 ff1e 	bl	80050a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800326c:	f3ef 8211 	mrs	r2, BASEPRI
 8003270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	61fa      	str	r2, [r7, #28]
 8003282:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003284:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <xQueueGenericSendFromISR+0xc2>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d12f      	bne.n	80032fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800329a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032b0:	f000 f912 	bl	80034d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d112      	bne.n	80032e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c8:	3324      	adds	r3, #36	@ 0x24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fedc 	bl	8004088 <xTaskRemoveFromEventList>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00e      	beq.n	80032f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e007      	b.n	80032f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032e8:	3301      	adds	r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	b25a      	sxtb	r2, r3
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80032f4:	2301      	movs	r3, #1
 80032f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80032f8:	e001      	b.n	80032fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003300:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003308:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800330a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800330c:	4618      	mov	r0, r3
 800330e:	3740      	adds	r7, #64	@ 0x40
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	@ 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <xQueueReceive+0x32>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	623b      	str	r3, [r7, #32]
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	e7fd      	b.n	8003342 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <xQueueReceive+0x40>
 800334c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <xQueueReceive+0x44>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <xQueueReceive+0x46>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <xQueueReceive+0x62>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	61fb      	str	r3, [r7, #28]
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	e7fd      	b.n	8003372 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003376:	f001 f847 	bl	8004408 <xTaskGetSchedulerState>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <xQueueReceive+0x72>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <xQueueReceive+0x76>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <xQueueReceive+0x78>
 800338a:	2300      	movs	r3, #0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <xQueueReceive+0x94>
	__asm volatile
 8003390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	61bb      	str	r3, [r7, #24]
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033a8:	f001 fd9e 	bl	8004ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01f      	beq.n	80033f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033bc:	f000 f8f6 	bl	80035ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	1e5a      	subs	r2, r3, #1
 80033c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00f      	beq.n	80033f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	3310      	adds	r3, #16
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fe57 	bl	8004088 <xTaskRemoveFromEventList>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033e0:	4b3c      	ldr	r3, [pc, #240]	@ (80034d4 <xQueueReceive+0x1c0>)
 80033e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033f0:	f001 fdac 	bl	8004f4c <vPortExitCritical>
				return pdPASS;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e069      	b.n	80034cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033fe:	f001 fda5 	bl	8004f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003402:	2300      	movs	r3, #0
 8003404:	e062      	b.n	80034cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fe9d 	bl	8004150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003416:	2301      	movs	r3, #1
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800341a:	f001 fd97 	bl	8004f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800341e:	f000 fc0d 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003422:	f001 fd61 	bl	8004ee8 <vPortEnterCritical>
 8003426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800342c:	b25b      	sxtb	r3, r3
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d103      	bne.n	800343c <xQueueReceive+0x128>
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003442:	b25b      	sxtb	r3, r3
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d103      	bne.n	8003452 <xQueueReceive+0x13e>
 800344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003452:	f001 fd7b 	bl	8004f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003456:	1d3a      	adds	r2, r7, #4
 8003458:	f107 0310 	add.w	r3, r7, #16
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fe8c 	bl	800417c <xTaskCheckForTimeOut>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d123      	bne.n	80034b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800346a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800346c:	f000 f916 	bl	800369c <prvIsQueueEmpty>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d017      	beq.n	80034a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	3324      	adds	r3, #36	@ 0x24
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fdb0 	bl	8003fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003486:	f000 f8b7 	bl	80035f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800348a:	f000 fbe5 	bl	8003c58 <xTaskResumeAll>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d189      	bne.n	80033a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003494:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <xQueueReceive+0x1c0>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	e780      	b.n	80033a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034a8:	f000 f8a6 	bl	80035f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ac:	f000 fbd4 	bl	8003c58 <xTaskResumeAll>
 80034b0:	e77a      	b.n	80033a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034b4:	f000 f8a0 	bl	80035f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034b8:	f000 fbce 	bl	8003c58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034be:	f000 f8ed 	bl	800369c <prvIsQueueEmpty>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f43f af6f 	beq.w	80033a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3730      	adds	r7, #48	@ 0x30
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d14d      	bne.n	800359a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 ff9e 	bl	8004444 <xTaskPriorityDisinherit>
 8003508:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	e043      	b.n	800359a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d119      	bne.n	800354c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6858      	ldr	r0, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	461a      	mov	r2, r3
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	f002 f983 	bl	800582e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	441a      	add	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d32b      	bcc.n	800359a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	e026      	b.n	800359a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68d8      	ldr	r0, [r3, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	461a      	mov	r2, r3
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	f002 f969 	bl	800582e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	425b      	negs	r3, r3
 8003566:	441a      	add	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d207      	bcs.n	8003588 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	425b      	negs	r3, r3
 8003582:	441a      	add	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d105      	bne.n	800359a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	3b01      	subs	r3, #1
 8003598:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80035a2:	697b      	ldr	r3, [r7, #20]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d018      	beq.n	80035f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	441a      	add	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d303      	bcc.n	80035e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68d9      	ldr	r1, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	461a      	mov	r2, r3
 80035ea:	6838      	ldr	r0, [r7, #0]
 80035ec:	f002 f91f 	bl	800582e <memcpy>
	}
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003600:	f001 fc72 	bl	8004ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800360a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800360c:	e011      	b.n	8003632 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d012      	beq.n	800363c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3324      	adds	r3, #36	@ 0x24
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fd34 	bl	8004088 <xTaskRemoveFromEventList>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003626:	f000 fe0d 	bl	8004244 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	3b01      	subs	r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	dce9      	bgt.n	800360e <prvUnlockQueue+0x16>
 800363a:	e000      	b.n	800363e <prvUnlockQueue+0x46>
					break;
 800363c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	22ff      	movs	r2, #255	@ 0xff
 8003642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003646:	f001 fc81 	bl	8004f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800364a:	f001 fc4d 	bl	8004ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003654:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003656:	e011      	b.n	800367c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3310      	adds	r3, #16
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fd0f 	bl	8004088 <xTaskRemoveFromEventList>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003670:	f000 fde8 	bl	8004244 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003674:	7bbb      	ldrb	r3, [r7, #14]
 8003676:	3b01      	subs	r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800367c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003680:	2b00      	cmp	r3, #0
 8003682:	dce9      	bgt.n	8003658 <prvUnlockQueue+0x60>
 8003684:	e000      	b.n	8003688 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003686:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	22ff      	movs	r2, #255	@ 0xff
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003690:	f001 fc5c 	bl	8004f4c <vPortExitCritical>
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036a4:	f001 fc20 	bl	8004ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e001      	b.n	80036ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036ba:	f001 fc47 	bl	8004f4c <vPortExitCritical>

	return xReturn;
 80036be:	68fb      	ldr	r3, [r7, #12]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036d0:	f001 fc0a 	bl	8004ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d102      	bne.n	80036e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036e0:	2301      	movs	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e001      	b.n	80036ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036ea:	f001 fc2f 	bl	8004f4c <vPortExitCritical>

	return xReturn;
 80036ee:	68fb      	ldr	r3, [r7, #12]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e014      	b.n	8003732 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003708:	4a0f      	ldr	r2, [pc, #60]	@ (8003748 <vQueueAddToRegistry+0x50>)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003714:	490c      	ldr	r1, [pc, #48]	@ (8003748 <vQueueAddToRegistry+0x50>)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <vQueueAddToRegistry+0x50>)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800372a:	e006      	b.n	800373a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3301      	adds	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b07      	cmp	r3, #7
 8003736:	d9e7      	bls.n	8003708 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	200007e4 	.word	0x200007e4

0800374c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800375c:	f001 fbc4 	bl	8004ee8 <vPortEnterCritical>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003766:	b25b      	sxtb	r3, r3
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d103      	bne.n	8003776 <vQueueWaitForMessageRestricted+0x2a>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800377c:	b25b      	sxtb	r3, r3
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	d103      	bne.n	800378c <vQueueWaitForMessageRestricted+0x40>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800378c:	f001 fbde 	bl	8004f4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3324      	adds	r3, #36	@ 0x24
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fc45 	bl	8004030 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7ff ff26 	bl	80035f8 <prvUnlockQueue>
	}
 80037ac:	bf00      	nop
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08e      	sub	sp, #56	@ 0x38
 80037b8:	af04      	add	r7, sp, #16
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	623b      	str	r3, [r7, #32]
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	61fb      	str	r3, [r7, #28]
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	e7fd      	b.n	80037fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037fe:	235c      	movs	r3, #92	@ 0x5c
 8003800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b5c      	cmp	r3, #92	@ 0x5c
 8003806:	d00b      	beq.n	8003820 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	61bb      	str	r3, [r7, #24]
}
 800381a:	bf00      	nop
 800381c:	bf00      	nop
 800381e:	e7fd      	b.n	800381c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003820:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01e      	beq.n	8003866 <xTaskCreateStatic+0xb2>
 8003828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01b      	beq.n	8003866 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003840:	2300      	movs	r3, #0
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f850 	bl	80038fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800385e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003860:	f000 f8de 	bl	8003a20 <prvAddNewTaskToReadyList>
 8003864:	e001      	b.n	800386a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800386a:	697b      	ldr	r3, [r7, #20]
	}
 800386c:	4618      	mov	r0, r3
 800386e:	3728      	adds	r7, #40	@ 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	@ 0x30
 8003878:	af04      	add	r7, sp, #16
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fc4f 	bl	800512c <pvPortMalloc>
 800388e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003896:	205c      	movs	r0, #92	@ 0x5c
 8003898:	f001 fc48 	bl	800512c <pvPortMalloc>
 800389c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80038aa:	e005      	b.n	80038b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038ac:	6978      	ldr	r0, [r7, #20]
 80038ae:	f001 fd0b 	bl	80052c8 <vPortFree>
 80038b2:	e001      	b.n	80038b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	9302      	str	r3, [sp, #8]
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f80e 	bl	80038fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038e2:	69f8      	ldr	r0, [r7, #28]
 80038e4:	f000 f89c 	bl	8003a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038e8:	2301      	movs	r3, #1
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e002      	b.n	80038f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038f4:	69bb      	ldr	r3, [r7, #24]
	}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	461a      	mov	r2, r3
 8003916:	21a5      	movs	r1, #165	@ 0xa5
 8003918:	f001 ff0d 	bl	8005736 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003926:	3b01      	subs	r3, #1
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f023 0307 	bic.w	r3, r3, #7
 8003934:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	617b      	str	r3, [r7, #20]
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01f      	beq.n	800399e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e012      	b.n	800398a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	7819      	ldrb	r1, [r3, #0]
 800396c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	3334      	adds	r3, #52	@ 0x34
 8003974:	460a      	mov	r2, r1
 8003976:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3301      	adds	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	2b0f      	cmp	r3, #15
 800398e:	d9e9      	bls.n	8003964 <prvInitialiseNewTask+0x66>
 8003990:	e000      	b.n	8003994 <prvInitialiseNewTask+0x96>
			{
				break;
 8003992:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800399c:	e003      	b.n	80039a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	2b37      	cmp	r3, #55	@ 0x37
 80039aa:	d901      	bls.n	80039b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039ac:	2337      	movs	r3, #55	@ 0x37
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	2200      	movs	r2, #0
 80039c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	3304      	adds	r3, #4
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff f966 	bl	8002c98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	3318      	adds	r3, #24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f961 	bl	8002c98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	2200      	movs	r2, #0
 80039f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	69b8      	ldr	r0, [r7, #24]
 8003a00:	f001 f93e 	bl	8004c80 <pxPortInitialiseStack>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a16:	bf00      	nop
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a28:	f001 fa5e 	bl	8004ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae4 <prvAddNewTaskToReadyList+0xc4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3301      	adds	r3, #1
 8003a32:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae4 <prvAddNewTaskToReadyList+0xc4>)
 8003a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a36:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a44:	4b27      	ldr	r3, [pc, #156]	@ (8003ae4 <prvAddNewTaskToReadyList+0xc4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d110      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a4c:	f000 fc1e 	bl	800428c <prvInitialiseTaskLists>
 8003a50:	e00d      	b.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a52:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <prvAddNewTaskToReadyList+0xcc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d802      	bhi.n	8003a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a6e:	4b20      	ldr	r3, [pc, #128]	@ (8003af0 <prvAddNewTaskToReadyList+0xd0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <prvAddNewTaskToReadyList+0xd0>)
 8003a76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a78:	4b1d      	ldr	r3, [pc, #116]	@ (8003af0 <prvAddNewTaskToReadyList+0xd0>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <prvAddNewTaskToReadyList+0xd4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d903      	bls.n	8003a94 <prvAddNewTaskToReadyList+0x74>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <prvAddNewTaskToReadyList+0xd4>)
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4a15      	ldr	r2, [pc, #84]	@ (8003af8 <prvAddNewTaskToReadyList+0xd8>)
 8003aa2:	441a      	add	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f7ff f901 	bl	8002cb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ab0:	f001 fa4c 	bl	8004f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <prvAddNewTaskToReadyList+0xcc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <prvAddNewTaskToReadyList+0xc8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d207      	bcs.n	8003ada <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <prvAddNewTaskToReadyList+0xdc>)
 8003acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000cf8 	.word	0x20000cf8
 8003ae8:	20000824 	.word	0x20000824
 8003aec:	20000d04 	.word	0x20000d04
 8003af0:	20000d14 	.word	0x20000d14
 8003af4:	20000d00 	.word	0x20000d00
 8003af8:	20000828 	.word	0x20000828
 8003afc:	e000ed04 	.word	0xe000ed04

08003b00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d018      	beq.n	8003b44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b12:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <vTaskDelay+0x64>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <vTaskDelay+0x32>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	60bb      	str	r3, [r7, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	e7fd      	b.n	8003b2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b32:	f000 f883 	bl	8003c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b36:	2100      	movs	r1, #0
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fcf3 	bl	8004524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b3e:	f000 f88b 	bl	8003c58 <xTaskResumeAll>
 8003b42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b4a:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <vTaskDelay+0x68>)
 8003b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000d20 	.word	0x20000d20
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	@ 0x28
 8003b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b7a:	463a      	mov	r2, r7
 8003b7c:	1d39      	adds	r1, r7, #4
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f834 	bl	8002bf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	9202      	str	r2, [sp, #8]
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	2300      	movs	r3, #0
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2300      	movs	r3, #0
 8003b98:	460a      	mov	r2, r1
 8003b9a:	4922      	ldr	r1, [pc, #136]	@ (8003c24 <vTaskStartScheduler+0xb8>)
 8003b9c:	4822      	ldr	r0, [pc, #136]	@ (8003c28 <vTaskStartScheduler+0xbc>)
 8003b9e:	f7ff fe09 	bl	80037b4 <xTaskCreateStatic>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4a21      	ldr	r2, [pc, #132]	@ (8003c2c <vTaskStartScheduler+0xc0>)
 8003ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ba8:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <vTaskStartScheduler+0xc0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e001      	b.n	8003bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d102      	bne.n	8003bc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bc0:	f000 fd04 	bl	80045cc <xTimerCreateTimerTask>
 8003bc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d116      	bne.n	8003bfa <vTaskStartScheduler+0x8e>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	613b      	str	r3, [r7, #16]
}
 8003bde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003be0:	4b13      	ldr	r3, [pc, #76]	@ (8003c30 <vTaskStartScheduler+0xc4>)
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003be8:	4b12      	ldr	r3, [pc, #72]	@ (8003c34 <vTaskStartScheduler+0xc8>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bee:	4b12      	ldr	r3, [pc, #72]	@ (8003c38 <vTaskStartScheduler+0xcc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bf4:	f001 f8d4 	bl	8004da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bf8:	e00f      	b.n	8003c1a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d10b      	bne.n	8003c1a <vTaskStartScheduler+0xae>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60fb      	str	r3, [r7, #12]
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <vTaskStartScheduler+0xaa>
}
 8003c1a:	bf00      	nop
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	080063f0 	.word	0x080063f0
 8003c28:	0800425d 	.word	0x0800425d
 8003c2c:	20000d1c 	.word	0x20000d1c
 8003c30:	20000d18 	.word	0x20000d18
 8003c34:	20000d04 	.word	0x20000d04
 8003c38:	20000cfc 	.word	0x20000cfc

08003c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c40:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <vTaskSuspendAll+0x18>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a03      	ldr	r2, [pc, #12]	@ (8003c54 <vTaskSuspendAll+0x18>)
 8003c48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20000d20 	.word	0x20000d20

08003c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c66:	4b42      	ldr	r3, [pc, #264]	@ (8003d70 <xTaskResumeAll+0x118>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	603b      	str	r3, [r7, #0]
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	e7fd      	b.n	8003c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c86:	f001 f92f 	bl	8004ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c8a:	4b39      	ldr	r3, [pc, #228]	@ (8003d70 <xTaskResumeAll+0x118>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	4a37      	ldr	r2, [pc, #220]	@ (8003d70 <xTaskResumeAll+0x118>)
 8003c92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c94:	4b36      	ldr	r3, [pc, #216]	@ (8003d70 <xTaskResumeAll+0x118>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d162      	bne.n	8003d62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c9c:	4b35      	ldr	r3, [pc, #212]	@ (8003d74 <xTaskResumeAll+0x11c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d05e      	beq.n	8003d62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca4:	e02f      	b.n	8003d06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca6:	4b34      	ldr	r3, [pc, #208]	@ (8003d78 <xTaskResumeAll+0x120>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff f85a 	bl	8002d6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff f855 	bl	8002d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d7c <xTaskResumeAll+0x124>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d903      	bls.n	8003cd6 <xTaskResumeAll+0x7e>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d7c <xTaskResumeAll+0x124>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4a27      	ldr	r2, [pc, #156]	@ (8003d80 <xTaskResumeAll+0x128>)
 8003ce4:	441a      	add	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7fe ffe0 	bl	8002cb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf6:	4b23      	ldr	r3, [pc, #140]	@ (8003d84 <xTaskResumeAll+0x12c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d302      	bcc.n	8003d06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003d00:	4b21      	ldr	r3, [pc, #132]	@ (8003d88 <xTaskResumeAll+0x130>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d06:	4b1c      	ldr	r3, [pc, #112]	@ (8003d78 <xTaskResumeAll+0x120>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1cb      	bne.n	8003ca6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d14:	f000 fb58 	bl	80043c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d18:	4b1c      	ldr	r3, [pc, #112]	@ (8003d8c <xTaskResumeAll+0x134>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d24:	f000 f846 	bl	8003db4 <xTaskIncrementTick>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d2e:	4b16      	ldr	r3, [pc, #88]	@ (8003d88 <xTaskResumeAll+0x130>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f1      	bne.n	8003d24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <xTaskResumeAll+0x134>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <xTaskResumeAll+0x130>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d52:	4b0f      	ldr	r3, [pc, #60]	@ (8003d90 <xTaskResumeAll+0x138>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d62:	f001 f8f3 	bl	8004f4c <vPortExitCritical>

	return xAlreadyYielded;
 8003d66:	68bb      	ldr	r3, [r7, #8]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000d20 	.word	0x20000d20
 8003d74:	20000cf8 	.word	0x20000cf8
 8003d78:	20000cb8 	.word	0x20000cb8
 8003d7c:	20000d00 	.word	0x20000d00
 8003d80:	20000828 	.word	0x20000828
 8003d84:	20000824 	.word	0x20000824
 8003d88:	20000d0c 	.word	0x20000d0c
 8003d8c:	20000d08 	.word	0x20000d08
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d9a:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <xTaskGetTickCount+0x1c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003da0:	687b      	ldr	r3, [r7, #4]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000cfc 	.word	0x20000cfc

08003db4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <xTaskIncrementTick+0x148>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 8090 	bne.w	8003ee8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f00 <xTaskIncrementTick+0x14c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8003f00 <xTaskIncrementTick+0x14c>)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d121      	bne.n	8003e20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ddc:	4b49      	ldr	r3, [pc, #292]	@ (8003f04 <xTaskIncrementTick+0x150>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <xTaskIncrementTick+0x4a>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	603b      	str	r3, [r7, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <xTaskIncrementTick+0x46>
 8003dfe:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <xTaskIncrementTick+0x150>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	4b40      	ldr	r3, [pc, #256]	@ (8003f08 <xTaskIncrementTick+0x154>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a3e      	ldr	r2, [pc, #248]	@ (8003f04 <xTaskIncrementTick+0x150>)
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f08 <xTaskIncrementTick+0x154>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b3e      	ldr	r3, [pc, #248]	@ (8003f0c <xTaskIncrementTick+0x158>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a3c      	ldr	r2, [pc, #240]	@ (8003f0c <xTaskIncrementTick+0x158>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	f000 fad4 	bl	80043c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e20:	4b3b      	ldr	r3, [pc, #236]	@ (8003f10 <xTaskIncrementTick+0x15c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d349      	bcc.n	8003ebe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e2a:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <xTaskIncrementTick+0x150>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e34:	4b36      	ldr	r3, [pc, #216]	@ (8003f10 <xTaskIncrementTick+0x15c>)
 8003e36:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3a:	601a      	str	r2, [r3, #0]
					break;
 8003e3c:	e03f      	b.n	8003ebe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e3e:	4b31      	ldr	r3, [pc, #196]	@ (8003f04 <xTaskIncrementTick+0x150>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d203      	bcs.n	8003e5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e56:	4a2e      	ldr	r2, [pc, #184]	@ (8003f10 <xTaskIncrementTick+0x15c>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e5c:	e02f      	b.n	8003ebe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe ff82 	bl	8002d6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3318      	adds	r3, #24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe ff79 	bl	8002d6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7e:	4b25      	ldr	r3, [pc, #148]	@ (8003f14 <xTaskIncrementTick+0x160>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d903      	bls.n	8003e8e <xTaskIncrementTick+0xda>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	4a22      	ldr	r2, [pc, #136]	@ (8003f14 <xTaskIncrementTick+0x160>)
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f18 <xTaskIncrementTick+0x164>)
 8003e9c:	441a      	add	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fe ff04 	bl	8002cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eae:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <xTaskIncrementTick+0x168>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3b8      	bcc.n	8003e2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ebc:	e7b5      	b.n	8003e2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ebe:	4b17      	ldr	r3, [pc, #92]	@ (8003f1c <xTaskIncrementTick+0x168>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec4:	4914      	ldr	r1, [pc, #80]	@ (8003f18 <xTaskIncrementTick+0x164>)
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d901      	bls.n	8003eda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003eda:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <xTaskIncrementTick+0x16c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e004      	b.n	8003ef2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f24 <xTaskIncrementTick+0x170>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <xTaskIncrementTick+0x170>)
 8003ef0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ef2:	697b      	ldr	r3, [r7, #20]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000d20 	.word	0x20000d20
 8003f00:	20000cfc 	.word	0x20000cfc
 8003f04:	20000cb0 	.word	0x20000cb0
 8003f08:	20000cb4 	.word	0x20000cb4
 8003f0c:	20000d10 	.word	0x20000d10
 8003f10:	20000d18 	.word	0x20000d18
 8003f14:	20000d00 	.word	0x20000d00
 8003f18:	20000828 	.word	0x20000828
 8003f1c:	20000824 	.word	0x20000824
 8003f20:	20000d0c 	.word	0x20000d0c
 8003f24:	20000d08 	.word	0x20000d08

08003f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f2e:	4b28      	ldr	r3, [pc, #160]	@ (8003fd0 <vTaskSwitchContext+0xa8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f36:	4b27      	ldr	r3, [pc, #156]	@ (8003fd4 <vTaskSwitchContext+0xac>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f3c:	e042      	b.n	8003fc4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003f3e:	4b25      	ldr	r3, [pc, #148]	@ (8003fd4 <vTaskSwitchContext+0xac>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f44:	4b24      	ldr	r3, [pc, #144]	@ (8003fd8 <vTaskSwitchContext+0xb0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	e011      	b.n	8003f70 <vTaskSwitchContext+0x48>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <vTaskSwitchContext+0x42>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	607b      	str	r3, [r7, #4]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <vTaskSwitchContext+0x3e>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	491a      	ldr	r1, [pc, #104]	@ (8003fdc <vTaskSwitchContext+0xb4>)
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0e3      	beq.n	8003f4c <vTaskSwitchContext+0x24>
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4a13      	ldr	r2, [pc, #76]	@ (8003fdc <vTaskSwitchContext+0xb4>)
 8003f90:	4413      	add	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d104      	bne.n	8003fb4 <vTaskSwitchContext+0x8c>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	4a09      	ldr	r2, [pc, #36]	@ (8003fe0 <vTaskSwitchContext+0xb8>)
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4a06      	ldr	r2, [pc, #24]	@ (8003fd8 <vTaskSwitchContext+0xb0>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6013      	str	r3, [r2, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000d20 	.word	0x20000d20
 8003fd4:	20000d0c 	.word	0x20000d0c
 8003fd8:	20000d00 	.word	0x20000d00
 8003fdc:	20000828 	.word	0x20000828
 8003fe0:	20000824 	.word	0x20000824

08003fe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	60fb      	str	r3, [r7, #12]
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800400c:	4b07      	ldr	r3, [pc, #28]	@ (800402c <vTaskPlaceOnEventList+0x48>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3318      	adds	r3, #24
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fe fe70 	bl	8002cfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800401a:	2101      	movs	r1, #1
 800401c:	6838      	ldr	r0, [r7, #0]
 800401e:	f000 fa81 	bl	8004524 <prvAddCurrentTaskToDelayedList>
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000824 	.word	0x20000824

08004030 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	617b      	str	r3, [r7, #20]
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	e7fd      	b.n	8004056 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800405a:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <vTaskPlaceOnEventListRestricted+0x54>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3318      	adds	r3, #24
 8004060:	4619      	mov	r1, r3
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7fe fe25 	bl	8002cb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	f000 fa54 	bl	8004524 <prvAddCurrentTaskToDelayedList>
	}
 800407c:	bf00      	nop
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000824 	.word	0x20000824

08004088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	60fb      	str	r3, [r7, #12]
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	e7fd      	b.n	80040b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3318      	adds	r3, #24
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fe56 	bl	8002d6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <xTaskRemoveFromEventList+0xb0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d11d      	bne.n	8004104 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fe4d 	bl	8002d6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d6:	4b19      	ldr	r3, [pc, #100]	@ (800413c <xTaskRemoveFromEventList+0xb4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d903      	bls.n	80040e6 <xTaskRemoveFromEventList+0x5e>
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	4a16      	ldr	r2, [pc, #88]	@ (800413c <xTaskRemoveFromEventList+0xb4>)
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4a13      	ldr	r2, [pc, #76]	@ (8004140 <xTaskRemoveFromEventList+0xb8>)
 80040f4:	441a      	add	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7fe fdd8 	bl	8002cb2 <vListInsertEnd>
 8004102:	e005      	b.n	8004110 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	3318      	adds	r3, #24
 8004108:	4619      	mov	r1, r3
 800410a:	480e      	ldr	r0, [pc, #56]	@ (8004144 <xTaskRemoveFromEventList+0xbc>)
 800410c:	f7fe fdd1 	bl	8002cb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004114:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <xTaskRemoveFromEventList+0xc0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	429a      	cmp	r2, r3
 800411c:	d905      	bls.n	800412a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800411e:	2301      	movs	r3, #1
 8004120:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <xTaskRemoveFromEventList+0xc4>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e001      	b.n	800412e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800412e:	697b      	ldr	r3, [r7, #20]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000d20 	.word	0x20000d20
 800413c:	20000d00 	.word	0x20000d00
 8004140:	20000828 	.word	0x20000828
 8004144:	20000cb8 	.word	0x20000cb8
 8004148:	20000824 	.word	0x20000824
 800414c:	20000d0c 	.word	0x20000d0c

08004150 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004158:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <vTaskInternalSetTimeOutState+0x24>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <vTaskInternalSetTimeOutState+0x28>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	605a      	str	r2, [r3, #4]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	20000d10 	.word	0x20000d10
 8004178:	20000cfc 	.word	0x20000cfc

0800417c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	613b      	str	r3, [r7, #16]
}
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60fb      	str	r3, [r7, #12]
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	e7fd      	b.n	80041be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80041c2:	f000 fe91 	bl	8004ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041c6:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <xTaskCheckForTimeOut+0xc0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d102      	bne.n	80041e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	e023      	b.n	800422e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <xTaskCheckForTimeOut+0xc4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d007      	beq.n	8004202 <xTaskCheckForTimeOut+0x86>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e015      	b.n	800422e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	429a      	cmp	r2, r3
 800420a:	d20b      	bcs.n	8004224 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad2      	subs	r2, r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ff99 	bl	8004150 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e004      	b.n	800422e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800422a:	2301      	movs	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800422e:	f000 fe8d 	bl	8004f4c <vPortExitCritical>

	return xReturn;
 8004232:	69fb      	ldr	r3, [r7, #28]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000cfc 	.word	0x20000cfc
 8004240:	20000d10 	.word	0x20000d10

08004244 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004248:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <vTaskMissedYield+0x14>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000d0c 	.word	0x20000d0c

0800425c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004264:	f000 f852 	bl	800430c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004268:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <prvIdleTask+0x28>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d9f9      	bls.n	8004264 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004270:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <prvIdleTask+0x2c>)
 8004272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004280:	e7f0      	b.n	8004264 <prvIdleTask+0x8>
 8004282:	bf00      	nop
 8004284:	20000828 	.word	0x20000828
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004292:	2300      	movs	r3, #0
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	e00c      	b.n	80042b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <prvInitialiseTaskLists+0x60>)
 80042a4:	4413      	add	r3, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe fcd6 	bl	8002c58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3301      	adds	r3, #1
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b37      	cmp	r3, #55	@ 0x37
 80042b6:	d9ef      	bls.n	8004298 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042b8:	480d      	ldr	r0, [pc, #52]	@ (80042f0 <prvInitialiseTaskLists+0x64>)
 80042ba:	f7fe fccd 	bl	8002c58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042be:	480d      	ldr	r0, [pc, #52]	@ (80042f4 <prvInitialiseTaskLists+0x68>)
 80042c0:	f7fe fcca 	bl	8002c58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042c4:	480c      	ldr	r0, [pc, #48]	@ (80042f8 <prvInitialiseTaskLists+0x6c>)
 80042c6:	f7fe fcc7 	bl	8002c58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042ca:	480c      	ldr	r0, [pc, #48]	@ (80042fc <prvInitialiseTaskLists+0x70>)
 80042cc:	f7fe fcc4 	bl	8002c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042d0:	480b      	ldr	r0, [pc, #44]	@ (8004300 <prvInitialiseTaskLists+0x74>)
 80042d2:	f7fe fcc1 	bl	8002c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <prvInitialiseTaskLists+0x78>)
 80042d8:	4a05      	ldr	r2, [pc, #20]	@ (80042f0 <prvInitialiseTaskLists+0x64>)
 80042da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <prvInitialiseTaskLists+0x7c>)
 80042de:	4a05      	ldr	r2, [pc, #20]	@ (80042f4 <prvInitialiseTaskLists+0x68>)
 80042e0:	601a      	str	r2, [r3, #0]
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000828 	.word	0x20000828
 80042f0:	20000c88 	.word	0x20000c88
 80042f4:	20000c9c 	.word	0x20000c9c
 80042f8:	20000cb8 	.word	0x20000cb8
 80042fc:	20000ccc 	.word	0x20000ccc
 8004300:	20000ce4 	.word	0x20000ce4
 8004304:	20000cb0 	.word	0x20000cb0
 8004308:	20000cb4 	.word	0x20000cb4

0800430c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004312:	e019      	b.n	8004348 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004314:	f000 fde8 	bl	8004ee8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004318:	4b10      	ldr	r3, [pc, #64]	@ (800435c <prvCheckTasksWaitingTermination+0x50>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fd21 	bl	8002d6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800432a:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <prvCheckTasksWaitingTermination+0x54>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3b01      	subs	r3, #1
 8004330:	4a0b      	ldr	r2, [pc, #44]	@ (8004360 <prvCheckTasksWaitingTermination+0x54>)
 8004332:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <prvCheckTasksWaitingTermination+0x58>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	4a0a      	ldr	r2, [pc, #40]	@ (8004364 <prvCheckTasksWaitingTermination+0x58>)
 800433c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800433e:	f000 fe05 	bl	8004f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f810 	bl	8004368 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <prvCheckTasksWaitingTermination+0x58>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e1      	bne.n	8004314 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000ccc 	.word	0x20000ccc
 8004360:	20000cf8 	.word	0x20000cf8
 8004364:	20000ce0 	.word	0x20000ce0

08004368 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	4618      	mov	r0, r3
 8004380:	f000 ffa2 	bl	80052c8 <vPortFree>
				vPortFree( pxTCB );
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 ff9f 	bl	80052c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800438a:	e019      	b.n	80043c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004392:	2b01      	cmp	r3, #1
 8004394:	d103      	bne.n	800439e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 ff96 	bl	80052c8 <vPortFree>
	}
 800439c:	e010      	b.n	80043c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d00b      	beq.n	80043c0 <prvDeleteTCB+0x58>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	60fb      	str	r3, [r7, #12]
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	e7fd      	b.n	80043bc <prvDeleteTCB+0x54>
	}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <prvResetNextTaskUnblockTime+0x38>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <prvResetNextTaskUnblockTime+0x3c>)
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043e0:	e008      	b.n	80043f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <prvResetNextTaskUnblockTime+0x38>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a04      	ldr	r2, [pc, #16]	@ (8004404 <prvResetNextTaskUnblockTime+0x3c>)
 80043f2:	6013      	str	r3, [r2, #0]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000cb0 	.word	0x20000cb0
 8004404:	20000d18 	.word	0x20000d18

08004408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800440e:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <xTaskGetSchedulerState+0x34>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004416:	2301      	movs	r3, #1
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	e008      	b.n	800442e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800441c:	4b08      	ldr	r3, [pc, #32]	@ (8004440 <xTaskGetSchedulerState+0x38>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004424:	2302      	movs	r3, #2
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	e001      	b.n	800442e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800442e:	687b      	ldr	r3, [r7, #4]
	}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	20000d04 	.word	0x20000d04
 8004440:	20000d20 	.word	0x20000d20

08004444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d058      	beq.n	800450c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800445a:	4b2f      	ldr	r3, [pc, #188]	@ (8004518 <xTaskPriorityDisinherit+0xd4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d00b      	beq.n	800447c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	60fb      	str	r3, [r7, #12]
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60bb      	str	r3, [r7, #8]
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a0:	1e5a      	subs	r2, r3, #1
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d02c      	beq.n	800450c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d128      	bne.n	800450c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3304      	adds	r3, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fc54 	bl	8002d6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044dc:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <xTaskPriorityDisinherit+0xd8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d903      	bls.n	80044ec <xTaskPriorityDisinherit+0xa8>
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	4a0c      	ldr	r2, [pc, #48]	@ (800451c <xTaskPriorityDisinherit+0xd8>)
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4a09      	ldr	r2, [pc, #36]	@ (8004520 <xTaskPriorityDisinherit+0xdc>)
 80044fa:	441a      	add	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f7fe fbd5 	bl	8002cb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800450c:	697b      	ldr	r3, [r7, #20]
	}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000824 	.word	0x20000824
 800451c:	20000d00 	.word	0x20000d00
 8004520:	20000828 	.word	0x20000828

08004524 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800452e:	4b21      	ldr	r3, [pc, #132]	@ (80045b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004534:	4b20      	ldr	r3, [pc, #128]	@ (80045b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fc16 	bl	8002d6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d10a      	bne.n	800455e <prvAddCurrentTaskToDelayedList+0x3a>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800454e:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4819      	ldr	r0, [pc, #100]	@ (80045bc <prvAddCurrentTaskToDelayedList+0x98>)
 8004558:	f7fe fbab 	bl	8002cb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800455c:	e026      	b.n	80045ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004566:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	429a      	cmp	r2, r3
 8004574:	d209      	bcs.n	800458a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b0f      	ldr	r3, [pc, #60]	@ (80045b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe fbb9 	bl	8002cfa <vListInsert>
}
 8004588:	e010      	b.n	80045ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458a:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe fbaf 	bl	8002cfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800459c:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d202      	bcs.n	80045ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045a6:	4a08      	ldr	r2, [pc, #32]	@ (80045c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6013      	str	r3, [r2, #0]
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000cfc 	.word	0x20000cfc
 80045b8:	20000824 	.word	0x20000824
 80045bc:	20000ce4 	.word	0x20000ce4
 80045c0:	20000cb4 	.word	0x20000cb4
 80045c4:	20000cb0 	.word	0x20000cb0
 80045c8:	20000d18 	.word	0x20000d18

080045cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	@ 0x28
 80045d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045d6:	f000 fb13 	bl	8004c00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045da:	4b1d      	ldr	r3, [pc, #116]	@ (8004650 <xTimerCreateTimerTask+0x84>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d021      	beq.n	8004626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045ea:	1d3a      	adds	r2, r7, #4
 80045ec:	f107 0108 	add.w	r1, r7, #8
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe fb15 	bl	8002c24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	9202      	str	r2, [sp, #8]
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	2302      	movs	r3, #2
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2300      	movs	r3, #0
 800460a:	460a      	mov	r2, r1
 800460c:	4911      	ldr	r1, [pc, #68]	@ (8004654 <xTimerCreateTimerTask+0x88>)
 800460e:	4812      	ldr	r0, [pc, #72]	@ (8004658 <xTimerCreateTimerTask+0x8c>)
 8004610:	f7ff f8d0 	bl	80037b4 <xTaskCreateStatic>
 8004614:	4603      	mov	r3, r0
 8004616:	4a11      	ldr	r2, [pc, #68]	@ (800465c <xTimerCreateTimerTask+0x90>)
 8004618:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800461a:	4b10      	ldr	r3, [pc, #64]	@ (800465c <xTimerCreateTimerTask+0x90>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004622:	2301      	movs	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	613b      	str	r3, [r7, #16]
}
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004644:	697b      	ldr	r3, [r7, #20]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20000d54 	.word	0x20000d54
 8004654:	080063f8 	.word	0x080063f8
 8004658:	08004799 	.word	0x08004799
 800465c:	20000d58 	.word	0x20000d58

08004660 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	@ 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <xTimerGenericCommand+0x30>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	623b      	str	r3, [r7, #32]
}
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	e7fd      	b.n	800468c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004690:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <xTimerGenericCommand+0x98>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d02a      	beq.n	80046ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	dc18      	bgt.n	80046dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046aa:	f7ff fead 	bl	8004408 <xTaskGetSchedulerState>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d109      	bne.n	80046c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046b4:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <xTimerGenericCommand+0x98>)
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	f107 0110 	add.w	r1, r7, #16
 80046bc:	2300      	movs	r3, #0
 80046be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c0:	f7fe fc88 	bl	8002fd4 <xQueueGenericSend>
 80046c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80046c6:	e012      	b.n	80046ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046c8:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <xTimerGenericCommand+0x98>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	f107 0110 	add.w	r1, r7, #16
 80046d0:	2300      	movs	r3, #0
 80046d2:	2200      	movs	r2, #0
 80046d4:	f7fe fc7e 	bl	8002fd4 <xQueueGenericSend>
 80046d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80046da:	e008      	b.n	80046ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <xTimerGenericCommand+0x98>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	f107 0110 	add.w	r1, r7, #16
 80046e4:	2300      	movs	r3, #0
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	f7fe fd76 	bl	80031d8 <xQueueGenericSendFromISR>
 80046ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3728      	adds	r7, #40	@ 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000d54 	.word	0x20000d54

080046fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004706:	4b23      	ldr	r3, [pc, #140]	@ (8004794 <prvProcessExpiredTimer+0x98>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3304      	adds	r3, #4
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe fb29 	bl	8002d6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d023      	beq.n	8004770 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	18d1      	adds	r1, r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	6978      	ldr	r0, [r7, #20]
 8004736:	f000 f8d5 	bl	80048e4 <prvInsertTimerInActiveList>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004740:	2300      	movs	r3, #0
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	2100      	movs	r1, #0
 800474a:	6978      	ldr	r0, [r7, #20]
 800474c:	f7ff ff88 	bl	8004660 <xTimerGenericCommand>
 8004750:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d114      	bne.n	8004782 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60fb      	str	r3, [r7, #12]
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	b2da      	uxtb	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	6978      	ldr	r0, [r7, #20]
 8004788:	4798      	blx	r3
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000d4c 	.word	0x20000d4c

08004798 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f859 	bl	800485c <prvGetNextExpireTime>
 80047aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4619      	mov	r1, r3
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f805 	bl	80047c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047b6:	f000 f8d7 	bl	8004968 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ba:	bf00      	nop
 80047bc:	e7f0      	b.n	80047a0 <prvTimerTask+0x8>
	...

080047c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047ca:	f7ff fa37 	bl	8003c3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ce:	f107 0308 	add.w	r3, r7, #8
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f866 	bl	80048a4 <prvSampleTimeNow>
 80047d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d130      	bne.n	8004842 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <prvProcessTimerOrBlockTask+0x3c>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d806      	bhi.n	80047fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047ee:	f7ff fa33 	bl	8003c58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047f2:	68f9      	ldr	r1, [r7, #12]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff81 	bl	80046fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047fa:	e024      	b.n	8004846 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004802:	4b13      	ldr	r3, [pc, #76]	@ (8004850 <prvProcessTimerOrBlockTask+0x90>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <prvProcessTimerOrBlockTask+0x50>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <prvProcessTimerOrBlockTask+0x52>
 8004810:	2300      	movs	r3, #0
 8004812:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004814:	4b0f      	ldr	r3, [pc, #60]	@ (8004854 <prvProcessTimerOrBlockTask+0x94>)
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	4619      	mov	r1, r3
 8004822:	f7fe ff93 	bl	800374c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004826:	f7ff fa17 	bl	8003c58 <xTaskResumeAll>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004830:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <prvProcessTimerOrBlockTask+0x98>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
}
 8004840:	e001      	b.n	8004846 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004842:	f7ff fa09 	bl	8003c58 <xTaskResumeAll>
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000d50 	.word	0x20000d50
 8004854:	20000d54 	.word	0x20000d54
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004864:	4b0e      	ldr	r3, [pc, #56]	@ (80048a0 <prvGetNextExpireTime+0x44>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <prvGetNextExpireTime+0x16>
 800486e:	2201      	movs	r2, #1
 8004870:	e000      	b.n	8004874 <prvGetNextExpireTime+0x18>
 8004872:	2200      	movs	r2, #0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004880:	4b07      	ldr	r3, [pc, #28]	@ (80048a0 <prvGetNextExpireTime+0x44>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e001      	b.n	8004890 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004890:	68fb      	ldr	r3, [r7, #12]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000d4c 	.word	0x20000d4c

080048a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048ac:	f7ff fa72 	bl	8003d94 <xTaskGetTickCount>
 80048b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048b2:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <prvSampleTimeNow+0x3c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d205      	bcs.n	80048c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048bc:	f000 f93a 	bl	8004b34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e002      	b.n	80048ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048ce:	4a04      	ldr	r2, [pc, #16]	@ (80048e0 <prvSampleTimeNow+0x3c>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048d4:	68fb      	ldr	r3, [r7, #12]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000d5c 	.word	0x20000d5c

080048e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d812      	bhi.n	8004930 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	1ad2      	subs	r2, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	429a      	cmp	r2, r3
 8004916:	d302      	bcc.n	800491e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e01b      	b.n	8004956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800491e:	4b10      	ldr	r3, [pc, #64]	@ (8004960 <prvInsertTimerInActiveList+0x7c>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fe f9e6 	bl	8002cfa <vListInsert>
 800492e:	e012      	b.n	8004956 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d206      	bcs.n	8004946 <prvInsertTimerInActiveList+0x62>
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d302      	bcc.n	8004946 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e007      	b.n	8004956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004946:	4b07      	ldr	r3, [pc, #28]	@ (8004964 <prvInsertTimerInActiveList+0x80>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f7fe f9d2 	bl	8002cfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004956:	697b      	ldr	r3, [r7, #20]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000d50 	.word	0x20000d50
 8004964:	20000d4c 	.word	0x20000d4c

08004968 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08e      	sub	sp, #56	@ 0x38
 800496c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800496e:	e0ce      	b.n	8004b0e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	da19      	bge.n	80049aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	3304      	adds	r3, #4
 800497a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	61fb      	str	r3, [r7, #28]
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800499a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a0:	6850      	ldr	r0, [r2, #4]
 80049a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a4:	6892      	ldr	r2, [r2, #8]
 80049a6:	4611      	mov	r1, r2
 80049a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f2c0 80ae 	blt.w	8004b0e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	3304      	adds	r3, #4
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe f9d2 	bl	8002d6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049c8:	463b      	mov	r3, r7
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff ff6a 	bl	80048a4 <prvSampleTimeNow>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b09      	cmp	r3, #9
 80049d6:	f200 8097 	bhi.w	8004b08 <prvProcessReceivedCommands+0x1a0>
 80049da:	a201      	add	r2, pc, #4	@ (adr r2, 80049e0 <prvProcessReceivedCommands+0x78>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a09 	.word	0x08004a09
 80049e8:	08004a09 	.word	0x08004a09
 80049ec:	08004a7f 	.word	0x08004a7f
 80049f0:	08004a93 	.word	0x08004a93
 80049f4:	08004adf 	.word	0x08004adf
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a09 	.word	0x08004a09
 8004a00:	08004a7f 	.word	0x08004a7f
 8004a04:	08004a93 	.word	0x08004a93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	18d1      	adds	r1, r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a28:	f7ff ff5c 	bl	80048e4 <prvInsertTimerInActiveList>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d06c      	beq.n	8004b0c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d061      	beq.n	8004b0c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	441a      	add	r2, r3
 8004a50:	2300      	movs	r3, #0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	2100      	movs	r1, #0
 8004a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a5a:	f7ff fe01 	bl	8004660 <xTimerGenericCommand>
 8004a5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d152      	bne.n	8004b0c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	61bb      	str	r3, [r7, #24]
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a90:	e03d      	b.n	8004b0e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	617b      	str	r3, [r7, #20]
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	e7fd      	b.n	8004ac6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	18d1      	adds	r1, r2, r3
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ad8:	f7ff ff04 	bl	80048e4 <prvInsertTimerInActiveList>
					break;
 8004adc:	e017      	b.n	8004b0e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004aec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aee:	f000 fbeb 	bl	80052c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004af2:	e00c      	b.n	8004b0e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b06:	e002      	b.n	8004b0e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004b08:	bf00      	nop
 8004b0a:	e000      	b.n	8004b0e <prvProcessReceivedCommands+0x1a6>
					break;
 8004b0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b0e:	4b08      	ldr	r3, [pc, #32]	@ (8004b30 <prvProcessReceivedCommands+0x1c8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	1d39      	adds	r1, r7, #4
 8004b14:	2200      	movs	r2, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fbfc 	bl	8003314 <xQueueReceive>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f47f af26 	bne.w	8004970 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	3730      	adds	r7, #48	@ 0x30
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000d54 	.word	0x20000d54

08004b34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b3a:	e049      	b.n	8004bd0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf8 <prvSwitchTimerLists+0xc4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b46:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf8 <prvSwitchTimerLists+0xc4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe f909 	bl	8002d6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d02f      	beq.n	8004bd0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4413      	add	r3, r2
 8004b78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d90e      	bls.n	8004ba0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <prvSwitchTimerLists+0xc4>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f7fe f8ae 	bl	8002cfa <vListInsert>
 8004b9e:	e017      	b.n	8004bd0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff fd58 	bl	8004660 <xTimerGenericCommand>
 8004bb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	603b      	str	r3, [r7, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	e7fd      	b.n	8004bcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bd0:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <prvSwitchTimerLists+0xc4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1b0      	bne.n	8004b3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bda:	4b07      	ldr	r3, [pc, #28]	@ (8004bf8 <prvSwitchTimerLists+0xc4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004be0:	4b06      	ldr	r3, [pc, #24]	@ (8004bfc <prvSwitchTimerLists+0xc8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a04      	ldr	r2, [pc, #16]	@ (8004bf8 <prvSwitchTimerLists+0xc4>)
 8004be6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004be8:	4a04      	ldr	r2, [pc, #16]	@ (8004bfc <prvSwitchTimerLists+0xc8>)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	6013      	str	r3, [r2, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000d4c 	.word	0x20000d4c
 8004bfc:	20000d50 	.word	0x20000d50

08004c00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c06:	f000 f96f 	bl	8004ee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c0a:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d120      	bne.n	8004c54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c12:	4814      	ldr	r0, [pc, #80]	@ (8004c64 <prvCheckForValidListAndQueue+0x64>)
 8004c14:	f7fe f820 	bl	8002c58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c18:	4813      	ldr	r0, [pc, #76]	@ (8004c68 <prvCheckForValidListAndQueue+0x68>)
 8004c1a:	f7fe f81d 	bl	8002c58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c1e:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <prvCheckForValidListAndQueue+0x6c>)
 8004c20:	4a10      	ldr	r2, [pc, #64]	@ (8004c64 <prvCheckForValidListAndQueue+0x64>)
 8004c22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c24:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <prvCheckForValidListAndQueue+0x70>)
 8004c26:	4a10      	ldr	r2, [pc, #64]	@ (8004c68 <prvCheckForValidListAndQueue+0x68>)
 8004c28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	4b11      	ldr	r3, [pc, #68]	@ (8004c74 <prvCheckForValidListAndQueue+0x74>)
 8004c30:	4a11      	ldr	r2, [pc, #68]	@ (8004c78 <prvCheckForValidListAndQueue+0x78>)
 8004c32:	2110      	movs	r1, #16
 8004c34:	200a      	movs	r0, #10
 8004c36:	f7fe f92d 	bl	8002e94 <xQueueGenericCreateStatic>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a08      	ldr	r2, [pc, #32]	@ (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c48:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <prvCheckForValidListAndQueue+0x60>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	490b      	ldr	r1, [pc, #44]	@ (8004c7c <prvCheckForValidListAndQueue+0x7c>)
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fd52 	bl	80036f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c54:	f000 f97a 	bl	8004f4c <vPortExitCritical>
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000d54 	.word	0x20000d54
 8004c64:	20000d24 	.word	0x20000d24
 8004c68:	20000d38 	.word	0x20000d38
 8004c6c:	20000d4c 	.word	0x20000d4c
 8004c70:	20000d50 	.word	0x20000d50
 8004c74:	20000e00 	.word	0x20000e00
 8004c78:	20000d60 	.word	0x20000d60
 8004c7c:	08006400 	.word	0x08006400

08004c80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b04      	subs	r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b04      	subs	r3, #4
 8004cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <pxPortInitialiseStack+0x64>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b14      	subs	r3, #20
 8004cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3b04      	subs	r3, #4
 8004cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f06f 0202 	mvn.w	r2, #2
 8004cce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b20      	subs	r3, #32
 8004cd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	08004ce9 	.word	0x08004ce9

08004ce8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cf2:	4b13      	ldr	r3, [pc, #76]	@ (8004d40 <prvTaskExitError+0x58>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d00b      	beq.n	8004d14 <prvTaskExitError+0x2c>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	60fb      	str	r3, [r7, #12]
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <prvTaskExitError+0x28>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60bb      	str	r3, [r7, #8]
}
 8004d26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d28:	bf00      	nop
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0fc      	beq.n	8004d2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	2000000c 	.word	0x2000000c
	...

08004d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d50:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <pxCurrentTCBConst2>)
 8004d52:	6819      	ldr	r1, [r3, #0]
 8004d54:	6808      	ldr	r0, [r1, #0]
 8004d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5a:	f380 8809 	msr	PSP, r0
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f380 8811 	msr	BASEPRI, r0
 8004d6a:	4770      	bx	lr
 8004d6c:	f3af 8000 	nop.w

08004d70 <pxCurrentTCBConst2>:
 8004d70:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d78:	4808      	ldr	r0, [pc, #32]	@ (8004d9c <prvPortStartFirstTask+0x24>)
 8004d7a:	6800      	ldr	r0, [r0, #0]
 8004d7c:	6800      	ldr	r0, [r0, #0]
 8004d7e:	f380 8808 	msr	MSP, r0
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8814 	msr	CONTROL, r0
 8004d8a:	b662      	cpsie	i
 8004d8c:	b661      	cpsie	f
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	df00      	svc	0
 8004d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d9a:	bf00      	nop
 8004d9c:	e000ed08 	.word	0xe000ed08

08004da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004da6:	4b47      	ldr	r3, [pc, #284]	@ (8004ec4 <xPortStartScheduler+0x124>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a47      	ldr	r2, [pc, #284]	@ (8004ec8 <xPortStartScheduler+0x128>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10b      	bne.n	8004dc8 <xPortStartScheduler+0x28>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	613b      	str	r3, [r7, #16]
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec4 <xPortStartScheduler+0x124>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8004ecc <xPortStartScheduler+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10b      	bne.n	8004dea <xPortStartScheduler+0x4a>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60fb      	str	r3, [r7, #12]
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	e7fd      	b.n	8004de6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dea:	4b39      	ldr	r3, [pc, #228]	@ (8004ed0 <xPortStartScheduler+0x130>)
 8004dec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	22ff      	movs	r2, #255	@ 0xff
 8004dfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4b31      	ldr	r3, [pc, #196]	@ (8004ed4 <xPortStartScheduler+0x134>)
 8004e10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e12:	4b31      	ldr	r3, [pc, #196]	@ (8004ed8 <xPortStartScheduler+0x138>)
 8004e14:	2207      	movs	r2, #7
 8004e16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e18:	e009      	b.n	8004e2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed8 <xPortStartScheduler+0x138>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed8 <xPortStartScheduler+0x138>)
 8004e22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e36:	2b80      	cmp	r3, #128	@ 0x80
 8004e38:	d0ef      	beq.n	8004e1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <xPortStartScheduler+0x138>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1c3 0307 	rsb	r3, r3, #7
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d00b      	beq.n	8004e5e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	60bb      	str	r3, [r7, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	e7fd      	b.n	8004e5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed8 <xPortStartScheduler+0x138>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed8 <xPortStartScheduler+0x138>)
 8004e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <xPortStartScheduler+0x138>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e70:	4a19      	ldr	r2, [pc, #100]	@ (8004ed8 <xPortStartScheduler+0x138>)
 8004e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e7c:	4b17      	ldr	r3, [pc, #92]	@ (8004edc <xPortStartScheduler+0x13c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <xPortStartScheduler+0x13c>)
 8004e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e88:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <xPortStartScheduler+0x13c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <xPortStartScheduler+0x13c>)
 8004e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e94:	f000 f8da 	bl	800504c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e98:	4b11      	ldr	r3, [pc, #68]	@ (8004ee0 <xPortStartScheduler+0x140>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e9e:	f000 f8f9 	bl	8005094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <xPortStartScheduler+0x144>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ee4 <xPortStartScheduler+0x144>)
 8004ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004eae:	f7ff ff63 	bl	8004d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004eb2:	f7ff f839 	bl	8003f28 <vTaskSwitchContext>
	prvTaskExitError();
 8004eb6:	f7ff ff17 	bl	8004ce8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	e000ed00 	.word	0xe000ed00
 8004ec8:	410fc271 	.word	0x410fc271
 8004ecc:	410fc270 	.word	0x410fc270
 8004ed0:	e000e400 	.word	0xe000e400
 8004ed4:	20000e50 	.word	0x20000e50
 8004ed8:	20000e54 	.word	0x20000e54
 8004edc:	e000ed20 	.word	0xe000ed20
 8004ee0:	2000000c 	.word	0x2000000c
 8004ee4:	e000ef34 	.word	0xe000ef34

08004ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	607b      	str	r3, [r7, #4]
}
 8004f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f02:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <vPortEnterCritical+0x5c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3301      	adds	r3, #1
 8004f08:	4a0e      	ldr	r2, [pc, #56]	@ (8004f44 <vPortEnterCritical+0x5c>)
 8004f0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <vPortEnterCritical+0x5c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d110      	bne.n	8004f36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f14:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <vPortEnterCritical+0x60>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <vPortEnterCritical+0x4e>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	603b      	str	r3, [r7, #0]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <vPortEnterCritical+0x4a>
	}
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	2000000c 	.word	0x2000000c
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f52:	4b12      	ldr	r3, [pc, #72]	@ (8004f9c <vPortExitCritical+0x50>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <vPortExitCritical+0x26>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	607b      	str	r3, [r7, #4]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f72:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <vPortExitCritical+0x50>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <vPortExitCritical+0x50>)
 8004f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f7c:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <vPortExitCritical+0x50>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d105      	bne.n	8004f90 <vPortExitCritical+0x44>
 8004f84:	2300      	movs	r3, #0
 8004f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
}
 8004f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c

08004fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fa0:	f3ef 8009 	mrs	r0, PSP
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <pxCurrentTCBConst>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f01e 0f10 	tst.w	lr, #16
 8004fb0:	bf08      	it	eq
 8004fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	6010      	str	r0, [r2, #0]
 8004fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004fc4:	f380 8811 	msr	BASEPRI, r0
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f7fe ffaa 	bl	8003f28 <vTaskSwitchContext>
 8004fd4:	f04f 0000 	mov.w	r0, #0
 8004fd8:	f380 8811 	msr	BASEPRI, r0
 8004fdc:	bc09      	pop	{r0, r3}
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	6808      	ldr	r0, [r1, #0]
 8004fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe6:	f01e 0f10 	tst.w	lr, #16
 8004fea:	bf08      	it	eq
 8004fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ff0:	f380 8809 	msr	PSP, r0
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	f3af 8000 	nop.w

08005000 <pxCurrentTCBConst>:
 8005000:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop

08005008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	607b      	str	r3, [r7, #4]
}
 8005020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005022:	f7fe fec7 	bl	8003db4 <xTaskIncrementTick>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800502c:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <xPortSysTickHandler+0x40>)
 800502e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	2300      	movs	r3, #0
 8005036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	f383 8811 	msr	BASEPRI, r3
}
 800503e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	e000ed04 	.word	0xe000ed04

0800504c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <vPortSetupTimerInterrupt+0x34>)
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005056:	4b0b      	ldr	r3, [pc, #44]	@ (8005084 <vPortSetupTimerInterrupt+0x38>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800505c:	4b0a      	ldr	r3, [pc, #40]	@ (8005088 <vPortSetupTimerInterrupt+0x3c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <vPortSetupTimerInterrupt+0x40>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	099b      	lsrs	r3, r3, #6
 8005068:	4a09      	ldr	r2, [pc, #36]	@ (8005090 <vPortSetupTimerInterrupt+0x44>)
 800506a:	3b01      	subs	r3, #1
 800506c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800506e:	4b04      	ldr	r3, [pc, #16]	@ (8005080 <vPortSetupTimerInterrupt+0x34>)
 8005070:	2207      	movs	r2, #7
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	e000e010 	.word	0xe000e010
 8005084:	e000e018 	.word	0xe000e018
 8005088:	20000000 	.word	0x20000000
 800508c:	10624dd3 	.word	0x10624dd3
 8005090:	e000e014 	.word	0xe000e014

08005094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005094:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80050a4 <vPortEnableVFP+0x10>
 8005098:	6801      	ldr	r1, [r0, #0]
 800509a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800509e:	6001      	str	r1, [r0, #0]
 80050a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050a2:	bf00      	nop
 80050a4:	e000ed88 	.word	0xe000ed88

080050a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050ae:	f3ef 8305 	mrs	r3, IPSR
 80050b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	d915      	bls.n	80050e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050ba:	4a18      	ldr	r2, [pc, #96]	@ (800511c <vPortValidateInterruptPriority+0x74>)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050c4:	4b16      	ldr	r3, [pc, #88]	@ (8005120 <vPortValidateInterruptPriority+0x78>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	7afa      	ldrb	r2, [r7, #11]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d20b      	bcs.n	80050e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	607b      	str	r3, [r7, #4]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <vPortValidateInterruptPriority+0x7c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <vPortValidateInterruptPriority+0x80>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d90b      	bls.n	800510e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	603b      	str	r3, [r7, #0]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <vPortValidateInterruptPriority+0x62>
	}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	e000e3f0 	.word	0xe000e3f0
 8005120:	20000e50 	.word	0x20000e50
 8005124:	e000ed0c 	.word	0xe000ed0c
 8005128:	20000e54 	.word	0x20000e54

0800512c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	@ 0x28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005138:	f7fe fd80 	bl	8003c3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800513c:	4b5c      	ldr	r3, [pc, #368]	@ (80052b0 <pvPortMalloc+0x184>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005144:	f000 f924 	bl	8005390 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005148:	4b5a      	ldr	r3, [pc, #360]	@ (80052b4 <pvPortMalloc+0x188>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	f040 8095 	bne.w	8005280 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01e      	beq.n	800519a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800515c:	2208      	movs	r2, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4413      	add	r3, r2
 8005162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d015      	beq.n	800519a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f023 0307 	bic.w	r3, r3, #7
 8005174:	3308      	adds	r3, #8
 8005176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <pvPortMalloc+0x6e>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	617b      	str	r3, [r7, #20]
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	e7fd      	b.n	8005196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d06f      	beq.n	8005280 <pvPortMalloc+0x154>
 80051a0:	4b45      	ldr	r3, [pc, #276]	@ (80052b8 <pvPortMalloc+0x18c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d86a      	bhi.n	8005280 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051aa:	4b44      	ldr	r3, [pc, #272]	@ (80052bc <pvPortMalloc+0x190>)
 80051ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051ae:	4b43      	ldr	r3, [pc, #268]	@ (80052bc <pvPortMalloc+0x190>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051b4:	e004      	b.n	80051c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d903      	bls.n	80051d2 <pvPortMalloc+0xa6>
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f1      	bne.n	80051b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051d2:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <pvPortMalloc+0x184>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d8:	429a      	cmp	r2, r3
 80051da:	d051      	beq.n	8005280 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2208      	movs	r2, #8
 80051e2:	4413      	add	r3, r2
 80051e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	1ad2      	subs	r2, r2, r3
 80051f6:	2308      	movs	r3, #8
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d920      	bls.n	8005240 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4413      	add	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <pvPortMalloc+0xfc>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800523a:	69b8      	ldr	r0, [r7, #24]
 800523c:	f000 f90a 	bl	8005454 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <pvPortMalloc+0x18c>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	4a1b      	ldr	r2, [pc, #108]	@ (80052b8 <pvPortMalloc+0x18c>)
 800524c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800524e:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <pvPortMalloc+0x18c>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b1b      	ldr	r3, [pc, #108]	@ (80052c0 <pvPortMalloc+0x194>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d203      	bcs.n	8005262 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <pvPortMalloc+0x18c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a18      	ldr	r2, [pc, #96]	@ (80052c0 <pvPortMalloc+0x194>)
 8005260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <pvPortMalloc+0x188>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	431a      	orrs	r2, r3
 800526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005276:	4b13      	ldr	r3, [pc, #76]	@ (80052c4 <pvPortMalloc+0x198>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3301      	adds	r3, #1
 800527c:	4a11      	ldr	r2, [pc, #68]	@ (80052c4 <pvPortMalloc+0x198>)
 800527e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005280:	f7fe fcea 	bl	8003c58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <pvPortMalloc+0x17a>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	60fb      	str	r3, [r7, #12]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <pvPortMalloc+0x176>
	return pvReturn;
 80052a6:	69fb      	ldr	r3, [r7, #28]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3728      	adds	r7, #40	@ 0x28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20004a60 	.word	0x20004a60
 80052b4:	20004a74 	.word	0x20004a74
 80052b8:	20004a64 	.word	0x20004a64
 80052bc:	20004a58 	.word	0x20004a58
 80052c0:	20004a68 	.word	0x20004a68
 80052c4:	20004a6c 	.word	0x20004a6c

080052c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d04f      	beq.n	800537a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052da:	2308      	movs	r3, #8
 80052dc:	425b      	negs	r3, r3
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4b25      	ldr	r3, [pc, #148]	@ (8005384 <vPortFree+0xbc>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <vPortFree+0x46>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60fb      	str	r3, [r7, #12]
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	e7fd      	b.n	800530a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <vPortFree+0x66>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	60bb      	str	r3, [r7, #8]
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	e7fd      	b.n	800532a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	4b14      	ldr	r3, [pc, #80]	@ (8005384 <vPortFree+0xbc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01e      	beq.n	800537a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11a      	bne.n	800537a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	4b0e      	ldr	r3, [pc, #56]	@ (8005384 <vPortFree+0xbc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	43db      	mvns	r3, r3
 800534e:	401a      	ands	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005354:	f7fe fc72 	bl	8003c3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <vPortFree+0xc0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4413      	add	r3, r2
 8005362:	4a09      	ldr	r2, [pc, #36]	@ (8005388 <vPortFree+0xc0>)
 8005364:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005366:	6938      	ldr	r0, [r7, #16]
 8005368:	f000 f874 	bl	8005454 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800536c:	4b07      	ldr	r3, [pc, #28]	@ (800538c <vPortFree+0xc4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	4a06      	ldr	r2, [pc, #24]	@ (800538c <vPortFree+0xc4>)
 8005374:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005376:	f7fe fc6f 	bl	8003c58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20004a74 	.word	0x20004a74
 8005388:	20004a64 	.word	0x20004a64
 800538c:	20004a70 	.word	0x20004a70

08005390 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005396:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800539a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800539c:	4b27      	ldr	r3, [pc, #156]	@ (800543c <prvHeapInit+0xac>)
 800539e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3307      	adds	r3, #7
 80053ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0307 	bic.w	r3, r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	4a1f      	ldr	r2, [pc, #124]	@ (800543c <prvHeapInit+0xac>)
 80053c0:	4413      	add	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005440 <prvHeapInit+0xb0>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005440 <prvHeapInit+0xb0>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4413      	add	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053dc:	2208      	movs	r2, #8
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a15      	ldr	r2, [pc, #84]	@ (8005444 <prvHeapInit+0xb4>)
 80053f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053f2:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <prvHeapInit+0xb4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053fa:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <prvHeapInit+0xb4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005410:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <prvHeapInit+0xb4>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4a0a      	ldr	r2, [pc, #40]	@ (8005448 <prvHeapInit+0xb8>)
 800541e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4a09      	ldr	r2, [pc, #36]	@ (800544c <prvHeapInit+0xbc>)
 8005426:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005428:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <prvHeapInit+0xc0>)
 800542a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800542e:	601a      	str	r2, [r3, #0]
}
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	20000e58 	.word	0x20000e58
 8005440:	20004a58 	.word	0x20004a58
 8005444:	20004a60 	.word	0x20004a60
 8005448:	20004a68 	.word	0x20004a68
 800544c:	20004a64 	.word	0x20004a64
 8005450:	20004a74 	.word	0x20004a74

08005454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800545c:	4b28      	ldr	r3, [pc, #160]	@ (8005500 <prvInsertBlockIntoFreeList+0xac>)
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e002      	b.n	8005468 <prvInsertBlockIntoFreeList+0x14>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d8f7      	bhi.n	8005462 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4413      	add	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d108      	bne.n	8005496 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	441a      	add	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d118      	bne.n	80054dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <prvInsertBlockIntoFreeList+0xb0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d00d      	beq.n	80054d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	441a      	add	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e008      	b.n	80054e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005504 <prvInsertBlockIntoFreeList+0xb0>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e003      	b.n	80054e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d002      	beq.n	80054f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20004a58 	.word	0x20004a58
 8005504:	20004a60 	.word	0x20004a60

08005508 <std>:
 8005508:	2300      	movs	r3, #0
 800550a:	b510      	push	{r4, lr}
 800550c:	4604      	mov	r4, r0
 800550e:	e9c0 3300 	strd	r3, r3, [r0]
 8005512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005516:	6083      	str	r3, [r0, #8]
 8005518:	8181      	strh	r1, [r0, #12]
 800551a:	6643      	str	r3, [r0, #100]	@ 0x64
 800551c:	81c2      	strh	r2, [r0, #14]
 800551e:	6183      	str	r3, [r0, #24]
 8005520:	4619      	mov	r1, r3
 8005522:	2208      	movs	r2, #8
 8005524:	305c      	adds	r0, #92	@ 0x5c
 8005526:	f000 f906 	bl	8005736 <memset>
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <std+0x58>)
 800552c:	6263      	str	r3, [r4, #36]	@ 0x24
 800552e:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <std+0x5c>)
 8005530:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <std+0x60>)
 8005534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <std+0x64>)
 8005538:	6323      	str	r3, [r4, #48]	@ 0x30
 800553a:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <std+0x68>)
 800553c:	6224      	str	r4, [r4, #32]
 800553e:	429c      	cmp	r4, r3
 8005540:	d006      	beq.n	8005550 <std+0x48>
 8005542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005546:	4294      	cmp	r4, r2
 8005548:	d002      	beq.n	8005550 <std+0x48>
 800554a:	33d0      	adds	r3, #208	@ 0xd0
 800554c:	429c      	cmp	r4, r3
 800554e:	d105      	bne.n	800555c <std+0x54>
 8005550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005558:	f000 b966 	b.w	8005828 <__retarget_lock_init_recursive>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	080056b1 	.word	0x080056b1
 8005564:	080056d3 	.word	0x080056d3
 8005568:	0800570b 	.word	0x0800570b
 800556c:	0800572f 	.word	0x0800572f
 8005570:	20004a78 	.word	0x20004a78

08005574 <stdio_exit_handler>:
 8005574:	4a02      	ldr	r2, [pc, #8]	@ (8005580 <stdio_exit_handler+0xc>)
 8005576:	4903      	ldr	r1, [pc, #12]	@ (8005584 <stdio_exit_handler+0x10>)
 8005578:	4803      	ldr	r0, [pc, #12]	@ (8005588 <stdio_exit_handler+0x14>)
 800557a:	f000 b869 	b.w	8005650 <_fwalk_sglue>
 800557e:	bf00      	nop
 8005580:	20000010 	.word	0x20000010
 8005584:	080060e5 	.word	0x080060e5
 8005588:	20000020 	.word	0x20000020

0800558c <cleanup_stdio>:
 800558c:	6841      	ldr	r1, [r0, #4]
 800558e:	4b0c      	ldr	r3, [pc, #48]	@ (80055c0 <cleanup_stdio+0x34>)
 8005590:	4299      	cmp	r1, r3
 8005592:	b510      	push	{r4, lr}
 8005594:	4604      	mov	r4, r0
 8005596:	d001      	beq.n	800559c <cleanup_stdio+0x10>
 8005598:	f000 fda4 	bl	80060e4 <_fflush_r>
 800559c:	68a1      	ldr	r1, [r4, #8]
 800559e:	4b09      	ldr	r3, [pc, #36]	@ (80055c4 <cleanup_stdio+0x38>)
 80055a0:	4299      	cmp	r1, r3
 80055a2:	d002      	beq.n	80055aa <cleanup_stdio+0x1e>
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 fd9d 	bl	80060e4 <_fflush_r>
 80055aa:	68e1      	ldr	r1, [r4, #12]
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <cleanup_stdio+0x3c>)
 80055ae:	4299      	cmp	r1, r3
 80055b0:	d004      	beq.n	80055bc <cleanup_stdio+0x30>
 80055b2:	4620      	mov	r0, r4
 80055b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b8:	f000 bd94 	b.w	80060e4 <_fflush_r>
 80055bc:	bd10      	pop	{r4, pc}
 80055be:	bf00      	nop
 80055c0:	20004a78 	.word	0x20004a78
 80055c4:	20004ae0 	.word	0x20004ae0
 80055c8:	20004b48 	.word	0x20004b48

080055cc <global_stdio_init.part.0>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4b0b      	ldr	r3, [pc, #44]	@ (80055fc <global_stdio_init.part.0+0x30>)
 80055d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005600 <global_stdio_init.part.0+0x34>)
 80055d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005604 <global_stdio_init.part.0+0x38>)
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	4620      	mov	r0, r4
 80055d8:	2200      	movs	r2, #0
 80055da:	2104      	movs	r1, #4
 80055dc:	f7ff ff94 	bl	8005508 <std>
 80055e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055e4:	2201      	movs	r2, #1
 80055e6:	2109      	movs	r1, #9
 80055e8:	f7ff ff8e 	bl	8005508 <std>
 80055ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055f0:	2202      	movs	r2, #2
 80055f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f6:	2112      	movs	r1, #18
 80055f8:	f7ff bf86 	b.w	8005508 <std>
 80055fc:	20004bb0 	.word	0x20004bb0
 8005600:	20004a78 	.word	0x20004a78
 8005604:	08005575 	.word	0x08005575

08005608 <__sfp_lock_acquire>:
 8005608:	4801      	ldr	r0, [pc, #4]	@ (8005610 <__sfp_lock_acquire+0x8>)
 800560a:	f000 b90e 	b.w	800582a <__retarget_lock_acquire_recursive>
 800560e:	bf00      	nop
 8005610:	20004bb9 	.word	0x20004bb9

08005614 <__sfp_lock_release>:
 8005614:	4801      	ldr	r0, [pc, #4]	@ (800561c <__sfp_lock_release+0x8>)
 8005616:	f000 b909 	b.w	800582c <__retarget_lock_release_recursive>
 800561a:	bf00      	nop
 800561c:	20004bb9 	.word	0x20004bb9

08005620 <__sinit>:
 8005620:	b510      	push	{r4, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	f7ff fff0 	bl	8005608 <__sfp_lock_acquire>
 8005628:	6a23      	ldr	r3, [r4, #32]
 800562a:	b11b      	cbz	r3, 8005634 <__sinit+0x14>
 800562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005630:	f7ff bff0 	b.w	8005614 <__sfp_lock_release>
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <__sinit+0x28>)
 8005636:	6223      	str	r3, [r4, #32]
 8005638:	4b04      	ldr	r3, [pc, #16]	@ (800564c <__sinit+0x2c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f5      	bne.n	800562c <__sinit+0xc>
 8005640:	f7ff ffc4 	bl	80055cc <global_stdio_init.part.0>
 8005644:	e7f2      	b.n	800562c <__sinit+0xc>
 8005646:	bf00      	nop
 8005648:	0800558d 	.word	0x0800558d
 800564c:	20004bb0 	.word	0x20004bb0

08005650 <_fwalk_sglue>:
 8005650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005654:	4607      	mov	r7, r0
 8005656:	4688      	mov	r8, r1
 8005658:	4614      	mov	r4, r2
 800565a:	2600      	movs	r6, #0
 800565c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005660:	f1b9 0901 	subs.w	r9, r9, #1
 8005664:	d505      	bpl.n	8005672 <_fwalk_sglue+0x22>
 8005666:	6824      	ldr	r4, [r4, #0]
 8005668:	2c00      	cmp	r4, #0
 800566a:	d1f7      	bne.n	800565c <_fwalk_sglue+0xc>
 800566c:	4630      	mov	r0, r6
 800566e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d907      	bls.n	8005688 <_fwalk_sglue+0x38>
 8005678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800567c:	3301      	adds	r3, #1
 800567e:	d003      	beq.n	8005688 <_fwalk_sglue+0x38>
 8005680:	4629      	mov	r1, r5
 8005682:	4638      	mov	r0, r7
 8005684:	47c0      	blx	r8
 8005686:	4306      	orrs	r6, r0
 8005688:	3568      	adds	r5, #104	@ 0x68
 800568a:	e7e9      	b.n	8005660 <_fwalk_sglue+0x10>

0800568c <iprintf>:
 800568c:	b40f      	push	{r0, r1, r2, r3}
 800568e:	b507      	push	{r0, r1, r2, lr}
 8005690:	4906      	ldr	r1, [pc, #24]	@ (80056ac <iprintf+0x20>)
 8005692:	ab04      	add	r3, sp, #16
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	f853 2b04 	ldr.w	r2, [r3], #4
 800569a:	6881      	ldr	r1, [r0, #8]
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	f000 f9f7 	bl	8005a90 <_vfiprintf_r>
 80056a2:	b003      	add	sp, #12
 80056a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056a8:	b004      	add	sp, #16
 80056aa:	4770      	bx	lr
 80056ac:	2000001c 	.word	0x2000001c

080056b0 <__sread>:
 80056b0:	b510      	push	{r4, lr}
 80056b2:	460c      	mov	r4, r1
 80056b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b8:	f000 f868 	bl	800578c <_read_r>
 80056bc:	2800      	cmp	r0, #0
 80056be:	bfab      	itete	ge
 80056c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056c2:	89a3      	ldrhlt	r3, [r4, #12]
 80056c4:	181b      	addge	r3, r3, r0
 80056c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056ca:	bfac      	ite	ge
 80056cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056ce:	81a3      	strhlt	r3, [r4, #12]
 80056d0:	bd10      	pop	{r4, pc}

080056d2 <__swrite>:
 80056d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d6:	461f      	mov	r7, r3
 80056d8:	898b      	ldrh	r3, [r1, #12]
 80056da:	05db      	lsls	r3, r3, #23
 80056dc:	4605      	mov	r5, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	4616      	mov	r6, r2
 80056e2:	d505      	bpl.n	80056f0 <__swrite+0x1e>
 80056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e8:	2302      	movs	r3, #2
 80056ea:	2200      	movs	r2, #0
 80056ec:	f000 f83c 	bl	8005768 <_lseek_r>
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	4632      	mov	r2, r6
 80056fe:	463b      	mov	r3, r7
 8005700:	4628      	mov	r0, r5
 8005702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	f000 b853 	b.w	80057b0 <_write_r>

0800570a <__sseek>:
 800570a:	b510      	push	{r4, lr}
 800570c:	460c      	mov	r4, r1
 800570e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005712:	f000 f829 	bl	8005768 <_lseek_r>
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	bf15      	itete	ne
 800571c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800571e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005726:	81a3      	strheq	r3, [r4, #12]
 8005728:	bf18      	it	ne
 800572a:	81a3      	strhne	r3, [r4, #12]
 800572c:	bd10      	pop	{r4, pc}

0800572e <__sclose>:
 800572e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005732:	f000 b809 	b.w	8005748 <_close_r>

08005736 <memset>:
 8005736:	4402      	add	r2, r0
 8005738:	4603      	mov	r3, r0
 800573a:	4293      	cmp	r3, r2
 800573c:	d100      	bne.n	8005740 <memset+0xa>
 800573e:	4770      	bx	lr
 8005740:	f803 1b01 	strb.w	r1, [r3], #1
 8005744:	e7f9      	b.n	800573a <memset+0x4>
	...

08005748 <_close_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d06      	ldr	r5, [pc, #24]	@ (8005764 <_close_r+0x1c>)
 800574c:	2300      	movs	r3, #0
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	f7fb fa01 	bl	8000b5a <_close>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_close_r+0x1a>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_close_r+0x1a>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20004bb4 	.word	0x20004bb4

08005768 <_lseek_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d07      	ldr	r5, [pc, #28]	@ (8005788 <_lseek_r+0x20>)
 800576c:	4604      	mov	r4, r0
 800576e:	4608      	mov	r0, r1
 8005770:	4611      	mov	r1, r2
 8005772:	2200      	movs	r2, #0
 8005774:	602a      	str	r2, [r5, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f7fb fa16 	bl	8000ba8 <_lseek>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_lseek_r+0x1e>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_lseek_r+0x1e>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	20004bb4 	.word	0x20004bb4

0800578c <_read_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d07      	ldr	r5, [pc, #28]	@ (80057ac <_read_r+0x20>)
 8005790:	4604      	mov	r4, r0
 8005792:	4608      	mov	r0, r1
 8005794:	4611      	mov	r1, r2
 8005796:	2200      	movs	r2, #0
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f7fb f9a4 	bl	8000ae8 <_read>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_read_r+0x1e>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_read_r+0x1e>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20004bb4 	.word	0x20004bb4

080057b0 <_write_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d07      	ldr	r5, [pc, #28]	@ (80057d0 <_write_r+0x20>)
 80057b4:	4604      	mov	r4, r0
 80057b6:	4608      	mov	r0, r1
 80057b8:	4611      	mov	r1, r2
 80057ba:	2200      	movs	r2, #0
 80057bc:	602a      	str	r2, [r5, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7fb f9af 	bl	8000b22 <_write>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_write_r+0x1e>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_write_r+0x1e>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	20004bb4 	.word	0x20004bb4

080057d4 <__errno>:
 80057d4:	4b01      	ldr	r3, [pc, #4]	@ (80057dc <__errno+0x8>)
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	2000001c 	.word	0x2000001c

080057e0 <__libc_init_array>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005818 <__libc_init_array+0x38>)
 80057e4:	4c0d      	ldr	r4, [pc, #52]	@ (800581c <__libc_init_array+0x3c>)
 80057e6:	1b64      	subs	r4, r4, r5
 80057e8:	10a4      	asrs	r4, r4, #2
 80057ea:	2600      	movs	r6, #0
 80057ec:	42a6      	cmp	r6, r4
 80057ee:	d109      	bne.n	8005804 <__libc_init_array+0x24>
 80057f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005820 <__libc_init_array+0x40>)
 80057f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005824 <__libc_init_array+0x44>)
 80057f4:	f000 fdc6 	bl	8006384 <_init>
 80057f8:	1b64      	subs	r4, r4, r5
 80057fa:	10a4      	asrs	r4, r4, #2
 80057fc:	2600      	movs	r6, #0
 80057fe:	42a6      	cmp	r6, r4
 8005800:	d105      	bne.n	800580e <__libc_init_array+0x2e>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	f855 3b04 	ldr.w	r3, [r5], #4
 8005808:	4798      	blx	r3
 800580a:	3601      	adds	r6, #1
 800580c:	e7ee      	b.n	80057ec <__libc_init_array+0xc>
 800580e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005812:	4798      	blx	r3
 8005814:	3601      	adds	r6, #1
 8005816:	e7f2      	b.n	80057fe <__libc_init_array+0x1e>
 8005818:	0800645c 	.word	0x0800645c
 800581c:	0800645c 	.word	0x0800645c
 8005820:	0800645c 	.word	0x0800645c
 8005824:	08006460 	.word	0x08006460

08005828 <__retarget_lock_init_recursive>:
 8005828:	4770      	bx	lr

0800582a <__retarget_lock_acquire_recursive>:
 800582a:	4770      	bx	lr

0800582c <__retarget_lock_release_recursive>:
 800582c:	4770      	bx	lr

0800582e <memcpy>:
 800582e:	440a      	add	r2, r1
 8005830:	4291      	cmp	r1, r2
 8005832:	f100 33ff 	add.w	r3, r0, #4294967295
 8005836:	d100      	bne.n	800583a <memcpy+0xc>
 8005838:	4770      	bx	lr
 800583a:	b510      	push	{r4, lr}
 800583c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005840:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005844:	4291      	cmp	r1, r2
 8005846:	d1f9      	bne.n	800583c <memcpy+0xe>
 8005848:	bd10      	pop	{r4, pc}
	...

0800584c <_free_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4605      	mov	r5, r0
 8005850:	2900      	cmp	r1, #0
 8005852:	d041      	beq.n	80058d8 <_free_r+0x8c>
 8005854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005858:	1f0c      	subs	r4, r1, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	bfb8      	it	lt
 800585e:	18e4      	addlt	r4, r4, r3
 8005860:	f000 f8e0 	bl	8005a24 <__malloc_lock>
 8005864:	4a1d      	ldr	r2, [pc, #116]	@ (80058dc <_free_r+0x90>)
 8005866:	6813      	ldr	r3, [r2, #0]
 8005868:	b933      	cbnz	r3, 8005878 <_free_r+0x2c>
 800586a:	6063      	str	r3, [r4, #4]
 800586c:	6014      	str	r4, [r2, #0]
 800586e:	4628      	mov	r0, r5
 8005870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005874:	f000 b8dc 	b.w	8005a30 <__malloc_unlock>
 8005878:	42a3      	cmp	r3, r4
 800587a:	d908      	bls.n	800588e <_free_r+0x42>
 800587c:	6820      	ldr	r0, [r4, #0]
 800587e:	1821      	adds	r1, r4, r0
 8005880:	428b      	cmp	r3, r1
 8005882:	bf01      	itttt	eq
 8005884:	6819      	ldreq	r1, [r3, #0]
 8005886:	685b      	ldreq	r3, [r3, #4]
 8005888:	1809      	addeq	r1, r1, r0
 800588a:	6021      	streq	r1, [r4, #0]
 800588c:	e7ed      	b.n	800586a <_free_r+0x1e>
 800588e:	461a      	mov	r2, r3
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	b10b      	cbz	r3, 8005898 <_free_r+0x4c>
 8005894:	42a3      	cmp	r3, r4
 8005896:	d9fa      	bls.n	800588e <_free_r+0x42>
 8005898:	6811      	ldr	r1, [r2, #0]
 800589a:	1850      	adds	r0, r2, r1
 800589c:	42a0      	cmp	r0, r4
 800589e:	d10b      	bne.n	80058b8 <_free_r+0x6c>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	4401      	add	r1, r0
 80058a4:	1850      	adds	r0, r2, r1
 80058a6:	4283      	cmp	r3, r0
 80058a8:	6011      	str	r1, [r2, #0]
 80058aa:	d1e0      	bne.n	800586e <_free_r+0x22>
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	6053      	str	r3, [r2, #4]
 80058b2:	4408      	add	r0, r1
 80058b4:	6010      	str	r0, [r2, #0]
 80058b6:	e7da      	b.n	800586e <_free_r+0x22>
 80058b8:	d902      	bls.n	80058c0 <_free_r+0x74>
 80058ba:	230c      	movs	r3, #12
 80058bc:	602b      	str	r3, [r5, #0]
 80058be:	e7d6      	b.n	800586e <_free_r+0x22>
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	1821      	adds	r1, r4, r0
 80058c4:	428b      	cmp	r3, r1
 80058c6:	bf04      	itt	eq
 80058c8:	6819      	ldreq	r1, [r3, #0]
 80058ca:	685b      	ldreq	r3, [r3, #4]
 80058cc:	6063      	str	r3, [r4, #4]
 80058ce:	bf04      	itt	eq
 80058d0:	1809      	addeq	r1, r1, r0
 80058d2:	6021      	streq	r1, [r4, #0]
 80058d4:	6054      	str	r4, [r2, #4]
 80058d6:	e7ca      	b.n	800586e <_free_r+0x22>
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
 80058da:	bf00      	nop
 80058dc:	20004bc0 	.word	0x20004bc0

080058e0 <sbrk_aligned>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	4e0f      	ldr	r6, [pc, #60]	@ (8005920 <sbrk_aligned+0x40>)
 80058e4:	460c      	mov	r4, r1
 80058e6:	6831      	ldr	r1, [r6, #0]
 80058e8:	4605      	mov	r5, r0
 80058ea:	b911      	cbnz	r1, 80058f2 <sbrk_aligned+0x12>
 80058ec:	f000 fcb6 	bl	800625c <_sbrk_r>
 80058f0:	6030      	str	r0, [r6, #0]
 80058f2:	4621      	mov	r1, r4
 80058f4:	4628      	mov	r0, r5
 80058f6:	f000 fcb1 	bl	800625c <_sbrk_r>
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	d103      	bne.n	8005906 <sbrk_aligned+0x26>
 80058fe:	f04f 34ff 	mov.w	r4, #4294967295
 8005902:	4620      	mov	r0, r4
 8005904:	bd70      	pop	{r4, r5, r6, pc}
 8005906:	1cc4      	adds	r4, r0, #3
 8005908:	f024 0403 	bic.w	r4, r4, #3
 800590c:	42a0      	cmp	r0, r4
 800590e:	d0f8      	beq.n	8005902 <sbrk_aligned+0x22>
 8005910:	1a21      	subs	r1, r4, r0
 8005912:	4628      	mov	r0, r5
 8005914:	f000 fca2 	bl	800625c <_sbrk_r>
 8005918:	3001      	adds	r0, #1
 800591a:	d1f2      	bne.n	8005902 <sbrk_aligned+0x22>
 800591c:	e7ef      	b.n	80058fe <sbrk_aligned+0x1e>
 800591e:	bf00      	nop
 8005920:	20004bbc 	.word	0x20004bbc

08005924 <_malloc_r>:
 8005924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005928:	1ccd      	adds	r5, r1, #3
 800592a:	f025 0503 	bic.w	r5, r5, #3
 800592e:	3508      	adds	r5, #8
 8005930:	2d0c      	cmp	r5, #12
 8005932:	bf38      	it	cc
 8005934:	250c      	movcc	r5, #12
 8005936:	2d00      	cmp	r5, #0
 8005938:	4606      	mov	r6, r0
 800593a:	db01      	blt.n	8005940 <_malloc_r+0x1c>
 800593c:	42a9      	cmp	r1, r5
 800593e:	d904      	bls.n	800594a <_malloc_r+0x26>
 8005940:	230c      	movs	r3, #12
 8005942:	6033      	str	r3, [r6, #0]
 8005944:	2000      	movs	r0, #0
 8005946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800594a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a20 <_malloc_r+0xfc>
 800594e:	f000 f869 	bl	8005a24 <__malloc_lock>
 8005952:	f8d8 3000 	ldr.w	r3, [r8]
 8005956:	461c      	mov	r4, r3
 8005958:	bb44      	cbnz	r4, 80059ac <_malloc_r+0x88>
 800595a:	4629      	mov	r1, r5
 800595c:	4630      	mov	r0, r6
 800595e:	f7ff ffbf 	bl	80058e0 <sbrk_aligned>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	4604      	mov	r4, r0
 8005966:	d158      	bne.n	8005a1a <_malloc_r+0xf6>
 8005968:	f8d8 4000 	ldr.w	r4, [r8]
 800596c:	4627      	mov	r7, r4
 800596e:	2f00      	cmp	r7, #0
 8005970:	d143      	bne.n	80059fa <_malloc_r+0xd6>
 8005972:	2c00      	cmp	r4, #0
 8005974:	d04b      	beq.n	8005a0e <_malloc_r+0xea>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	4639      	mov	r1, r7
 800597a:	4630      	mov	r0, r6
 800597c:	eb04 0903 	add.w	r9, r4, r3
 8005980:	f000 fc6c 	bl	800625c <_sbrk_r>
 8005984:	4581      	cmp	r9, r0
 8005986:	d142      	bne.n	8005a0e <_malloc_r+0xea>
 8005988:	6821      	ldr	r1, [r4, #0]
 800598a:	1a6d      	subs	r5, r5, r1
 800598c:	4629      	mov	r1, r5
 800598e:	4630      	mov	r0, r6
 8005990:	f7ff ffa6 	bl	80058e0 <sbrk_aligned>
 8005994:	3001      	adds	r0, #1
 8005996:	d03a      	beq.n	8005a0e <_malloc_r+0xea>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	442b      	add	r3, r5
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	f8d8 3000 	ldr.w	r3, [r8]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	bb62      	cbnz	r2, 8005a00 <_malloc_r+0xdc>
 80059a6:	f8c8 7000 	str.w	r7, [r8]
 80059aa:	e00f      	b.n	80059cc <_malloc_r+0xa8>
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	1b52      	subs	r2, r2, r5
 80059b0:	d420      	bmi.n	80059f4 <_malloc_r+0xd0>
 80059b2:	2a0b      	cmp	r2, #11
 80059b4:	d917      	bls.n	80059e6 <_malloc_r+0xc2>
 80059b6:	1961      	adds	r1, r4, r5
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	6025      	str	r5, [r4, #0]
 80059bc:	bf18      	it	ne
 80059be:	6059      	strne	r1, [r3, #4]
 80059c0:	6863      	ldr	r3, [r4, #4]
 80059c2:	bf08      	it	eq
 80059c4:	f8c8 1000 	streq.w	r1, [r8]
 80059c8:	5162      	str	r2, [r4, r5]
 80059ca:	604b      	str	r3, [r1, #4]
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 f82f 	bl	8005a30 <__malloc_unlock>
 80059d2:	f104 000b 	add.w	r0, r4, #11
 80059d6:	1d23      	adds	r3, r4, #4
 80059d8:	f020 0007 	bic.w	r0, r0, #7
 80059dc:	1ac2      	subs	r2, r0, r3
 80059de:	bf1c      	itt	ne
 80059e0:	1a1b      	subne	r3, r3, r0
 80059e2:	50a3      	strne	r3, [r4, r2]
 80059e4:	e7af      	b.n	8005946 <_malloc_r+0x22>
 80059e6:	6862      	ldr	r2, [r4, #4]
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	bf0c      	ite	eq
 80059ec:	f8c8 2000 	streq.w	r2, [r8]
 80059f0:	605a      	strne	r2, [r3, #4]
 80059f2:	e7eb      	b.n	80059cc <_malloc_r+0xa8>
 80059f4:	4623      	mov	r3, r4
 80059f6:	6864      	ldr	r4, [r4, #4]
 80059f8:	e7ae      	b.n	8005958 <_malloc_r+0x34>
 80059fa:	463c      	mov	r4, r7
 80059fc:	687f      	ldr	r7, [r7, #4]
 80059fe:	e7b6      	b.n	800596e <_malloc_r+0x4a>
 8005a00:	461a      	mov	r2, r3
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	d1fb      	bne.n	8005a00 <_malloc_r+0xdc>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	6053      	str	r3, [r2, #4]
 8005a0c:	e7de      	b.n	80059cc <_malloc_r+0xa8>
 8005a0e:	230c      	movs	r3, #12
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	4630      	mov	r0, r6
 8005a14:	f000 f80c 	bl	8005a30 <__malloc_unlock>
 8005a18:	e794      	b.n	8005944 <_malloc_r+0x20>
 8005a1a:	6005      	str	r5, [r0, #0]
 8005a1c:	e7d6      	b.n	80059cc <_malloc_r+0xa8>
 8005a1e:	bf00      	nop
 8005a20:	20004bc0 	.word	0x20004bc0

08005a24 <__malloc_lock>:
 8005a24:	4801      	ldr	r0, [pc, #4]	@ (8005a2c <__malloc_lock+0x8>)
 8005a26:	f7ff bf00 	b.w	800582a <__retarget_lock_acquire_recursive>
 8005a2a:	bf00      	nop
 8005a2c:	20004bb8 	.word	0x20004bb8

08005a30 <__malloc_unlock>:
 8005a30:	4801      	ldr	r0, [pc, #4]	@ (8005a38 <__malloc_unlock+0x8>)
 8005a32:	f7ff befb 	b.w	800582c <__retarget_lock_release_recursive>
 8005a36:	bf00      	nop
 8005a38:	20004bb8 	.word	0x20004bb8

08005a3c <__sfputc_r>:
 8005a3c:	6893      	ldr	r3, [r2, #8]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	b410      	push	{r4}
 8005a44:	6093      	str	r3, [r2, #8]
 8005a46:	da08      	bge.n	8005a5a <__sfputc_r+0x1e>
 8005a48:	6994      	ldr	r4, [r2, #24]
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	db01      	blt.n	8005a52 <__sfputc_r+0x16>
 8005a4e:	290a      	cmp	r1, #10
 8005a50:	d103      	bne.n	8005a5a <__sfputc_r+0x1e>
 8005a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a56:	f000 bb6d 	b.w	8006134 <__swbuf_r>
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	1c58      	adds	r0, r3, #1
 8005a5e:	6010      	str	r0, [r2, #0]
 8005a60:	7019      	strb	r1, [r3, #0]
 8005a62:	4608      	mov	r0, r1
 8005a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <__sfputs_r>:
 8005a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	460f      	mov	r7, r1
 8005a70:	4614      	mov	r4, r2
 8005a72:	18d5      	adds	r5, r2, r3
 8005a74:	42ac      	cmp	r4, r5
 8005a76:	d101      	bne.n	8005a7c <__sfputs_r+0x12>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e007      	b.n	8005a8c <__sfputs_r+0x22>
 8005a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a80:	463a      	mov	r2, r7
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7ff ffda 	bl	8005a3c <__sfputc_r>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d1f3      	bne.n	8005a74 <__sfputs_r+0xa>
 8005a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a90 <_vfiprintf_r>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	460d      	mov	r5, r1
 8005a96:	b09d      	sub	sp, #116	@ 0x74
 8005a98:	4614      	mov	r4, r2
 8005a9a:	4698      	mov	r8, r3
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	b118      	cbz	r0, 8005aa8 <_vfiprintf_r+0x18>
 8005aa0:	6a03      	ldr	r3, [r0, #32]
 8005aa2:	b90b      	cbnz	r3, 8005aa8 <_vfiprintf_r+0x18>
 8005aa4:	f7ff fdbc 	bl	8005620 <__sinit>
 8005aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aaa:	07d9      	lsls	r1, r3, #31
 8005aac:	d405      	bmi.n	8005aba <_vfiprintf_r+0x2a>
 8005aae:	89ab      	ldrh	r3, [r5, #12]
 8005ab0:	059a      	lsls	r2, r3, #22
 8005ab2:	d402      	bmi.n	8005aba <_vfiprintf_r+0x2a>
 8005ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ab6:	f7ff feb8 	bl	800582a <__retarget_lock_acquire_recursive>
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	d501      	bpl.n	8005ac4 <_vfiprintf_r+0x34>
 8005ac0:	692b      	ldr	r3, [r5, #16]
 8005ac2:	b99b      	cbnz	r3, 8005aec <_vfiprintf_r+0x5c>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f000 fb72 	bl	80061b0 <__swsetup_r>
 8005acc:	b170      	cbz	r0, 8005aec <_vfiprintf_r+0x5c>
 8005ace:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ad0:	07dc      	lsls	r4, r3, #31
 8005ad2:	d504      	bpl.n	8005ade <_vfiprintf_r+0x4e>
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad8:	b01d      	add	sp, #116	@ 0x74
 8005ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	0598      	lsls	r0, r3, #22
 8005ae2:	d4f7      	bmi.n	8005ad4 <_vfiprintf_r+0x44>
 8005ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ae6:	f7ff fea1 	bl	800582c <__retarget_lock_release_recursive>
 8005aea:	e7f3      	b.n	8005ad4 <_vfiprintf_r+0x44>
 8005aec:	2300      	movs	r3, #0
 8005aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af0:	2320      	movs	r3, #32
 8005af2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005afa:	2330      	movs	r3, #48	@ 0x30
 8005afc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005cac <_vfiprintf_r+0x21c>
 8005b00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b04:	f04f 0901 	mov.w	r9, #1
 8005b08:	4623      	mov	r3, r4
 8005b0a:	469a      	mov	sl, r3
 8005b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b10:	b10a      	cbz	r2, 8005b16 <_vfiprintf_r+0x86>
 8005b12:	2a25      	cmp	r2, #37	@ 0x25
 8005b14:	d1f9      	bne.n	8005b0a <_vfiprintf_r+0x7a>
 8005b16:	ebba 0b04 	subs.w	fp, sl, r4
 8005b1a:	d00b      	beq.n	8005b34 <_vfiprintf_r+0xa4>
 8005b1c:	465b      	mov	r3, fp
 8005b1e:	4622      	mov	r2, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7ff ffa1 	bl	8005a6a <__sfputs_r>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f000 80a7 	beq.w	8005c7c <_vfiprintf_r+0x1ec>
 8005b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b30:	445a      	add	r2, fp
 8005b32:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b34:	f89a 3000 	ldrb.w	r3, [sl]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 809f 	beq.w	8005c7c <_vfiprintf_r+0x1ec>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b48:	f10a 0a01 	add.w	sl, sl, #1
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	9307      	str	r3, [sp, #28]
 8005b50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b54:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b56:	4654      	mov	r4, sl
 8005b58:	2205      	movs	r2, #5
 8005b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5e:	4853      	ldr	r0, [pc, #332]	@ (8005cac <_vfiprintf_r+0x21c>)
 8005b60:	f7fa fb56 	bl	8000210 <memchr>
 8005b64:	9a04      	ldr	r2, [sp, #16]
 8005b66:	b9d8      	cbnz	r0, 8005ba0 <_vfiprintf_r+0x110>
 8005b68:	06d1      	lsls	r1, r2, #27
 8005b6a:	bf44      	itt	mi
 8005b6c:	2320      	movmi	r3, #32
 8005b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b72:	0713      	lsls	r3, r2, #28
 8005b74:	bf44      	itt	mi
 8005b76:	232b      	movmi	r3, #43	@ 0x2b
 8005b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b82:	d015      	beq.n	8005bb0 <_vfiprintf_r+0x120>
 8005b84:	9a07      	ldr	r2, [sp, #28]
 8005b86:	4654      	mov	r4, sl
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f04f 0c0a 	mov.w	ip, #10
 8005b8e:	4621      	mov	r1, r4
 8005b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b94:	3b30      	subs	r3, #48	@ 0x30
 8005b96:	2b09      	cmp	r3, #9
 8005b98:	d94b      	bls.n	8005c32 <_vfiprintf_r+0x1a2>
 8005b9a:	b1b0      	cbz	r0, 8005bca <_vfiprintf_r+0x13a>
 8005b9c:	9207      	str	r2, [sp, #28]
 8005b9e:	e014      	b.n	8005bca <_vfiprintf_r+0x13a>
 8005ba0:	eba0 0308 	sub.w	r3, r0, r8
 8005ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	46a2      	mov	sl, r4
 8005bae:	e7d2      	b.n	8005b56 <_vfiprintf_r+0xc6>
 8005bb0:	9b03      	ldr	r3, [sp, #12]
 8005bb2:	1d19      	adds	r1, r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	9103      	str	r1, [sp, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bfbb      	ittet	lt
 8005bbc:	425b      	neglt	r3, r3
 8005bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8005bc2:	9307      	strge	r3, [sp, #28]
 8005bc4:	9307      	strlt	r3, [sp, #28]
 8005bc6:	bfb8      	it	lt
 8005bc8:	9204      	strlt	r2, [sp, #16]
 8005bca:	7823      	ldrb	r3, [r4, #0]
 8005bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bce:	d10a      	bne.n	8005be6 <_vfiprintf_r+0x156>
 8005bd0:	7863      	ldrb	r3, [r4, #1]
 8005bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bd4:	d132      	bne.n	8005c3c <_vfiprintf_r+0x1ac>
 8005bd6:	9b03      	ldr	r3, [sp, #12]
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	9203      	str	r2, [sp, #12]
 8005bde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005be2:	3402      	adds	r4, #2
 8005be4:	9305      	str	r3, [sp, #20]
 8005be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005cbc <_vfiprintf_r+0x22c>
 8005bea:	7821      	ldrb	r1, [r4, #0]
 8005bec:	2203      	movs	r2, #3
 8005bee:	4650      	mov	r0, sl
 8005bf0:	f7fa fb0e 	bl	8000210 <memchr>
 8005bf4:	b138      	cbz	r0, 8005c06 <_vfiprintf_r+0x176>
 8005bf6:	9b04      	ldr	r3, [sp, #16]
 8005bf8:	eba0 000a 	sub.w	r0, r0, sl
 8005bfc:	2240      	movs	r2, #64	@ 0x40
 8005bfe:	4082      	lsls	r2, r0
 8005c00:	4313      	orrs	r3, r2
 8005c02:	3401      	adds	r4, #1
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0a:	4829      	ldr	r0, [pc, #164]	@ (8005cb0 <_vfiprintf_r+0x220>)
 8005c0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c10:	2206      	movs	r2, #6
 8005c12:	f7fa fafd 	bl	8000210 <memchr>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d03f      	beq.n	8005c9a <_vfiprintf_r+0x20a>
 8005c1a:	4b26      	ldr	r3, [pc, #152]	@ (8005cb4 <_vfiprintf_r+0x224>)
 8005c1c:	bb1b      	cbnz	r3, 8005c66 <_vfiprintf_r+0x1d6>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	3307      	adds	r3, #7
 8005c22:	f023 0307 	bic.w	r3, r3, #7
 8005c26:	3308      	adds	r3, #8
 8005c28:	9303      	str	r3, [sp, #12]
 8005c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c2c:	443b      	add	r3, r7
 8005c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c30:	e76a      	b.n	8005b08 <_vfiprintf_r+0x78>
 8005c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c36:	460c      	mov	r4, r1
 8005c38:	2001      	movs	r0, #1
 8005c3a:	e7a8      	b.n	8005b8e <_vfiprintf_r+0xfe>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	3401      	adds	r4, #1
 8005c40:	9305      	str	r3, [sp, #20]
 8005c42:	4619      	mov	r1, r3
 8005c44:	f04f 0c0a 	mov.w	ip, #10
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c4e:	3a30      	subs	r2, #48	@ 0x30
 8005c50:	2a09      	cmp	r2, #9
 8005c52:	d903      	bls.n	8005c5c <_vfiprintf_r+0x1cc>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0c6      	beq.n	8005be6 <_vfiprintf_r+0x156>
 8005c58:	9105      	str	r1, [sp, #20]
 8005c5a:	e7c4      	b.n	8005be6 <_vfiprintf_r+0x156>
 8005c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c60:	4604      	mov	r4, r0
 8005c62:	2301      	movs	r3, #1
 8005c64:	e7f0      	b.n	8005c48 <_vfiprintf_r+0x1b8>
 8005c66:	ab03      	add	r3, sp, #12
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4b12      	ldr	r3, [pc, #72]	@ (8005cb8 <_vfiprintf_r+0x228>)
 8005c6e:	a904      	add	r1, sp, #16
 8005c70:	4630      	mov	r0, r6
 8005c72:	f3af 8000 	nop.w
 8005c76:	4607      	mov	r7, r0
 8005c78:	1c78      	adds	r0, r7, #1
 8005c7a:	d1d6      	bne.n	8005c2a <_vfiprintf_r+0x19a>
 8005c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c7e:	07d9      	lsls	r1, r3, #31
 8005c80:	d405      	bmi.n	8005c8e <_vfiprintf_r+0x1fe>
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	059a      	lsls	r2, r3, #22
 8005c86:	d402      	bmi.n	8005c8e <_vfiprintf_r+0x1fe>
 8005c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c8a:	f7ff fdcf 	bl	800582c <__retarget_lock_release_recursive>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	065b      	lsls	r3, r3, #25
 8005c92:	f53f af1f 	bmi.w	8005ad4 <_vfiprintf_r+0x44>
 8005c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c98:	e71e      	b.n	8005ad8 <_vfiprintf_r+0x48>
 8005c9a:	ab03      	add	r3, sp, #12
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	462a      	mov	r2, r5
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <_vfiprintf_r+0x228>)
 8005ca2:	a904      	add	r1, sp, #16
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 f879 	bl	8005d9c <_printf_i>
 8005caa:	e7e4      	b.n	8005c76 <_vfiprintf_r+0x1e6>
 8005cac:	08006420 	.word	0x08006420
 8005cb0:	0800642a 	.word	0x0800642a
 8005cb4:	00000000 	.word	0x00000000
 8005cb8:	08005a6b 	.word	0x08005a6b
 8005cbc:	08006426 	.word	0x08006426

08005cc0 <_printf_common>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	4698      	mov	r8, r3
 8005cc8:	688a      	ldr	r2, [r1, #8]
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bfb8      	it	lt
 8005cd4:	4613      	movlt	r3, r2
 8005cd6:	6033      	str	r3, [r6, #0]
 8005cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cdc:	4607      	mov	r7, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_printf_common+0x26>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0699      	lsls	r1, r3, #26
 8005cea:	bf42      	ittt	mi
 8005cec:	6833      	ldrmi	r3, [r6, #0]
 8005cee:	3302      	addmi	r3, #2
 8005cf0:	6033      	strmi	r3, [r6, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d106      	bne.n	8005d08 <_printf_common+0x48>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	6832      	ldr	r2, [r6, #0]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc26      	bgt.n	8005d56 <_printf_common+0x96>
 8005d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	3b00      	subs	r3, #0
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d42b      	bmi.n	8005d70 <_printf_common+0xb0>
 8005d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c8      	blx	r9
 8005d22:	3001      	adds	r0, #1
 8005d24:	d01e      	beq.n	8005d64 <_printf_common+0xa4>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	f003 0306 	and.w	r3, r3, #6
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	bf02      	ittt	eq
 8005d32:	68e5      	ldreq	r5, [r4, #12]
 8005d34:	6833      	ldreq	r3, [r6, #0]
 8005d36:	1aed      	subeq	r5, r5, r3
 8005d38:	68a3      	ldr	r3, [r4, #8]
 8005d3a:	bf0c      	ite	eq
 8005d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d40:	2500      	movne	r5, #0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	bfc4      	itt	gt
 8005d46:	1a9b      	subgt	r3, r3, r2
 8005d48:	18ed      	addgt	r5, r5, r3
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	341a      	adds	r4, #26
 8005d4e:	42b5      	cmp	r5, r6
 8005d50:	d11a      	bne.n	8005d88 <_printf_common+0xc8>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e008      	b.n	8005d68 <_printf_common+0xa8>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	47c8      	blx	r9
 8005d60:	3001      	adds	r0, #1
 8005d62:	d103      	bne.n	8005d6c <_printf_common+0xac>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7c6      	b.n	8005cfe <_printf_common+0x3e>
 8005d70:	18e1      	adds	r1, r4, r3
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	2030      	movs	r0, #48	@ 0x30
 8005d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d7a:	4422      	add	r2, r4
 8005d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d84:	3302      	adds	r3, #2
 8005d86:	e7c7      	b.n	8005d18 <_printf_common+0x58>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	4638      	mov	r0, r7
 8005d90:	47c8      	blx	r9
 8005d92:	3001      	adds	r0, #1
 8005d94:	d0e6      	beq.n	8005d64 <_printf_common+0xa4>
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7d9      	b.n	8005d4e <_printf_common+0x8e>
	...

08005d9c <_printf_i>:
 8005d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	7e0f      	ldrb	r7, [r1, #24]
 8005da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005da4:	2f78      	cmp	r7, #120	@ 0x78
 8005da6:	4691      	mov	r9, r2
 8005da8:	4680      	mov	r8, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	469a      	mov	sl, r3
 8005dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005db2:	d807      	bhi.n	8005dc4 <_printf_i+0x28>
 8005db4:	2f62      	cmp	r7, #98	@ 0x62
 8005db6:	d80a      	bhi.n	8005dce <_printf_i+0x32>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	f000 80d2 	beq.w	8005f62 <_printf_i+0x1c6>
 8005dbe:	2f58      	cmp	r7, #88	@ 0x58
 8005dc0:	f000 80b9 	beq.w	8005f36 <_printf_i+0x19a>
 8005dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dcc:	e03a      	b.n	8005e44 <_printf_i+0xa8>
 8005dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dd2:	2b15      	cmp	r3, #21
 8005dd4:	d8f6      	bhi.n	8005dc4 <_printf_i+0x28>
 8005dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ddc <_printf_i+0x40>)
 8005dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005dc5 	.word	0x08005dc5
 8005de8:	08005dc5 	.word	0x08005dc5
 8005dec:	08005dc5 	.word	0x08005dc5
 8005df0:	08005dc5 	.word	0x08005dc5
 8005df4:	08005e49 	.word	0x08005e49
 8005df8:	08005dc5 	.word	0x08005dc5
 8005dfc:	08005dc5 	.word	0x08005dc5
 8005e00:	08005dc5 	.word	0x08005dc5
 8005e04:	08005dc5 	.word	0x08005dc5
 8005e08:	08005f49 	.word	0x08005f49
 8005e0c:	08005e73 	.word	0x08005e73
 8005e10:	08005f03 	.word	0x08005f03
 8005e14:	08005dc5 	.word	0x08005dc5
 8005e18:	08005dc5 	.word	0x08005dc5
 8005e1c:	08005f6b 	.word	0x08005f6b
 8005e20:	08005dc5 	.word	0x08005dc5
 8005e24:	08005e73 	.word	0x08005e73
 8005e28:	08005dc5 	.word	0x08005dc5
 8005e2c:	08005dc5 	.word	0x08005dc5
 8005e30:	08005f0b 	.word	0x08005f0b
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6032      	str	r2, [r6, #0]
 8005e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e09d      	b.n	8005f84 <_printf_i+0x1e8>
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	6820      	ldr	r0, [r4, #0]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	6031      	str	r1, [r6, #0]
 8005e50:	0606      	lsls	r6, r0, #24
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0xbc>
 8005e54:	681d      	ldr	r5, [r3, #0]
 8005e56:	e003      	b.n	8005e60 <_printf_i+0xc4>
 8005e58:	0645      	lsls	r5, r0, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0xb8>
 8005e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	da03      	bge.n	8005e6c <_printf_i+0xd0>
 8005e64:	232d      	movs	r3, #45	@ 0x2d
 8005e66:	426d      	negs	r5, r5
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e6c:	4859      	ldr	r0, [pc, #356]	@ (8005fd4 <_printf_i+0x238>)
 8005e6e:	230a      	movs	r3, #10
 8005e70:	e011      	b.n	8005e96 <_printf_i+0xfa>
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	0608      	lsls	r0, r1, #24
 8005e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e7c:	d402      	bmi.n	8005e84 <_printf_i+0xe8>
 8005e7e:	0649      	lsls	r1, r1, #25
 8005e80:	bf48      	it	mi
 8005e82:	b2ad      	uxthmi	r5, r5
 8005e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e86:	4853      	ldr	r0, [pc, #332]	@ (8005fd4 <_printf_i+0x238>)
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	bf14      	ite	ne
 8005e8c:	230a      	movne	r3, #10
 8005e8e:	2308      	moveq	r3, #8
 8005e90:	2100      	movs	r1, #0
 8005e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e96:	6866      	ldr	r6, [r4, #4]
 8005e98:	60a6      	str	r6, [r4, #8]
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	bfa2      	ittt	ge
 8005e9e:	6821      	ldrge	r1, [r4, #0]
 8005ea0:	f021 0104 	bicge.w	r1, r1, #4
 8005ea4:	6021      	strge	r1, [r4, #0]
 8005ea6:	b90d      	cbnz	r5, 8005eac <_printf_i+0x110>
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	d04b      	beq.n	8005f44 <_printf_i+0x1a8>
 8005eac:	4616      	mov	r6, r2
 8005eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8005eb6:	5dc7      	ldrb	r7, [r0, r7]
 8005eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ebc:	462f      	mov	r7, r5
 8005ebe:	42bb      	cmp	r3, r7
 8005ec0:	460d      	mov	r5, r1
 8005ec2:	d9f4      	bls.n	8005eae <_printf_i+0x112>
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d10b      	bne.n	8005ee0 <_printf_i+0x144>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07df      	lsls	r7, r3, #31
 8005ecc:	d508      	bpl.n	8005ee0 <_printf_i+0x144>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	6861      	ldr	r1, [r4, #4]
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	bfde      	ittt	le
 8005ed6:	2330      	movle	r3, #48	@ 0x30
 8005ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ee0:	1b92      	subs	r2, r2, r6
 8005ee2:	6122      	str	r2, [r4, #16]
 8005ee4:	f8cd a000 	str.w	sl, [sp]
 8005ee8:	464b      	mov	r3, r9
 8005eea:	aa03      	add	r2, sp, #12
 8005eec:	4621      	mov	r1, r4
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f7ff fee6 	bl	8005cc0 <_printf_common>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d14a      	bne.n	8005f8e <_printf_i+0x1f2>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	b004      	add	sp, #16
 8005efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	f043 0320 	orr.w	r3, r3, #32
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	4833      	ldr	r0, [pc, #204]	@ (8005fd8 <_printf_i+0x23c>)
 8005f0c:	2778      	movs	r7, #120	@ 0x78
 8005f0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	6831      	ldr	r1, [r6, #0]
 8005f16:	061f      	lsls	r7, r3, #24
 8005f18:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f1c:	d402      	bmi.n	8005f24 <_printf_i+0x188>
 8005f1e:	065f      	lsls	r7, r3, #25
 8005f20:	bf48      	it	mi
 8005f22:	b2ad      	uxthmi	r5, r5
 8005f24:	6031      	str	r1, [r6, #0]
 8005f26:	07d9      	lsls	r1, r3, #31
 8005f28:	bf44      	itt	mi
 8005f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f2e:	6023      	strmi	r3, [r4, #0]
 8005f30:	b11d      	cbz	r5, 8005f3a <_printf_i+0x19e>
 8005f32:	2310      	movs	r3, #16
 8005f34:	e7ac      	b.n	8005e90 <_printf_i+0xf4>
 8005f36:	4827      	ldr	r0, [pc, #156]	@ (8005fd4 <_printf_i+0x238>)
 8005f38:	e7e9      	b.n	8005f0e <_printf_i+0x172>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	f023 0320 	bic.w	r3, r3, #32
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	e7f6      	b.n	8005f32 <_printf_i+0x196>
 8005f44:	4616      	mov	r6, r2
 8005f46:	e7bd      	b.n	8005ec4 <_printf_i+0x128>
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	6825      	ldr	r5, [r4, #0]
 8005f4c:	6961      	ldr	r1, [r4, #20]
 8005f4e:	1d18      	adds	r0, r3, #4
 8005f50:	6030      	str	r0, [r6, #0]
 8005f52:	062e      	lsls	r6, r5, #24
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	d501      	bpl.n	8005f5c <_printf_i+0x1c0>
 8005f58:	6019      	str	r1, [r3, #0]
 8005f5a:	e002      	b.n	8005f62 <_printf_i+0x1c6>
 8005f5c:	0668      	lsls	r0, r5, #25
 8005f5e:	d5fb      	bpl.n	8005f58 <_printf_i+0x1bc>
 8005f60:	8019      	strh	r1, [r3, #0]
 8005f62:	2300      	movs	r3, #0
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	4616      	mov	r6, r2
 8005f68:	e7bc      	b.n	8005ee4 <_printf_i+0x148>
 8005f6a:	6833      	ldr	r3, [r6, #0]
 8005f6c:	1d1a      	adds	r2, r3, #4
 8005f6e:	6032      	str	r2, [r6, #0]
 8005f70:	681e      	ldr	r6, [r3, #0]
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	2100      	movs	r1, #0
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7fa f94a 	bl	8000210 <memchr>
 8005f7c:	b108      	cbz	r0, 8005f82 <_printf_i+0x1e6>
 8005f7e:	1b80      	subs	r0, r0, r6
 8005f80:	6060      	str	r0, [r4, #4]
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	2300      	movs	r3, #0
 8005f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f8c:	e7aa      	b.n	8005ee4 <_printf_i+0x148>
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	4632      	mov	r2, r6
 8005f92:	4649      	mov	r1, r9
 8005f94:	4640      	mov	r0, r8
 8005f96:	47d0      	blx	sl
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d0ad      	beq.n	8005ef8 <_printf_i+0x15c>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	079b      	lsls	r3, r3, #30
 8005fa0:	d413      	bmi.n	8005fca <_printf_i+0x22e>
 8005fa2:	68e0      	ldr	r0, [r4, #12]
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	bfb8      	it	lt
 8005faa:	4618      	movlt	r0, r3
 8005fac:	e7a6      	b.n	8005efc <_printf_i+0x160>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	47d0      	blx	sl
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d09d      	beq.n	8005ef8 <_printf_i+0x15c>
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	68e3      	ldr	r3, [r4, #12]
 8005fc0:	9903      	ldr	r1, [sp, #12]
 8005fc2:	1a5b      	subs	r3, r3, r1
 8005fc4:	42ab      	cmp	r3, r5
 8005fc6:	dcf2      	bgt.n	8005fae <_printf_i+0x212>
 8005fc8:	e7eb      	b.n	8005fa2 <_printf_i+0x206>
 8005fca:	2500      	movs	r5, #0
 8005fcc:	f104 0619 	add.w	r6, r4, #25
 8005fd0:	e7f5      	b.n	8005fbe <_printf_i+0x222>
 8005fd2:	bf00      	nop
 8005fd4:	08006431 	.word	0x08006431
 8005fd8:	08006442 	.word	0x08006442

08005fdc <__sflush_r>:
 8005fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe4:	0716      	lsls	r6, r2, #28
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	460c      	mov	r4, r1
 8005fea:	d454      	bmi.n	8006096 <__sflush_r+0xba>
 8005fec:	684b      	ldr	r3, [r1, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dc02      	bgt.n	8005ff8 <__sflush_r+0x1c>
 8005ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	dd48      	ble.n	800608a <__sflush_r+0xae>
 8005ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	d045      	beq.n	800608a <__sflush_r+0xae>
 8005ffe:	2300      	movs	r3, #0
 8006000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006004:	682f      	ldr	r7, [r5, #0]
 8006006:	6a21      	ldr	r1, [r4, #32]
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	d030      	beq.n	800606e <__sflush_r+0x92>
 800600c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	0759      	lsls	r1, r3, #29
 8006012:	d505      	bpl.n	8006020 <__sflush_r+0x44>
 8006014:	6863      	ldr	r3, [r4, #4]
 8006016:	1ad2      	subs	r2, r2, r3
 8006018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800601a:	b10b      	cbz	r3, 8006020 <__sflush_r+0x44>
 800601c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800601e:	1ad2      	subs	r2, r2, r3
 8006020:	2300      	movs	r3, #0
 8006022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006024:	6a21      	ldr	r1, [r4, #32]
 8006026:	4628      	mov	r0, r5
 8006028:	47b0      	blx	r6
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	d106      	bne.n	800603e <__sflush_r+0x62>
 8006030:	6829      	ldr	r1, [r5, #0]
 8006032:	291d      	cmp	r1, #29
 8006034:	d82b      	bhi.n	800608e <__sflush_r+0xb2>
 8006036:	4a2a      	ldr	r2, [pc, #168]	@ (80060e0 <__sflush_r+0x104>)
 8006038:	410a      	asrs	r2, r1
 800603a:	07d6      	lsls	r6, r2, #31
 800603c:	d427      	bmi.n	800608e <__sflush_r+0xb2>
 800603e:	2200      	movs	r2, #0
 8006040:	6062      	str	r2, [r4, #4]
 8006042:	04d9      	lsls	r1, r3, #19
 8006044:	6922      	ldr	r2, [r4, #16]
 8006046:	6022      	str	r2, [r4, #0]
 8006048:	d504      	bpl.n	8006054 <__sflush_r+0x78>
 800604a:	1c42      	adds	r2, r0, #1
 800604c:	d101      	bne.n	8006052 <__sflush_r+0x76>
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	b903      	cbnz	r3, 8006054 <__sflush_r+0x78>
 8006052:	6560      	str	r0, [r4, #84]	@ 0x54
 8006054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006056:	602f      	str	r7, [r5, #0]
 8006058:	b1b9      	cbz	r1, 800608a <__sflush_r+0xae>
 800605a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800605e:	4299      	cmp	r1, r3
 8006060:	d002      	beq.n	8006068 <__sflush_r+0x8c>
 8006062:	4628      	mov	r0, r5
 8006064:	f7ff fbf2 	bl	800584c <_free_r>
 8006068:	2300      	movs	r3, #0
 800606a:	6363      	str	r3, [r4, #52]	@ 0x34
 800606c:	e00d      	b.n	800608a <__sflush_r+0xae>
 800606e:	2301      	movs	r3, #1
 8006070:	4628      	mov	r0, r5
 8006072:	47b0      	blx	r6
 8006074:	4602      	mov	r2, r0
 8006076:	1c50      	adds	r0, r2, #1
 8006078:	d1c9      	bne.n	800600e <__sflush_r+0x32>
 800607a:	682b      	ldr	r3, [r5, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0c6      	beq.n	800600e <__sflush_r+0x32>
 8006080:	2b1d      	cmp	r3, #29
 8006082:	d001      	beq.n	8006088 <__sflush_r+0xac>
 8006084:	2b16      	cmp	r3, #22
 8006086:	d11e      	bne.n	80060c6 <__sflush_r+0xea>
 8006088:	602f      	str	r7, [r5, #0]
 800608a:	2000      	movs	r0, #0
 800608c:	e022      	b.n	80060d4 <__sflush_r+0xf8>
 800608e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006092:	b21b      	sxth	r3, r3
 8006094:	e01b      	b.n	80060ce <__sflush_r+0xf2>
 8006096:	690f      	ldr	r7, [r1, #16]
 8006098:	2f00      	cmp	r7, #0
 800609a:	d0f6      	beq.n	800608a <__sflush_r+0xae>
 800609c:	0793      	lsls	r3, r2, #30
 800609e:	680e      	ldr	r6, [r1, #0]
 80060a0:	bf08      	it	eq
 80060a2:	694b      	ldreq	r3, [r1, #20]
 80060a4:	600f      	str	r7, [r1, #0]
 80060a6:	bf18      	it	ne
 80060a8:	2300      	movne	r3, #0
 80060aa:	eba6 0807 	sub.w	r8, r6, r7
 80060ae:	608b      	str	r3, [r1, #8]
 80060b0:	f1b8 0f00 	cmp.w	r8, #0
 80060b4:	dde9      	ble.n	800608a <__sflush_r+0xae>
 80060b6:	6a21      	ldr	r1, [r4, #32]
 80060b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80060ba:	4643      	mov	r3, r8
 80060bc:	463a      	mov	r2, r7
 80060be:	4628      	mov	r0, r5
 80060c0:	47b0      	blx	r6
 80060c2:	2800      	cmp	r0, #0
 80060c4:	dc08      	bgt.n	80060d8 <__sflush_r+0xfc>
 80060c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d8:	4407      	add	r7, r0
 80060da:	eba8 0800 	sub.w	r8, r8, r0
 80060de:	e7e7      	b.n	80060b0 <__sflush_r+0xd4>
 80060e0:	dfbffffe 	.word	0xdfbffffe

080060e4 <_fflush_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	4605      	mov	r5, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	b913      	cbnz	r3, 80060f4 <_fflush_r+0x10>
 80060ee:	2500      	movs	r5, #0
 80060f0:	4628      	mov	r0, r5
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	b118      	cbz	r0, 80060fe <_fflush_r+0x1a>
 80060f6:	6a03      	ldr	r3, [r0, #32]
 80060f8:	b90b      	cbnz	r3, 80060fe <_fflush_r+0x1a>
 80060fa:	f7ff fa91 	bl	8005620 <__sinit>
 80060fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f3      	beq.n	80060ee <_fflush_r+0xa>
 8006106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006108:	07d0      	lsls	r0, r2, #31
 800610a:	d404      	bmi.n	8006116 <_fflush_r+0x32>
 800610c:	0599      	lsls	r1, r3, #22
 800610e:	d402      	bmi.n	8006116 <_fflush_r+0x32>
 8006110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006112:	f7ff fb8a 	bl	800582a <__retarget_lock_acquire_recursive>
 8006116:	4628      	mov	r0, r5
 8006118:	4621      	mov	r1, r4
 800611a:	f7ff ff5f 	bl	8005fdc <__sflush_r>
 800611e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006120:	07da      	lsls	r2, r3, #31
 8006122:	4605      	mov	r5, r0
 8006124:	d4e4      	bmi.n	80060f0 <_fflush_r+0xc>
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	059b      	lsls	r3, r3, #22
 800612a:	d4e1      	bmi.n	80060f0 <_fflush_r+0xc>
 800612c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800612e:	f7ff fb7d 	bl	800582c <__retarget_lock_release_recursive>
 8006132:	e7dd      	b.n	80060f0 <_fflush_r+0xc>

08006134 <__swbuf_r>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	460e      	mov	r6, r1
 8006138:	4614      	mov	r4, r2
 800613a:	4605      	mov	r5, r0
 800613c:	b118      	cbz	r0, 8006146 <__swbuf_r+0x12>
 800613e:	6a03      	ldr	r3, [r0, #32]
 8006140:	b90b      	cbnz	r3, 8006146 <__swbuf_r+0x12>
 8006142:	f7ff fa6d 	bl	8005620 <__sinit>
 8006146:	69a3      	ldr	r3, [r4, #24]
 8006148:	60a3      	str	r3, [r4, #8]
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	071a      	lsls	r2, r3, #28
 800614e:	d501      	bpl.n	8006154 <__swbuf_r+0x20>
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	b943      	cbnz	r3, 8006166 <__swbuf_r+0x32>
 8006154:	4621      	mov	r1, r4
 8006156:	4628      	mov	r0, r5
 8006158:	f000 f82a 	bl	80061b0 <__swsetup_r>
 800615c:	b118      	cbz	r0, 8006166 <__swbuf_r+0x32>
 800615e:	f04f 37ff 	mov.w	r7, #4294967295
 8006162:	4638      	mov	r0, r7
 8006164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	6922      	ldr	r2, [r4, #16]
 800616a:	1a98      	subs	r0, r3, r2
 800616c:	6963      	ldr	r3, [r4, #20]
 800616e:	b2f6      	uxtb	r6, r6
 8006170:	4283      	cmp	r3, r0
 8006172:	4637      	mov	r7, r6
 8006174:	dc05      	bgt.n	8006182 <__swbuf_r+0x4e>
 8006176:	4621      	mov	r1, r4
 8006178:	4628      	mov	r0, r5
 800617a:	f7ff ffb3 	bl	80060e4 <_fflush_r>
 800617e:	2800      	cmp	r0, #0
 8006180:	d1ed      	bne.n	800615e <__swbuf_r+0x2a>
 8006182:	68a3      	ldr	r3, [r4, #8]
 8006184:	3b01      	subs	r3, #1
 8006186:	60a3      	str	r3, [r4, #8]
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	6022      	str	r2, [r4, #0]
 800618e:	701e      	strb	r6, [r3, #0]
 8006190:	6962      	ldr	r2, [r4, #20]
 8006192:	1c43      	adds	r3, r0, #1
 8006194:	429a      	cmp	r2, r3
 8006196:	d004      	beq.n	80061a2 <__swbuf_r+0x6e>
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	07db      	lsls	r3, r3, #31
 800619c:	d5e1      	bpl.n	8006162 <__swbuf_r+0x2e>
 800619e:	2e0a      	cmp	r6, #10
 80061a0:	d1df      	bne.n	8006162 <__swbuf_r+0x2e>
 80061a2:	4621      	mov	r1, r4
 80061a4:	4628      	mov	r0, r5
 80061a6:	f7ff ff9d 	bl	80060e4 <_fflush_r>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d0d9      	beq.n	8006162 <__swbuf_r+0x2e>
 80061ae:	e7d6      	b.n	800615e <__swbuf_r+0x2a>

080061b0 <__swsetup_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4b29      	ldr	r3, [pc, #164]	@ (8006258 <__swsetup_r+0xa8>)
 80061b4:	4605      	mov	r5, r0
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	460c      	mov	r4, r1
 80061ba:	b118      	cbz	r0, 80061c4 <__swsetup_r+0x14>
 80061bc:	6a03      	ldr	r3, [r0, #32]
 80061be:	b90b      	cbnz	r3, 80061c4 <__swsetup_r+0x14>
 80061c0:	f7ff fa2e 	bl	8005620 <__sinit>
 80061c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c8:	0719      	lsls	r1, r3, #28
 80061ca:	d422      	bmi.n	8006212 <__swsetup_r+0x62>
 80061cc:	06da      	lsls	r2, r3, #27
 80061ce:	d407      	bmi.n	80061e0 <__swsetup_r+0x30>
 80061d0:	2209      	movs	r2, #9
 80061d2:	602a      	str	r2, [r5, #0]
 80061d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061d8:	81a3      	strh	r3, [r4, #12]
 80061da:	f04f 30ff 	mov.w	r0, #4294967295
 80061de:	e033      	b.n	8006248 <__swsetup_r+0x98>
 80061e0:	0758      	lsls	r0, r3, #29
 80061e2:	d512      	bpl.n	800620a <__swsetup_r+0x5a>
 80061e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061e6:	b141      	cbz	r1, 80061fa <__swsetup_r+0x4a>
 80061e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061ec:	4299      	cmp	r1, r3
 80061ee:	d002      	beq.n	80061f6 <__swsetup_r+0x46>
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7ff fb2b 	bl	800584c <_free_r>
 80061f6:	2300      	movs	r3, #0
 80061f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006200:	81a3      	strh	r3, [r4, #12]
 8006202:	2300      	movs	r3, #0
 8006204:	6063      	str	r3, [r4, #4]
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	f043 0308 	orr.w	r3, r3, #8
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	b94b      	cbnz	r3, 800622a <__swsetup_r+0x7a>
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800621c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006220:	d003      	beq.n	800622a <__swsetup_r+0x7a>
 8006222:	4621      	mov	r1, r4
 8006224:	4628      	mov	r0, r5
 8006226:	f000 f84f 	bl	80062c8 <__smakebuf_r>
 800622a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800622e:	f013 0201 	ands.w	r2, r3, #1
 8006232:	d00a      	beq.n	800624a <__swsetup_r+0x9a>
 8006234:	2200      	movs	r2, #0
 8006236:	60a2      	str	r2, [r4, #8]
 8006238:	6962      	ldr	r2, [r4, #20]
 800623a:	4252      	negs	r2, r2
 800623c:	61a2      	str	r2, [r4, #24]
 800623e:	6922      	ldr	r2, [r4, #16]
 8006240:	b942      	cbnz	r2, 8006254 <__swsetup_r+0xa4>
 8006242:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006246:	d1c5      	bne.n	80061d4 <__swsetup_r+0x24>
 8006248:	bd38      	pop	{r3, r4, r5, pc}
 800624a:	0799      	lsls	r1, r3, #30
 800624c:	bf58      	it	pl
 800624e:	6962      	ldrpl	r2, [r4, #20]
 8006250:	60a2      	str	r2, [r4, #8]
 8006252:	e7f4      	b.n	800623e <__swsetup_r+0x8e>
 8006254:	2000      	movs	r0, #0
 8006256:	e7f7      	b.n	8006248 <__swsetup_r+0x98>
 8006258:	2000001c 	.word	0x2000001c

0800625c <_sbrk_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4d06      	ldr	r5, [pc, #24]	@ (8006278 <_sbrk_r+0x1c>)
 8006260:	2300      	movs	r3, #0
 8006262:	4604      	mov	r4, r0
 8006264:	4608      	mov	r0, r1
 8006266:	602b      	str	r3, [r5, #0]
 8006268:	f7fa fcac 	bl	8000bc4 <_sbrk>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d102      	bne.n	8006276 <_sbrk_r+0x1a>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	b103      	cbz	r3, 8006276 <_sbrk_r+0x1a>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	20004bb4 	.word	0x20004bb4

0800627c <__swhatbuf_r>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	460c      	mov	r4, r1
 8006280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006284:	2900      	cmp	r1, #0
 8006286:	b096      	sub	sp, #88	@ 0x58
 8006288:	4615      	mov	r5, r2
 800628a:	461e      	mov	r6, r3
 800628c:	da0d      	bge.n	80062aa <__swhatbuf_r+0x2e>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006294:	f04f 0100 	mov.w	r1, #0
 8006298:	bf14      	ite	ne
 800629a:	2340      	movne	r3, #64	@ 0x40
 800629c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062a0:	2000      	movs	r0, #0
 80062a2:	6031      	str	r1, [r6, #0]
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	b016      	add	sp, #88	@ 0x58
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	466a      	mov	r2, sp
 80062ac:	f000 f848 	bl	8006340 <_fstat_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dbec      	blt.n	800628e <__swhatbuf_r+0x12>
 80062b4:	9901      	ldr	r1, [sp, #4]
 80062b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062be:	4259      	negs	r1, r3
 80062c0:	4159      	adcs	r1, r3
 80062c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062c6:	e7eb      	b.n	80062a0 <__swhatbuf_r+0x24>

080062c8 <__smakebuf_r>:
 80062c8:	898b      	ldrh	r3, [r1, #12]
 80062ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062cc:	079d      	lsls	r5, r3, #30
 80062ce:	4606      	mov	r6, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	d507      	bpl.n	80062e4 <__smakebuf_r+0x1c>
 80062d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	2301      	movs	r3, #1
 80062de:	6163      	str	r3, [r4, #20]
 80062e0:	b003      	add	sp, #12
 80062e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e4:	ab01      	add	r3, sp, #4
 80062e6:	466a      	mov	r2, sp
 80062e8:	f7ff ffc8 	bl	800627c <__swhatbuf_r>
 80062ec:	9f00      	ldr	r7, [sp, #0]
 80062ee:	4605      	mov	r5, r0
 80062f0:	4639      	mov	r1, r7
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff fb16 	bl	8005924 <_malloc_r>
 80062f8:	b948      	cbnz	r0, 800630e <__smakebuf_r+0x46>
 80062fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062fe:	059a      	lsls	r2, r3, #22
 8006300:	d4ee      	bmi.n	80062e0 <__smakebuf_r+0x18>
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	f043 0302 	orr.w	r3, r3, #2
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	e7e2      	b.n	80062d4 <__smakebuf_r+0xc>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	6020      	str	r0, [r4, #0]
 8006312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006316:	81a3      	strh	r3, [r4, #12]
 8006318:	9b01      	ldr	r3, [sp, #4]
 800631a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800631e:	b15b      	cbz	r3, 8006338 <__smakebuf_r+0x70>
 8006320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006324:	4630      	mov	r0, r6
 8006326:	f000 f81d 	bl	8006364 <_isatty_r>
 800632a:	b128      	cbz	r0, 8006338 <__smakebuf_r+0x70>
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	431d      	orrs	r5, r3
 800633c:	81a5      	strh	r5, [r4, #12]
 800633e:	e7cf      	b.n	80062e0 <__smakebuf_r+0x18>

08006340 <_fstat_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	@ (8006360 <_fstat_r+0x20>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	f7fa fc10 	bl	8000b72 <_fstat>
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	d102      	bne.n	800635c <_fstat_r+0x1c>
 8006356:	682b      	ldr	r3, [r5, #0]
 8006358:	b103      	cbz	r3, 800635c <_fstat_r+0x1c>
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	bd38      	pop	{r3, r4, r5, pc}
 800635e:	bf00      	nop
 8006360:	20004bb4 	.word	0x20004bb4

08006364 <_isatty_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d06      	ldr	r5, [pc, #24]	@ (8006380 <_isatty_r+0x1c>)
 8006368:	2300      	movs	r3, #0
 800636a:	4604      	mov	r4, r0
 800636c:	4608      	mov	r0, r1
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	f7fa fc0f 	bl	8000b92 <_isatty>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_isatty_r+0x1a>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_isatty_r+0x1a>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	20004bb4 	.word	0x20004bb4

08006384 <_init>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr

08006390 <_fini>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr
